{"task_id": "EvoEval/0", "completion": "\n    def is_happy(s):\n        if len(s) < 3:\n            return False\n        for i in range(len(s) - 2):\n            if len(set(s[i:i+3])) != 3:\n                return False\n        return True\n\n    def convert_to_float(s):\n        return float(s.replace(',', '.'))\n\n    if not is_happy(a) and not is_happy(b):\n        return None\n    elif is_happy(a) and not is_happy(b):\n        return a\n    elif not is_happy(a) and is_happy(b):\n        return b\n    else:\n        a_float = convert_to_float(a)\n        b_float = convert_to_float(b)\n        if a_float > b_float:\n            return a\n        elif b_float > a_float:\n            return b\n        else:\n            return None\n"}
{"task_id": "EvoEval/1", "completion": "\n    # Create a function that takes a value representing two parts (number and string) and returns a string with two parts: 1) The closest integer number, and 2) The string with its case flipped. If the number equidistant from two integers, round away from zero.\n    # Examples\n    # >>> round_and_flip(\"10.5abc\")\n    # '11 ABC'\n    # >>> round_and_flip(\"15.3ABC\")\n    # '15 abc'\n    # Note: Rounding away from zero means that if the given number is equidistant from two integers, the one should return is the one that is the farthest from zero. For example round_and_flip(\"14.5abc\") should return '15 ABC' and round_and_flip(\"-14.5ABC\") should return '-15 abc'.\n    # Create a function that takes a value representing two parts (number and string) and returns a string with two parts: 1) The closest integer number, and 2) The string with its case flipped. If the number equidistant from two integers, round away from zero.\n    # Examples\n    # >>> round_and_flip(\"10.5abc\")\n    # '11 ABC'\n    # >>> round_and_flip(\"15.3ABC\")\n    # '15 abc'\n    # Note: Rounding away from zero means that if the given number is equidistant from two integers, the one should return is the one that is the farthest from zero. For example round_and_flip(\"14.5abc\") should return '15 ABC' and round_and_flip(\"-14.5ABC\") should return '-15 abc'.\n    # Create a function that takes a value representing two parts (number and string) and returns a string with two parts: 1) The closest integer number, and 2) The string with its case flipped. If the number equidistant from two integers, round away from zero.\n    # Examples\n    # >>> round_and_flip(\"10.5abc\")\n    # '11 ABC'\n    # >>> round_and_flip(\"15.3ABC\")\n    # '15 abc'\n    # Note: Rounding away from zero means that if the given number is equidistant from two integers, the one should return is the one that is the farthest from zero. For example round_and_flip(\"14.5abc\") should return '15 ABC' and round_and_flip(\"-14.5ABC\") should return '-15 abc'.\n    #"}
{"task_id": "EvoEval/2", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        result.append(pow(2, n, p))\n    return result\n"}
{"task_id": "EvoEval/3", "completion": "\n    from typing import List\n\n    def sort_parentheses(lst: List[str]) -> str:\n        ''' You are given a list of strings, each string consist of open parentheses '(' or close parentheses ')' and numberals from 'zero' to 'nine' in text form. Your job is to sort numbers from smallest to largest and then check if it is possible to concatenate the strings in this order so that the resulting string will be good. A string S is considered to be good if and only if all parentheses in S are balanced. For example: the string '(three)(one)(five)' is good, while the string '(three)(one(five)' is not. Return 'Yes' if there's a way to make a good string after sorting, and return 'No' otherwise. Examples: sort_parentheses(['(three)(', '(five)', '(one)']) == 'No' sort_parentheses(['(five)', '(three)', '(one)']) == 'Yes' '''\n        from typing import List\n\n        def sort_parentheses(lst: List[str]) -> str:\n            ''' You are given a list of strings, each string consist of open parentheses '(' or close parentheses ')' and numberals from 'zero' to 'nine' in text form. Your job is to sort numbers from smallest to largest and then check if it is possible to concatenate the strings in this order so that the resulting string will be good. A string S is considered to be good if and only if all parentheses in S are balanced. For example: the string '(three)(one)(five)' is good, while the string '(three)(one(five)' is not. Return 'Yes' if there's a way to make a good string after sorting, and return 'No' otherwise. Examples: sort_parentheses(['(three)(', '(five)', '(one)']) == 'No' sort_parentheses(['(five)', '(three)', '(one)']) == 'Yes' '''\n            from typing import List\n\n            def sort_parentheses(lst: List[str]) -> str:\n                ''' You are given a list of strings, each string consist of open parentheses '(' or close parentheses ')' and numberals from 'zero' to 'nine' in text form. Your job is to sort numbers from smallest to largest and then check if it is possible to concatenate the strings in this order so that the resulting string will be good. A string S is considered to be good if and only if all parentheses in S are balanced."}
{"task_id": "EvoEval/4", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime_divisor(n):\n        for i in range(n-1, 1, -1):\n            if n % i == 0 and is_prime(i):\n                return i\n        return 0\n\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n\n    return max(digit_sum(largest_prime_divisor(n)) for n in lst)\n"}
{"task_id": "EvoEval/5", "completion": "\n    if len(numbers) < 2:\n        return numbers\n    \n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            if round(numbers[0] + numbers[-1]) % 2 == 0:\n                return sorted(numbers, reverse=True)\n            else:\n                return sorted(numbers)\n    \n    return numbers\n"}
{"task_id": "EvoEval/6", "completion": "\n    if n % 2 == 0:\n        return (n + (n + 1)) / 2\n    else:\n        return n + 1\n"}
{"task_id": "EvoEval/7", "completion": "\n    return sum([i**2 if (i-1)%3 == 0 else i**3 if (i-1)%4 == 0 else i for i in range(1, n+1)])\n"}
{"task_id": "EvoEval/8", "completion": "\n    stack = []\n    count = 0\n    for char in string:\n        if char == bracket:\n            count += 1\n        if char == bracket and not stack or stack[-1] != bracket:\n            stack.append(char)\n        elif char == bracket and stack[-1] == bracket:\n            stack.pop()\n    return (not stack, count)\n"}
{"task_id": "EvoEval/9", "completion": "\n    planets = ['mercury', 'venus', 'earth', 'mars', 'jupiter', 'saturn', 'uranus', 'neptune']\n    roman_numerals = ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii']\n    planet1_index = planets.index(planet1.lower())\n    planet2_index = planets.index(planet2.lower())\n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n    result = {}\n    for i in range(planet1_index + 1, planet2_index):\n        result[planets[i]] = roman_numerals[i]\n    return result\n"}
{"task_id": "EvoEval/10", "completion": "\n    def convert_grade(gpa):\n        if gpa >= 4.0:\n            return 'A+'\n        elif gpa >= 3.7:\n            return 'A'\n        elif gpa >= 3.3:\n            return 'A-'\n        elif gpa >= 3.0:\n            return 'B+'\n        elif gpa >= 2.7:\n            return 'B'\n        elif gpa >= 2.3:\n            return 'B-'\n        elif gpa >= 2.0:\n            return 'C+'\n        elif gpa >= 1.7:\n            return 'C'\n        elif gpa >= 1.3:\n            return 'C-'\n        elif gpa >= 1.0:\n            return 'D+'\n        elif gpa >= 0.7:\n            return 'D'\n        elif gpa >= 0.0:\n            return 'D-'\n        else:\n            return 'E'\n    return [(name.capitalize(), convert_grade(gpa)) for name, gpa in name_grade_list]\n"}
{"task_id": "EvoEval/11", "completion": "\n\n    def planet_vowel_count(planet1, planet2): ''' are eight planets our solar system: closest the Sun Mercury, the next one is Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Write function takes two planet names as strings planet1 planet2. function should return integer representing the number vowels in the names of the planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when is at the end of the given planet name. If planet1 or planet2 are not correct planet names, the function should return 0. Examples planet_vowel_count(\"Jupiter\", \"Neptune\") ==> 5 # (Saturn = 2, Uranus = 3) planet_vowel_count(\"Earth\", \"Mercury\") ==> 2 # (Venus = 2) planet_vowel_count(\"Mercury\", \"Uranus\") ==> 10 # (Venus = 2, Earth = 2, Mars = 1, Jupiter = 3, Saturn = 2) '''\n    \"\"\"\n    def planet_vowel_count(planet1, planet2):\n        planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n        if planet1 not in planets or planet2 not in planets:\n            return 0\n        planet1_index = planets.index(planet1)\n        planet2_index ="}
{"task_id": "EvoEval/12", "completion": "\n    def count_consonants(name):\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        return sum(1 for c in name.lower() if c in consonants)\n\n    def get_grade(gpa):\n        if gpa >= 4.0:\n            return \"A+\"\n        elif gpa >= 3.7:\n            return \"A\"\n        elif gpa >= 3.3:\n            return \"A-\"\n        elif gpa >= 3.0:\n            return \"B+\"\n        elif gpa >= 2.7:\n            return \"B\"\n        elif gpa >= 2.3:\n            return \"B-\"\n        elif gpa >= 2.0:\n            return \"C+\"\n        elif gpa >= 1.7:\n            return \"C\"\n        elif gpa >= 1.3:\n            return \"C-\"\n        elif gpa >= 1.0:\n            return \"D+\"\n        elif gpa >= 0.7:\n            return \"D\"\n        elif gpa >= 0.0:\n            return \"D-\"\n        else:\n            return \"E\"\n\n    result = []\n    for student in student_info:\n        consonant_count = count_consonants(student['name'])\n        if consonant_count == n:\n            grade = get_grade(student['GPA'])\n            result.append({'name': student['name'], 'grade': grade})\n        else:\n            result.append({'name': student['name'], 'grade': get_grade(student['GPA'])})\n\n    return result\n"}
{"task_id": "EvoEval/13", "completion": "\n    def sum_digits(n):\n        return sum(int(d) for d in str(abs(n)))\n\n    filtered_arr = [x for x in arr if sum_digits(x) > 0]\n    lst1_even = [x for x in lst1 if x % 2 == 0]\n    lst1_odd = [x for x in lst1 if x % 2 != 0]\n\n    if len(lst1_odd) <= len(filtered_arr):\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "EvoEval/14", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n, m+1) if is_prime(i)]\n    if not primes:\n        return -1\n    avg = round(sum(primes) / len(primes))\n    return bin(avg)[2:]\n"}
{"task_id": "EvoEval/15", "completion": "\n    balance = 0\n    balance_set = set()\n    for operation in operations:\n        balance += operation\n        if balance in balance_set and len(balance_set) >= 3:\n            return True\n        if balance < 0:\n            return False\n        balance_set.add(balance)\n    return False\n"}
{"task_id": "EvoEval/16", "completion": "\n    vowels = \"aeiouAEIOU\"\n    music_notes = music_string.split()\n    word = word[::-1]\n    result = []\n    for i in range(1, len(word) - 1):\n        if word[i] in vowels:\n            result = [int(music_notes[-i - 1]) for i in range(len(music_notes) - 1, -1, -1) if music_notes[i] != \"o\"]\n            break\n    return result\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    def fib(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return fib(n-1) + fib(n-2) + fib(n-3)\n    fib_n = fib(n)\n    freq = {}\n    for num in lst:\n        if num > 0:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n    max_freq = max(freq.values())\n    if max_freq >= fib_n:\n        return max_freq\n    else:\n        return -1\n"}
{"task_id": "EvoEval/18", "completion": "\n    if len(nums) < 3:\n        return 0\n    nums.sort()\n    return sum(nums[:3])\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    balance = 0\n    largest_withdrawal = None\n    smallest_deposit = None\n    balance_falls_below_zero = False\n\n    for operation in operations:\n        if operation > 0:\n            if smallest_deposit is None or operation < smallest_deposit:\n                smallest_deposit = operation\n        elif operation < 0:\n            if balance + operation < 0:\n                balance_falls_below_zero = True\n                break\n            if largest_withdrawal is None or abs(operation) > abs(largest_withdrawal):\n                largest_withdrawal = operation\n        balance += operation\n\n    return largest_withdrawal, smallest_deposit, balance_falls_below_zero\n"}
{"task_id": "EvoEval/20", "completion": "\n    result = []\n    for i in range(len(s)):\n        name = s[i]\n        grade = grades[i]\n        if grade >= 4.0:\n            letter_grade = 'A+'\n        elif grade >= 3.7:\n            letter_grade = 'A'\n        elif grade >= 3.3:\n            letter_grade = 'A-'\n        elif grade >= 3.0:\n            letter_grade = 'B+'\n        elif grade >= 2.7:\n            letter_grade = 'B'\n        elif grade >= 2.3:\n            letter_grade = 'B-'\n        elif grade >= 2.0:\n            letter_grade = 'C+'\n        elif grade >= 1.7:\n            letter_grade = 'C'\n        elif grade >= 1.3:\n            letter_grade = 'C-'\n        elif grade >= 1.0:\n            letter_grade = 'D+'\n        elif grade >= 0.7:\n            letter_grade = 'D'\n        elif grade >= 0.0:\n            letter_grade = 'D-'\n        else:\n            letter_grade = 'E'\n        result.append((name.swapcase(), letter_grade))\n    return result\n"}
{"task_id": "EvoEval/21", "completion": "\n    if base < 2 or base > 9:\n        raise ValueError(\"Base must be between 2 and 9\")\n    if x < 0:\n        raise ValueError(\"x must be non-negative\")\n    if x == 0:\n        return ['0']\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    result.reverse()\n    prefixes = []\n    for i in range(1, len(result) + 1):\n        prefixes.append(''.join(result[:i]))\n    return prefixes\n"}
{"task_id": "EvoEval/22", "completion": "\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n    return \"bd\" + bin(len(planets[planet1_index+1:planet2_index]))[2:] + \"bd\"\n"}
{"task_id": "EvoEval/23", "completion": "\n    def brazilian_factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * brazilian_factorial(n-1)\n    result = []\n    for i in range(n):\n        if n % 2 == 0:\n            result.append(brazilian_factorial(n + 2*i))\n        else:\n            result.append(brazilian_factorial(n + 2*i + 1))\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    happy = False\n    if len(numbers) < 3:\n        return 'Not a happy string'\n    for i in range(len(numbers) - 2):\n        if numbers[i] == numbers[i+1] == numbers[i+2]:\n            return 'Not a happy string'\n    happy = True\n    if happy:\n        numbers = numbers.replace(' ', '')\n        numbers = [int(i) for i in numbers]\n        numbers.sort()\n        return ' '.join(str(i) for i in numbers)"}
{"task_id": "EvoEval/25", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    sum_triples = 0\n    product_triples = 1\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            for k in range(j + 1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    sum_triples += a[i]\n                    product_triples *= a[i]\n    return (sum_triples, product_triples)\n"}
{"task_id": "EvoEval/26", "completion": "\n    if not values:\n        return ()\n    numerals = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    sorted_values = sorted(values, key=lambda x: [numerals[numeral] for numeral in x.split()])\n    even_numerals = [(numeral, index) for index, value in enumerate(sorted_values) for numeral in value.split() if int(numerals[numeral]) % 2 == 0]\n    if not even_numerals:\n        return ()\n    even_numerals.sort(key=lambda x: (numerals[x[0]], x[1]))\n    return (even_numerals[0][0], even_numerals[0][1])"}
{"task_id": "EvoEval/27", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_lst1 = [num for num in lst1 if is_prime(num)]\n    prime_lst2 = [num for num in lst2 if is_prime(num)]\n\n    if len(prime_lst1) + len(prime_lst2) >= len(lst1):\n        return x\n    else:\n        return y\n"}
{"task_id": "EvoEval/28", "completion": "\n    def get_grade(gpa):\n        if gpa > 3.7:\n            return 'A+'\n        elif gpa > 3.3:\n            return 'A'\n        elif gpa > 3.0:\n            return 'A-'\n        elif gpa > 2.7:\n            return 'B+'\n        elif gpa > 2.3:\n            return 'B'\n        elif gpa > 2.0:\n            return 'B-'\n        elif gpa > 1.7:\n            return 'C+'\n        elif gpa > 1.3:\n            return 'C'\n        elif gpa > 1.0:\n            return 'C-'\n        elif gpa > 0.7:\n            return 'D+'\n        elif gpa > 0.0:\n            return 'D'\n        else:\n            return 'E'\n    def has_same_chars(s0, s1):\n        return set(s0) == set(s1)\n    return [get_grade(gpa) for gpa in grades if has_same_chars(s0, s1)]\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if n == 1:\n        return y\n    elif is_prime(n):\n        return x\n    else:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                n //= i\n                if is_prime(n):\n                    return n\n        return n\n"}
{"task_id": "EvoEval/30", "completion": "\n    numerator, denominator = map(int, x.split('/'))\n    music_notes = music_string.split()\n    result = []\n    for note in music_notes:\n        if note == 'o':\n            beats = 4\n        elif note == 'o|':\n            beats = 2\n        elif note == '.|':\n            beats = 1\n        else:\n            continue\n        if (numerator * beats) % denominator == 0:\n            result.append(True)\n        else:\n            result.append(False)\n    return result\n"}
{"task_id": "EvoEval/31", "completion": "\n    def prime_factors(n: int) -> List[int]:\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    def factorial(n: int) -> int:\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    factors = prime_factors(n)\n    result = 1\n    for factor in factors:\n        result *= factorial(factor)\n    return result\n"}
{"task_id": "EvoEval/32", "completion": "\n    def get_depth(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for c in s:\n            if c == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif c == ')':\n                current_depth -= 1\n        return max_depth\n\n    depths = [get_depth(s) for s in input]\n    num = int(''.join(map(str, depths)))\n    if shift >= len(str(num)):\n        return list(map(int, str(num)[::-1]))\n    else:\n        return list(map(int, str(num)[-shift:] + str(num)[:-shift]))"}
{"task_id": "EvoEval/33", "completion": "\n    roman_dict = {'i': 1, 'v': 5, 'x': 10, 'l': 50, 'c': 100, 'd': 500, 'm': 1000}\n    if len(s) < 3 or not all(c in roman_dict for c in s):\n        return False\n    if any(s[i] == s[i+1] == s[i+2] for i in range(len(s)-2)):\n        return False\n    if any(roman_dict[s[i]] < roman_dict[s[i+1]] for i in range(len(s)-1)):\n        return False\n    if any(roman_dict[s[i]] < roman_dict[s[i+1]] < roman_dict[s[i+2]] for i in range(len(s)-2)):\n        return False\n    if any(roman_dict[s[i]] > roman_dict[s[i+1]] for i in range(len(s)-1)):\n        return False\n    if any(roman_dict[s[i]] > roman_dict[s[i+1]] > roman_dict[s[i+2]] for i in range(len(s)-2)):\n        return False\n    if any(roman_dict[s[i]] < roman_dict[s[i+1]] < roman_dict[s[i+2]] for i in range(len(s)-2)):\n        return False\n    if any(roman_dict[s[i]] < roman_dict[s[i+1]] < roman_dict[s[i+2]] for i in range(len(s)-2)):\n        return False\n    if any(roman_dict[s[i]] < roman_dict[s[i+1]] < roman_dict[s[i+2]] for i in range(len(s)-2)):\n        return False\n    if any(roman_dict[s[i]] < roman_dict[s[i+1]] < roman_dict[s[i+2]] for i in range(len(s)-2)):\n        return False\n    if any(roman_dict[s[i]] < roman_dict[s[i+1]] < roman_dict[s[i+2]] for i in range(len(s)-2)):\n        return False\n    if any(roman_dict[s[i]] < roman_dict[s[i+1]] < roman_dict[s[i+2]] for i in range(len(s)-2)):\n        return False\n    if any(roman_dict[s[i]] < roman_dict[s[i+1]] < roman_dict[s[i+2]] for i in range(len(s)-2)):\n        return False\n    if any(roman_dict[s[i"}
{"task_id": "EvoEval/34", "completion": "\n    import hashlib\n    from collections import deque\n    def md5_hash(s: str) -> str:\n        return hashlib.md5(s.encode()).hexdigest()\n    def is_balanced(s: str) -> bool:\n        stack = deque()\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n    def deepest_level(s: str) -> str:\n        max_depth = 0\n        current_depth = 0\n        deepest_level_string = ''\n        for c in s:\n            if c == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n                    deepest_level_string = '('\n            elif c == ')':\n                current_depth -= 1\n                deepest_level_string += ')'\n        return str(max_depth)\n    paren_groups = paren_string.split()\n    result = []\n    for group in paren_groups:\n        if not is_balanced(group):\n            result.append(md5_hash('None'))\n        else:\n            result.append(md5_hash(deepest_level(group)))\n    return result\n"}
{"task_id": "EvoEval/35", "completion": "\n    if len(dict) == 0:\n        return False\n    for key in dict:\n        if not key.islower() and not key.isupper():\n            return False\n        if not is_happy_string(key):\n            return False\n    return True\n"}
{"task_id": "EvoEval/36", "completion": "\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        return arr[0] <= arr[1]\n    if len(arr) == 3:\n        return arr[0] <= arr[1] <= arr[2]\n    if len(arr) == 4:\n        return arr[0] <= arr[1] <= arr[2] <= arr[3]\n    if len(arr) == 5:\n        return arr[0] <= arr[1] <= arr[2] <= arr[3] <= arr[4]\n    if len(arr) == 6:\n        return arr[0] <= arr[1] <= arr[2] <= arr[3] <= arr[4] <= arr[5]\n    if len(arr) == 7:\n        return arr[0] <= arr[1] <= arr[2] <= arr[3] <= arr[4] <= arr[5] <= arr[6]\n    if len(arr) == 8:\n        return arr[0] <= arr[1] <= arr[2] <= arr[3] <= arr[4] <= arr[5] <= arr[6] <= arr[7]\n    if len(arr) == 9:\n        return arr[0] <= arr[1] <= arr[2] <= arr[3] <= arr[4] <= arr[5] <= arr[6] <= arr[7] <= arr[8]\n    if len(arr) == 10:\n        return arr[0] <= arr[1] <= arr[2] <= arr[3] <= arr[4] <= arr[5] <= arr[6] <= arr[7] <= arr[8] <= arr[9]\n    if len(arr) == 11:\n        return arr[0] <= arr[1] <= arr[2] <= arr[3] <= arr[4] <= arr[5] <= arr[6] <= arr[7] <= arr[8] <= arr[9] <= arr[10]\n    if len(arr) == 12:\n        return arr[0] <= arr[1] <= arr[2] <= arr[3] <= arr[4] <= arr[5] <= arr[6] <= arr[7] <= arr[8] <= arr[9] <="}
{"task_id": "EvoEval/37", "completion": "\n    if not nums:\n        return (0, 0)\n    min_sum = float('inf')\n    min_sum_index = -1\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            sub_array = nums[i:j+1]\n            sub_sum = sum(sub_array)\n            if sub_sum < min_sum:\n                min_sum = sub_sum\n                min_sum_index = i\n    even_count = 0\n    odd_count = 0\n    for num in nums[min_sum_index:]:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n"}
{"task_id": "EvoEval/38", "completion": "\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    even_sum = False\n    odd_sum = False\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == even_count:\n                even_sum = True\n            if l[i] + l[j] == odd_count:\n                odd_sum = True\n    return (even_sum, odd_sum)\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_palindrome(arr):\n        return arr == arr[::-1]\n    def change(arr, i, j):\n        arr[i] = arr[j]\n        return arr\n    def helper(arr, i, j, changes):\n        if i >= j:\n            return changes\n        if arr[i] == arr[j]:\n            return helper(arr, i+1, j-1, changes)\n        else:\n            return min(helper(change(arr, i, j, changes+1), i+1, j-1, changes+1), helper(change(arr, j, i, changes+1), i+1, j-1, changes+1))\n    return helper(arr, 0, len(arr)-1, 0) + x + y\n"}
{"task_id": "EvoEval/40", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def first_and_last_digit_odd(n):\n        return int(str(n)[0]) % 2 == 1 and int(str(n)[-1]) % 2 == 1\n\n    def largest_prime_factor(n):\n        largest_prime = None\n        for i in range(2, n + 1):\n            if n % i == 0 and is_prime(i):\n                largest_prime = i\n        return largest_prime\n\n    largest_prime = None\n    for num in nums:\n        if num > 10 and first_and_last_digit_odd(num):\n            prime_factor = largest_prime_factor(num)\n            if prime_factor and (largest_prime is None or prime_factor > largest_prime):\n                largest_prime = prime_factor\n\n    return largest_prime\n"}
{"task_id": "EvoEval/41", "completion": "\n    if shift > len(s):\n        s = s[::-1]\n    s = s[shift:] + s[:shift]\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in 'AEIOU':\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/42", "completion": "\n    pass"}
{"task_id": "EvoEval/43", "completion": "\n    fib4 = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib4.append(fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4])\n    if sum(fib4[-2:]) % 2 == 0:\n        return fib4[::-1]\n    else:\n        return fib4\n"}
{"task_id": "EvoEval/44", "completion": "\n    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n    result = []\n    for value, symbol in roman_numerals.items():\n        while number >= value:\n            result.append(symbol)\n            number -= value\n    return result\n"}
{"task_id": "EvoEval/45", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_sum = 0\n    prime_product = 1\n    for num in numbers:\n        if is_prime(num):\n            prime_sum += num\n            prime_product *= num\n    return prime_sum, prime_product\n"}
{"task_id": "EvoEval/46", "completion": "\n    # filter out negative numbers\n    l = [i for i in l if i > 0]\n    # check if list is empty\n    if len(l) == 0:\n        return -1\n    # filter out even numbers\n    l = [i for i in l if i % 2 == 0]\n    # check if list is empty\n    if len(l) == 0:\n        return -1\n    # return the largest number\n    return max(l)\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    output = []\n    n = sum(1 for i in range(0, len(s), 2) if s[i] in vowels)\n    for string in lst:\n        m = sum(1 for char in string if char in '13579')\n        output.append(f\"In the string, the number of uppercase vowels in even indices is {n}, and the number of odd digits is {m}.\")\n    return output\n"}
{"task_id": "EvoEval/48", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for string in strings:\n        if string.startswith(prefix) and is_prime(len(string)):\n            result.append(string)\n    return result\n"}
{"task_id": "EvoEval/49", "completion": "\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    def pow_mod(n, p, mod):\n        result = 1\n        while p > 0:\n            if p % 2 == 1:\n                result = (result * n) % mod\n            n = (n * n) % mod\n            p //= 2\n        return result\n\n    count = 0\n    for num in arr:\n        if sum_digits(num) > pow_mod(2, n, p):\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/50", "completion": "\n    vowels = \"AEIOU\"\n    for i in range(len(word) - 2, 1, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels and i % 2 == 0:\n            return word[i]\n    return \"\"\n"}
{"task_id": "EvoEval/51", "completion": "\n    def modify(s):\n        if s.isalpha():\n            return s.lower() if s.isupper() else s.upper()\n        else:\n            return s[::-1]\n    a = modify(str(a))\n    b = modify(str(b))\n    if a.replace('.','').replace(',','').isdigit() and b.replace('.','').replace(',','').isdigit():\n        if a == b:\n            return None\n        else:\n            return float(a) if '.' in a or ',' in a else int(a)\n    else:\n        return float(b) if '.' in b or ',' in b else int(b)\n"}
{"task_id": "EvoEval/52", "completion": "\n    if not arr:\n        return ([], None)\n    even_nodes = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not even_nodes:\n        return ([], None)\n    smallest_even_node = min(even_nodes)\n    remaining_nodes = [val for idx, val in enumerate(arr) if idx != smallest_even_node[1]]\n    sum_of_magnitudes = sum(abs(val) for val in remaining_nodes)\n    product_of_signs = 1 if len(remaining_nodes) % 2 == 0 else -1\n    return ([smallest_even_node[0], smallest_even_node[1]], sum_of_magnitudes * product_of_signs)\n"}
{"task_id": "EvoEval/53", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_hex_grade(gpa):\n        if gpa >= 4.0:\n            return 'F'\n        elif gpa > 3.7:\n            return 'E'\n        elif gpa > 3.3:\n            return 'D'\n        elif gpa > 3.0:\n            return 'C'\n        elif gpa > 2.7:\n            return 'B'\n        elif gpa > 2.3:\n            return 'A'\n        elif gpa > 1.7:\n            return '9'\n        elif gpa > 1.3:\n            return '8'\n        elif gpa > 1.0:\n            return '7'\n        elif gpa > 0.7:\n            return '6'\n        elif gpa > 0.0:\n            return '5'\n        else:\n            return '4'\n\n    prime_hex_grades = ['D', 'B', '7', '5', '3']\n    count = 0\n    for gpa in grades:\n        hex_grade = get_hex_grade(gpa)\n        if hex_grade in prime_hex_grades:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/54", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_sum = 0\n    for i in range(len(nums)):\n        if is_prime(nums[i]):\n            current_sum = nums[i]\n            for j in range(i + 1, len(nums)):\n                if is_prime(nums[j]):\n                    current_sum += nums[j]\n                else:\n                    break\n            max_sum = max(max_sum, current_sum)\n    return max_sum\n"}
{"task_id": "EvoEval/55", "completion": "\n    if number < 0 or number > 1000:\n        return None\n    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n    roman_string = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            roman_string += numeral\n            number -= value\n    return hashlib.md5(roman_string.encode()).hexdigest()\n"}
{"task_id": "EvoEval/56", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_odd_prime_factors(n):\n        odd_prime_factors = []\n        for i in range(3, n + 1, 2):\n            if n % i == 0 and is_prime(i):\n                odd_prime_factors.append(i)\n        return odd_prime_factors\n\n    odd_prime_factors = get_odd_prime_factors(n)\n    if len(odd_prime_factors) == 0:\n        return 0\n    else:\n        return reduce(lambda x, y: x * y, odd_prime_factors)\n"}
{"task_id": "EvoEval/57", "completion": "\n    def is_palindromic(arr):\n        return arr == arr[::-1]\n    def is_odd_digit_array(arr):\n        return all(digit % 2 == 1 for digit in arr)\n    def min_changes_to_palindromic_and_odd_digit_array(arr):\n        changes = 0\n        for i in range(len(arr)//2):\n            if arr[i] != arr[-i-1] or arr[i] % 2 == 0:\n                changes += 1\n        return changes\n    if is_palindromic(arr) and is_odd_digit_array(arr):\n        return 0\n    else:\n        return min_changes_to_palindromic_and_odd_digit_array(arr)\n"}
{"task_id": "EvoEval/58", "completion": "\n\n    def max_freq_and_sum_check(lst, a, b):\n        max_freq = max([i for i in lst if lst.count(i) >= i], default=-1)\n        return (max_freq, a+b == max_freq or a+b == max_freq)\n    \"\"\"\n    def max_freq_and_sum_check(lst, a, b):\n        max_freq = max([i for i in lst if lst.count(i) >= i], default=-1)\n        return (max_freq, a+b == max_freq or a+b == max_freq)\n    \"\"\"\n    def max_freq_and_sum_check(lst, a, b):\n        max_freq = max([i for i in lst if lst.count(i) >= i], default=-1)\n        return (max_freq, a+b == max_freq or a+b == max_freq)\n    \"\"\"\n    def max_freq_and_sum_check(lst, a, b):\n        max_freq = max([i for i in lst if lst.count(i) >= i], default=-1)\n        return (max_freq, a+b == max_freq or a+b == max_freq)\n    \"\"\"\n    def max_freq_and_sum_check(lst, a, b):\n        max_freq = max([i for i in lst if lst.count(i) >= i], default=-1)\n        return (max_freq, a+b == max_freq or a+b == max_freq)\n    \"\"\"\n    def max_freq_and_sum_check(lst, a, b):\n        max_freq = max([i for i in lst if lst.count(i) >= i], default=-1)\n        return (max_freq, a+b == max_freq or a+b == max_freq)\n    \"\"\"\n    def max_freq_and_sum_check(lst, a, b):\n        max_freq = max([i for i in lst if lst.count(i) >= i], default=-1)\n        return (max_freq, a+b == max_freq or a+b == max_freq)\n    \"\"\"\n    def max_freq_and_sum_check(lst, a, b):\n        max_freq = max([i for i in lst if lst.count(i) >= i], default=-1)\n        return (max_freq, a+b == max_freq or a+b == max_freq)\n    \"\"\"\n    def max_freq_and_sum_check(lst"}
{"task_id": "EvoEval/59", "completion": "\n\n        Given a number and a base, return the number in the new base.\n        \"\"\"\n        if num == 0:\n            return 0\n        else:\n            return num % base + 10 * base_change(num // base, base)\n    def odd_count(num):\n        \"\"\"\n        Given a number, return the number of odd digits in the number.\n        \"\"\"\n        count = 0\n        while num > 0:\n            if num % 2 == 1:\n                count += 1\n            num //= 10\n        return count\n    def odd_count_base_change(lst, base):\n        \"\"\"\n        Given list strings and a base number, where each string consists of digits, return a list where each element k of output \"the number of odd elements the string i of the input.\" where the i's replaced by the number of odd digits in the k'th string of the input after changing the base of each digit the given base.\n        \"\"\"\n        output = []\n        for num in lst:\n            new_num = base_change(int(num), base)\n            output.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(odd_count(new_num), odd_count(new_num), odd_count(new_num), odd_count(new_num)))\n        return output\n    return odd_count_base_change(lst, base)\n"}
{"task_id": "EvoEval/60", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    triples = []\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            for k in range(j + 1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    triples.append((a[i], a[j], a[k]))\n    if not triples:\n        return []\n    smallest = min(triples)\n    for i in range(len(triples)):\n        if triples[i] == smallest:\n            a.append(smallest[0])\n            break\n    even_values = [(val, idx) for idx, val in enumerate(a) if val % 2 == 0]\n    if not even_values:\n        return []\n    smallest_even = min(even_values)\n    return [smallest_even[0], smallest_even[1]]"}
{"task_id": "EvoEval/61", "completion": "\n    from typing import List, Optional, Tuple\n\n    def longest_planet_chain(planet1: str, planet2: str, chains: List[Tuple[str,...]]) -> Optional[Tuple[str,...]]:\n        ''' There are eight planets in our solar system: closerst to the Sun is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. A list of planet chains, represented as tuples, is given where each chain consists of a sequence of planet names. Write a function takes a starting planet name as string planet1 and ending planet name as string planet2, and list of chains. The function should return the longest chain that starts with planet1 and ends with planet2. If there are multiple chains of the same length that starts with planet1 and ends with planet2, return the first one. If there is no chain that starts with planet1 and ends with planet2, or if planet1 or planet2 are not correct planet names, return None. Examples longest_planet_chain(\"Earth\", \"Saturn\", [(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), (\"Earth\", \"Venus\", \"Mercury\", \"Mars\", \"Jupiter\", \"Saturn\")]) => (\"Earth\", \"Venus\", \"Mercury\", \"Mars\", \"Jupiter\", \"Saturn\") longest_planet_chain(\"Earth\", \"Mars\", [(\"Earth\", \"Mars\"), (\"Earth\", \"Venus\", \"Mercury\", \"Mars\")]) => (\"Earth\", \"Venus\", \"Mercury\", \"Mars\") longest_planet_chain(\"Earth\", \"Pluto\", [(\"Earth\", \"Mars\", \"Jupiter\")]) => None '''\n        planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n        if planet1 not in planets or planet2 not in planets:\n            return None\n        longest_chain = None\n        for chain in chains:\n            if chain[0] == planet1 and chain[-1] == planet2:\n                if longest_chain is None or len(chain) > len(longest_chain):\n                    longest_chain = chain\n        return longest_chain\n"}
{"task_id": "EvoEval/62", "completion": "\n    import re\n    words = re.split(r'\\s+', text)\n    words = [word.lower() for word in words if word]\n    words.sort()\n    result = []\n    while words:\n        result.append(words.pop(0))\n        if words:\n            result.append(words.pop())\n    result = '_'.join(result)\n    result = re.sub(r'_{2,}', '-', result)\n    return result\n"}
{"task_id": "EvoEval/63", "completion": "\n    def sort_planets(planet1: str, planet2: str, order: str) -> str:\n        planets = {\n            \"Mercury\": \"zero\",\n            \"Venus\": \"one\",\n            \"Earth\": \"two\",\n            \"Mars\": \"three\",\n            \"Jupiter\": \"four\",\n            \"Saturn\": \"five\",\n            \"Uranus\": \"six\",\n            \"Neptune\": \"seven\"\n        }\n        if planet1 not in planets or planet2 not in planets:\n            return \"Invalid\"\n        if len(set(order.split())) != len(order.split()):\n            return \"Invalid\"\n        if not all(num in [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"] for num in order.split()):\n            return \"Invalid\"\n        if planets[planet1] > planets[planet2]:\n            planet1, planet2 = planet2, planet1\n        return \" \".join([num for num in order.split() if planets[planet1] < planets[num] < planets[planet2]])"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = [2]\n    for i in range(3, n+1, 2):\n        if is_prime(i):\n            result.append(i)\n    return result\n"}
{"task_id": "EvoEval/65", "completion": "\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    if p == 1:\n        return 1\n    if p == 2:\n        return 2\n    if p == 3:\n        return 3\n    if p == 4:\n        return 4\n    if p == 5:\n        return 5\n    if p == 6:\n        return 6\n    if p == 7:\n        return 7\n    if p == 8:\n        return 8\n    if p == 9:\n        return 9\n    if p == 10:\n        return 10\n    if p == 11:\n        return 11\n    if p == 12:\n        return 12\n    if p == 13:\n        return 13\n    if p == 14:\n        return 14\n    if p == 15:\n        return 15\n    if p == 16:\n        return 16\n    if p == 17:\n        return 17\n    if p == 18:\n        return 18\n    if p == 19:\n        return 19\n    if p == 20:\n        return 20\n    if p == 21:\n        return 21\n    if p == 22:\n        return 22\n    if p == 23:\n        return 23\n    if p == 24:\n        return 24\n    if p == 25:\n        return 25\n    if p == 26:\n        return 26\n    if p == 27:\n        return 27\n    if p == 28:\n        return 28\n    if p == 29:\n        return 29\n    if p == 30:\n        return 30\n    if p == 31:\n        return 31\n    if p == 32:\n        return 32\n    if p == 33:\n        return 33\n    if p == 34:\n        return 34\n    if p == 35:\n        return 35\n    if p == 36:\n        return 36\n    if p == 37:\n        return 37\n    if p == 38:\n        return 38\n    if p == 39:\n        return 39\n    if p == 40:\n        return 40\n    if p == 41:\n        return"}
{"task_id": "EvoEval/66", "completion": "\n    # Find the largest even integer in the range [x, y] inclusive\n    largest_even = -1\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            largest_even = i\n\n    # Create an integer array of length n\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n\n    # Find the largest triple (a[i], a[j], a[k]) in array a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3\n    max_triple_sum = -1\n    for i in range(len(a) - 2):\n        for j in range(i + 1, len(a) - 1):\n            for k in range(j + 1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    max_triple_sum = max(max_triple_sum, a[i] + a[j] + a[k])\n\n    # If the largest even integer in the range [x, y] inclusive is found, add it to the sum of the largest triple\n    if largest_even != -1:\n        max_triple_sum += largest_even\n\n    return max_triple_sum\n"}
{"task_id": "EvoEval/67", "completion": "\n    if len(numbers) < 2:\n        return 0\n    \n    numbers.sort()\n    max_diff = 0\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff <= threshold:\n            max_diff = max(max_diff, diff)\n    \n    return max_diff"}
{"task_id": "EvoEval/68", "completion": "\n    def oddDigitsProduct(n):\n        product = 1\n        for digit in str(n):\n            if int(digit) % 2 != 0:\n                product *= int(digit)\n        return product\n\n    min_product = float('inf')\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            subarray = nums[i:j+1]\n            product = 1\n            for num in subarray:\n                product *= oddDigitsProduct(num)\n            min_product = min(min_product, product)\n    return min_product\n"}
{"task_id": "EvoEval/69", "completion": "\n    def is_happy(s):\n        if len(s) < 3:\n            return False\n        for i in range(len(s) - 2):\n            if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n                return False\n        return True\n\n    happy_strings = [s for s in lst if is_happy(s) and len(s) % 2 == 0]\n    return sorted(happy_strings, key=lambda x: (len(x), x))\n"}
{"task_id": "EvoEval/70", "completion": "\n    def special_factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * special_factorial(n-1)\n    special_factorials = [special_factorial(n) for n in numbers]\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(special_factorials)):\n        for j in range(i+1, len(special_factorials)):\n            diff = abs(special_factorials[i] - special_factorials[j])\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[j])\n    return result\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    def brazilian_factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * brazilian_factorial(n-1)\n    \n    max_weight = brazilian_factorial(n)\n    total_weight = sum(w)\n    \n    if total_weight <= max_weight and w == w[::-1]:\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/72", "completion": "\n    def special_factorial(n: int) -> int:\n        if n == 0:\n            return 1\n        else:\n            return n * special_factorial(n-1)\n    special_factorials = [special_factorial(n) for n in numbers]\n    return max(special_factorials) - min(special_factorials) <= threshold\n"}
{"task_id": "EvoEval/73", "completion": "\n    result = []\n    for fraction in fractions:\n        numerator, denominator = map(int, fraction.split('/'))\n        if Fraction(numerator, denominator) * Fraction(int(n.split('/')[0]), int(n.split('/')[1])) == Fraction(int(n.split('/')[0]), int(n.split('/')[1])):\n            result.append(True)\n        else:\n            result.append(False)\n    return result\n"}
{"task_id": "EvoEval/74", "completion": "\n    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0:\n            for j in range(len(lst2)):\n                if lst2[j] % 2 == 0:\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n                    break\n    if all(x % 2 == 0 for x in lst1):\n        return \"YES\"\n    else:\n        return \"NO\"\n    \n    if x + y == z or x + z == y or y + z == x:\n        return \"SUM \" + answer\n    else:\n        return \"NO_SUM \" + answer\n"}
{"task_id": "EvoEval/75", "completion": "\n    def transform_dict(input_dict):\n        if not isinstance(input_dict, dict):\n            return {}\n        if not all(isinstance(key, str) for key in input_dict.keys()):\n            return {}\n        if not all(key.isupper() or key.islower() for key in input_dict.keys()):\n            return {}\n        if not all(isinstance(value, str) for value in input_dict.values()):\n            return {}\n        if not all(value.replace('.', '', 1).isdigit() for value in input_dict.values()):\n            return {}\n        if not all(value.replace('-', '', 1).isdigit() for value in input_dict.values()):\n            return {}\n        if not all(value.replace('.', '', 1).replace('-', '', 1).isdigit() for value in input_dict.values()):\n            return {}\n        if not all(value.replace('.', '', 1).replace('-', '', 1).replace('0', '', 1).isdigit() for value in input_dict.values()):\n            return {}\n        if not all(value.replace('.', '', 1).replace('-', '', 1).replace('0', '', 1).replace('1', '', 1).isdigit() for value in input_dict.values()):\n            return {}\n        if not all(value.replace('.', '', 1).replace('-', '', 1).replace('0', '', 1).replace('1', '', 1).replace('2', '', 1).isdigit() for value in input_dict.values()):\n            return {}\n        if not all(value.replace('.', '', 1).replace('-', '', 1).replace('0', '', 1).replace('1', '', 1).replace('2', '', 1).replace('3', '', 1).isdigit() for value in input_dict.values()):\n            return {}\n        if not all(value.replace('.', '', 1).replace('-', '', 1).replace('0', '', 1).replace('1', '', 1).replace('2', '', 1).replace('3', '', 1).replace('4', '', 1).isdigit() for value in input_dict.values()):\n            return {}\n        if not all(value.replace('.', '', 1).replace('-', '', 1).replace('0', '', 1).replace('1', '', 1).replace('2', '', 1).replace('3', '', 1).replace('4', '', 1).replace('5', '', 1).isdigit() for value in input_dict.values()):\n            return {}\n        if not all(value.replace('.', '', 1).replace('-', '', "}
{"task_id": "EvoEval/76", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n\n    new_lst = []\n    for num in lst:\n        if is_prime(num):\n            new_lst.append(digit_sum(num))\n        else:\n            new_lst.append(num)\n\n    if digit_sum(new_lst[-1]) % 2 == 1:\n        return sorted(new_lst)\n    else:\n        return sorted(new_lst, reverse=True)\n"}
{"task_id": "EvoEval/77", "completion": "\n    return sum(x for i, x in enumerate(arr) if i % 2 == 0 and x % 2 == 1 and sum(int(d) for d in str(abs(x))) > 0)\n"}
{"task_id": "EvoEval/78", "completion": "\n    def reverse_case(c):\n        if c.isalpha():\n            return c.lower() if c.isupper() else c.upper()\n        return c\n\n    def count_uppercase_vowels(s):\n        count = 0\n        for i in range(len(s)):\n            if i % 2 == 0 and s[i].isupper() and s[i] in 'AEIOU':\n                count += 1\n        return count\n\n    s = ''.join(reverse_case(c) for c in s)\n    if s.isalpha():\n        s = s[::-1]\n    return s, count_uppercase_vowels(s)\n"}
{"task_id": "EvoEval/79", "completion": "\n    if len(s) < 3:\n        return s[::-1]\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return s[::-1]\n    return s.swapcase()\n"}
{"task_id": "EvoEval/80", "completion": "\n    def encode(s: str) -> str:\r\n        return ''.join(s[i:i+3][::-1] for i in range(0, len(s), 3))\r\n\r\n    def decode(s: str) -> str:\r\n        return ''.join(s[i:i+3][::-1] for i in range(0, len(s), 3))\r\n\r\n    def is_palindrome(s: str) -> bool:\r\n        return s == s[::-1]\r\n\r\n    encoded_s = encode(s)\r\n    filtered_s = ''.join([char for char in encoded_s if char != c])\r\n    result = decode(filtered_s) if is_palindrome(filtered_s) else filtered_s\r\n    return (result, is_palindrome(filtered_s))\n"}
{"task_id": "EvoEval/81", "completion": "\n    fibfib_sequence = [0, 0, 1]\n    for i in range(3, n+1):\n        fibfib_sequence.append(fibfib_sequence[i-1] + fibfib_sequence[i-2] + fibfib_sequence[i-3])\n    mean = sum(fibfib_sequence[:n]) / n\n    mad = sum(abs(x - mean) for x in fibfib_sequence[:n]) / n\n    return mad\n"}
{"task_id": "EvoEval/82", "completion": "\n    odd_fibfib = [0, 0, 1]\n    for i in range(3, n + 1):\n        odd_fibfib.append(odd_fibfib[i - 1] + odd_fibfib[i - 2] + odd_fibfib[i - 3])\n        if odd_fibfib[-1] % 2 == 0:\n            odd_fibfib[-1] = product_of_odd_digits(odd_fibfib[-1])\n    return odd_fibfib[n]\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    text = re.sub(r'\\s{2,}', '_', text)\n    text = re.sub(r'\\s', '', text)\n    if text.isdigit():\n        num = int(text)\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    return False\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    result = {}\n    for i in range(len(string)):\n        prefix = string[:i+1]\n        histogram = {}\n        for letter in prefix:\n            if letter in histogram:\n                histogram[letter] += 1\n            else:\n                histogram[letter] = 1\n        result[prefix] = histogram\n    return result\n"}
{"task_id": "EvoEval/85", "completion": "\n    if len(lst) < 2:\n        return None\n    lst.sort(key=lambda x: (bin(x).count('1'), x))\n    return lst[1] if lst[1] != lst[0] else None\n"}
{"task_id": "EvoEval/86", "completion": "\n    common_operands = set(operand_lists[0]).intersection(*operand_lists)\n    if not common_operands:\n        return None\n    common_operands = sorted(list(common_operands))\n    result = common_operands[0]\n    for i in range(1, len(common_operands)):\n        result = eval(f\"{result} {operators[i-1]} {common_operands[i]}\")\n    return result\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    stack = []\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    for char in text:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return ''.join(stack)\n    if not stack:\n        return text\n    else:\n        return ''.join(char for char in text if char not in vowels)\n"}
{"task_id": "EvoEval/88", "completion": "\n    # split the string into words\n    words = s.replace(',', ' ').split()\n    # remove words with odd lengths\n    words = [word for word in words if len(word) % 2 == 0]\n    # sort the list by the length of each word in ascending order\n    words.sort(key=lambda x: len(x))\n    # if two words have the same length, sort the list alphabetically\n    words.sort()\n    return words\n"}
{"task_id": "EvoEval/89", "completion": "\n    if not strings:\n        return None\n    result = []\n    for string in strings:\n        if string == '':\n            continue\n        if hash_substring in hashlib.md5(string.encode()).hexdigest():\n            result.append(string)\n    return result\n"}
{"task_id": "EvoEval/90", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = {}\n    if len(dict) == 0:\n        return result\n    else:\n        for key in dict.keys():\n            if not isinstance(key, str):\n                return {}\n            elif key.islower() or key.isupper():\n                count = 0\n                for letter in key:\n                    if letter in vowels:\n                        count += 1\n                result[key] = count\n            else:\n                return {}\n        return result\n"}
{"task_id": "EvoEval/91", "completion": "\n    l_prime = [x if i % 2 == 0 and is_prime(l[i]) else y if i % 2 == 0 else l[i] for i in range(len(l))]\n    l_prime[::2] = sorted(l_prime[::2])\n    return l_prime\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    common_elements = sorted(list(set(a) & set(l1)))\n    multiples_of_3 = [x for x in common_elements if x % 3 == 0]\n    if multiples_of_3:\n        return common_elements, len(multiples_of_3)\n    else:\n        return common_elements, 0\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if not string or not is_prime(len(string)):\n        return \"\"\n\n    vowels = \"AEIOUaeiou\"\n    for i in range(len(string) - 2, 0, -1):\n        if string[i] in vowels and string[i-1] not in vowels and string[i+1] not in vowels:\n            return string[i]\n\n    return \"\"\n"}
{"task_id": "EvoEval/94", "completion": "\n    def sum_digits(n):\n        return sum(int(d) for d in str(abs(n)))\n\n    count = sum(1 for n in arr if sum_digits(n) > 0)\n    sorted_arr = sorted(arr, reverse=count % 2 == 0)\n    return sorted_arr\n"}
{"task_id": "EvoEval/95", "completion": "\n    filtered = [s for s in strings if substring in s and len(s) % 2 == 0]\n    return sorted(filtered, key=lambda x: (len(x), x))\n"}
{"task_id": "EvoEval/96", "completion": "\n    common_elements = set(l1) & set(l2)\n    for i in common_elements:\n        for j in common_elements:\n            if i != j and i + j == 0:\n                return True\n    return False\n"}
{"task_id": "EvoEval/97", "completion": "\n    fib = [0, 0, 1]\n    for i in range(3, n+1):\n        fib.append(fib[i-1] + fib[i-2] + fib[i-3] + i*i - i + 1)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (fib[i] + fib[j] + fib[k]) % 3 == 0:\n                    count += 1\n    return count\n"}
{"task_id": "EvoEval/98", "completion": "\n    if len(dict) == 0:\n        return False\n    if len(dict) == 1:\n        if len(dict.keys()) == 1 and len(dict.values()) == 1:\n            if dict.keys()[0].islower() == dict.values()[0].islower():\n                if dict.values()[0].count(\"(\") == dict.values()[0].count(\")\"):\n                    return True\n    for key in dict.keys():\n        if key.islower() != key.isupper():\n            return False\n        if key.islower():\n            for value in dict.values():\n                if value.islower() != value.isupper():\n                    return False\n                if value.islower():\n                    if value.count(\"(\") != value.count(\")\"):\n                        return False\n    return True\n"}
{"task_id": "EvoEval/99", "completion": "\n    if base < 2 or base > 9:\n        raise ValueError(\"Base must be between 2 and 9\")\n    if x < 0:\n        raise ValueError(\"x must be a non-negative integer\")\n    if x == 0:\n        return 1\n    return len(str(x)) + 1\n"}
