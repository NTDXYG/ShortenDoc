{"task_id": "EvoEval/0", "completion": "\n    def is_happy(s):\n        s = s.replace(\",\", \".\")\n        for i in range(len(s) - 2):\n            if len(set(s[i:i+3])) < 3:\n                return False\n        return True\n\n    a_happy = is_happy(a)\n    b_happy = is_happy(b)\n\n    if not a_happy and not b_happy:\n        return None\n    elif a_happy and b_happy:\n        a_float = float(a.replace(\",\", \".\"))\n        b_float = float(b.replace(\",\", \".\"))\n        if a_float > b_float:\n            return a\n        elif a_float < b_float:\n            return b\n        else:\n            return None\n    elif a_happy:\n        return a\n    else:\n        return b\n"}
{"task_id": "EvoEval/1", "completion": "\n    import math\n\n    # Extract the number part from the string\n    number_part = value[:value.find('a')]\n    string_part = value[value.find('a'):]\n\n    # Convert the number part to a float and round it\n    number = float(number_part)\n    rounded_number = math.ceil(number) if number > 0 else math.floor(number)\n\n    # Flip the case of the string part\n    flipped_string = string_part.swapcase()\n\n    # Combine the rounded number and the flipped string\n    result = f\"{rounded_number} {flipped_string}\"\n\n    return result\n"}
{"task_id": "EvoEval/2", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append((numbers[i] << n) % p)\n    return result\n"}
{"task_id": "EvoEval/3", "completion": "\ndef sort_parentheses(lst: List[str]) -> str:\n    lst = sorted(lst, key=lambda x: int(''.join(filter(str.isdigit, x))))\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == lst[j] + lst[i]:\n                return 'Yes'\n    return 'No'"}
{"task_id": "EvoEval/4", "completion": "\n    pass\n"}
{"task_id": "EvoEval/5", "completion": "\n    # Check if any two numbers are closer than the threshold\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                # Sort the array based on the sum of the first and last numbers being even or odd\n                if round((numbers[0] + numbers[-1]) / 2) % 2 == 0:\n                    return sorted(numbers, reverse=True)\n                else:\n                    return sorted(numbers)\n    # Return the array as it is if no two numbers are closer than the threshold\n    return numbers\n"}
{"task_id": "EvoEval/6", "completion": "\n    levels = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            levels.append(levels[-1] + 2)\n        else:\n            levels.append(levels[-1] + 2)\n    return sum(levels) / len(levels) if n % 2 == 0 else sum(levels) / len(levels) + 0.5\n"}
{"task_id": "EvoEval/7", "completion": "\n    result = 0\n    for i in range(1, n + 1):\n        if i % 3 == 0:\n            result += i ** 2\n        elif i % 4 == 0:\n            result += i ** 3\n        else:\n            result += i\n    return result\n"}
{"task_id": "EvoEval/8", "completion": "\n    count = string.count(bracket)\n    balance = 0\n    for char in string:\n        if char == '<':\n            balance += 1\n        elif char == '>':\n            balance -= 1\n        if balance < 0:\n            return False, count\n    return balance == 0, count\n"}
{"task_id": "EvoEval/9", "completion": "\n    planets = [\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"]\n    if planet1 not in planets or planet2 not in planets or planet1 == planet2:\n        return {}\n    \n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    return {planet: str(i+1).lower() for i, planet in enumerate(planets[index1+1:index2]) if planet in planets}\n"}
{"task_id": "EvoEval/10", "completion": "\n    def convert_gpa_to_grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        elif gpa > 3.7:\n            return 'A'\n        elif gpa > 3.3:\n            return 'A-'\n        elif gpa > 3.0:\n            return 'B+'\n        elif gpa > 2.7:\n            return 'B'\n        elif gpa > 2.3:\n            return 'B-'\n        elif gpa > 2.0:\n            return 'C+'\n        elif gpa > 1.7:\n            return 'C'\n        elif gpa > 1.3:\n            return 'C-'\n        elif gpa > 1.0:\n            return 'D+'\n        elif gpa > 0.7:\n            return 'D'\n        elif gpa > 0.0:\n            return 'D-'\n        else:\n            return 'E'\n\n    result = []\n    for name, gpa in name_grade_list:\n        proper_case_name = name.title()\n        letter_grade = convert_gpa_to_grade(gpa)\n        result.append((proper_case_name, letter_grade))\n    return result\n"}
{"task_id": "EvoEval/11", "completion": "\ndef planet_vowel_count(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return 0\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    vowels = \"aeiouy\"\n    count = 0\n    for i in range(index1 + 1, index2):\n        planet = planets[i]\n        count += sum(1 for char in planet if char.lower() in vowels)\n    if planets[index2].endswith('y'):\n        count += 1\n    return count\n"}
{"task_id": "EvoEval/12", "completion": "\n    grades = []\n    for student in student_info:\n        name = student['name']\n        consonants = sum(1 for char in name if char.lower() not in 'aeiou' and char.isalpha())\n        if consonants == n:\n            if student['GPA'] == 4.0:\n                grade = 'A+'\n            elif student['GPA'] > 3.7:\n                grade = 'A'\n            elif student['GPA'] > 3.3:\n                grade = 'A-'\n            elif student['GPA'] > 3.0:\n                grade = 'B+'\n            elif student['GPA'] > 2.7:\n                grade = 'B'\n            elif student['GPA'] > 2.3:\n                grade = 'B-'\n            elif student['GPA'] > 2.0:\n                grade = 'C+'\n            elif student['GPA'] > 1.7:\n                grade = 'C'\n            elif student['GPA'] > 1.3:\n                grade = 'C-'\n            elif student['GPA'] > 1.0:\n                grade = 'D+'\n            elif student['GPA'] > 0.7:\n                grade = 'D'\n            elif student['GPA'] > 0.0:\n                grade = 'D-'\n            else:\n                grade = 'E'\n        else:\n            grade = ''\n        grades.append({'name': name, 'grade': grade})\n    return grades\n"}
{"task_id": "EvoEval/13", "completion": "\n    def sum_digits(n):\n        if n < 0:\n            return -int(str(n)[1]) + sum(int(digit) for digit in str(n)[2:])\n        else:\n            return sum(int(digit) for digit in str(n))\n    \n    filtered_arr = [num for num in arr if sum_digits(num) > 0]\n    \n    if all(num % 2 == 0 for num in lst1):\n        return \"YES\"\n    \n    for i in range(len(filtered_arr)):\n        for j in range(len(lst1)):\n            if filtered_arr[i] % 2 != 0 and lst1[j] % 2 == 0:\n                filtered_arr[i], lst1[j] = lst1[j], filtered_arr[i]\n                if all(num % 2 == 0 for num in lst1):\n                    return \"YES\"\n                filtered_arr[i], lst1[j] = lst1[j], filtered_arr[i]\n    \n    return \"NO\"\n"}
{"task_id": "EvoEval/14", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(n, m + 1) if is_prime(num)]\n    if not primes or n > m:\n        return -1\n    avg = round(sum(primes) / len(primes))\n    return bin(avg)\n"}
{"task_id": "EvoEval/15", "completion": "\n    balance = 0\n    seen_balances = set()\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return False\n        if balance in seen_balances:\n            return True\n        seen_balances.add(balance)\n    return False\n"}
{"task_id": "EvoEval/16", "completion": "\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    word = word[::-1]\n    music_string = music_string.split()\n    result = []\n    for i in range(len(word)):\n        if word[i] in vowels and i > 0 and word[i-1] in consonants:\n            result.append(music_string[i].count(\"o\") * 4 + music_string[i].count(\"o|\") * 2 + music_string[i].count(\".|\"))\n            break\n    return result[::-1] if result else []\n"}
{"task_id": "EvoEval/17", "completion": "\n    fibfib = [0, 0, 1]\n    for i in range(3, n + 1):\n        fibfib.append(fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3])\n    \n    max_val = fibfib[n]\n    max_count = 0\n    for num in lst:\n        if num > 0 and num == max_val:\n            max_count += 1\n    \n    if max_count >= max_val:\n        return max_val\n    else:\n        return -1\n"}
{"task_id": "EvoEval/18", "completion": "\n    if len(nums) < 3:\n        return 0\n    min_sum = float('inf')\n    for i in range(len(nums) - 2):\n        current_sum = sum(nums[i:i+3])\n        if current_sum < min_sum:\n            min_sum = current_sum\n    return min_sum\n"}
{"task_id": "EvoEval/19", "completion": "\n    balance = 0\n    min_deposit = None\n    max_withdrawal = None\n    below_zero = False\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            below_zero = True\n            if min_deposit is None and op > 0:\n                min_deposit = op\n            if max_withdrawal is None and op < 0:\n                max_withdrawal = op\n        elif balance > 0 and min_deposit is None and op > 0:\n            min_deposit = op\n        elif balance > 0 and max_withdrawal is None and op < 0:\n            max_withdrawal = op\n\n    return (max_withdrawal, min_deposit, below_zero)\n"}
{"task_id": "EvoEval/20", "completion": "\n    result = []\n    for name, grade in zip(s, grades):\n        reversed_name = name[::-1]\n        if grade >= 4.0:\n            letter_grade = 'A+'\n        elif grade >= 3.7:\n            letter_grade = 'A'\n        elif grade >= 3.3:\n            letter_grade = 'A-'\n        elif grade >= 3.0:\n            letter_grade = 'B+'\n        elif grade >= 2.7:\n            letter_grade = 'B'\n        elif grade >= 2.3:\n            letter_grade = 'B-'\n        elif grade >= 2.0:\n            letter_grade = 'C+'\n        elif grade >= 1.7:\n            letter_grade = 'C'\n        elif grade >= 1.3:\n            letter_grade = 'C-'\n        elif grade >= 1.0:\n            letter_grade = 'D+'\n        elif grade >= 0.7:\n            letter_grade = 'D'\n        elif grade >= 0.0:\n            letter_grade = 'D-'\n        else:\n            letter_grade = 'E'\n        result.append((reversed_name, letter_grade))\n    return result\n"}
{"task_id": "EvoEval/21", "completion": "\n    if base >= 10:\n        raise ValueError(\"Base must be less than 10\")\n    if x < 0:\n        raise ValueError(\"Number must be non-negative\")\n    if x == 0:\n        return ['0']\n    prefixes = []\n    current_prefix = ''\n    while x > 0:\n        current_prefix = str(x % base) + current_prefix\n        prefixes.append(current_prefix)\n        x //= base\n    return prefixes\n"}
{"task_id": "EvoEval/22", "completion": "\n    def binary_planet_distance(planet1, planet2):\n        planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n        if planet1 not in planets or planet2 not in planets:\n            return \"\"\n        index1, index2 = planets.index(planet1), planets.index(planet2)\n        if index1 > index2:\n            index1, index2 = index2, index1\n        binary_str = \"\".join([\"1\" if i > index1 and i < index2 else \"0\" for i in range(len(planets))])\n        return \"bd\" + binary_str + \"bd\"\n"}
{"task_id": "EvoEval/23", "completion": "\n    def brazilian_factorial(n):\n        result = 1\n        for i in range(1, n + 1):\n            result *= math.factorial(i)\n        return result\n\n    levels = []\n    current_stones = n\n    for _ in range(n):\n        levels.append(brazilian_factorial(current_stones))\n        if n % 2 == 0:\n            current_stones += 2\n        else:\n            current_stones += 2\n    return levels\n"}
{"task_id": "EvoEval/24", "completion": "\n    num_dict = {'zero': '0', 'one': '1', 'two': '2', 'three': '3', 'four': '4', 'five': '5', 'six': '6', 'seven': '7', 'eight': '8', 'nine': '9'}\n    numbers = numbers.replace(' ', '')\n    if len(numbers) % 3 != 0:\n        return 'Not a happy string'\n    for i in range(0, len(numbers), 3):\n        if len(set(numbers[i:i+3])) != 3:\n            return 'Not a happy string'\n    sorted_numbers = sorted(numbers)\n    return ''.join(sorted_numbers)\n"}
{"task_id": "EvoEval/25", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    triples = [(a[i], a[j], a[k]) for i in range(n) for j in range(i + 1, n) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0]\n    if not triples:\n        return (0, 1)\n    sum_first_elements = sum(triple[0] for triple in triples)\n    product_first_elements = 1\n    for triple in triples:\n        product_first_elements *= triple[0]\n    return (sum_first_elements, product_first_elements)\n"}
{"task_id": "EvoEval/26", "completion": "\n    even_numerals = []\n    for value in values:\n        sorted_value = sorted(value.split())\n        for numeral in sorted_value:\n            if int(numeral) % 2 == 0:\n                even_numerals.append((numeral, sorted_value.index(numeral)))\n                break\n    if even_numerals:\n        return min(even_numerals, key=lambda x: (x[1], int(x[0])))\n    else:\n        return ()\n"}
{"task_id": "EvoEval/27", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def exchange(lst1, lst2):\n        for i in range(len(lst1)):\n            if not is_prime(lst1[i]):\n                for j in range(len(lst2)):\n                    if is_prime(lst2[j]):\n                        lst1[i], lst2[j] = lst2[j], lst1[i]\n                        break\n                else:\n                    return False\n        return True\n\n    if exchange(lst1, lst2):\n        return x\n    else:\n        return y\n"}
{"task_id": "EvoEval/28", "completion": "\n    pass\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def largest_prime_factor(num):\n        largest = -1\n        while num % 2 == 0:\n            largest = 2\n            num //= 2\n        for i in range(3, int(num**0.5) + 1, 2):\n            while num % i == 0:\n                largest = i\n                num //= i\n        if num > 2:\n            largest = num\n        return largest\n\n    if is_prime(n):\n        return y\n    else:\n        return largest_prime_factor(n) if n != 1 else x\n"}
{"task_id": "EvoEval/30", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/31", "completion": "\n    def factorial(x: int) -> int:\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    prime_factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while (n % divisor) == 0:\n            prime_factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        prime_factors.append(n)\n    \n    result = 1\n    for factor in prime_factors:\n        result *= factorial(factor)\n    \n    return result\n"}
{"task_id": "EvoEval/32", "completion": "\n    result = []\n    for group in input:\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    \n    shift %= len(str(max(result)))\n    if shift == 0:\n        return result\n    \n    shifted_result = []\n    for num in result:\n        num_str = str(num)\n        shifted_num = num_str[-shift:] + num_str[:-shift]\n        shifted_result.append(int(shifted_num))\n    \n    return shifted_result\n"}
{"task_id": "EvoEval/33", "completion": "\n    roman_to_int = {'i': 1, 'v': 5, 'x': 10, 'l': 50, 'c': 100, 'd': 500, 'm': 1000}\n    int_to_roman = {1: 'i', 5: 'v', 10: 'x', 50: 'l', 100: 'c', 500: 'd', 1000: 'm'}\n    s = s.lower()\n    if len(s) < 3:\n        return False\n    if not all(c in roman_to_int for c in s):\n        return False\n    if not all(s[i] != s[i+1] != s[i+2] for i in range(len(s)-2)):\n        return False\n    num = sum(roman_to_int[c] for c in s)\n    if num > 1000:\n        return False\n    return num\n"}
{"task_id": "EvoEval/34", "completion": "\n    pass\n"}
{"task_id": "EvoEval/35", "completion": "\n    if not dict:\n        return False\n    lower = upper = True\n    for key in dict.keys():\n        if not key.islower():\n            lower = False\n        if not key.isupper():\n            upper = False\n        if not is_happy(key):\n            return False\n    return lower or upper\n"}
{"task_id": "EvoEval/36", "completion": "\n    if not arr:\n        return True\n    for _ in range(min(n, p)):\n        if arr == sorted(arr):\n            return True\n        arr.insert(0, arr.pop())\n    return False\n"}
{"task_id": "EvoEval/37", "completion": "\n    min_sum = math.inf\n    even_count = 0\n    odd_count = 0\n    current_sum = 0\n    current_even_count = 0\n    current_odd_count = 0\n\n    for num in nums:\n        if num % 2 == 0:\n            current_even_count += 1\n            current_odd_count = 0\n        else:\n            current_odd_count += 1\n            current_even_count = 0\n\n        current_sum += num\n\n        if current_sum < min_sum:\n            min_sum = current_sum\n            even_count = current_even_count\n            odd_count = current_odd_count\n\n        if current_sum > 0:\n            current_sum = 0\n            current_even_count = 0\n            current_odd_count = 0\n\n    return (even_count, odd_count)\n"}
{"task_id": "EvoEval/38", "completion": "\n    even_palindromes = [i for i in range(1, n+1) if str(i) == str(i)[::-1] and i % 2 == 0]\n    odd_palindromes = [i for i in range(1, n+1) if str(i) == str(i)[::-1] and i % 2 != 0]\n    even_sum = sum(even_palindromes)\n    odd_sum = sum(odd_palindromes)\n    even_sum_in_l = any(i + j == even_sum for i in l for j in l if i != j)\n    odd_sum_in_l = any(i + j == odd_sum for i in l for j in l if i != j)\n    return (even_sum_in_l, odd_sum_in_l)\n"}
{"task_id": "EvoEval/39", "completion": "\n    changes = 0\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] != arr[j]:\n            changes += 1\n        i += 1\n        j -= 1\n    return changes * 2 + x + y\r\n"}
{"task_id": "EvoEval/40", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_odd_ends(n):\n        return str(n)[0] in '13579' and str(n)[-1] in '13579'\n\n    max_prime = None\n    for num in nums:\n        if num > 10 and is_odd_ends(num) and is_prime(num):\n            if max_prime is None or num > max_prime:\n                max_prime = num\n    return max_prime\n"}
{"task_id": "EvoEval/41", "completion": "\n    if shift > len(s):\n        s = s[::-1]\n    shifted_s = ''.join([chr((ord(c) - 65 + shift) % 26 + 65) if c.isupper() else c for c in s])\n    return sum(1 for i in range(0, len(shifted_s), 2) if shifted_s[i] in 'AEIOU')\n"}
{"task_id": "EvoEval/42", "completion": "\n    pass\n"}
{"task_id": "EvoEval/43", "completion": "\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 0]\n    elif n == 2:\n        return [0, 0, 2]\n    elif n == 3:\n        return [0, 0, 2, 0]\n    else:\n        sequence = [0, 0, 2, 0]\n        for i in range(4, n):\n            next_value = sum(sequence[-4:])\n            sequence.append(next_value)\n        if (sequence[0] + sequence[-1]) % 2 == 0:\n            sequence.sort(reverse=True)\n        else:\n            sequence.sort()\n        return sequence\n"}
{"task_id": "EvoEval/44", "completion": "\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    prefixes = []\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            prefixes.append(roman_numerals[value])\n            number -= value\n    return prefixes\n"}
{"task_id": "EvoEval/45", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_sum = 0\n    prime_product = 1\n\n    for num in numbers:\n        if is_prime(num):\n            prime_sum += num\n            prime_product *= num\n\n    return prime_sum, prime_product\n"}
{"task_id": "EvoEval/46", "completion": "\n    # Filter out negative numbers and find the maximum even number\n    max_even = max([num for num in l if num > 0 and num % 2 == 0], default=-1)\n    return max_even\n"}
{"task_id": "EvoEval/47", "completion": "\n    vowels = 'AEIOU'\n    result = []\n    for i, string in enumerate(lst):\n        count_upper_vowels = sum(1 for j, char in enumerate(s) if j % 2 == 0 and char in vowels)\n        count_odd_digits = sum(1 for char in string if int(char) % 2 == 1)\n        result.append(f\"In the string, the number of uppercase vowels in even indices is {count_upper_vowels}, and the number of odd digits is {count_odd_digits}.\")\n    return result\n"}
{"task_id": "EvoEval/48", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [s for s in strings if s.startswith(prefix) and is_prime(len(s))]\n"}
{"task_id": "EvoEval/49", "completion": "\n    mod_n = pow(2, n, p)\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > mod_n:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/50", "completion": "\n    vowels = \"AEIOU\"\n    for i in range(len(word) - 2, 0, -2):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n"}
{"task_id": "EvoEval/51", "completion": "\n    def convert_to_number(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n            try:\n                return float(x)\n            except ValueError:\n                return x\n        return x\n\n    def is_alphabetic(x):\n        return any(char.isalpha() for char in x)\n\n    def modify_string(x):\n        if is_alphabetic(x):\n            return x.swapcase()\n        else:\n            return x[::-1]\n\n    a_num = convert_to_number(a)\n    b_num = convert_to_number(b)\n\n    if isinstance(a_num, str) and isinstance(b_num, str):\n        return b_num\n    elif isinstance(a_num, (int, float)) and isinstance(b_num, (int, float)):\n        return None if a_num == b_num else b_num\n    elif isinstance(a_num, str):\n        return modify_string(a_num)\n    else:\n        return modify_string(b_num)\n"}
{"task_id": "EvoEval/52", "completion": "\n    if not arr:\n        return [], None\n    even_nodes = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not even_nodes:\n        return [], None\n    smallest_even, smallest_even_idx = min(even_nodes, key=lambda x: (x[0], x[1]))\n    remaining_nodes = [abs(val) for idx, val in enumerate(arr) if idx != smallest_even_idx]\n    sign_product = 1\n    for val in arr:\n        if val < 0:\n            sign_product *= -1\n        elif val == 0:\n            sign_product *= 0\n            break\n    return [smallest_even, smallest_even_idx], sum(remaining_nodes) * sign_product\n"}
{"task_id": "EvoEval/53", "completion": "\n    prime_hex_grades = ['D', 'B', '7', '5', '3']\n    count = 0\n    for grade in grades:\n        if str(grade) in prime_hex_grades:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/54", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_sum = 0\n    current_sum = 0\n\n    for num in nums:\n        if is_prime(num):\n            current_sum += num\n            max_sum = max(max_sum, current_sum)\n        else:\n            current_sum = 0\n\n    return max_sum\n"}
{"task_id": "EvoEval/55", "completion": "\n    if number <= 0:\n        return None\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            result += roman_numerals[value]\n            number -= value\n    return hashlib.md5(result.encode()).hexdigest()\n"}
{"task_id": "EvoEval/56", "completion": "\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    def prime_factors(x):\n        factors = []\n        for i in range(2, x + 1):\n            while is_prime(i) and x % i == 0:\n                factors.append(i)\n                x //= i\n        return factors\n\n    factors = prime_factors(n)\n    odd_factors = [x for x in factors if x % 2 != 0]\n    if len(odd_factors) == 0:\n        return 0\n    else:\n        return 1 if len(odd_factors) == 1 else reduce(lambda x, y: x * y, odd_factors)\n"}
{"task_id": "EvoEval/57", "completion": "\n    changes = 0\n    for i in range(len(arr) // 2):\r\n        if arr[i] != arr[-i - 1] or arr[i] % 2 == 0:\r\n            changes += 1\r\n    return changes\r\n"}
{"task_id": "EvoEval/58", "completion": "\n\n    def max_freq_and_sum_check(lst, a, b):\n        freq = Counter(lst)\n        max_freq = max(freq.values())\n        valid_numbers = [num for num, freq in freq.items() if freq >= num]\n        return (max_freq, a + b == max_freq or a + b == max_freq + 1) if valid_numbers else (-1, False)\n    \"\"\"\n    def max_freq_and_sum_check(lst, a, b):\n        freq = Counter(lst)\n        max_freq = max(freq.values())\n        valid_numbers = [num for num, freq in freq.items() if freq >= num]\n        return (max_freq, a + b == max_freq or a + b == max_freq + 1) if valid_numbers else (-1, False)\n    \"\"\"\n    def max_freq_and_sum_check(lst, a, b):\n        freq = Counter(lst)\n        max_freq = max(freq.values())\n        valid_numbers = [num for num, freq in freq.items() if freq >= num]\n        return (max_freq, a + b == max_freq or a + b == max_freq + 1) if valid_numbers else (-1, False)\n    \"\"\"\n    def max_freq_and_sum_"}
{"task_id": "EvoEval/59", "completion": "\n    def count_odd_digits(s, base):\n        return sum(1 for char in s if int(char, base) % 2 == 1)\n\n    output = []\n    for i, s in enumerate(lst, 1):\n        odd_count = count_odd_digits(s, base)\n        output.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return output\n"}
{"task_id": "EvoEval/60", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    return [a[i], i]\n    return []\n"}
{"task_id": "EvoEval/61", "completion": "\n\n    from typing import List, Optional, Tuple def longest_planet_chain(planet1: str, planet2: str, chains: List[Tuple[str,...]]) -> Optional[Tuple[str,...]]: ''' There are eight planets in our solar system: closerst to the Sun is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. A list of planet chains, represented as tuples, is given where each chain consists of a sequence of planet names. Write a function takes a starting planet name as string planet1 and ending planet name as string planet2, and list of chains. The function should return the longest chain that starts with planet1 and ends with planet2. If there are multiple chains of the same length that starts with planet1 and ends with planet2, return the first one. If there is no chain that starts with planet1 and ends with planet2, or if planet1 or planet2 are not correct planet names, return None. Examples longest_planet_chain(\"Earth\", \"Saturn\", [(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), (\"Earth\", \"Venus\", \"Mercury\", \"Mars\", \"Jupiter\", \"Saturn\")]) => (\"Earth\", \"Venus\", \"Mercury\", \"Mars\", \"Jupiter\", \"Saturn\") longest"}
{"task_id": "EvoEval/62", "completion": "\n    words = text.split()\n    words = [word.lower() for word in words]\n    words.sort()\n    result = []\n    while words:\n        result.append(words.pop(0))\n        if words:\n            result.append(words.pop())\n    result = [word.capitalize() for word in result]\n    result = [word.replace(\" \", \"_\") for word in result]\n    result = [word.replace(\"  \", \"-\") for word in result]\n    return \"\".join(result)\n"}
{"task_id": "EvoEval/63", "completion": "\n    def sort_planets(planet1: str, planet2: str, order: str) -> str:\n        planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n        planet_indices = {planet: index for index, planet in enumerate(planets)}\n        \n        if planet1 not in planet_indices or planet2 not in planet_indices:\n            return \"Invalid\"\n        \n        order_list = order.split()\n        if any(index not in planet_indices for index in order_list):\n            return \"Invalid\"\n        \n        if planet1 in order_list:\n            order_list.remove(planet1)\n        if planet2 in order_list:\n            order_list.remove(planet2)\n        \n        order_list.insert(0, planet1)\n        order_list.append(planet2)\n        \n        sorted_planets = [planet for planet in order_list if planet_indices[planet] > planet_indices[planet1] and planet_indices[planet] < planet_indices[planet2]]\n        \n        return \" \".join(sorted_planets)\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    mod_result = pow(2, n, p)\n    prime_numbers = [i for i in range(mod_result) if is_prime(i)]\n    return prime_numbers\n"}
{"task_id": "EvoEval/65", "completion": "\n    mod_val = pow(2, n, p)\n    for i in range(p - 1, 0, -1):\n        if mod_val % i == 0:\n            return i\n    return 1\n"}
{"task_id": "EvoEval/66", "completion": "\n    max_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            max_even = i\n            break\n    if max_even == -1:\n        return -1\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    max_sum = -1\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    max_sum = max(max_sum, a[i] + a[j] + a[k])\n    if max_sum == -1:\n        return -1\n    return max_sum + max_even\n"}
{"task_id": "EvoEval/67", "completion": "\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[0] - numbers[1])\n    \n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                if abs(numbers[i] - numbers[j]) > min_diff:\n                    min_diff = abs(numbers[i] - numbers[j])\n                    closest_pair = (numbers[i], numbers[j])\n    \n    return min_diff if min_diff < threshold else 0\n"}
{"task_id": "EvoEval/68", "completion": "\n    min_product = float('inf')\n    for i in range(len(nums)):\n        product = 1\n        for j in range(i, len(nums)):\n            if nums[j] % 2 == 1:\n                product *= nums[j]\n            else:\n                product = 0\n            min_product = min(min_product, product)\n    return min_product if min_product != float('inf') else 0\n"}
{"task_id": "EvoEval/69", "completion": "\n    def is_happy(s):\n        return len(s) >= 3 and all(s[i] != s[i+1] != s[i+2] for i in range(len(s)-2))\n\n    # Filter out non-happy strings and strings with odd lengths\n    lst = [s for s in lst if is_happy(s) and len(s) % 2 == 0]\n\n    # Sort the list by length and then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n\n    return lst\n"}
{"task_id": "EvoEval/70", "completion": "\n    def special_factorial(n: int) -> int:\n        factorial = math.factorial(n)\n        for i in range(1, n):\n            factorial *= math.factorial(n - i)\n        return factorial\n\n    closest_pair = (0, 0)\n    min_diff = float('inf')\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(special_factorial(numbers[i]) - special_factorial(numbers[j]))\n            if diff < min_diff:\n                min_diff = diff\n                closest_pair = (min(numbers[i], numbers[j]), max(numbers[i], numbers[j]))\n    return closest_pair\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    def brazilian_factorial(n):\n        result = 1\n        for i in range(1, n + 1):\n            result *= math.factorial(i)\n        return result\n    \n    max_weight = brazilian_factorial(n)\n    total_weight = sum(w)\n    is_balanced = w == w[::-1]\n    \n    return total_weight <= max_weight and is_balanced\n"}
{"task_id": "EvoEval/72", "completion": "\n    def brazilian_factorial(n):\n        result = 1\n        for i in range(1, n + 1):\n            result *= factorial(i)\n        return result\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(brazilian_factorial(numbers[i]) - brazilian_factorial(numbers[j]))\n            if diff < threshold:\n                return True\n    return False\n"}
{"task_id": "EvoEval/73", "completion": "\n    n = Fraction(n)\n    return [n * Fraction(f) == Fraction(f) for f in fractions]\n"}
{"task_id": "EvoEval/74", "completion": "\n    # Check if it is possible to make all elements of lst1 even by exchanging elements with lst2\n    even_lst1 = [num for num in lst1 if num % 2 == 0]\n    odd_lst1 = [num for num in lst1 if num % 2 != 0]\n    even_lst2 = [num for num in lst2 if num % 2 == 0]\n    odd_lst2 = [num for num in lst2 if num % 2 != 0]\n    \n    if len(odd_lst1) <= len(even_lst2):\n        exchange_possible = True\n    else:\n        exchange_possible = False\n    \n    # Check if x, y, and z are equal\n    if x == y + z:\n        sum_equal = \"SUM\"\n    else:\n        sum_equal = \"NO_SUM\"\n    \n    # Construct the answer string\n    answer = \"\"\n    if exchange_possible:\n        answer += \"YES \"\n    else:\n        answer += \"NO \"\n    answer += sum_equal\n    \n    return answer\n"}
{"task_id": "EvoEval/75", "completion": "\ndef transform_dict(input_dict):\n    if not input_dict:\n        return {}\n    if not all(isinstance(k, str) for k in input_dict.keys()):\n        return {}\n    if not all(k.isupper() or k.islower() for k in input_dict.keys()):\n        return {}\n    result = {}\n    for k, v in input_dict.items():\n        try:\n            num = float(v)\n            if num > 0:\n                result[k] = int(num + 0.5)\n            else:\n                result[k] = int(num - 0.5)\n        except ValueError:\n            return {}\n    return result\n"}
{"task_id": "EvoEval/76", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n\n    new_lst = [digit_sum(n) if is_prime(n) else n for n in lst]\n\n    if sum(lst[-1]) % 2 == 0:\n        return sorted(new_lst, reverse=True)\n    else:\n        return sorted(new_lst)\n"}
{"task_id": "EvoEval/77", "completion": "\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    return sum(arr[i] for i in range(1, len(arr), 2) if sum_of_digits(arr[i]) > 0)\n"}
{"task_id": "EvoEval/78", "completion": "\n    has_letters = any(c.isalpha() for c in s)\n    if not has_letters:\n        return (s[::-1], 0)\n    \n    result = []\n    uppercase_vowels_count = 0\n    for i, c in enumerate(s):\n        if c.isalpha():\n            if c.isupper():\n                uppercase_vowels_count += 1 if c in 'AEIOU' else 0\n            else:\n                uppercase_vowels_count += 1 if c in 'aeiou' else 0\n            result.append(c.swapcase())\n        else:\n            result.append(c)\n    \n    return (''.join(result), uppercase_vowels_count)\n"}
{"task_id": "EvoEval/79", "completion": "\n    if not s.isalpha():\n        return s[::-1]\n    if len(s) < 3:\n        return s\n    for i in range(0, len(s), 3):\n        if len(set(s[i:i+3])) < 3:\n            return s\n    return ''.join([c.upper() if c.islower() else c.lower() for c in s])[::-1]\n"}
{"task_id": "EvoEval/80", "completion": "\n    # Your code here\r\n\r\ncyclic_encode_delete(\"abcde\",\"ae\") # ('dbc',False)\r\ncyclic_encode_delete(\"abcdef\",\"b\") # ('ecafd',False)\r\ncyclic_encode_delete(\"abceedcba\",\"ab\") # ('cdedc',True)"}
{"task_id": "EvoEval/81", "completion": "\n    fibfib_sequence = [0, 0, 1]\n    for i in range(3, n):\n        fibfib_sequence.append(fibfib_sequence[i-1] + fibfib_sequence[i-2] + fibfib_sequence[i-3])\n    mean = sum(fibfib_sequence) / n\n    mad = sum(abs(x - mean) for x in fibfib_sequence) / n\n    return mad\n"}
{"task_id": "EvoEval/82", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/83", "completion": "\n    text = re.sub(r' {3,}', '_', text)\n    text = re.sub(r' ', '_', text)\n    num = int(text)\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/84", "completion": "\n    histograms = {}\n    for i in range(len(string)):\n        prefix = string[:i+1]\n        letter_counts = {}\n        for letter in prefix:\n            if letter in letter_counts:\n                letter_counts[letter] += 1\n            else:\n                letter_counts[letter] = 1\n        max_count = max(letter_counts.values())\n        max_letters = [letter for letter, count in letter_counts.items() if count == max_count]\n        histograms[prefix] = {letter: count for letter, count in letter_counts.items() if letter in max_letters}\n    return histograms\n"}
{"task_id": "EvoEval/85", "completion": "\n    if not lst:\n        return None\n    lst.sort(key=lambda x: (bin(x).count('1'), x))\n    return lst[1] if len(lst) > 1 else None\n"}
{"task_id": "EvoEval/86", "completion": "\n    common_operands = set(operand_lists[0]).intersection(*operand_lists[1:])\n    if not common_operands:\n        return None\n    common_operands = sorted(list(common_operands))\n    expression = str(common_operands[0])\n    for i in range(len(operators)):\n        expression += f\" {operators[i]} {common_operands[i+1]}\"\n    return eval(expression)\n"}
{"task_id": "EvoEval/87", "completion": "\n    stack = []\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char in '(':\n            stack.append(char)\n        elif char in ')':\n            if stack:\n                stack.pop()\n            else:\n                result += char\n        elif char not in vowels:\n            result += char\n    while stack:\n        result = result[:stack.pop()] + ')' + result[stack.pop()+1:]\n    return result\n"}
{"task_id": "EvoEval/88", "completion": "\n    # Split the string into words\n    words = s.replace(',', '').split()\n    \n    # Remove words with odd lengths\n    even_length_words = [word for word in words if len(word) % 2 == 0]\n    \n    # Sort the list by word length, then alphabetically\n    even_length_words.sort(key=lambda x: (len(x), x))\n    \n    return even_length_words\n"}
{"task_id": "EvoEval/89", "completion": "\n    import hashlib\n    result = []\n    for s in strings:\n        if s:\n            md5_hash = hashlib.md5(s.encode()).hexdigest()\n            if hash_substring in md5_hash:\n                result.append(s)\n    return result if result else None\n"}
{"task_id": "EvoEval/90", "completion": "\n    vowels = 'aeiouy'\n    result = {}\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return {}\n        if key.lower() == key or key.upper() == key:\n            vowel_count = sum(1 for char in key if char.lower() in vowels)\n            result[key] = vowel_count\n        else:\n            return {}\n    return result\n"}
{"task_id": "EvoEval/91", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    l_prime = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    l_prime_even = [x if is_prime(l_prime[i]) else y for i in range(len(l_prime))]\n\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = l_prime_even[i // 2]\n\n    return l\n"}
{"task_id": "EvoEval/92", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    common_elements = list(set(a) & set(l1))\n    common_elements.sort()\n    triple_count = 0\n    for i in range(len(common_elements)):\n        for j in range(i + 1, len(common_elements)):\n            for k in range(j + 1, len(common_elements)):\n                if (common_elements[i] + common_elements[j] + common_elements[k]) % 3 == 0:\n                    triple_count += 1\n    return (common_elements, triple_count)\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiouAEIOU'\n    for i in range(len(string)-2, 0, -1):\n        if string[i] in vowels and string[i-1] not in vowels and string[i+1] not in vowels:\n            return string[i]\n    return ''\n"}
{"task_id": "EvoEval/94", "completion": "\n    def sum_of_digits(n):\n        if n < 0:\n            n = -n\n            n = str(n)\n            n = list(n)\n            n[0] = '-' + n[0]\n            n = ''.join(n)\n            n = int(n)\n        return sum(int(digit) for digit in str(n))\n    \n    count = sum(1 for num in arr if sum_of_digits(num) > 0)\n    sorted_arr = sorted(arr, key=sum_of_digits)\n    \n    if count % 2 == 0:\n        sorted_arr.reverse()\n    \n    return sorted_arr\n"}
{"task_id": "EvoEval/95", "completion": "\n    filtered_strings = [s for s in strings if substring in s and len(s) % 2 == 0]\n    return sorted(filtered_strings, key=lambda x: (len(x), x))\n"}
{"task_id": "EvoEval/96", "completion": "\n    common_elements = set(l1) & set(l2)\n    for element in common_elements:\n        if -element in common_elements and element != 0:\n            return True\n    return False\n"}
{"task_id": "EvoEval/97", "completion": "\n    fib = [0, 0, 1]\n    for i in range(3, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2] + fib[i - 3] + i * i - i + 1)\n    count = 0\n    for i in range(len(fib)):\n        for j in range(i + 1, len(fib)):\n            for k in range(j + 1, len(fib)):\n                if (fib[i] + fib[j] + fib[k]) % 3 == 0:\n                    count += 1\n    return count\n"}
{"task_id": "EvoEval/98", "completion": "\n    if not dict:\n        return False\n    lower_case = upper_case = False\n    for key, value in dict.items():\n        if not key.islower() and not key.isupper():\n            return False\n        if key.islower():\n            lower_case = True\n        else:\n            upper_case = True\n        if not value == \"()\":\n            return False\n    return lower_case != upper_case\n"}
{"task_id": "EvoEval/99", "completion": "\n    if x == 0:\n        return 1\n    length = 0\n    while x > 0:\n        x //= base\n        length += 1\n    return length\n"}
