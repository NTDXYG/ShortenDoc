{"task_id": "valid/0", "completion": "\n    # Import necessary libraries\n    import re\n\n    # Define the categories\n    categories = ['greeting', 'goodbye', 'thanks', 'unknown']\n\n    # Define the rules\n    rules = {\n        'greeting': ['hello', 'hi', 'hey'],\n        'goodbye': ['bye', 'goodbye'],\n        'thanks': ['thank', 'gracias']\n    }\n\n    # Convert the text to lowercase\n    text = text.lower()\n\n    # Classify the text\n    for category, rules in rules.items():\n        if any(rule in text for rule in rules):\n            return category\n\n    # If no rule matches, return 'unknown'\n    return 'unknown'\n\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n\n"}
{"task_id": "valid/3", "completion": "\n    return sorted(instruments, reverse=True)\n\n\ninstruments = ['Guitar', 'Piano', 'Drum', 'Flute', 'Saxophone', 'Trumpet', 'Violin', 'Cello']"}
{"task_id": "valid/4", "completion": "\n    try:\n        return json.loads(json_string)\n    except ValueError:\n        raise ValueError(\"Invalid JSON string\")\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n    else:\n        digits = [int(d) for d in str(n)]\n        return sum(digits) % 3 == 0 and n % 5 == 0\n\n"}
{"task_id": "valid/6", "completion": "\n    return log(n, base)\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        parsed = json.loads(json_str)\n        pprint.pprint(parsed)\n    except ValueError as e:\n        print(\"Invalid JSON: {0}\".format(e))\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace('{{' + key + '}}', str(value))\n    return template\n\n"}
{"task_id": "valid/10", "completion": "\n    return len(set(string)) == len(string)\n\n"}
{"task_id": "valid/11", "completion": "\n    date_object = datetime.strptime(date_string, '%Y-%m-%d')\n    new_date_object = date_object + timedelta(days=days)\n    return new_date_object.strftime('%Y-%m-%d')\n\n"}
{"task_id": "valid/12", "completion": "\n    return \" \".join(text.split())\n"}
{"task_id": "valid/13", "completion": "\n    # Convert to lowercase\n    text = text.lower()\n\n    # Remove punctuation\n    translator = str.maketrans('', '', string.punctuation)\n    text = text.translate(translator)\n\n    # Remove digits\n    translator = str.maketrans('', '', string.digits)\n    text = text.translate(translator)\n\n    # Remove whitespace\n    text = text.strip()\n\n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    return bool(re.search(r'\\b(' + word1 + r'|' + word2 + r')\\b', text))\n\n"}
{"task_id": "valid/15", "completion": "\n    return [sum(i) for i in array]\n\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    lines = comment.split('\\n')\n    for line in lines:\n        if line.startswith('vim:'):\n            line = line.replace('vim:', '').strip()\n            for setting in line.split(','):\n                key, value = setting.split('=')\n                settings[key.strip()] = value.strip()\n    return settings\n\n"}
{"task_id": "valid/17", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)\n\n"}
{"task_id": "valid/19", "completion": "\n    list1.reverse()\n    list2.reverse()\n    combined_list = list1 + list2\n    combined_list.sort()\n    return combined_list\n\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n\n"}
{"task_id": "valid/21", "completion": "\n    return z * z\n\n"}
{"task_id": "valid/22", "completion": "\n    if \"name\" in dictionary:\n        return dictionary[\"name\"]\n    else:\n        for key in dictionary:\n            if isinstance(dictionary[key], dict):\n                value = get_nested_dictionary_value(dictionary[key])\n                if value is not None:\n                    return value\n        return None\n\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {k: struct_to_dict(v) for k, v in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(v) for v in struct]\n    else:\n        return struct\n\n"}
{"task_id": "valid/24", "completion": "\n    if num < 10:\n        return num - 1\n\n    str_num = str(num)\n    num_len = len(str_num)\n\n    left_half = int(str_num[:(num_len // 2)])\n    is_odd = num_len % 2\n\n    candidates = [\n        int(str(left_half) + str(left_half)[::-1]),\n        int(str(left_half + 1) + str(left_half + 1)[::-1]),\n        int(str(left_half - 1) + str(left_half - 1)[::-1]),\n    ]\n\n    if is_odd:\n        candidates.append(int(str(left_half + 1) + str(left_half)[1:] + str(left_half + 1)[::-1]))\n        candidates.append(int(str(left_half - 1) + str(left_half)[1:] + str(left_half - 1)[::-1]))\n\n    closest = min(candidates, key=lambda x: (abs(x - num), x))\n\n    if closest > num:\n        return closest\n    else:\n        return min(candidates, key=lambda x: (abs(x - num), x))\n\n"}
{"task_id": "valid/25", "completion": "\n    return num ** 0.5\n\n"}
{"task_id": "valid/26", "completion": "\n    rows = len(matrix)\n    cols = len(matrix[0])\n    diagonal_sum = sum(matrix[i][i] for i in range(min(rows, cols)))\n    is_square = rows == cols\n\n    return rows, cols, diagonal_sum, is_square\n\n"}
{"task_id": "valid/27", "completion": "\n    message_bytes = string.encode('ascii')\n    base64_bytes = base64.b64encode(message_bytes)\n    base64_string = base64_bytes.decode('ascii')\n    return base64_string\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c for c in s if c.isalpha()).lower()\n\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n\n    return not (key in json_data and json_data[key] == value)\n\n"}
{"task_id": "valid/31", "completion": "\n    table = '<table>\\n'\n    table += '<tr>\\n'\n\n    for i, button in enumerate(buttons, start=1):\n        if i % num_columns == 1:\n            table += '<tr>\\n'\n        table += '<td>\\n'\n        table += '<button onclick=\"{}\">{}</button>\\n'.format(button[1], button[0])\n        table += '</td>\\n'\n        if i % num_columns == 0:\n            table += '</tr>\\n'\n\n    if i % num_columns != 0:\n        table += '</tr>\\n'\n\n    table += '</table>\\n'\n\n    return table\n\n"}
{"task_id": "valid/32", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(alphabet) - 1):\n        if alphabet[i] in s and alphabet[i + 1] in s:\n            if s.index(alphabet[i + 1]) < s.index(alphabet[i]):\n                return False\n        elif alphabet[i] not in s and alphabet[i + 1] not in s:\n            continue\n        else:\n            return False\n    return True\n\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "valid/34", "completion": "\n    import re\n    return sum(int(i) for i in re.findall(r'\\d+', ts))\n\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n\n"}
{"task_id": "valid/36", "completion": "\n    try:\n        return sum(arr)\n    except TypeError:\n        return \"Array should only contain numerical values\"\n"}
{"task_id": "valid/37", "completion": "\n    neighborhoods = json.loads(json_data)\n    neighborhoods.sort(key=lambda x: x['name'])\n    return [neighborhood['name'] for neighborhood in neighborhoods]\n"}
{"task_id": "valid/38", "completion": "\n    arr = sorted(arr)\n    l = 0\n    r = n - 1\n    min_sum = 99999999999\n    min_l = l\n    min_r = r\n    while l < r:\n        sum = arr[l] + arr[r]\n        if abs(sum) < abs(min_sum):\n            min_sum = sum\n            min_l = l\n            min_r = r\n        if sum < 0:\n            l += 1\n        else:\n            r -= 1\n    return (arr[min_l], arr[min_r])\n\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for i in p:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack or stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "valid/40", "completion": "\n    total_votes = 0\n    results = {}\n\n    for vote in votes:\n        candidate, vote_count = vote\n        if vote_count < 0 or vote_count > 1000:\n            raise ValueError(\"Invalid vote count\")\n        if len(candidate) > 10 or not candidate.isupper():\n            raise ValueError(\"Invalid candidate name\")\n        if candidate in results:\n            results[candidate] += vote_count\n        else:\n            results[candidate] = vote_count\n        total_votes += vote_count\n\n    if total_votes < 100:\n        raise ValueError(\"Total votes must be at least 100\")\n\n    for candidate, vote_count in results.items():\n        percentage = (vote_count / total_votes) * 100\n        results[candidate] = (vote_count, round(percentage, 2))\n\n    return results\n\n\nvotes = [(\"A\", 100), (\"B\", 200), (\"C\", 300), (\"D\", 400)]"}
{"task_id": "valid/41", "completion": "\n    try:\n        if \"-\" in date_string:\n            if date_string.count(\"-\") == 2:\n                day, month, year = map(int, date_string.split(\"-\"))\n            else:\n                raise ValueError\n        elif \"/\" in date_string:\n            if date_string.count(\"/\") == 2:\n                day, month, year = map(int, date_string.split(\"/\"))\n            else:\n                raise ValueError\n        else:\n            raise ValueError\n\n        date = datetime(year, month, day)\n\n    except ValueError:\n        raise ValueError(\"Invalid date format. Please use DD-MM-YYYY or DD/MM/YYYY.\")\n\n    return date.strftime(\"%B %d, %Y\")\n\n"}
{"task_id": "valid/42", "completion": "\n    allowed_extensions = ['.txt', '.doc', '.docx', '.pdf', '.jpg', '.png', '.gif', '.bmp', '.rtf', '.csv', '.xls', '.xlsx', '.ppt', '.pptx', '.odt', '.ods', '.odp', '.md']\n    if oldname.split('.')[-1] in allowed_extensions:\n        if newname.split('.')[-1] in allowed_extensions:\n            return True\n        else:\n            return False\n    else:\n        return False\n"}
{"task_id": "valid/43", "completion": "\n    def is_even(n):\n        if isinstance(n, str):\n            try:\n                return int(n) % 2 == 0\n            except ValueError:\n                return False\n        elif isinstance(n, (int, float)):\n            return n % 2 == 0\n        else:\n            return False\n\n    def process(n):\n        if isinstance(n, tuple):\n            return tuple(process(i) for i in n if is_even(i))\n        else:\n            return n if is_even(n) else None\n\n    return process(lst)\n\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n\n"}
{"task_id": "valid/45", "completion": "\n    count = 0\n    for character in string:\n        if character == specific_character:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/46", "completion": "\n    histogram_data['generation'].append(generation)\n    histogram_data['accuracy'].append(accs)\n    return histogram_data\n\n"}
{"task_id": "valid/47", "completion": "\n    return re.fullmatch(r'\\w{5}', string) is not None\n\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        if \" :: \" in classifier:\n            language = classifier.split(\" :: \")[1]\n            unique_languages.add(language)\n    return len(unique_languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    count_dict = {}\n    for sub_arr in arr:\n        for num in sub_arr:\n            if num in count_dict:\n                count_dict[num] += 1\n            else:\n                count_count_dict[num] = 1\n    return count_dict\n"}
{"task_id": "valid/50", "completion": "\n    urlpatterns = [\n        re.compile(r'^videos/$'),\n        re.compile(r'^videos/(?P<video_id>\\d+)/$'),\n    ]\n\n    for pattern in urlpatterns:\n        match = pattern.match(url)\n        if match:\n            return pattern.name\n    return None\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n\n"}
{"task_id": "valid/52", "completion": "\n    string = \"Hello, \"\n    sentence = \"world!\"\n    return string + sentence\n\n"}
{"task_id": "valid/53", "completion": "\n    # Initialize an empty list to store all substrings\n    substrings = []\n\n    # Iterate over the string\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            # Add each substring to the list\n            substrings.append(s[i:j])\n\n    return substrings\n\n"}
{"task_id": "valid/54", "completion": "\n    price_sum = 0\n    for dict in list_of_dicts:\n        for key in dict.keys():\n            if key.startswith(\"price\"):\n                price_sum += dict[key]\n    return price_sum\n\n"}
{"task_id": "valid/55", "completion": "\n    intersection = [value for value in list1 if value in list2]\n    list2 = [value for value in list2 if value not in intersection]\n    return intersection, list2\n\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]"}
{"task_id": "valid/56", "completion": "\n    if request_method == 'GET':\n        return api_advisor_view\n    elif request_method == 'POST':\n        return api_advisor_view_post\n    else:\n        return \"Invalid request method\"\n\n"}
{"task_id": "valid/57", "completion": "\n    if a < 0 or b < 0:\n        raise ValueError(\"Both numbers must be positive\")\n    if b == 0:\n        return a\n    return gcd_recursive(b, a % b)\n\n"}
{"task_id": "valid/58", "completion": "\n    config_files = {}\n    for file_path in file_paths:\n        dir_path = \"/\".join(file_path.split(\"/\")[:-1])\n        file_name = file_path.split(\"/\")[-1]\n        if dir_path not in config_files:\n            config_files[dir_path] = [file_name]\n        else:\n            config_files[dir_path].append(file_name)\n    return config_files\n\n\nfile_paths = [\n    \"/etc/nginx/nginx.conf\",\n    \"/etc/nginx/sites-available/example.com\",\n    \"/etc/nginx/sites-enabled/example.com\",\n    \"/var/www/example.com/public_html/index.html\",\n    \"/var/www/example.com/public_html/.htaccess\",\n    \"/var/www/example.com/logs/access.log\",\n    \"/var/www/example.com/logs/error.log\",\n]\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n\n"}
{"task_id": "valid/61", "completion": "\n    return timeEnd - timeStart\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return False\n\n    mid = (start + end) // 2\n\n    if array[mid] == target:\n        return mid\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    if color == \"WHITE\":\n        return \"RED\"\n    elif color == \"RED\":\n        return \"GREEN\"\n    elif color == \"GREEN\":\n        return \"BLUE\"\n    elif color == \"BLUE\":\n        return \"WHITE\"\n    else:\n        return \"Invalid color\"\n\n"}
{"task_id": "valid/64", "completion": "\n    return [i + 1 for i in list]\n\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end+1):\n        if i**0.5 == int(i**0.5):\n            return True\n    return False\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        if word == target:\n            return True\n    return False\n\n"}
{"task_id": "valid/67", "completion": "\n    return sentence.split()\n\n"}
{"task_id": "valid/68", "completion": "\n    for key in dict.keys():\n        print(key)\n\n\nfruits = {'apple': 5, 'banana': 3, 'orange': 2}"}
{"task_id": "valid/69", "completion": "\n    string_1 = \"Hello\"\n    string_2 = \"World\"\n    phrase = f\"{string_1} {string_2}\"\n    return phrase\n\n"}
{"task_id": "valid/70", "completion": "\n    result = []\n    for string in strings:\n        if re.match(\"^[a-zA-Z0-9 ]*$\", string):\n            result.append(string.capitalize())\n    return result\n"}
{"task_id": "valid/71", "completion": "\n    return string.index(char)\n"}
{"task_id": "valid/72", "completion": "\n    start_tag = \"<b>\"\n    end_tag = \"</b>\"\n    start = 0\n    end = 0\n    bold_texts = []\n\n    while start != -1 and end != -1:\n        start = html_code.find(start_tag, end)\n        if start != -1:\n            end = html_code.find(end_tag, start + len(start_tag))\n            if end != -1:\n                bold_texts.append(html_code[start + len(start_tag):end])\n                end += len(end_tag)\n\n    return bold_texts\n\n\nhtml_code = \"<b>Hello</b> <b>World</b>\""}
{"task_id": "valid/73", "completion": "\n    # Define the stock and prices\n    stock = {\"chips\": 1.5, \"candy\": 0.5, \"soda\": 0.75, \"cookies\": 1.0}\n    change = 0\n\n    # Check if item is in stock\n    if item in stock:\n        # Check if enough money was inserted\n        if money_inserted >= stock[item]:\n            change = money_inserted - stock[item]\n            stock[item] -= 1\n        else:\n            return \"Not enough money inserted\"\n    else:\n        return \"Item not in stock\"\n\n    return change\n\n"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    unique_list = []\n    for item in merged_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\n\n"}
{"task_id": "valid/75", "completion": "\n    return list.count(target)\n\n"}
{"task_id": "valid/76", "completion": "\n    message_bytes = string.encode('ascii')\n    base64_bytes = base64.b64encode(message_bytes)\n    base64_message = base64_bytes.decode('ascii')\n\n    return base64_message\n"}
{"task_id": "valid/77", "completion": "\n    return [i for i, x in enumerate(vector) if x != 0]\n\n"}
{"task_id": "valid/78", "completion": "\n    # Assign a value to a variable\n    my_var = 10\n\n    # Validate the variable\n    if my_var > 5:\n        print(\"The variable is greater than 5\")\n    else:\n        print(\"The variable is not greater than 5\")\n\n\nassign_and_validate()\n\n"}
{"task_id": "valid/79", "completion": "\n    word = list(word)\n    random.shuffle(word)\n    return \"\".join(word)\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"integer\"\n    elif isinstance(element, float):\n        return \"float\"\n    elif isinstance(element, str):\n        return \"string\"\n    elif isinstance(element, bool):\n        return \"boolean\"\n    elif isinstance(element, list):\n        return \"list\"\n    elif isinstance(element, tuple):\n        return \"tuple\"\n    elif isinstance(element, dict):\n        return \"dictionary\"\n    elif isinstance(element, set):\n        return \"set\"\n    else:\n        return \"unknown\"\n\n"}
{"task_id": "valid/81", "completion": "\n    if len(arr) == 0:\n        return []\n\n    result = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] != result[-1]:\n            result.append(arr[i])\n    return result\n\n"}
{"task_id": "valid/82", "completion": "\n    tokens = re.findall(r'\\b\\w[\\w\\']*\\b', text.lower())\n    return tokens\n\ntext = \"This is a sample text. It contains several words.\""}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    if not divisible_numbers:\n        return \"No numbers divisible by both 3 and 7\"\n    average = sum(divisible_numbers) / len(divisible_numbers)\n    minimum = min(divisible_numbers)\n    maximum = max(divisible_numbers)\n    unique_numbers = set(divisible_numbers)\n    occurrences = {num: divisible_numbers.count(num) for num in unique_numbers}\n    return f\"Average: {average}\\nMinimum: {minimum}\\nMaximum: {maximum}\\nOccurrences: {occurrences}\"\n\n\nnumbers = [3, 7, 10, 14, 21, 28, 35, 42, 49, 56, 63, 70]"}
{"task_id": "valid/84", "completion": "\n    sentence = sentence.lower()\n    words = sentence.split()\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    highest_frequency = max(word_count.values())\n    for word, frequency in word_count.items():\n        if frequency == highest_frequency:\n            return word\n"}
{"task_id": "valid/85", "completion": "\n    euler = 0\n    for i in range(100):\n        euler += 1 / math.factorial(i)\n    return round(euler, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    sum_numbers = sum(numbers)\n    average = sum_numbers / len(numbers)\n    return average, sum_numbers\n\n"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series is empty\")\n    if not all(isinstance(i, (int, float)) for i in time_series):\n        raise ValueError(\"Time series contains non-numerical values\")\n    return min(time_series), max(time_series)\n\n"}
{"task_id": "valid/88", "completion": "\n    related_articles_count = {}\n    for article in encyclopedia:\n        related_articles_count[article] = len(encyclopedia[article])\n    return related_articles_count\n\n"}
{"task_id": "valid/89", "completion": "\n    largest_index = 0\n    for i in range(1, len(lst)):\n        if lst[i] > lst[largest_index]:\n            largest_index = i\n    return largest_index\n\n"}
{"task_id": "valid/90", "completion": "\n    return bool(set(list1) & set(list2))\n\n"}
{"task_id": "valid/91", "completion": "\n    def _dict_to_xml(dictionary, root):\n        for key, value in dictionary.items():\n            if isinstance(value, dict):\n                child = Element(key)\n                root.append(child)\n                _dict_to_xml(value, child)\n            else:\n                child = Element(key)\n                child.text = str(value)\n                root.append(child)\n        return root\n\n    root = Element('data')\n    _dict_to_xml(dictionary, root)\n    return tostring(root)\n"}
{"task_id": "valid/92", "completion": "\n    row = 0\n    col = len(matrix[0]) - 1\n\n    while row < len(matrix) and col >= 0:\n        if matrix[row][col] > target:\n            col -= 1\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            return [row, col]\n\n    return [-1, -1]\n\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in lst:\n        if i & 1:  # bitwise operation to check if number is odd\n            sum_odd += i\n            count_odd += 1\n    average_odd = sum_odd / count_odd\n    return sum_odd, average_odd\n\n"}
{"task_id": "valid/94", "completion": "\n    if n > len(lst):\n        return None\n    else:\n        lst.sort(reverse=True)\n        return lst[n-1]\n\n\nlst = [9, 4, 7, 2, 1, 5]\nn = 3"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n"}
{"task_id": "valid/96", "completion": "\n    exclusive_elements = set_a ^ set_b\n    return exclusive_elements\n\n"}
{"task_id": "valid/97", "completion": "\n    description = \"I am a Discord bot designed to manage and play music on your server. I have several features including:\\n\\n\"\n\n    for command, info in mapping.items():\n        description += f\"**{command}**: {info['description']}\\n\"\n\n    description += \"\\nFor more information on how to use each command, type `.help <command>`\"\n\n    return description\n\n\ncommand_mapping = {\n    \".play\": {\n        \"description\": \"Plays a song from a given URL or search term.\",\n    },\n    \".skip\": {\n        \"description\": \"Skips the current song and plays the next one in the queue.\",\n    },\n    \".pause\": {\n        \"description\": \"Pauses the current song.\",\n    },\n    \".resume\": {\n        \"description\": \"Resumes the current song.\",\n    },\n    \".stop\": {\n        \"description\": \"Stops the music and clears the queue.\",\n    },\n    \".queue\": {\n        \"description\": \"Shows the current queue of songs.\",\n    },\n    \".volume\": {\n        \"description\": \"Changes the volume of the music.\",\n    },\n    \".shuffle\": {\n        \"description\": \"Shuffles the queue.\",\n    },\n    \".loop\": {\n        \"description\": \"Loops the current song.\",\n    },\n    \".remove\": {\n        \"description\": \"Removes a song from the queue.\",\n    },\n}\n"}
{"task_id": "valid/98", "completion": "\n    if n < 0:\n        return dec_to_ternary(abs(n))\n    if n == 0:\n        return '0'\n    ternary = ''\n    while n > 0:\n        ternary = str(n % 3) + ternary\n        n = n // 3\n    return ternary\n\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(file_name.split('.')[-1] for file_name in file_names)\n\n"}
{"task_id": "valid/100", "completion": "\n    if age < 0:\n        return \"Invalid age\"\n    elif age <= 12:\n        return \"Child\"\n    elif age <= 19:\n        return \"Teenager\"\n    elif age <= 59:\n        return \"Adult\"\n    else:\n        return \"Senior\"\n\n"}
{"task_id": "valid/101", "completion": "\n    letter_grade = 'A' if numerical_grade >= 90 else 'B' if numerical_grade >= 80 else 'C' if numerical_grade >= 70 else 'D' if numerical_grade >= 60 else 'F'\n    gpa = (numerical_grade - 50) / 10 if numerical_grade >= 60 else 0\n    return letter_grade, gpa\n\n"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item.price\n    return total\n\n"}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    palindrome_dict = {}\n\n    for palindrome in palindrome_tuples:\n        vowel_count = sum(letter in vowels for letter in palindrome)\n        palindrome_dict[palindrome] = vowel_count\n\n    return palindrome_dict\n\n"}
{"task_id": "valid/104", "completion": "\n    if len(s) < 2:\n        return ''\n    else:\n        return s[0:2] + s[len(s)-2:]\n"}
{"task_id": "valid/105", "completion": "\n    # Create an empty set to store the sum of elements\n    sum_set = set()\n\n    # Initialize the sum of elements\n    sum_elements = 0\n\n    # Traverse through the given array\n    for i in range(0, len(arr)):\n        # Add the current element to sum_elements\n        sum_elements = sum_elements + arr[i]\n\n        # If sum_elements is 0 or if it is present in sum_set, return True\n        if sum_elements == 0 or sum_elements in sum_set:\n            return True\n\n        # Else, insert sum_elements into sum_set\n        sum_set.add(sum_elements)\n\n    # If no pair with sum 0 is found, return False\n    return False\n\n"}
{"task_id": "valid/106", "completion": "\n    result = {}\n    for dependency in dependencies:\n        package_name, version_number = dependency\n        version_number = version_number.split('_')[0]\n        version_number = int(version_number)\n        if package_name in result:\n            if version_number > result[package_name][1]:\n                result[package_name] = (package_name, version_number)\n        else:\n            result[package_name] = (package_name, version_number)\n    return list(result.values())\n\n"}
{"task_id": "valid/107", "completion": "\n    causes_dict = {}\n    for cause in causes:\n        action, result = cause.split()\n        if action in causes_dict:\n            causes_dict[action].append(result)\n        else:\n            causes_cause = {action: [result]}\n            causes_dict.update(causes_cause)\n    return causes_dict\n\n\ncauses = [\"kill zombie\", \"missed shot arrow\", \"drowned in lake\", \"fall from tree\", \"missed punch\", \"drowned in lake\", \"kill zombie\", \"missed punch\"]"}
{"task_id": "valid/108", "completion": "\n    return name.replace(\" \", \"-\").lower()\n\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(c) > 127 for c in text)\n\n"}
{"task_id": "valid/110", "completion": "\n    punctuations = ''''''\n    for char in string:\n        if char not in punctuations:\n            punctuations = punctuations + char\n    return punctuations\n"}
{"task_id": "valid/111", "completion": "\n    try:\n        return [num ** exp for num in num_list]\n    except TypeError:\n        print(\"Error: Both inputs should be of type list and int respectively.\")\n\n"}
{"task_id": "valid/112", "completion": "\n    for row in grid:\n        print(min(row))\n\n"}
{"task_id": "valid/113", "completion": "\n    if n <= 0:\n        return\n    else:\n        if current_num % 2 == 0:\n            print(\"Thank you\")\n            print_thank_you(n-1, current_num+1)\n        else:\n            print_thank_you(n, current_num+1)\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    max_count = 0\n    for i in lst:\n        if i == element:\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    return max_count\n\n"}
{"task_id": "valid/115", "completion": "\n    digits = []\n    while num:\n        digits.append(num % base)\n        num //= base\n    return len(set(digits)) == 1\n\n"}
{"task_id": "valid/116", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    if len(s) == 0:\n        return s\n    elif s[0] in vowels:\n        return remove_vowels_recursive(s[1:])\n    else:\n        return s[0] + remove_vowels_recursive(s[1:])\n\n"}
{"task_id": "valid/117", "completion": "\n    help_message = \"Usage: my_app [OPTIONS]\\n\\nOptions:\\n\"\n    for option in options:\n        help_message += f\"  {option[0]}\\t{option[1]}\\n\"\n    return help_message\n\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n\n"}
{"task_id": "valid/119", "completion": "\n    count_val = Val.count(Val)\n    return count_val\n\n\nVal = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    for letter in s:\n        if letter not in vowels:\n            return False\n    return True\n\n"}
{"task_id": "valid/122", "completion": "\n    return sequence.count(subsequence)\n\nsequence_of_characters = \"Please find the number of occurrences of this string\"\nspecific_subsequence = \"string\"\n"}
{"task_id": "valid/123", "completion": "\n    if t == 0:\n        return \"Error: Division by zero\"\n    else:\n        quotient = 0\n        while h >= t:\n            h -= t\n            quotient += 1\n        return quotient\n"}
{"task_id": "valid/124", "completion": "\n    return sum(i for i in input_list if i % 2 != 0)\n\n"}
{"task_id": "valid/125", "completion": "\n    vowels = \"aeiouAEIOU\"\n    consonants = 0\n    for char in string:\n        if char.isalpha() and char not in vowels:\n            consonants += 1\n    return consonants\n\n"}
{"task_id": "valid/126", "completion": "\n    # Initialize the number of electrons to 0\n    num_electrons = 0\n\n    # Calculate the number of electrons based on the grid energies\n    for energy in grid_energies:\n        num_electrons += energy / 1000\n\n    # Adjust the number of electrons based on the doping level\n    num_electrons *= (1 + ados * dope)\n\n    # Create a list to hold the distribution of electrons\n    electron_distribution = [0] * dos_grid_size\n\n    # Distribute the electrons evenly across the grid\n    for i in range(int(num_electrons)):\n        electron_distribution[i % dos_grid_size] += 1\n\n    return electron_distribution\n\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    result = []\n    left, right = 0, len(arr) - 1\n    flag = True\n\n    while left <= right:\n        if flag:\n            result.append(arr[left])\n            left += 1\n        else:\n            result.append(arr[right])\n            right -= 1\n        flag = not flag\n\n    return result\n\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n\n\ncolor_list = [(\"red\", \"#FF0000\"), (\"green\", \"#00FF00\"), (\"blue\", \"#0000FF\")]"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    parentheses = {'(': ')', '[': ']', '{': '}'}\n    for char in string:\n        if char in parentheses:\n            stack.append(char)\n        elif len(stack) == 0 or parentheses[stack.pop()] != char:\n            return False\n    return len(stack) == 0\n\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for element in lst:\n        if element not in unique_elements:\n            unique_elements.append(element)\n        if len(unique_elements) == 3:\n            break\n    return unique_elements\n"}
{"task_id": "valid/132", "completion": "\n    fruit_list.sort()\n    return ', '.join(fruit_list)\n"}
{"task_id": "valid/133", "completion": "\n    sublists = [[]]\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            sublists.append(lst[i:j])\n    return sublists\n\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d+\\.\\d+'\n    return bool(re.search(pattern, string))\n\n"}
{"task_id": "valid/135", "completion": "\n    from django.db import migrations\n\n    class Migration(migrations.Migration):\n\n        dependencies = [\n            (app_name, '0001_initial'),\n        ]\n\n        operations = [\n            migrations.AlterField(\n                model_name=model_name,\n                name=field_name,\n                field=models.CharField(max_length=200),\n            ),\n        ]\n\n    return Migration\n\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = set(list1).intersection(list2)\n    return sum(common_elements)\n\n"}
{"task_id": "valid/137", "completion": "\n    # calculate the length of the dataset\n    dataset_length = len(df)\n\n    # calculate the forecast period\n    forecast_period = math.ceil(0.01 * dataset_length)\n\n    return forecast_period\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n\n"}
{"task_id": "valid/139", "completion": "\n    start_index = (page_number - 1) * items_per_page\n    end_index = page_number * items_per_page\n    return items[start_index:end_index]\n\n\nitems = [\"item1\", \"item2\", \"item3\", \"item4\", \"item5\", \"item6\", \"item7\", \"item8\", \"item9\", \"item10\"]\nitems_per_page = 3\npage_number = 2\n"}
{"task_id": "valid/140", "completion": "\n    n_str = n_str[::-1]\n    carry = 0\n    result = []\n    for i in range(len(n_str)):\n        temp = int(n_str[i]) * 2 + carry\n        if temp >= 10:\n            carry = 1\n            temp -= 10\n        else:\n            carry = 0\n        result.append(str(temp))\n    if carry != 0:\n        result.append(str(carry))\n    return ''.join(result[::-1])\n\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        \"home\": (0.0, 0.0, 0.0),\n        \"preset1\": (1.0, 1.0, 1.0),\n        \"preset2\": (2.0, 2.0, 2.0),\n        \"preset3\": (3.0, 3.0, 3.0),\n        \"preset4\": (4.0, 4.0, 4.0),\n        \"preset5\": (5.0, 5.0, 5.0)\n    }\n\n    if preset_name in presets:\n        return presets[preset_name]\n    else:\n        return None\n\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = set(list1).intersection(list2)\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product\n\n"}
{"task_id": "valid/143", "completion": "\n\nThe function quiz_system_behavior takes two parameters: allow_multiple_answer and zoom_level. It checks the value of these parameters and prints out a message depending on their values.\n\nIn the first call, allow_multiple_answer is True and zoom_level is \"auto\". So, it prints \"Quiz allows multiple answers\" and \"Zoom level is set to auto\".\n\nIn the second call, allow_multiple_answer is False and zoom_level is \"manual\". So, it prints \"Quiz does not allow multiple answers\" and \"Zoom level is set to manual\".\n\nIn the third call, allow_multiple_answer is True and zoom_level is \"custom\". So, it prints \"Quiz allows multiple answers\" and \"Zoom level is set to custom\".\n\"\"\"\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    return ''.join([char for char in sentence if char not in vowels])\n\n"}
{"task_id": "valid/146", "completion": "\n    merged = {}\n\n    # Merge objects\n    for obj in (a, b):\n        for key in obj:\n            if not key.isalpha():\n                continue\n            if key in merged:\n                if isinstance(obj[key], dict) and isinstance(merged[key], dict):\n                    merged[key] = merge_objects(merged[key], obj[key])\n                else:\n                    merged[key] = obj[key]\n            else:\n                merged[key] = obj[key]\n\n    # Sort and return\n    return dict(sorted(merged.items()))\n\n\na = {'a': 1, 'b': 2, 'nested': {'x': 5, 'y': 6}}\nb = {'c': 3, 'd': 4, 'nested': {'y': 7, 'z': 8}}\n"}
{"task_id": "valid/147", "completion": "\n    try:\n        return max(d.values())\n    except ValueError:\n        return \"Empty dictionary\"\n    except TypeError:\n        return \"Not a dictionary\"\n\n"}
{"task_id": "valid/148", "completion": "\n    grades = dict[key]\n    avg = sum(grades) / len(grades)\n    return avg\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == \"\":\n        return None\n    else:\n        return string.replace('e', '*')\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n\n"}
{"task_id": "valid/151", "completion": "\n    return gcd(x, 10) == 1 and x % 5 == 0 and sqrt(x) % 1 == 0\n\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n"}
