{"task_id": "valid/0", "completion": "\n    # Define categories\n    categories = {\n        'politics': ['government', 'election', 'policy', 'legislative'],\n        'sports': ['football', 'basketball', 'tennis', 'golf'],\n        'entertainment': ['movie', 'music', 'celebrity', 'television'],\n        'technology': ['computer', 'software', 'hardware', 'internet'],\n        'business': ['finance', 'stock', 'market', 'businessman'],\n        'health': ['doctor', 'medicine', 'healthcare', 'fitness'],\n        'education': ['school', 'university', 'student', 'teacher'],\n        'science': ['astronomy', 'biology', 'physics', 'chemistry'],\n        'travel': ['vacation', 'destination', 'tourism', 'transportation'],\n        'food': ['recipe', 'restaurant', 'cuisine', 'diet'],\n        'lifestyle': ['fashion', 'beauty', 'hobby', 'travel'],\n        'other': ['news', 'weather', 'sports', 'entertainment']\n    }\n\n    # Initialize category scores\n    category_scores = {category: 0 for category in categories}\n\n    # Tokenize text\n    tokens = text.split()\n\n    # Calculate category scores\n    for token in tokens:\n        for category, keywords in categories.items():\n            if token.lower() in keywords:\n                category_scores[category] += 1\n\n    # Determine the category with the highest score\n    max_score = max(category_scores.values())\n    for category, score in category_scores.items():\n        if score == max_score:\n            return category\n\n    # If no category has a score, return 'other'\n    return 'other'\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n"}
{"task_id": "valid/3", "completion": "\n    instruments = ['piano', 'guitar', 'drums', 'flute', 'violin', 'cello', 'trumpet', 'saxophone', 'bassoon', 'clarinet']\n    sorted_instruments = sorted(instruments, reverse=True)\n    return sorted_instruments\n"}
{"task_id": "valid/4", "completion": "\n    try:\n        data = json.loads(json_string)\n        if isinstance(data, list):\n            return data\n        else:\n            raise ValueError(\"Input is not a valid JSON string.\")\n    except json.JSONDecodeError:\n        raise ValueError(\"Input is not a valid JSON string.\")\n\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n    if n % 5 == 0:\n        return sum(int(digit) for digit in str(n)) % 3 == 0\n    return False\n"}
{"task_id": "valid/6", "completion": "\n    return pow(base, n, 2**32)\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        json_obj = json.loads(json_str)\n        pprint.pprint(json_obj)\n    except json.JSONDecodeError as e:\n        raise ValueError(\"Invalid JSON string\") from e\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace(\"{{\" + key + \"}}\", str(value))\n    return template\n"}
{"task_id": "valid/10", "completion": "\n    # Create a set to store unique characters\n    unique_chars = set()\n\n    # Iterate over each character in the string\n    for char in string:\n        # If the character is already in the set, it is not unique\n        if char in unique_chars:\n            return False\n        # Otherwise, add the character to the set\n        unique_chars.add(char)\n\n    # If we reach this point, all characters are unique\n    return True\n\n"}
{"task_id": "valid/11", "completion": "\n    date = datetime.strptime(date_string, '%Y-%m-%d')\n    new_date = date + timedelta(days=days)\n    return new_date.strftime('%Y-%m-%d')\n\n"}
{"task_id": "valid/12", "completion": "\n    return text.strip()\n"}
{"task_id": "valid/13", "completion": "\n    # Convert text to lowercase\n    text = text.lower()\n    \n    # Remove punctuation\n    text = text.translate(str.maketrans('', '', string.punctuation))\n    \n    # Remove digits\n    text = text.translate(str.maketrans('', '', string.digits))\n    \n    # Remove extra spaces\n    text = ' '.join(text.split())\n    \n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    if word1 in text or word2 in text:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "valid/15", "completion": "\n    return [sum(x) for x in array]\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    for line in comment.splitlines():\n        line = line.strip()\n        if line.startswith(\"vim:\"):\n            for setting in line.split()[1:]:\n                key, value = setting.split(\"=\")\n                settings[key] = int(value)\n    return settings\n\n"}
{"task_id": "valid/17", "completion": "\n    # Tokenize the sentence into words\n    words = sentence.split()\n\n    # Return the list of words\n    return words\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)"}
{"task_id": "valid/19", "completion": "\n    list1 = list1[::-1]\n    list2 = list2[::-1]\n    combined_list = list1 + list2\n    combined_list.sort()\n    return combined_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n"}
{"task_id": "valid/21", "completion": "\n    return z**2\n"}
{"task_id": "valid/22", "completion": "\n    if \"name\" in dictionary:\n        return dictionary[\"name\"]\n    for value in dictionary.values():\n        if isinstance(value, dict):\n            return get_nested_dictionary_value(value)\n    return None\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {k: struct_to_dict(v) for k, v in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(v) for v in struct]\n    else:\n        return struct\n"}
{"task_id": "valid/24", "completion": "\n    # Convert the number to string\n    num_str = str(num)\n    \n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        return num\n    \n    # Find the closest palindrome smaller than the given number\n    smaller_palindrome = num - 1\n    while str(smaller_palindrome) != str(smaller_palindrome)[::-1]:\n        smaller_palindrome -= 1\n    \n    # Find the closest palindrome larger than the given number\n    larger_palindrome = num + 1\n    while str(larger_palindrome) != str(larger_palindrome)[::-1]:\n        larger_palindrome += 1\n    \n    # Return the closest palindrome\n    if abs(num - smaller_palindrome) <= abs(num - larger_palindrome):\n        return smaller_palindrome\n    else:\n        return larger_palindrome\n"}
{"task_id": "valid/25", "completion": "\n    return f\"import math\\nprint(math.sqrt({num}))\"\n\n"}
{"task_id": "valid/26", "completion": "\n    rows = len(matrix)\n    columns = len(matrix[0])\n    diagonal_sum = sum(matrix[i][i] for i in range(min(rows, columns)))\n    is_square = rows == columns\n    return rows, columns, diagonal_sum, is_square\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c for c in s if c.isalpha()).lower()\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        try:\n            json_data = json.loads(json_data)\n        except json.JSONDecodeError:\n            return False\n    if isinstance(json_data, dict):\n        if key not in json_data or json_data[key] != value:\n            return True\n    return False\n\nThe function `validate_key_value` is designed to check if a specific key-value pair does not exist in a JSON dictionary. It can handle JSON data that is either provided as a string or a Python dictionary. The function first checks if the input is a string and attempts to parse it as JSON. If the parsing fails, it returns False. If the input is already a dictionary, it checks if the key is not present in the dictionary or if the value associated with the key is not equal to the provided value. If either of these conditions is true, the function returns True, indicating that the key-value pair does not exist in the JSON dictionary. Otherwise, it returns False.\n"}
{"task_id": "valid/31", "completion": "\n    table = []\n    for i, button in enumerate(buttons):\n        row = i // num_columns\n        col = i % num_columns\n        if row >= len(table):\n            table.append([])\n        table[row].append(button)\n    return table\n\n"}
{"task_id": "valid/32", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for i in range(len(alphabet) - 1):\n        if alphabet[i] not in s or alphabet[i+1] not in s:\n            return False\n        if s.index(alphabet[i]) > s.index(alphabet[i+1]):\n            return False\n    return True\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "valid/34", "completion": "\n    import re\n    return sum(int(num) for num in re.findall(r'\\d+', ts))\n\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n"}
{"task_id": "valid/36", "completion": "\n    if not all(isinstance(x, (int, float)) for x in arr):\n        raise ValueError(\"Array contains non-numerical values\")\n    return sum(arr)\n"}
{"task_id": "valid/37", "completion": "\n    neighborhoods = []\n    for neighborhood in json_data:\n        neighborhoods.append(neighborhood[\"name\"])\n    neighborhoods.sort()\n    return neighborhoods\n\n"}
{"task_id": "valid/38", "completion": "\n    # Sort the array\n    arr.sort()\n\n    # Initialize result\n    res = float('inf')\n\n    # Initialize left and right\n    l = 0\n    r = n - 1\n\n    # While there are elements between l and r\n    while l < r:\n        # Calculate current sum\n        current_sum = arr[l] + arr[r]\n\n        # Update result if current sum is smaller than result\n        res = min(res, abs(current_sum))\n\n        # If current sum is 0, return 0\n        if current_sum == 0:\n            return 0\n\n        # If current sum is negative, increment l\n        if current_sum < 0:\n            l += 1\n\n        # If current sum is positive, decrement r\n        else:\n            r -= 1\n\n    return res\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for char in p:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "valid/40", "completion": "\n    results = {}\n    total_votes = 0\n\n    for vote in votes:\n        candidate_name, number_of_votes = vote\n        if candidate_name in results:\n            results[candidate_name] += number_of_votes\n        else:\n            results[candidate_name] = number_of_votes\n        total_votes += number_of_votes\n\n    for candidate_name, number_of_votes in results.items():\n        percentage = (number_of_votes / total_votes) * 100\n        print(f\"{candidate_name}: {percentage:.2f}%\")\n\n    return results\n\nvotes = [(\"John\", 500), (\"Jane\", 300), (\"John\", 200)]"}
{"task_id": "valid/41", "completion": "\n    try:\n        # Check if the date string is in the format DD-MM-YYYY\n        if len(date_string.split('-')) == 3:\n            day, month, year = date_string.split('-')\n            # Check if the day, month, and year are integers\n            if day.isdigit() and month.isdigit() and year.isdigit():\n                # Check if the day, month, and year are within valid ranges\n                if 1 <= int(day) <= 31 and 1 <= int(month) <= 12 and 1900 <= int(year) <= 2022:\n                    # Check if the month is valid for the given day\n                    if (month in ['04', '06', '09', '11'] and int(day) > 30) or (month == '02' and int(day) > 29):\n                        raise ValueError('Invalid date')\n                    # Convert the month to its written form\n                    month_dict = {\n                        '01': 'January',\n                        '02': 'February',\n                        '03': 'March',\n                        '04': 'April',\n                        '05': 'May',\n                        '06': 'June',\n                        '07': 'July',\n                        '08': 'August',\n                        '09': 'September',\n                        '10': 'October',\n                        '11': 'November',\n                        '12': 'December'\n                    }\n                    month_written = month_dict[month]\n                    # Return the date in the standardized format\n                    return f'{month_written} {day}, {year}'\n                else:\n                    raise ValueError('Invalid date')\n            else:\n                raise ValueError('Invalid date')\n        # Check if the date string is in the format DD-MMM-YYYY\n        elif len(date_string.split('-')) == 3:\n            day, month, year = date_string.split('-')\n            # Check if the day, month, and year are integers\n            if day.isdigit() and month.isalpha() and year.isdigit():\n                # Check if the day, month, and year are within valid ranges\n                if 1 <= int(day) <= 31 and 1900 <= int(year) <= 2022:\n                    # Check if the month is valid for the given day\n                    if (month in ['Apr', 'Jun', 'Sep', 'Nov'] and int(day) > 30) or (month == 'Feb' and int(day) > 29):\n                        raise ValueError('Invalid date')\n                    # Convert the month to its written form\n"}
{"task_id": "valid/42", "completion": "\n    allowed_extensions = {\n        'image': ['.jpg', '.jpeg', '.png', '.gif'],\n        'document': ['.pdf', '.doc', '.docx', '.txt'],\n        'video': ['.mp4', '.avi', '.mov'],\n        'audio': ['.mp3', '.wav', '.aac']\n    }\n    if allowed_type not in allowed_extensions:\n        return False\n    new_extension = os.path.splitext(newname)[1]\n    if new_extension in allowed_extensions[allowed_type]:\n        return True\n    else:\n        return False"}
{"task_id": "valid/43", "completion": "\n    result = []\n    for item in lst:\n        if isinstance(item, tuple):\n            result.append(remove_uneven(item))\n        elif isinstance(item, int) or isinstance(item, float):\n            if item % 2 == 0:\n                result.append(item)\n        elif isinstance(item, str):\n            if item.isdigit() and int(item) % 2 == 0:\n                result.append(item)\n    return tuple(result)\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n\n"}
{"task_id": "valid/45", "completion": "\n    count = 0\n    for char in string:\n        if char == specific_character:\n            count += 1\n    return count\n"}
{"task_id": "valid/46", "completion": "\n    # histogram_data = add_accuracy_to_histogram(histogram_data, generation, accs)\n    pass\n"}
{"task_id": "valid/47", "completion": "\n    if len(string) != 5:\n        return False\n    if not string.isalnum():\n        return False\n    return True\n\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        if classifier.startswith(\"Programming Language ::\"):\n            language = classifier.split(\" :: \")[2]\n            unique_languages.add(language)\n    return len(unique_languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    # Create an empty dictionary to store the count of each number\n    count_dict = {}\n\n    # Iterate through each element in the array\n    for row in arr:\n        for num in row:\n            # If the number is already in the dictionary, increment its count\n            if num in count_dict:\n                count_dict[num] += 1\n            # If the number is not in the dictionary, add it with a count of 1\n            else:\n                count_dict[num] = 1\n\n    # Create an empty list to store the count instances of each number\n    count_list = []\n\n    # Iterate through the dictionary and add each count to the list\n    for num, count in count_dict.items():\n        count_list.append(count)\n\n    # Return the list of count instances\n    return count_list\n"}
{"task_id": "valid/50", "completion": "\n    from django.urls import path\n    from . import views\n\n    urlpatterns = [\n        path('videos/', views.video_list, name='video_list'),\n        path('videos/<int:video_id>/', views.video_detail, name='video_detail'),\n    ]\n\n    # Match the URL to the view\n    for pattern in urlpatterns:\n        if re.match(pattern.regex.pattern, url):\n            return pattern.name\n    return None\n\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n"}
{"task_id": "valid/52", "completion": "\n    string = \"Hello\"\n    sentence = \" world!\"\n    return string + sentence\n\n"}
{"task_id": "valid/53", "completion": "\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings.add(s[i:j])\n    return substrings\n"}
{"task_id": "valid/54", "completion": "\n    price_sum = 0\n    for list_of_dicts in list_of_dicts:\n        for dict in list_of_dicts:\n            for key in dict.keys():\n                if key.startswith(\"price_\"):\n                    price_sum += dict[key]\n    return price_sum\n"}
{"task_id": "valid/55", "completion": "\n    intersection = []\n    for i in list1:\n        if i in list2:\n            intersection.append(i)\n            list2.remove(i)\n    return intersection\n"}
{"task_id": "valid/56", "completion": "\n    if request_method == \"GET\":\n        return api_advisor_view\n    elif request_method == \"POST\":\n        return api_advisor_view_post\n    else:\n        return None\n"}
{"task_id": "valid/57", "completion": "\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be positive integers.\")\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Both a and b must be positive integers.\")\n    if b == 0:\n        return a\n    else:\n        return gcd_recursive(b, a % b)\n"}
{"task_id": "valid/58", "completion": "\n    categorized_files = {\n        'global': [],\n        'environment': [],\n        'service': [],\n        'application': []\n    }\n\n    for file_path in file_paths:\n        # Extract the directory path and file name\n        directory, file_name = os.path.split(file_path)\n\n        # Determine the category based on the directory path\n        if 'global' in directory:\n            categorized_files['global'].append(file_name)\n        elif 'environment' in directory:\n            categorized_files['environment'].append(file_name)\n        elif 'service' in directory:\n            categorized_files['service'].append(file_name)\n        elif 'application' in directory:\n            categorized_files['application'].append(file_name)\n\n    return categorized_files\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n\n"}
{"task_id": "valid/61", "completion": "\n    return timeEnd - timeStart\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return -1\n\n    mid = (start + end) // 2\n\n    if array[mid] == target:\n        return mid\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    colors = ['WHITE', 'RED', 'GREEN', 'BLUE']\n    current_index = colors.index(color)\n    next_index = (current_index + 1) % len(colors)\n    return colors[next_index]\n"}
{"task_id": "valid/64", "completion": "\n    for i in range(len(list)):\n        list[i] += 1\n    return list\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end + 1):\n        if is_perfect_square(i):\n            return True\n    return False\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        for char in word:\n            if char.isalpha() and char.lower() == target.lower():\n                return char\n    return None\n"}
{"task_id": "valid/67", "completion": "\n    return sentence.split()\n\n"}
{"task_id": "valid/68", "completion": "\n    print(\"The keys in the given dictionary are:\")\n    for key in dict:\n        print(key)\n"}
{"task_id": "valid/69", "completion": "\n    name = \"John\"\n    age = 30\n    phrase = \" is a great person.\"\n    result = f\"{name}{phrase}\"\n    return result\n\n"}
{"task_id": "valid/70", "completion": "\n    def is_special_char(c):\n        return not (c.isalnum() or c.isspace())\n\n    def process_strings(strings):\n        result = []\n        for string in strings:\n            if all(not is_special_char(c) for c in string):\n                result.append(string.capitalize())\n        return result\n\n    return process_strings\n\n"}
{"task_id": "valid/71", "completion": "\n    for i in range(len(string)):\n        if string[i] == char:\n            return i\n    return -1\n"}
{"task_id": "valid/72", "completion": "\n    bold_tags = []\n    start_tag = \"<b>\"\n    end_tag = \"</b>\"\n    start_index = 0\n    while True:\n        start_index = html_code.find(start_tag, start_index)\n        if start_index == -1:\n            break\n        end_index = html_code.find(end_tag, start_index)\n        if end_index == -1:\n            break\n        bold_tags.append(html_code[start_index + len(start_tag):end_index])\n        start_index = end_index + len(end_tag)\n    return bold_tags"}
{"task_id": "valid/73", "completion": "\n    # Define the items and their prices\n    items = {\n        \"Coke\": 1.00,\n        \"Pepsi\": 1.50,\n        \"Sprite\": 1.25,\n        \"Water\": 0.75\n    }\n    \n    # Check if the item exists and if the user has inserted enough money\n    if item not in items:\n        return \"Item not available\"\n    elif money_inserted < items[item]:\n        return \"Insufficient funds\"\n    \n    # Calculate the change to return to the user\n    change = money_inserted - items[item]\n    \n    # Update the stock of the item purchased\n    items[item] -= 1\n    \n    return f\"Here is your {item}. Your change is ${change:.2f}\"\n"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    unique_list = list(set(merged_list))\n    return unique_list\n"}
{"task_id": "valid/75", "completion": "\n    count = 0\n    for element in list:\n        if element == target:\n            count += 1\n    return count\n"}
{"task_id": "valid/76", "completion": "\n    return base64.b64encode(string.encode('utf-8')).decode('utf-8')\n\n"}
{"task_id": "valid/77", "completion": "\n    import matplotlib.pyplot as plt\n\n    x = [1, 2, 3, 0, 5, 0, 7, 8, 0]\n    plt.stem(x)\n    plt.show()\n\n    def non_zero_indices(vector):\n        return [i for i, value in enumerate(vector) if value != 0]\n\n    print(non_zero_indices(x))"}
{"task_id": "valid/78", "completion": "\n    # Assign a value to a variable\n    my_variable = 10\n\n    # Validate the value\n    if my_variable == 10:\n        print(\"The value is valid.\")\n    else:\n        print(\"The value is not valid.\")\n"}
{"task_id": "valid/79", "completion": "\n    letters = list(word)\n    random.shuffle(letters)\n    return ''.join(letters)\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, str):\n        return \"String\"\n    elif isinstance(element, int):\n        return \"Integer\"\n    elif isinstance(element, float):\n        return \"Float\"\n    elif isinstance(element, bool):\n        return \"Boolean\"\n    elif isinstance(element, list):\n        return \"List\"\n    elif isinstance(element, dict):\n        return \"Dictionary\"\n    elif isinstance(element, tuple):\n        return \"Tuple\"\n    elif isinstance(element, set):\n        return \"Set\"\n    elif isinstance(element, frozenset):\n        return \"Frozenset\"\n    elif isinstance(element, type(None)):\n        return \"None\"\n    else:\n        return \"Other\"\n"}
{"task_id": "valid/81", "completion": "\n    if len(arr) < 2:\n        return arr\n\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] == arr[i + 1]:\n            arr.pop(i)\n        else:\n            i += 1\n\n    return arr\n\n"}
{"task_id": "valid/82", "completion": "\n    # Remove all non-word characters (everything except numbers and letters)\n    text = re.sub(r\"[^\\w\\s]\", \"\", text)\n\n    # Replace all runs of whitespaces with no space\n    text = re.sub(r\"\\s+\", \" \", text)\n\n    # Replace digits with no space\n    text = re.sub(r\"\\d+\", \" \", text)\n\n    # Tokenize text\n    tokens = text.split()\n\n    return tokens\n\n"}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    if not divisible_numbers:\n        return \"No numbers divisible by both 3 and 7 found in the list.\"\n    average = sum(divisible_numbers) / len(divisible_numbers)\n    max_value = max(divisible_numbers)\n    min_value = min(divisible_numbers)\n    occurrences = {num: divisible_numbers.count(num) for num in set(divisible_numbers)}\n    return {\n        \"Average\": average,\n        \"Max Value\": max_value,\n        \"Min Value\": min_value,\n        \"Occurrences\": occurrences\n    }\nnumbers = [21, 42, 63, 84, 105, 126, 147, 168, 189, 210]\nresult = find_divisible_numbers(numbers)"}
{"task_id": "valid/84", "completion": "\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Create a dictionary to store word frequencies\n    word_freq = {}\n\n    # Count the frequency of each word\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n\n    # Find the word with the highest frequency\n    highest_freq = 0\n    highest_freq_word = \"\"\n    for word, freq in word_freq.items():\n        if freq > highest_freq:\n            highest_freq = freq\n            highest_freq_word = word\n\n    return highest_freq_word\n\n"}
{"task_id": "valid/85", "completion": "\n    e = 2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251664274274663919320030599218174135966290435729003342952605956307381323286279434907632338298807531952510190115738341879307021540891499348841675092447614606680822648001684774118537423454424155769572424949097985023530282316358969530342866545253429622620856953369380754166598633408747065458412848654992420846724656206986017411641799433673868264520028419979137965725705819420922836764751359220618974177854383387341520807575729164763502890734118547978469408104818473128478606660438038387502572569835509257215353645094610931528818086548136227713020934786394952740195776799209555066345407372873761867571189344907701683644856269306958104808935999798046457460713393896106451439512678491550498085682683887361681588963408605247095"}
{"task_id": "valid/86", "completion": "\n    total = 0\n    for num in numbers:\n        total += num\n    average = total / len(numbers)\n    return average, total\n\nnumbers = [1, 2, 3, 4, 5]\naverage, total = getAverageAndSum(numbers)"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series is empty.\")\n    if not all(isinstance(x, (int, float)) for x in time_series):\n        raise ValueError(\"Time series contains non-numerical values.\")\n    min_value = min(time_series)\n    max_value = max(time_series)\n    return min_value, max_value\ntime_series = [1, 2, 3, 4, 5]\nmin_value, max_value = find_min_max_values(time_series)"}
{"task_id": "valid/88", "completion": "\n    relatedArticles = {}\n    for entry in encyclopedia:\n        relatedArticles[entry] = len(encyclopedia[entry])\n    return relatedArticles\n"}
{"task_id": "valid/89", "completion": "\n    max_value = max(lst)\n    return lst.index(max_value)\n"}
{"task_id": "valid/90", "completion": "\n    return not set(list1).isdisjoint(list2)"}
{"task_id": "valid/91", "completion": "\n    root = Element('data')\n    for key, value in dictionary.items():\n        child = Element(key)\n        child.text = str(value)\n        root.append(child)\n    return tostring(root, encoding='utf-8').decode('utf-8')\n\n"}
{"task_id": "valid/92", "completion": "\n    if not matrix or not matrix[0]:\n        return False\n\n    m, n = len(matrix), len(matrix[0])\n    left, right = 0, m * n - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        mid_value = matrix[mid // n][mid % n]\n\n        if mid_value == target:\n            return True\n        elif mid_value < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False\n"}
{"task_id": "valid/93", "completion": "\n    total = 0\n    count = 0\n    for i in lst:\n        if i & 1:\n            total += i\n            count += 1\n    if count == 0:\n        return 0\n    else:\n        return total / count\n"}
{"task_id": "valid/94", "completion": "\n    if n > len(lst) or n < 1:\n        return None\n    lst.sort(reverse=True)\n    return lst[n-1]\n\nlst = [9, 4, 7, 2, 1, 5]\nn = 3"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "valid/96", "completion": "\n    return set_a.symmetric_difference(set_b)\n"}
{"task_id": "valid/97", "completion": "\n\n    **Features:**\n    - Manage and play music on Discord servers\n    - Provide information about the bot's features\n    - Offer a web app for managing personal playlists and server settings\n    - Categorize commands and provide help information for each command\n\n    **Web App:**\n    - Personal playlists: Create, edit, and delete personal playlists\n    - Server settings: Manage server-specific settings, such as volume and repeat mode\n    - User authentication: Secure access to personal playlists and server settings\n\n    **Command Categories:**\n    - Music: Play, pause, stop, skip, and queue songs\n    - Playlist: Create, edit, and delete playlists\n    - Server: Manage server-specific settings\n    - Help: Get information about available commands and their usage\n\n    **Help Information:**\n    - Each command has a brief description and usage instructions\n    - Use the `help` command followed by the command name to get more information about a specific command\n\n    **Mapping:**\n    - {mapping}\n\n    **Note:**\n    - This is a placeholder description and may be updated in the future.\n    \"\"\"\n    return description\n\n"}
{"task_id": "valid/98", "completion": "\n    if n < 0:\n        return dec_to_ternary(-n)\n    else:\n        return int_to_ternary(n)\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(os.path.splitext(file_name)[1][1:] for file_name in file_names)"}
{"task_id": "valid/100", "completion": "\n    if age < 0:\n        return \"Invalid age\"\n    elif age < 13:\n        return \"Child\"\n    elif age < 20:\n        return \"Teenager\"\n    elif age < 40:\n        return \"Young Adult\"\n    elif age < 65:\n        return \"Adult\"\n    else:\n        return \"Senior\""}
{"task_id": "valid/101", "completion": "\n    if numerical_grade >= 90:\n        letter_grade = \"A\"\n        gpa = 4.0\n    elif numerical_grade >= 80:\n        letter_grade = \"B\"\n        gpa = 3.0\n    elif numerical_grade >= 70:\n        letter_grade = \"C\"\n        gpa = 2.0\n    elif numerical_grade >= 60:\n        letter_grade = \"D\"\n        gpa = 1.0\n    else:\n        letter_grade = \"F\"\n        gpa = 0.0\n    return letter_grade, gpa\n"}
{"task_id": "valid/102", "completion": "\n    # Define the function\n    def total_price(listing):\n        # Initialize the total price\n        total = 0\n        # Loop through the listing\n        for item in listing:\n            # Add the price of the item to the total\n            total += item['price']\n        # Return the total price\n        return total\n\n    # Return the function\n    return total_price\n\n"}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    result = {}\n    for palindrome in palindrome_tuples:\n        count = sum(1 for char in palindrome if char in vowels)\n        result[palindrome] = count\n    return result\n"}
{"task_id": "valid/104", "completion": "\n    # Initialize an empty string to store the modified string\n    modified_string = \"\"\n\n    # Iterate over each character in the input string\n    for char in s:\n        # Check if the character is a vowel\n        if char.lower() in \"aeiou\":\n            # If the character is a vowel, add it to the modified string\n            modified_string += char\n        # Check if the character is a consonant\n        elif char.lower() in \"bcdfghjklmnpqrstvwxyz\":\n            # If the character is a consonant, add it to the modified string\n            modified_string += char\n        # Check if the character is a space\n        elif char == \" \":\n            # If the character is a space, add it to the modified string\n            modified_string += char\n        # Check if the character is a punctuation mark\n        elif char in string.punctuation:\n            # If the character is a punctuation mark, add it to the modified string\n            modified_string += char\n        # Check if the character is a number\n        elif char.isdigit():\n            # If the character is a number, add it to the modified string\n            modified_string += char\n        # Check if the character is a special character\n        else:\n            # If the character is a special character, add it to the modified string\n            modified_string += char\n\n    # Return the modified string\n    return modified_string\n"}
{"task_id": "valid/105", "completion": "\n    # Create a set to store the numbers we've seen so far\n    seen = set()\n\n    # Iterate through the array\n    for num in arr:\n        # Check if the negative of the current number is in the set\n        if -num in seen:\n            # If it is, we've found a pair that sums to 0\n            return True\n        # Add the current number to the set\n        seen.add(num)\n\n    # If we've gone through the entire array without finding a pair that sums to 0, return False\n    return False\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n    for dependency in dependencies:\n        package_name, version_number = dependency\n        version_number = version_number.split('_')[1]  # Extract the date and time part\n        if package_name not in latest_versions or version_number > latest_versions[package_name]:\n            latest_versions[package_name] = version_number\n    return latest_versions\n"}
{"task_id": "valid/107", "completion": "\n    categorized_causes = {}\n    for cause in causes:\n        action, result = cause.split(' ')\n        if action not in categorized_causes:\n            categorized_causes[action] = []\n        categorized_causes[action].append(result)\n    return categorized_causes\n"}
{"task_id": "valid/108", "completion": "\n    code_name = name.replace(\" \", \"-\").lower()\n    return code_name\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(char) > 127 for char in text)\n\n"}
{"task_id": "valid/110", "completion": "\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    no_punct = \"\"\n    for char in string:\n        if char not in punctuations:\n            no_punct = no_punct + char\n    return no_punct\n"}
{"task_id": "valid/111", "completion": "\n\n    \"\"\"\n    result = []\n    for num in num_list:\n        try:\n            result.append(num ** exp)\n        except TypeError:\n            print(\"Error: Invalid input. Please enter a list of numbers and a valid exponent.\")\n            return None\n    return result\n    \"\"\"\n    \"\"\"\n    result = []\n    for num in num_list:\n        try:\n            result.append(num ** exp)\n        except TypeError:\n            print(\"Error: Invalid input. Please enter a list of numbers and a valid exponent.\")\n            return None\n        except ZeroDivisionError:\n            print(\"Error: Division by zero is not allowed.\")\n            return None\n    return result\n    \"\"\"\n    \"\"\"\n    result = []\n    for num in num_list:\n        try:\n            result.append(num ** exp)\n        except TypeError:\n            print(\"Error: Invalid input. Please enter a list of numbers and a valid exponent.\")\n            return None\n        except ZeroDivisionError:\n            print(\"Error: Division by zero is not allowed.\")\n            return None\n        except OverflowError:\n            print(\"Error: The result is too large.\")\n            return None\n    return result\n    \"\"\"\n    \"\"\"\n    result = []\n    for num in num_list:\n        try:\n            result.append(num ** exp)\n        except TypeError:\n            print(\"Error: Invalid input. Please enter a list of numbers and a valid exponent.\")\n            return None\n        except ZeroDivisionError:\n            print(\"Error: Division by zero is not allowed.\")\n            return None\n        except OverflowError:\n            print(\"Error: The result is too large.\")\n            return None\n        except MemoryError:\n            print(\"Error: Not enough memory to perform the operation.\")\n            return None\n    return result\n    \"\"\"\n    \"\"\"\n    result = []\n    for num in num_list:\n        try:\n            result.append(num ** exp)\n        except TypeError:\n            print(\"Error: Invalid input. Please enter a list of numbers and a valid exponent.\")\n            return None\n        except ZeroDivisionError:\n            print(\"Error: Division by zero is not allowed.\")\n            return None\n        except OverflowError:\n            print(\"Error: The result is too large.\")\n            return None\n        except MemoryError:\n            print(\"Error: Not enough memory to perform the operation.\")\n            return None\n        except Exception as e:\n            print(\"Error:\", str(e))\n            return None\n    return result\n"}
{"task_id": "valid/112", "completion": "\n    min_values = [min(row) for row in grid]\n    for value in min_values:\n        print(value)\n"}
{"task_id": "valid/113", "completion": "\n    if n < 1 or not isinstance(n, int):\n        print(\"Please enter a positive integer.\")\n        return\n    if current_num > n:\n        return\n    if current_num % 2 == 0:\n        print(\"Thank you\")\n    print_thank_you(n, current_num + 1)\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == element:\n            count += 1\n        else:\n            break\n    return count\n"}
{"task_id": "valid/115", "completion": "\n    num_str = str(num)\n    return all(digit == num_str[0] for digit in num_str)\n\n"}
{"task_id": "valid/116", "completion": "\n    if not s:\n        return s\n    if s[0] in 'aeiouAEIOU':\n        return remove_vowels_recursive(s[1:])\n    else:\n        return s[0] + remove_vowels_recursive(s[1:])\n"}
{"task_id": "valid/117", "completion": "\n    help_message = \"Usage: python app.py [options]\\n\\nOptions:\\n\"\n    for option, description in options:\n        help_message += f\"  {option}\\n    {description}\\n\"\n    return help_message\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n"}
{"task_id": "valid/119", "completion": "\n    count = 0\n    for i in Val:\n        if i == '1':\n            count += 1\n    return count\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in s:\n        if char.lower() not in vowels:\n            return False\n    return True\n"}
{"task_id": "valid/122", "completion": "\n    count = 0\n    subsequence_length = len(subsequence)\n    for i in range(len(sequence) - subsequence_length + 1):\n        if sequence[i:i+subsequence_length] == subsequence:\n            count += 1\n    return count\n"}
{"task_id": "valid/123", "completion": "\n    if t == 0:\n        raise ValueError(\"Divisor cannot be zero\")\n    if h == 0:\n        return 0\n    if h < 0:\n        h = -h\n        if t < 0:\n            t = -t\n        else:\n            return -dividir(h, t)\n    if t < 0:\n        t = -t\n        return -dividir(h, t)\n    return dividir_aux(h, t, 0)\n"}
{"task_id": "valid/124", "completion": "\n"}
{"task_id": "valid/125", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    count = 0\n    for char in string:\n        if char in consonants:\n            count += 1\n    return count"}
{"task_id": "valid/126", "completion": "\n    # calculate the number of electrons based on energy values\n    num_electrons = 0\n    for energy in grid_energies:\n        num_electrons += ados[energy]\n\n    # adjust the number of electrons based on doping levels\n    num_electrons += dope * dos_grid_size\n\n    return num_electrons\n\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    n = len(arr)\n    mid = n // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    left.reverse()\n    return left + right\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for i in range(min(3, len(lst))):\n        if lst[i] not in unique_elements:\n            unique_elements.append(lst[i])\n    return unique_elements\n"}
{"task_id": "valid/132", "completion": "\n    # Sort the fruit list in lexicographical order\n    sorted_fruit_list = sorted(fruit_list)\n\n    # Join the sorted list into a single string with each fruit name separated by a comma and a space\n    result = ', '.join(sorted_fruit_list)\n\n    return result\n"}
{"task_id": "valid/133", "completion": "\n    sublists = []\n    for i in range(len(lst) + 1):\n        for j in range(i + 1):\n            sublists.append(lst[j:i])\n    return sublists\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d+\\.\\d+'\n    return bool(re.search(pattern, string))\n\n"}
{"task_id": "valid/135", "completion": "\n    # Create a new migration file\n    migration_file = f\"{app_name}/migrations/{app_name}_0002_alter_committeemember_{field_name}.py\"\n    with open(migration_file, \"w\") as f:\n        f.write(f\"from django.db import migrations, models\\n\\n\")\n        f.write(f\"def alter_committeemember_{field_name}(apps, schema_editor):\\n\")\n        f.write(f\"    models = apps.get_model('{app_name}', 'CommitteeMember')\\n\")\n        f.write(f\"    schema_editor.alter_field(models, {field_name}, models.CharField(max_length=100))\\n\\n\")\n        f.write(f\"class Migration(migrations.Migration):\\n\")\n        f.write(f\"    dependencies = [('history', '0001_initial')]\\n\")\n        f.write(f\"    operations = [migrations.RunPython(alter_committeemember_{field_name})]\\n\")\n    return migration_file\n\nThe function `generate_migration_operation` is designed to create a Django migration file that alters a field in a model. However, the function is not complete and contains a few issues that need to be addressed:\n\n1. The function is missing the `app_name` and `model_name` parameters in the `alter_committeemember_{field_name}` function. These parameters are required to get the correct model.\n2. The `alter_committeemember_{field_name}` function is not defined within the `generate_migration_operation` function. It should be defined inside the function.\n3. The `alter_committeemember_{field_name}` function is not returning anything. It should return the `alter_committeemember_{field_name}` function.\n4. The `alter_committeemember_{field_name}` function is not using the `schema_editor` parameter. It should use the `schema_editor` to alter the field.\n5. The `alter_committeemember_{field_name}` function is not using the `field_name` parameter. It should use the `field_name` to alter the correct field.\n\nHere's the corrected version of the `generate_migration_operation` function:\n\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = set(list1) & set(list2)\n    return sum(common_elements)\n"}
{"task_id": "valid/137", "completion": "\n    forecast_period = math.ceil(len(df) * 0.01)\n    return forecast_period\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n\n"}
{"task_id": "valid/139", "completion": "\n    start_index = (page_number - 1) * items_per_page\n    end_index = start_index + items_per_page\n    return items[start_index:end_index]\n\n"}
{"task_id": "valid/140", "completion": "\n    n = list(map(int, n_str))\n    carry = 0\n    result = []\n    for i in range(len(n) - 1, -1, -1):\n        temp = n[i] * 2 + carry\n        result.append(temp % 10)\n        carry = temp // 10\n    if carry > 0:\n        result.append(carry)\n    return ''.join(map(str, result[::-1]))\n\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        \"home\": (0.0, 0.0, 0.0),\n        \"position1\": (0.1, 0.2, 0.3),\n        \"position2\": (0.4, 0.5, 0.6),\n        \"position3\": (0.7, 0.8, 0.9),\n    }\n\n    if preset_name in presets:\n        return presets[preset_name]\n    else:\n        return None\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = [x for x in list1 if x in list2]\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product\n"}
{"task_id": "valid/143", "completion": "\n    if allow_multiple_answer:\n        print(\"Multiple answers are allowed.\")\n    else:\n        print(\"Only one answer is allowed.\")\n    if zoom_level == \"high\":\n        print(\"Zoom level is high.\")\n    elif zoom_level == \"medium\":\n        print(\"Zoom level is medium.\")\n    elif zoom_level == \"low\":\n        print(\"Zoom level is low.\")\n    else:\n        print(\"Invalid zoom level.\")\n    return\n\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in sentence if char not in vowels])\n"}
{"task_id": "valid/146", "completion": "\n    def is_alphabetic(s):\n        return all(c.isalpha() for c in s)\n\n    def merge_dicts(a, b):\n        merged = {}\n        for k, v in a.items():\n            if isinstance(v, dict):\n                merged[k] = merge_dicts(v, b.get(k, {}))\n            else:\n                merged[k] = v\n        for k, v in b.items():\n            if k not in merged and isinstance(v, dict):\n                merged[k] = merge_dicts({}, v)\n            elif k not in merged:\n                merged[k] = v\n        return merged\n\n    def merge_objects(a, b):\n        merged = {}\n        for k, v in a.items():\n            if isinstance(v, dict):\n                merged[k] = merge_objects(v, b.get(k, {}))\n            else:\n                merged[k] = v\n        for k, v in b.items():\n            if k not in merged and isinstance(v, dict):\n                merged[k] = merge_objects({}, v)\n            elif k not in merged:\n                merged[k] = v\n        return merged\n\n    def merge_objects(a, b):\n        merged = {}\n        for k, v in a.items():\n            if isinstance(v, dict):\n                merged[k] = merge_objects(v, b.get(k, {}))\n            else:\n                merged[k] = v\n        for k, v in b.items():\n            if k not in merged and isinstance(v, dict):\n                merged[k] = merge_objects({}, v)\n            elif k not in merged:\n                merged[k] = v\n        return merged\n\n    def merge_objects(a, b):\n        merged = {}\n        for k, v in a.items():\n            if isinstance(v, dict):\n                merged[k] = merge_objects(v, b.get(k, {}))\n            else:\n                merged[k] = v\n        for k, v in b.items():\n            if k not in merged and isinstance(v, dict):\n                merged[k] = merge_objects({}, v)\n            elif k not in merged:\n                merged[k] = v\n        return merged\n\n    def merge_objects(a, b):\n        merged = {}\n        for k, v in a.items():\n            if isinstance(v, dict):\n                merged[k] = merge_objects(v, b.get(k, {}))\n            else:\n                merged[k] = v\n        for k, v in b.items():\n            if k not in merged and isinstance(v, dict):\n                merged[k] = merge_objects({}, v)\n"}
{"task_id": "valid/147", "completion": "\n    try:\n        max_value = max(d.values())\n        return max_value\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None\n"}
{"task_id": "valid/148", "completion": "\n    return sum(dict[key]) / len(dict[key])\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == \"\":\n        return None\n    else:\n        return string.replace('e', '')\n\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n\n"}
{"task_id": "valid/151", "completion": "\n    return x == 0 or x == 1 or x == 2 or x == 3 or x == 4 or x == 5 or x == 6 or x == 7 or x == 8 or x == 9 or x == 10 or x == 11 or x == 12 or x == 13 or x == 14 or x == 15 or x == 16 or x == 17 or x == 18 or x == 19 or x == 20 or x == 21 or x == 22 or x == 23 or x == 24 or x == 25 or x == 26 or x == 27 or x == 28 or x == 29 or x == 30 or x == 31 or x == 32 or x == 33 or x == 34 or x == 35 or x == 36 or x == 37 or x == 38 or x == 39 or x == 40 or x == 41 or x == 42 or x == 43 or x == 44 or x == 45 or x == 46 or x == 47 or x == 48 or x == 49 or x == 50 or x == 51 or x == 52 or x == 53 or x == 54 or x == 55 or x == 56 or x == 57 or x == 58 or x == 59 or x == 60 or x == 61 or x == 62 or x == 63 or x == 64 or x == 65 or x == 66 or x == 67 or x == 68 or x == 69 or x == 70 or x == 71 or x == 72 or x == 73 or x == 74 or x == 75 or x == 76 or x == 77 or x == 78 or x == 79 or x == 80 or x == 81 or x == 82 or x == 83 or x == 84 or x == 85 or x == 86 or x == 87 or x == 88 or x == 89 or x == 90 or x == 91 or x == 92 or x == 93 or x == 94 or x == 95 or x == 96 or x == 97 or x == 98 or x == 99 or x == 100 or x == 101 or"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n\n"}
