{"task_id": "valid/0", "completion": "\n    # Define categories\n    categories = {\n        \"sarcastic\": [\"sarcastic\", \"sarcasticly\", \"sarcastically\"],\n        \"neutral\": [\"neutral\", \"neutrally\", \"neutrally\"],\n        \"happy\": [\"happy\", \"happily\", \"happily\"],\n        \"angry\": [\"angry\", \"angrily\", \"angrily\"],\n    }\n\n    # Initialize score\n    score = 0\n\n    # Check each category\n    for category, words in categories.items():\n        for word in words:\n            if word in text.lower():\n                score += 1\n\n    # Classify text based on score\n    if score > 0:\n        if score == len(categories):\n            return \"perfectly balanced\"\n        elif score == len(categories) * 2:\n            return \"perfectly happy\"\n        elif score == len(categories) * 3:\n            return \"perfectly sarcastic\"\n        elif score == len(categories) * 4:\n            return \"perfectly angry\"\n        else:\n            return \"neutral\"\n    else:\n        return \"unsure\"\n\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n\n"}
{"task_id": "valid/3", "completion": "\n    return sorted(instruments, reverse=True)\n\n\ninstruments = [\"Guitar\", \"Piano\", \"Flute\", \"Violin\", \"Drums\"]"}
{"task_id": "valid/4", "completion": "\n    try:\n        return json.loads(json_string)\n    except ValueError:\n        print(\"Invalid JSON string\")\n        return None\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n\n    sum_of_digits = sum(int(digit) for digit in str(n))\n\n    return n % 5 == 0 and sum_of_digits % 3 == 0\n"}
{"task_id": "valid/6", "completion": "\n    if n < base:\n        return \"n should be greater than base\"\n\n    result = 0\n    while n >= base:\n        n /= base\n        result += 1\n\n    return result\n\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        json_obj = json.loads(json_str)\n        pprint.pprint(json_obj)\n    except ValueError:\n        print(\"Provided json_str not valid JSON string.\")\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace(\"{{\" + key + \"}}\", value)\n    return template\n"}
{"task_id": "valid/10", "completion": "\n    return len(string) == len(set(string))\n\n"}
{"task_id": "valid/11", "completion": "\n    date_object = datetime.strptime(date_string, '%Y-%m-%d')\n    result = date_object + timedelta(days=days)\n    return result.strftime('%Y-%m-%d')\n"}
{"task_id": "valid/12", "completion": "\n    return text.strip()\n"}
{"task_id": "valid/13", "completion": "\n    # Remove punctuation\n    text = text.translate(str.maketrans('', '', string.punctuation))\n\n    # Remove extra spaces\n    text = ' '.join(text.split())\n\n    # Convert to lower case\n    text = text.lower()\n\n    return text\n"}
{"task_id": "valid/14", "completion": "\n    return word1 in text or word2 in text\n"}
{"task_id": "valid/15", "completion": "\n    return sum(sum(i) for i in array)\n\n"}
{"task_id": "valid/16", "completion": "\n    # Define the keys for the settings\n    keys = ['tabstop', 'expandtab', 'shiftwidth', 'softtabstop']\n\n    # Initialize an empty dictionary to store the settings\n    settings = {}\n\n    # Split the comment by lines\n    lines = comment.split('\\n')\n\n    # Loop over the lines\n    for line in lines:\n        # Remove leading and trailing whitespace\n        line = line.strip()\n\n        # If the line is not empty\n        if line:\n            # Split the line by the equals sign\n            key, value = line.split('=')\n\n            # Remove leading and trailing whitespace from the key and value\n            key = key.strip()\n            value = value.strip()\n\n            # If the key is in the keys list\n            if key in keys:\n                # Add the key-value pair to the settings dictionary\n                settings[key] = value\n\n    # Return the settings dictionary\n    return settings\n"}
{"task_id": "valid/17", "completion": "\n    # Split the sentence into words\n    words = sentence.split()\n    return words\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)\n\n"}
{"task_id": "valid/19", "completion": "\n    # Reverse each list\n    list1.reverse()\n    list2.reverse()\n\n    # Combine the lists\n    combined_list = list1 + list2\n\n    # Sort the combined list\n    combined_list.sort()\n\n    return combined_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n\n"}
{"task_id": "valid/21", "completion": "\n    return z * z\n\n"}
{"task_id": "valid/22", "completion": "\n    if \"name\" in dictionary:\n        return dictionary[\"name\"]\n    else:\n        for key, value in dictionary.items():\n            if isinstance(value, dict):\n                nested_value = get_nested_dictionary_value(value)\n                if nested_value is not None:\n                    return nested_value\n            elif isinstance(value, list):\n                for item in value:\n                    if isinstance(item, dict):\n                        nested_value = get_nested_dictionary_value(item)\n                        if nested_value is not None:\n                            return nested_value\n    return None\n"}
{"task_id": "valid/23", "completion": "\n    def convert(data):\n        if isinstance(data, list):\n            return [convert(item) for item in data]\n        elif isinstance(data, dict):\n            return {k: convert(v) for k, v in data.items()}\n        else:\n            return data\n\n    return convert(struct)\n\n"}
{"task_id": "valid/24", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def next_palindrome(n):\n        n += 1\n        while not is_palindrome(n):\n            n += 1\n        return n\n\n    def prev_palindrome(n):\n        n -= 1\n        while not is_palindrome(n):\n            n -= 1\n        return n\n\n    if is_palindrome(num):\n        return num\n    else:\n        return next_palindrome(num) if num % 10 != 9 else prev_palindrome(num)\n"}
{"task_id": "valid/25", "completion": "\n    import math\n    return math.sqrt(num)\n\nnum = int(input(\"Enter a number: \"))"}
{"task_id": "valid/26", "completion": "\n    rows = len(matrix)\n    cols = len(matrix[0]) if matrix else 0\n    diag_sum = sum(matrix[i][i] for i in range(min(rows, cols)))\n    is_square = rows == cols\n\n    return rows, cols, diag_sum, is_square\n\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode()).decode()\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c.lower() for c in s if c.isalpha())\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n"}
{"task_id": "valid/30", "completion": "\n    try:\n        data = json.loads(json_data)\n    except json.JSONDecodeError:\n        return False\n\n    return key not in data\n"}
{"task_id": "valid/31", "completion": "\n    import tkinter as tk\n\n    def button_action(button):\n        print(f\"Button {button} clicked\")\n\n    root = tk.Tk()\n    root.title(\"Buttons Table\")\n\n    for i in range(len(buttons)):\n        row = i // num_columns\n        col = i % num_columns\n        button = tk.Button(root, text=buttons[i], command=lambda i=i: button_action(buttons[i]))\n        button.grid(row=row, column=col)\n\n    root.mainloop()\n\n\n_make_button_table([\"Button 1\", \"Button 2\", \"Button 3\", \"Button 4\", \"Button 5\", \"Button 6\", \"Button 7\", \"Button 8\", \"Button 9\", \"Button 10\"], 3)\n"}
{"task_id": "valid/32", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(s) - 1):\n        if s[i] not in alphabet or s[i+1] not in alphabet[alphabet.index(s[i])+1:]:\n            return False\n    return True\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "valid/34", "completion": "\n    numeric_substrings = [s for s in re.findall(r'\\d+', ts) if s]\n    return sum(map(int, numeric_substrings))\n"}
{"task_id": "valid/35", "completion": "\n    return [word.upper() for word in words]\n\n"}
{"task_id": "valid/36", "completion": "\n    def validate(arr):\n        for i in arr:\n            if not isinstance(i, (int, float)):\n                return False\n        return True\n\n    def add(arr):\n        return sum(arr)\n\n    if validate(arr):\n        return add(arr)\n    else:\n        return \"Array contains non-numerical values\"\n"}
{"task_id": "valid/37", "completion": "\n    # load the json data\n    data = json.loads(json_data)\n\n    # create a list of neighborhood names\n    neighborhoods = [item['name'] for item in data]\n\n    # sort the list\n    sorted_neighborhoods = sorted(neighborhoods)\n\n    return sorted_neighborhoods\n"}
{"task_id": "valid/38", "completion": "\n    # Initialize minimum absolute sum\n    min_sum = float('inf')\n\n    # Sort the array\n    arr.sort()\n\n    # Traverse the array\n    for i in range(n - 1):\n        # Update minimum sum\n        min_sum = min(min_sum, abs(arr[i] + arr[i + 1]))\n\n    return min_sum\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for char in p:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/40", "completion": "\n    # Check if the total number of votes is less than 100\n    if sum(votes[i][1] for i in range(len(votes))) < 100:\n        return \"Error: Total number of votes must be at least 100.\"\n\n    # Create a dictionary to store the votes\n    votes_dict = {}\n\n    # Add the votes to the dictionary\n    for vote in votes:\n        if vote[0] in votes_dict:\n            votes_dict[vote[0]] += vote[1]\n        else:\n            votes_dict[vote[0]] = vote[1]\n\n    # Calculate the percentage of votes for each candidate\n    for candidate in votes_dict:\n        votes_dict[candidate] = round(votes_dict[candidate] / sum(votes[i][1] for i in range(len(votes))) * 100, 2)\n\n    # Return the dictionary of votes\n    return votes_dict\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        if len(date_string.split(\"-\")) != 3:\n            raise ValueError(\"Date string should be in DD-MMM-YYYY format\")\n\n        day, month, year = map(int, date_string.split(\"-\"))\n\n        if not (1 <= day <= 31 and 1 <= month <= 12):\n            raise ValueError(\"Invalid date\")\n\n        if month == 2:\n            if day > 29:\n                raise ValueError(\"Invalid date\")\n            elif year % 4 != 0:\n                if day > 28:\n                    raise ValueError(\"Invalid date\")\n            elif year % 100 != 0:\n                if day > 29:\n                    raise ValueError(\"Invalid date\")\n            elif year % 400 != 0:\n                if day > 28:\n                    raise ValueError(\"Invalid date\")\n\n        if month in [4, 6, 9, 11] and day > 30:\n            raise ValueError(\"Invalid date\")\n\n        date_object = datetime.strptime(date_string, \"%d-%m-%Y\")\n        return date_object.strftime(\"%B %d, %Y\")\n\n    except ValueError as e:\n        return str(e)\n"}
{"task_id": "valid/42", "completion": "\n    allowed_extensions = ['txt', 'docx', 'pdf', 'jpeg', 'png', 'gif', 'mp3', 'mp4', 'avi', 'mov', 'zip', 'rar']\n\n    if newname.split('.')[-1] in allowed_extensions:\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/43", "completion": "\n    new_lst = []\n    for i in lst:\n        if isinstance(i, tuple):\n            new_lst.append(remove_uneven(i))\n        else:\n            if isinstance(i, str) and i.isnumeric() and int(i) % 2 == 0:\n                new_lst.append(i)\n            elif isinstance(i, (int, float)) and i % 2 == 0:\n                new_lst.append(i)\n    return tuple(new_lst)\n\n"}
{"task_id": "valid/44", "completion": "\n    minutes = hours * 60\n    return minutes\n"}
{"task_id": "valid/45", "completion": "\n    return string.count(specific_character)\n"}
{"task_id": "valid/46", "completion": "\n    # histogram_data = histogram_data + [(generation, accs)]\n    # return histogram_data\n    pass\n"}
{"task_id": "valid/47", "completion": "\n    return bool(re.fullmatch(r'^\\w{5}$', string))\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        parts = classifier.split(\" :: \")\n        if len(parts) == 2:\n            unique_languages.add(parts[0])\n    return len(unique_languages)\n"}
{"task_id": "valid/49", "completion": "\n    result = {}\n    for sub_arr in arr:\n        for num in sub_arr:\n            if num in result:\n                result[num] += 1\n            else:\n                result[num] = 1\n    return list(result.values())\n"}
{"task_id": "valid/50", "completion": "\n    urlpatterns = [\n        re.compile(r'^$'),\n        re.compile(r'^home/$'),\n        re.compile(r'^videos/$'),\n        re.compile(r'^videos/add/$'),\n        re.compile(r'^videos/edit/(?P<id>\\d+)/$'),\n        re.compile(r'^videos/delete/(?P<id>\\d+)/$'),\n        re.compile(r'^videos/watch/(?P<id>\\d+)/$'),\n        re.compile(r'^users/$'),\n        re.compile(r'^users/add/$'),\n        re.compile(r'^users/edit/(?P<id>\\d+)/$'),\n        re.compile(r'^users/delete/(?P<id>\\d+)/$'),\n        re.compile(r'^users/profile/(?P<id>\\d+)/$'),\n        re.compile(r'^search/$'),\n        re.compile(r'^search/results/$'),\n    ]\n\n    for url_pattern in urlpatterns:\n        if re.match(url_pattern, url):\n            return url_pattern\n    return None\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n"}
{"task_id": "valid/52", "completion": "\n    string = \"Hello\"\n    sentence = \" World!\"\n    return string + sentence\n"}
{"task_id": "valid/53", "completion": "\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.add(s[i:j])\n    return substrings\n\n"}
{"task_id": "valid/54", "completion": "\n    total_price = 0\n    for dictionary in list_of_dicts:\n        for key in dictionary:\n            if key.startswith(\"price\"):\n                total_price += dictionary[key]\n    return total_price\n"}
{"task_id": "valid/55", "completion": "\n    intersection = [value for value in list1 if value in list2]\n    list2 = [value for value in list2 if value not in list1]\n    return intersection\n"}
{"task_id": "valid/56", "completion": "\n    def api_advisor_view(request):\n        if request_method == 'GET':\n            return api_advisor_view_get(request)\n        elif request_method == 'POST':\n            return api_advisor_view_post(request)\n        else:\n            return \"Invalid request method\"\n\n    def api_advisor_view_get(request):\n        return \"Handling GET request\"\n\n    def api_advisor_view_post(request):\n        return \"Handling POST request\"\n\n    return api_advisor_view\n"}
{"task_id": "valid/57", "completion": "\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers.\")\n    if a < 1 or b < 1:\n        raise ValueError(\"Both inputs must be positive integers.\")\n\n    if a == b:\n        return a\n    elif a > b:\n        return gcd_recursive(a-b, b)\n    else:\n        return gcd_recursive(a, b-a)\n\n"}
{"task_id": "valid/58", "completion": "\n    config_files = {}\n    for file_path in file_paths:\n        directory, file_name = os.path.split(file_path)\n        if directory not in config_files:\n            config_files[directory] = []\n        config_files[directory].append(file_name)\n    return config_files\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n"}
{"task_id": "valid/60", "completion": "\n    if len(my_list) == len(set(my_list)):\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/61", "completion": "\n    # calculate the difference in seconds\n    timeDifference = timeEnd - timeStart\n\n    # convert the difference to hours, minutes and seconds\n    hours = timeDifference // 3600\n    minutes = (timeDifference % 3600) // 60\n    seconds = timeDifference % 60\n\n    # return the time difference as a string\n    return f\"{hours} hours, {minutes} minutes, and {seconds} seconds\"\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return False\n    mid = (start + end) // 2\n    if array[mid] == target:\n        return True\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    colors = [\"WHITE\", \"RED\", \"GREEN\", \"BLUE\"]\n    current_index = colors.index(color)\n    if current_index == 3:\n        return colors[0]\n    else:\n        return colors[current_index + 1]\n"}
{"task_id": "valid/64", "completion": "\n    for i in range(len(list)):\n        list[i] += 1\n    return list\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end + 1):\n        if i < 0:\n            continue\n        root = i ** 0.5\n        if int(root + 0.5) ** 2 == i:\n            return True\n    return False\n\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        for char in word:\n            if char == target:\n                return char\n    return None\n"}
{"task_id": "valid/67", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/68", "completion": "\n    for key in dict.keys():\n        print(key)\n\n"}
{"task_id": "valid/69", "completion": "\n    string = \"Hello\"\n    phrase = \" World\"\n    return f\"{string} {phrase}\"\n"}
{"task_id": "valid/70", "completion": "\n    def is_special(s):\n        return not s.isalnum() and not s.isspace()\n\n    result = []\n    for s in strings:\n        if is_special(s):\n            continue\n        result.append(s.upper())\n    return result\n"}
{"task_id": "valid/71", "completion": "\n    if char in string:\n        return [i for i, letter in enumerate(string) if letter == char]\n    else:\n        return \"Character not found in the string\"\n"}
{"task_id": "valid/72", "completion": "\n    start_tag = \"<b>\"\n    end_tag = \"</b>\"\n    bold_texts = []\n    current_tag = \"\"\n    in_tag = False\n\n    for char in html_code:\n        if char == '<':\n            in_tag = True\n            current_tag = \"\"\n        elif char == '>':\n            in_tag = False\n            if current_tag == start_tag:\n                bold_texts.append(current_tag)\n        elif in_tag:\n            current_tag += char\n\n    return bold_texts\n\n"}
{"task_id": "valid/73", "completion": "\n    # Define the list of items and their prices\n    items = {\n        \"Coke\": 10,\n        \"Sprite\": 15,\n        \"Water\": 20,\n    }\n\n    # Initialize the total money inserted and the selected item\n    total_money_inserted = 0\n    selected_item = None\n\n    # Start the vending machine\n    while True:\n        print(\"\\nWelcome to the vending machine!\\n\")\n        print(\"Please select an item:\")\n        for item_name, item_price in items.items():\n            print(f\"{item_name} - ${item_price}\")\n\n        # Get the user's input\n        user_input = input(\"Enter the name of the item you want to purchase, or 'q' to quit: \")\n\n        # If the user wants to quit, end the program\n        if user_input.lower() == 'q':\n            break\n\n        # If the user wants to purchase an item, check if they have enough money\n        if user_input in items:\n            item_price = items[user_input]\n            if money_inserted >= item_price:\n                total_money_inserted += item_price\n                selected_item = user_input\n                print(f\"You have selected {user_input} for ${item_price}.\")\n            else:\n                print(f\"You do not have enough money to purchase {user_input}.\")\n        else:\n            print(f\"{user_input} is not a valid item.\")\n\n    # Calculate the change\n    change = total_money_inserted - sum(items[item] for item in items if item in items.keys() and items[item] <= selected_item)\n\n    # Return the change\n    print(f\"\\nYou have returned ${change}.\")\n\n    # Update the stock of the item purchased\n    if selected_item in items:\n        del items[selected_item]\n\n    return items\n"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    return list(set(merged_list))\n"}
{"task_id": "valid/75", "completion": "\n    return list.count(target)\n"}
{"task_id": "valid/76", "completion": "\n    return base64.b64encode(string.encode())\n"}
{"task_id": "valid/77", "completion": "\n    non_zero_indices = [i for i, x in enumerate(vector) if x != 0]\n    return non_zero_indices\n"}
{"task_id": "valid/78", "completion": "\n    def assign_and_validate(var, value):\n        try:\n            var.append(value)\n            return var\n        except TypeError:\n            return \"Invalid input\"\n\n    # Test the function\n    var = [1, 2, 3]\n    print(assign_and_validate(var, 4))  # Should print: [1, 2, 3, 4]\n    print(assign_and_validate(var, \"Hello\"))  # Should print: \"Invalid input\"\n\nassign_and_validate()\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<j"}
{"task_id": "valid/79", "completion": "\n    # Convert the word to a list of characters\n    word_list = list(word)\n    # Randomly rearrange the list of characters\n    random.shuffle(word_list)\n    # Convert the list of characters back to a string\n    rearranged_word = ''.join(word_list)\n    return rearranged_word\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"Integer\"\n    elif isinstance(element, float):\n        return \"Float\"\n    elif isinstance(element, str):\n        return \"String\"\n    elif isinstance(element, bool):\n        return \"Boolean\"\n    elif isinstance(element, list):\n        return \"List\"\n    elif isinstance(element, tuple):\n        return \"Tuple\"\n    elif isinstance(element, dict):\n        return \"Dictionary\"\n    elif isinstance(element, set):\n        return \"Set\"\n    else:\n        return \"Unknown\"\n"}
{"task_id": "valid/81", "completion": "\n    result = []\n    for i in range(len(arr)):\n        if i == 0 or arr[i] != arr[i-1]:\n            result.append(arr[i])\n    return result\n"}
{"task_id": "valid/82", "completion": "\n    return re.findall(r'\\b\\w+\\b', text)\n"}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [n for n in numbers if n % 3 == 0 and n % 7 == 0]\n    if not divisible_numbers:\n        print(\"No numbers divisible by both 3 and 7 in the list.\")\n    else:\n        avg = sum(divisible_numbers) / len(divisible_numbers)\n        max_num = max(divisible_numbers)\n        min_num = min(divisible_numbers)\n        num_counts = {n: divisible_numbers.count(n) for n in divisible_numbers}\n\n        print(f\"Average: {avg}\")\n        print(f\"Maximum: {max_num}\")\n        print(f\"Minimum: {min_num}\")\n        print(\"Number of occurrences:\")\n        for k, v in num_counts.items():\n            print(f\"{k}: {v}\")\n\n"}
{"task_id": "valid/84", "completion": "\n    # Remove punctuation\n    sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n\n    # Convert to lower case\n    sentence = sentence.lower()\n\n    # Split sentence into words\n    words = sentence.split()\n\n    # Count frequency of each word\n    word_freq = {}\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n\n    # Find the word with the highest frequency\n    highest_freq_word = max(word_freq, key=word_freq.get)\n\n    return highest_freq_word\n\n"}
{"task_id": "valid/85", "completion": "\n    euler_number = 2.0\n    for i in range(1, 10000):\n        euler_number += 1.0 / math.factorial(i)\n    return round(euler_number, decimal_places)\n"}
{"task_id": "valid/86", "completion": "\n    average = sum(numbers) / len(numbers)\n    total = sum(numbers)\n    return average, total\n"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series cannot be empty\")\n    try:\n        min_val = min(time_series)\n        max_val = max(time_series)\n        return min_val, max_val\n    except TypeError:\n        raise ValueError(\"Time series should contain only numerical values\")\n"}
{"task_id": "valid/88", "completion": "\n    related_articles_count = {}\n    for article in encyclopedia:\n        related_articles_count[article] = len(encyclopedia.get_articles_by_similarity(article))\n    return related_articles_count\n"}
{"task_id": "valid/89", "completion": "\n    max_index = 0\n    for i in range(1, len(lst)):\n        if lst[i] > lst[max_index]:\n            max_index = i\n    return max_index\n"}
{"task_id": "valid/90", "completion": "\n    return bool(set(list1) & set(list2))\n\n"}
{"task_id": "valid/91", "completion": "\n    def _dict_to_xml(element, dictionary):\n        for key, value in dictionary.items():\n            child_element = Element(key)\n            child_element.text = str(value)\n            element.append(child_element)\n            if isinstance(value, dict):\n                _dict_to_xml(child_element, value)\n        return element\n\n    root = Element('data')\n    _dict_to_xml(root, dictionary)\n    return tostring(root, encoding='utf-8', method='xml')\n"}
{"task_id": "valid/92", "completion": "\n    m = len(matrix)\n    n = len(matrix[0])\n\n    low = 0\n    high = m * n - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        mid_value = matrix[mid // n][mid % n]\n\n        if mid_value == target:\n            return True\n        elif mid_value < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return False\n"}
{"task_id": "valid/93", "completion": "\n    sum_of_odd_numbers = 0\n    count_of_odd_numbers = 0\n    for i in lst:\n        if i % 2 != 0:\n            sum_of_odd_numbers += i\n            count_of_odd_numbers += 1\n    return sum_of_odd_numbers / count_of_odd_numbers if count_of_odd_numbers != 0 else None\n"}
{"task_id": "valid/94", "completion": "\n    if n < 1 or n > len(lst):\n        return None\n    else:\n        lst.sort(reverse=True)\n        return lst[n - 1]\n\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "valid/96", "completion": "\n    return set_a ^ set_b\n\n"}
{"task_id": "valid/97", "completion": "\n\n    **{mapping['bot_name']}** is a Discord bot designed to manage and play music in your server. It provides information about its features and a web app for managing personal playlists and server settings.\n\n    **Features:**\n    - Manage music: Play, pause, skip, and loop songs in your server.\n    - Personal playlists: Create, manage, and share your playlists with others.\n    - Server settings: Customize your server settings, such as volume, DJ mode, and more.\n    - Help and information: Get help and information about the bot's features and commands.\n\n    **Web App:**\n    {mapping['web_app_url']}\n\n    **Commands:**\n    - `{mapping['commands']['play']}`: Play a song.\n    - `{mapping['commands']['pause']}`: Pause the current song.\n    - `{mapping['commands']['skip']}`: Skip the current song.\n    - `{mapping['commands']['loop']}`: Loop the current song.\n    - `{mapping['commands']['volume']}`: Adjust the volume of the music.\n    - `{mapping['commands']['dj_mode']}`: Toggle the DJ mode.\n    - `{mapping['commands']['playlist']}`: Manage your playlist.\n    - `{mapping['commands']['settings']}`: Customize your server settings.\n    - `{mapping['commands']['help']}`: Get help with the bot's commands.\n    \"\"\"\n\n"}
{"task_id": "valid/98", "completion": "\n    if n < 0:\n        return abs(dec_to_ternary(n))\n    if n == 0:\n        return '0'\n    ternary = ''\n    while n:\n        n, r = divmod(n, 3)\n        ternary = str(r) + ternary\n    return ternary\n\n"}
{"task_id": "valid/99", "completion": "\n    extensions = []\n    for file_name in file_names:\n        extension = file_name.split('.')[-1]\n        extensions.append(extension)\n    return tuple(extensions)\n\n"}
{"task_id": "valid/100", "completion": "\n    if age < 13:\n        return \"Child\"\n    elif 13 <= age < 18:\n        return \"Teenager\"\n    elif 18 <= age < 60:\n        return \"Adult\"\n    else:\n        return \"Senior\"\n"}
{"task_id": "valid/101", "completion": "\n    if numerical_grade >= 90:\n        letter_grade = 'A'\n        gpa = 4.0\n    elif numerical_grade >= 80:\n        letter_grade = 'B'\n        gpa = 3.0\n    elif numerical_grade >= 70:\n        letter_grade = 'C'\n        gpa = 2.0\n    elif numerical_grade >= 60:\n        letter_grade = 'D'\n        gpa = 1.0\n    else:\n        letter_grade = 'F'\n        gpa = 0.0\n\n    return letter_grade, gpa\n"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item['price']\n    return total\n"}
{"task_id": "valid/103", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = {}\n    for palindrome in palindrome_tuples:\n        count = 0\n        for char in palindrome:\n            if char.lower() in vowels:\n                count += 1\n        result[palindrome] = count\n    return result\n"}
{"task_id": "valid/104", "completion": "\n    if s.isupper():\n        return s.lower()\n    elif s.islower():\n        return s.upper()\n    elif s[0].isupper():\n        return s.capitalize()\n    else:\n        return s\n"}
{"task_id": "valid/105", "completion": "\n    if len(arr) <= 1:\n        return False\n\n    seen = set()\n\n    for num in arr:\n        if -num in seen:\n            return True\n        seen.add(num)\n\n    return False\n"}
{"task_id": "valid/106", "completion": "\n    def get_version_number(version):\n        return int(version.split('_')[1].split('X')[0])\n\n    def get_date_time(version):\n        return version.split('_')[2]\n\n    result = {}\n    for dependency in dependencies:\n        result[dependency[0]] = max(dependencies, key=lambda x: get_version_number(x[1]))\n\n    return result\n\n"}
{"task_id": "valid/107", "completion": "\n    # Create a dictionary to hold the categories\n    categories = {\n        \"murder\": [],\n        \"non-life-threatening\": [],\n        \"injury\": [],\n        \"disease\": [],\n        \"death\": [],\n        \"other\": []\n    }\n\n    # Loop through the list of causes\n    for cause in causes:\n        # Split the cause into action and result\n        action, result = cause.split(\" \")\n\n        # Categorize the cause\n        if action == \"murder\":\n            categories[\"murder\"].append(cause)\n        elif action == \"non-life-threatening\":\n            categories[\"non-life-threatening\"].append(cause)\n        elif action == \"injury\":\n            categories[\"injury\"].append(cause)\n        elif action == \"disease\":\n            categories[\"disease\"].append(cause)\n        elif action == \"death\":\n            categories[\"death\"].append(cause)\n        else:\n            categories[\"other\"].append(cause)\n\n    return categories\n\n"}
{"task_id": "valid/108", "completion": "\n    return name.replace(\" \", \"-\").lower()\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(c) > 127 for c in text)\n\n"}
{"task_id": "valid/110", "completion": "\n    import string\n    translator = str.maketrans('', '', string.punctuation)\n    return string.translate(string, translator)\n"}
{"task_id": "valid/111", "completion": "\n    result = []\n    for num in num_list:\n        try:\n            result.append(num ** exp)\n        except TypeError:\n            print(f\"TypeError: {num} is not a number\")\n        except Exception as e:\n            print(f\"An error occurred: {e}\")\n    return result\n\n\nnum_list = [2, 3, 4, 5, 'a', 6]\nexp = 3"}
{"task_id": "valid/112", "completion": "\n    for i in range(len(grid)):\n        print(min(grid[i]))\n"}
{"task_id": "valid/113", "completion": "\n    if not isinstance(n, int) or n <= 0:\n        print(\"Please enter a positive integer.\")\n        return\n\n    if current_num > n:\n        return\n\n    if current_num % 2 == 0:\n        print(\"Thank you\")\n\n    print_thank_you(n, current_num + 1)\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    for i in range(len(lst) - 1):\n        if lst[i] == element and lst[i + 1] == element:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/115", "completion": "\n    num_str = str(num)\n    return len(set(num_str)) == 1\n\n"}
{"task_id": "valid/116", "completion": "\n    if not s:\n        return s\n    else:\n        first, *rest = s\n        if first.lower() in 'aeiou':\n            return remove_vowels_recursive(rest)\n        else:\n            return first + remove_vowels_recursive(rest)\n\n"}
{"task_id": "valid/117", "completion": "\n\n    def generate_help_message(option_list):\n        help_message = \"CLI Help:\\n\\n\"\n        for option in option_list:\n            help_message += f\"{option[0]} - {option[1]}\\n\"\n        return help_message\n\n    return generate_help_message(options)\n\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n\n"}
{"task_id": "valid/119", "completion": "\n    count = 0\n    for i in range(len(Val)):\n        if Val[i] == '1':\n            count += 1\n    return count\n\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset & 0xFF\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = \"aeiou\"\n    for char in s.lower():\n        if char not in vowels:\n            return False\n    return True\n"}
{"task_id": "valid/122", "completion": "\n    count = sequence_of_characters.count(specific_subsequence)\n    return count\n\nsequence_of_characters = \"Please find the number of occurrences of this string\"\nspecific_subsequence = \"string\"\n"}
{"task_id": "valid/123", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "valid/124", "completion": "\n    return sum(i for i in input_list if i % 2 != 0)\n"}
{"task_id": "valid/125", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    return sum(1 for char in string if char in consonants)\n\n"}
{"task_id": "valid/126", "completion": "\n    # calculate the number of electrons\n    electrons = grid_energies.sum() / ados\n\n    # adjust the number of electrons based on doping levels\n    electrons = electrons * (1 - dos_grid_size / sum(dos_grid_size))\n\n    return electrons\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    max_diff = arr[1] - arr[0]\n    for i in range(2, len(arr)):\n        if arr[i] - arr[i-1] > max_diff:\n            max_diff = arr[i] - arr[i-1]\n    return arr\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    mapping = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n\n    for char in string:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []\n\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for i in range(len(lst)):\n        if lst[i] not in unique_elements:\n            unique_elements.append(lst[i])\n        if len(unique_elements) == 3:\n            break\n    return unique_elements\n"}
{"task_id": "valid/132", "completion": "\n    fruit_list.sort()\n    return ', '.join(fruit_list)\n"}
{"task_id": "valid/133", "completion": "\n    if not lst:\n        return [[]]\n    else:\n        sublists = generate_sublists(lst[1:])\n        return sublists + [lst[0] + sublist for sublist in sublists]\n\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r\"\\d+\\.\\d+\"\n    if re.search(pattern, string):\n        return True\n    return False\n"}
{"task_id": "valid/135", "completion": "\n\n    from django.db import migrations, models\n\n    class Migration(migrations.Migration):\n\n        dependencies = [\n            ('{app_name}', '0001_initial'),\n        ]\n\n        operations = [\n            migrations.AlterField(\n                model_name='{model_name}',\n                name='{field_name}',\n                field=models.CharField(max_length=200, null=True, blank=True),\n            ),\n        ]\n    \"\"\"\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = [value for value in list1 if value in list2]\n    return sum(common_elements)\n"}
{"task_id": "valid/137", "completion": "\n    forecast_period = math.ceil(len(df) * 0.01)\n    return forecast_period\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n\n"}
{"task_id": "valid/139", "completion": "\n    # calculate the start and end index for the current page\n    start_index = (page_number - 1) * items_per_page\n    end_index = start_index + items_per_page\n\n    # if the end index is larger than the total number of items, set it to the total number of items\n    if end_index > len(items):\n        end_index = len(items)\n\n    # return the items for the current page\n    return items[start_index:end_index]\n"}
{"task_id": "valid/140", "completion": "\n    def carry_process(num, carry):\n        if num < 10:\n            return num * 2 + carry\n        else:\n            return (num % 10) * 2 + carry + num // 10\n\n    result = ''\n    carry = 0\n    for digit in reversed(n_str):\n        num = int(digit)\n        carry = carry_process(num, carry)\n        result = str(carry % 10) + result\n        carry //= 10\n\n    if carry != 0:\n        result = str(carry) + result\n\n    return result\n\n"}
{"task_id": "valid/141", "completion": "\n    # Initialize the node\n    rospy.init_node('reflex_control')\n\n    # Create a publisher to control the robotic arm\n    pub = rospy.Publisher('/arm_controller/command', String, queue_size=10)\n\n    # Preset positions for the robotic arm\n    presets = {\n        'preset1': (1.0, 2.0, 3.0),\n        'preset2': (4.0, 5.0, 6.0),\n        # Add more presets as needed\n    }\n\n    # Get the preset position for the given preset name\n    preset_position = presets.get(preset_name)\n\n    if preset_position is not None:\n        # Create a message to control the robotic arm\n        msg = 'move_to_position: ' + ','.join(map(str, preset_position))\n\n        # Publish the message\n        pub.publish(msg)\n    else:\n        print(\"Preset not found:\", preset_name)\n\n    # Keep the node alive\n    rospy.spin()\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = [value for value in list1 if value in list2]\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product\n"}
{"task_id": "valid/143", "completion": "\n    if allow_multiple_answer == True:\n        print(\"Allowing multiple answers for each question\")\n    else:\n        print(\"Not allowing multiple answers for each question\")\n\n    if zoom_level == 1:\n        print(\"Zoom level is at maximum\")\n    elif zoom_level == 2:\n        print(\"Zoom level is at medium\")\n    elif zoom_level == 3:\n        print(\"Zoom level is at minimum\")\n    else:\n        print(\"Invalid zoom level\")\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n"}
{"task_id": "valid/145", "completion": "\n    vowels = 'aeiouAEIOU'\n    no_vowels_sentence = ''\n    for char in sentence:\n        if char not in vowels:\n            no_vowels_sentence += char\n    return no_vowels_sentence\n"}
{"task_id": "valid/146", "completion": "\n    def is_alpha(s):\n        return s.isalpha()\n\n    def merge_dicts(a, b):\n        for key in b:\n            if isinstance(b[key], dict):\n                a[key] = merge_dicts(a.get(key, {}), b[key])\n            else:\n                a[key] = b[key]\n        return a\n\n    def sort_dict(d):\n        return {k: v for k, v in sorted(d.items(), key=lambda item: item[0])}\n\n    def filter_dict(d):\n        return {k: v for k, v in d.items() if is_alpha(k)}\n\n    merged = merge_dicts(a, b)\n    sorted_dict = sort_dict(merged)\n    filtered_dict = filter_dict(sorted_dict)\n\n    return filtered_dict\n\n\na = {'a': 1, 'b': 2, 'nested': {'x': 5, 'y': 6}}\nb = {'c': 3, 'd': 4, 'nested': {'y': 7, 'z': 8}}"}
{"task_id": "valid/147", "completion": "\n    try:\n        return max(d, key=lambda k: d[k])\n    except ValueError:\n        print(\"The dictionary is empty.\")\n    except TypeError:\n        print(\"The input is not a dictionary.\")\n"}
{"task_id": "valid/148", "completion": "\n    # Your code here\n    pass\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None:\n        return None\n    else:\n        return string.replace('e', '*')\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n"}
{"task_id": "valid/151", "completion": "\n    if x < 0:\n        return False\n    if x == 0:\n        return True\n    if x % 2 == 0:\n        return False\n    p = x - 1\n    while p > 1:\n        if gcd(x, p) == 1:\n            return False\n        p -= 2\n    return True\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n"}
