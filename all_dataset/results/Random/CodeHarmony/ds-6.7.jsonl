{"task_id": "valid/0", "completion": "\n    # Importing necessary libraries\n    import pandas as pd\n    from sklearn.feature_extraction.text import TfidfVectorizer\n    from sklearn.model_selection import train_test_split\n    from sklearn.naive_bayes import MultinomialNB\n    from sklearn.metrics import accuracy_score\n\n    # Loading the dataset\n    data = pd.read_csv('data.csv')\n\n    # Splitting the dataset into training and testing sets\n    X_train, X_test, y_train, y_test = train_test_split(data['text'], data['category'], test_size=0.2, random_state=42)\n\n    # Vectorizing the text data\n    vectorizer = TfidfVectorizer()\n    X_train_vectorized = vectorizer.fit_transform(X_train)\n\n    # Training the Naive Bayes classifier\n    clf = MultinomialNB()\n    clf.fit(X_train_vectorized, y_train)\n\n    # Testing the classifier\n    X_test_vectorized = vectorizer.transform(X_test)\n    predictions = clf.predict(X_test_vectorized)\n    print('Accuracy: ', accuracy_score(y_test, predictions))\n\n    # Classifying the input text\n    text_vectorized = vectorizer.transform([text])\n    prediction = clf.predict(text_vectorized)\n\n    return prediction[0]\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n\n\ns = {1, 2, 3, 4, 5}"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n\n"}
{"task_id": "valid/3", "completion": "\n    return sorted(instruments, reverse=True)\n\n"}
{"task_id": "valid/4", "completion": "\n    return json.loads(json_string)\n\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n    sum_of_digits = sum(int(digit) for digit in str(n))\n    return n % sum_of_digits == 0 and n % 3 == 0\n\n"}
{"task_id": "valid/6", "completion": "\n    return (n & (base - 1)) + 1\n\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        parsed_json = json.loads(json_str)\n        pprint.pprint(parsed_json)\n    except ValueError as e:\n        print(e)\n\n\njson_str = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\npretty_print_json(json_str)\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n\n"}
{"task_id": "valid/9", "completion": "\n    for key in values:\n        template = template.replace('{' + key + '}', str(values[key]))\n    return template\n\n"}
{"task_id": "valid/10", "completion": "\n    return len(set(string)) == len(string)\n\n"}
{"task_id": "valid/11", "completion": "\n    date = datetime.strptime(date_string, '%Y-%m-%d')\n    new_date = date + timedelta(days=days)\n    return new_date.strftime('%Y-%m-%d')\n"}
{"task_id": "valid/12", "completion": "\n    return \" \".join(text.strip().split())\n\n"}
{"task_id": "valid/13", "completion": "\n    # Convert to lowercase\n    text = text.lower()\n\n    # Remove punctuation\n    translator = str.maketrans('', '', string.punctuation)\n    text = text.translate(translator)\n\n    # Remove digits\n    translator = str.maketrans('', '', string.digits)\n    text = text.translate(translator)\n\n    # Remove extra spaces\n    text = ' '.join(text.split())\n\n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    return bool(re.search(r'\\b(' + word1 + r'|' + word2 + r')\\b', text))\n\n"}
{"task_id": "valid/15", "completion": "\n    return sum(array)\n\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    lines = comment.split('\\n')\n    for line in lines:\n        if line.startswith('@'):\n            line = line.strip('@')\n            line = line.split(' ')\n            for setting in line:\n                if '=' in setting:\n                    key, value = setting.split('=')\n                    settings[key] = value\n    return settings\n\n"}
{"task_id": "valid/17", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)\n\n"}
{"task_id": "valid/19", "completion": "\n    list1.reverse()\n    list2.reverse()\n    combined_list = list1 + list2\n    combined_list.sort()\n    return combined_list\n\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n\n"}
{"task_id": "valid/21", "completion": "\n    return z*z\n\n"}
{"task_id": "valid/22", "completion": "\n    try:\n        return dictionary['name']\n    except KeyError:\n        return None\n\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {k: struct_to_dict(v) for k, v in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(v) for v in struct]\n    else:\n        return struct\n\n"}
{"task_id": "valid/24", "completion": "\n    if num < 10:\n        return num - 1\n\n    str_num = str(num)\n    num_len = len(str_num)\n\n    left_half = int(str_num[:(num_len // 2)])\n    is_odd = num_len % 2\n\n    candidates = [\n        int(str(left_half) + str(left_half)[::-1]),\n        int(str(left_half + 1) + str(left_half + 1)[::-1]),\n        int(str(left_half - 1) + str(left_half - 1)[::-1]),\n    ]\n\n    if is_odd:\n        candidates.append(int(str(left_half + 1) + str(left_half)[1:] + str(left_half + 1)[::-1]))\n        candidates.append(int(str(left_half - 1) + str(left_half)[1:] + str(left_half - 1)[::-1]))\n\n    min_diff = float('inf')\n    closest_palindrome = -1\n\n    for candidate in candidates:\n        if candidate == num:\n            continue\n        diff = abs(candidate - num)\n        if diff < min_diff:\n            min_diff = diff\n            closest_palindrome = candidate\n\n    return closest_palindrome\n\n"}
{"task_id": "valid/25", "completion": "\n    return num ** 0.5\n\n"}
{"task_id": "valid/26", "completion": "\n    rows = len(matrix)\n    cols = len(matrix[0])\n    diagonal_sum = 0\n    is_square = rows == cols\n\n    for i in range(min(rows, cols)):\n        diagonal_sum += matrix[i][i]\n\n    return rows, cols, diagonal_sum, is_square\n\n"}
{"task_id": "valid/27", "completion": "\n    message_bytes = string.encode('ascii')\n    base64_bytes = base64.b64encode(message_bytes)\n    base64_message = base64_bytes.decode('ascii')\n\n    return base64_message\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c for c in s if c.isalpha()).lower()\n\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n\n"}
{"task_id": "valid/30", "completion": "\n    if key in json_data:\n        if json_data[key] == value:\n            return True\n    return False\n\n"}
{"task_id": "valid/31", "completion": "\n    # Initialize an empty list to store the button table\n    button_table = []\n\n    # Iterate over the buttons in chunks of num_columns\n    for i in range(0, len(buttons), num_columns):\n        # Append the current chunk of buttons to the button table\n        button_table.append(buttons[i:i + num_columns])\n\n    # Return the button table\n    return button_table\n\n"}
{"task_id": "valid/32", "completion": "\n    return s == ''.join(sorted(s))\n\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "valid/34", "completion": "\n    import re\n    nums = re.findall(r'\\d+', ts)\n    return sum(int(num) for num in nums)\n\n"}
{"task_id": "valid/35", "completion": "\n    result = []\n    for word in words:\n        result.append(word[:-1] + word[-1].upper())\n    return result\n\n"}
{"task_id": "valid/36", "completion": "\n    if not isinstance(arr, list):\n        return \"Error: Input should be a list\"\n    if not all(isinstance(i, (int, float)) for i in arr):\n        return \"Error: List should only contain numbers\"\n    return sum(arr)\n"}
{"task_id": "valid/37", "completion": "\n    neighborhoods = json_data[\"neighborhoods\"]\n    neighborhoods.sort(key=lambda x: x[\"name\"])\n    return [neighborhood[\"name\"] for neighborhood in neighborhoods]\n\n"}
{"task_id": "valid/38", "completion": "\n    arr = sorted(arr)\n    l = 0\n    r = n - 1\n    min_sum = 99999999999\n    min_l = l\n    min_r = r\n    while l < r:\n        sum = arr[l] + arr[r]\n        if abs(sum) < abs(min_sum):\n            min_sum = sum\n            min_l = l\n            min_r = r\n        if sum < 0:\n            l += 1\n        else:\n            r -= 1\n    return (arr[min_l], arr[min_r])\n\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for i in p:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack or stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "valid/40", "completion": "\n    # Initialize an empty dictionary to store the results\n    results = {}\n\n    # Calculate the total number of votes\n    total_votes = sum(votes[i][1] for i in range(len(votes)))\n\n    # Calculate the results for each candidate\n    for vote in votes:\n        candidate, votes_count = vote\n        percentage = round((votes_count / total_votes) * 100, 2)\n        results[candidate] = (votes_count, percentage)\n\n    return results\n\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        date = datetime.strptime(date_string, '%d-%b-%Y')\n        return date.strftime('%B %Y')\n    except ValueError:\n        return 'Invalid date'\n"}
{"task_id": "valid/42", "completion": "\n    allowed_extensions = ['.txt', '.doc', '.docx', '.pdf', '.jpg', '.png', '.gif', '.jpeg']\n    if oldname.split('.')[-1] in allowed_extensions:\n        if newname.split('.')[-1] in allowed_extensions:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n"}
{"task_id": "valid/43", "completion": "\n    new_lst = []\n    for i in lst:\n        if isinstance(i, tuple):\n            new_lst.append(remove_uneven(i))\n        elif isinstance(i, int) and i % 2 == 0:\n            new_lst.append(i)\n        elif isinstance(i, str):\n            new_lst.append(i)\n    return tuple(new_lst)\n\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n\n"}
{"task_id": "valid/45", "completion": "\n    count = 0\n    for character in string:\n        if character.lower() == specific_character.lower():\n            count += 1\n    return count\n\n"}
{"task_id": "valid/46", "completion": "\n    histogram_data['generation'].append(generation)\n    histogram_data['accuracy'].append(accs)\n    return histogram_data\n\n"}
{"task_id": "valid/47", "completion": "\n    return re.match(r'^[a-zA-Z0-9]{5}$', string) is not None\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        if \"Programming Language :: \" in classifier:\n            language = classifier.split(\"Programming Language :: \")[1].split(\" :: \")[0]\n            unique_languages.add(language)\n    return len(unique_languages)\n"}
{"task_id": "valid/49", "completion": "\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    return count_dict\n\n"}
{"task_id": "valid/50", "completion": "\n    urlpattern = [\n        (r'^video/(?P<video_id>\\d+)/$', 'video_view'),\n        (r'^channel/(?P<channel_id>\\d+)/$', 'channel_view'),\n    ]\n\n    for pattern, view in urlpattern:\n        match = re.match(pattern, url)\n        if match:\n            return view, match.groupdict()\n    return None, {}\n\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n\n"}
{"task_id": "valid/52", "completion": "\n    a = \"Hello\"\n    sentence = \" World!\"\n    return a + sentence\n"}
{"task_id": "valid/53", "completion": "\n    # Initialize the list to store the substrings\n    substrings = []\n\n    # Iterate over the string\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            # Append the substring to the list\n            substrings.append(s[i:j])\n\n    return substrings\n\n"}
{"task_id": "valid/54", "completion": "\n    price_sum = 0\n    for dict in list_of_dicts:\n        for key in dict.keys():\n            if key.startswith(\"price\"):\n                price_sum += dict[key]\n    return price_sum\n\n"}
{"task_id": "valid/55", "completion": "\n    intersection = [value for value in list1 if value in list2]\n    list2 = [value for value in list2 if value not in intersection]\n    return intersection, list2\n\n"}
{"task_id": "valid/56", "completion": "\n    if request_method == \"GET\":\n        return \"api_advisorview\"\n    elif request_method == \"POST\":\n        return \"api_advisor\"\n    else:\n        return \"Invalid request method\"\n\n"}
{"task_id": "valid/57", "completion": "\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both numbers must be integers\")\n    if a < 0 or b < 0:\n        raise ValueError(\"Both numbers must be positive\")\n    if b == 0:\n        return a\n    else:\n        return gcd_recursive(b, a % b)\n\n"}
{"task_id": "valid/58", "completion": "\n    config_files = {}\n    for file_path in file_paths:\n        parts = file_path.split('/')\n        if len(parts) > 1:\n            config_files[parts[1]] = config_files.get(parts[1], []) + [file_path]\n    return config_files\n\n\nfile_paths = [\n    \"/etc/nginx/nginx.conf\",\n    \"/etc/nginx/sites-available/example.com\",\n    \"/etc/nginx/sites-enabled/example.com\",\n    \"/etc/nginx/conf.d/example.com\",\n    \"/etc/apache2/apache2.conf\",\n    \"/etc/apache2/sites-available/example.com\",\n    \"/etc/apache2/sites-enabled/example.com\",\n    \"/etc/apache2/conf.d/example.com\",\n]\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n\n"}
{"task_id": "valid/61", "completion": "\n    return timeEnd - timeStart\n\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return -1\n\n    mid = (start + end) // 2\n    if array[mid] == target:\n        return mid\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    if color == \"WHITE\":\n        return \"GREEN\"\n    elif color == \"GREEN\":\n        return \"BLUE\"\n    elif color == \"BLUE\":\n        return \"WHITE\"\n    else:\n        return \"Invalid color\"\n\n"}
{"task_id": "valid/64", "completion": "\n    return [i+1 for i in list]\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end + 1):\n        if i ** 0.5 == int(i ** 0.5):\n            return True\n    return False\n\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        for letter in word:\n            if letter == target:\n                return True\n    return False\n\n"}
{"task_id": "valid/67", "completion": "\n    return sentence.split()\n\n"}
{"task_id": "valid/68", "completion": "\n    for key in dict.keys():\n        print(key)\n\n\nfruits = {'apple': 1, 'banana': 2, 'orange': 3}"}
{"task_id": "valid/69", "completion": "\n    string_1 = \"Hello\"\n    string_2 = \"World\"\n    phrase = f\"{string_1} {string_2}\"\n    return phrase\n\n"}
{"task_id": "valid/70", "completion": "\n    result = []\n    for string in strings:\n        clean_string = re.sub(r'[^A-Za-z0-9 ]+', '', string)\n        result.append(clean_string.capitalize())\n    return result\n\n"}
{"task_id": "valid/71", "completion": "\n    return string.index(char)\n\n"}
{"task_id": "valid/72", "completion": "\n    start_tag = \"<b>\"\n    end_tag = \"</b>\"\n    start = 0\n    end = 0\n    bold_texts = []\n\n    while start != -1 and end != -1:\n        start = html_code.find(start_tag, end)\n        if start != -1:\n            end = html_code.find(end_tag, start + len(start_tag))\n            if end != -1:\n                bold_texts.append(html_code[start + len(start_tag):end])\n\n    return bold_texts\n\n\nhtml_code = \"<b>Hello</b> <b>World</b>\""}
{"task_id": "valid/73", "completion": "\n    prices = {\"cola\": 1.00, \"chips\": 0.50, \"candy\": 0.65}\n    stock = {\"cola\": 10, \"chips\": 10, \"candy\": 10}\n\n    if item not in prices:\n        return \"Invalid item\"\n\n    if money_inserted < prices[item]:\n        return \"Not enough money\"\n\n    if stock[item] <= 0:\n        return \"Out of stock\"\n\n    change = money_inserted - prices[item]\n    stock[item] -= 1\n\n    return change\n\n"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    unique_list = []\n    for item in merged_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\n\n"}
{"task_id": "valid/75", "completion": "\n    count = 0\n    for item in list:\n        if item == target:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/76", "completion": "\n    message_bytes = string.encode('ascii')\n    base64_bytes = base64.b64encode(message_bytes)\n    base64_message = base64_bytes.decode('ascii')\n\n    return base64_message\n"}
{"task_id": "valid/77", "completion": "\n    non_zero_indices = [i for i, x in enumerate(vector) if x != 0]\n    return non_zero_indices\n\n"}
{"task_id": "valid/78", "completion": "\n    def assign_value(value):\n        nonlocal validated\n        validated = value\n\n    def validate():\n        if validated is None:\n            return \"Value is not assigned\"\n        elif isinstance(validated, int):\n            return \"Integer\"\n        elif isinstance(validated, float):\n            return \"Float\"\n        elif isinstance(validated, str):\n            return \"String\"\n        else:\n            return \"Invalid type\"\n\n    validated = None\n    return assign_value, validate\n\n\nassign, validate = assign_and_validate()\nassign(10)"}
{"task_id": "valid/79", "completion": "\n    letters = list(word)\n    random.shuffle(letters)\n    return ''.join(letters)\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"integer\"\n    elif isinstance(element, float):\n        return \"float\"\n    elif isinstance(element, str):\n        return \"string\"\n    elif isinstance(element, bool):\n        return \"boolean\"\n    elif isinstance(element, list):\n        return \"list\"\n    elif isinstance(element, tuple):\n        return \"tuple\"\n    elif isinstance(element, dict):\n        return \"dictionary\"\n    elif isinstance(element, set):\n        return \"set\"\n    else:\n        return \"unknown\"\n\n"}
{"task_id": "valid/81", "completion": "\n    result = []\n    for i in range(len(arr)):\n        if i == 0 or arr[i] != arr[i-1]:\n            result.append(arr[i])\n    return result\n\n"}
{"task_id": "valid/82", "completion": "\n    tokens = re.findall(r'\\w+', text)\n    return tokens\n\ntext = \"This is a sample text for tokenization\""}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    average = sum(divisible_numbers) / len(divisible_numbers)\n    unique_numbers = set(divisible_numbers)\n    unique_count = {num: divisible_numbers.count(num) for num in unique_numbers}\n\n    print(f\"Numbers divisible by both 3 and 7: {divisible_numbers}\")\n    print(f\"Average: {average}\")\n    print(f\"Unique numbers and their counts: {unique_count}\")\n\n"}
{"task_id": "valid/84", "completion": "\n    sentence = sentence.lower()\n    words = sentence.split(' ')\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    highest_frequency = max(frequency.values())\n    for word in frequency:\n        if frequency[word] == highest_frequency:\n            return word\n    return None\n\n"}
{"task_id": "valid/85", "completion": "\n    euler_number = 0\n    for i in range(100):\n        euler_number += 1 / math.factorial(i)\n    return round(euler_number, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    sum = 0\n    for number in numbers:\n        sum += number\n    average = sum / len(numbers)\n    return average, sum\n\n\nnumbers = [1, 2, 3, 4, 5]\naverage, sum = getAverageAndSum(numbers)"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        return None\n    try:\n        min_value = min(time_series)\n        max_value = max(time_series)\n    except ValueError:\n        return None\n    return (min_value, max_value)\n\n"}
{"task_id": "valid/88", "completion": "\n    related_articles_count = {}\n    for article in encyclopedia:\n        related_articles_count[article] = len(encyclopedia[article])\n    return related_articles_count\n\n"}
{"task_id": "valid/89", "completion": "\n    max_index = 0\n    for i in range(1, len(lst)):\n        if lst[i] > lst[max_index]:\n            max_index = i\n    return max_index\n\n"}
{"task_id": "valid/90", "completion": "\n    return bool(set(list1) & set(list2))\n\n"}
{"task_id": "valid/91", "completion": "\n    def _dict_to_xml(dictionary, root):\n        for key, value in dictionary.items():\n            if isinstance(value, dict):\n                child = Element(key)\n                root.append(child)\n                _dict_to_xml(value, child)\n            else:\n                child = Element(key)\n                child.text = str(value)\n                root.append(child)\n        return root\n\n    root = Element('data')\n    _dict_to_xml(dictionary, root)\n    return tostring(root)\n\n"}
{"task_id": "valid/92", "completion": "\n    row = 0\n    col = len(matrix[0]) - 1\n\n    while row < len(matrix) and col >= 0:\n        if matrix[row][col] > target:\n            col -= 1\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            return [row, col]\n\n    return [-1, -1]\n\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in lst:\n        if i % 2 != 0:\n            sum_odd += i\n            count_odd += 1\n    average_odd = sum_odd / count_odd\n    return sum_odd, average_odd\n\n"}
{"task_id": "valid/94", "completion": "\n    if n > len(lst):\n        return None\n    else:\n        lst.sort(reverse=True)\n        return lst[n-1]\n\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n"}
{"task_id": "valid/96", "completion": "\n    return set_a ^ set_b\n\n\nset_a = {1, 2, 3, 4, 5}\nset_b = {4, 5, 6, 7, 8}\n"}
{"task_id": "valid/97", "completion": "\n\n    **Discord Music Bot**\n\n    **Features:**\n    - Play music from YouTube, SoundCloud, and more.\n    - Control the music with simple commands.\n    - Create and manage playlists.\n    - Server settings can be managed through a web app.\n\n    **Commands:**\n    {mapping}\n\n    **Web App:**\n    - Manage playlists.\n    - Change server settings.\n    - View server statistics.\n\n    **How to use:**\n    - To use the bot, type `{mapping['prefix']}help` for a list of commands.\n    - For more information about a command, type `{mapping['prefix']}help [command]`.\n\n    **Support:**\n    - If you have any questions or need help, join our support server at {mapping['support']}.\n    \"\"\"\n\n"}
{"task_id": "valid/98", "completion": "\n    if n == 0:\n        return '0'\n    nums = []\n    while n:\n        n, r = divmod(n, 3)\n        nums.append(str(r))\n    return ''.join(reversed(nums))\n\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(file_name.split('.')[-1] for file_name in file_names if '.' in file_name)\n\n"}
{"task_id": "valid/100", "completion": "\n    if age < 18:\n        return \"Minor\"\n    elif 18 <= age < 30:\n        return \"Young\"\n    elif 30 <= age < 50:\n        return \"Adult\"\n    elif 50 <= age < 65:\n        return \"Mid-Age\"\n    else:\n        return \"Senior\"\n\n"}
{"task_id": "valid/101", "completion": "\n    if numerical_grade >= 90:\n        letter_grade = 'A'\n        gpa = 4.0\n    elif numerical_grade >= 80:\n        letter_grade = 'B'\n        gpa = 3.0\n    elif numerical_grade >= 70:\n        letter_grade = 'C'\n        gpa = 2.0\n    elif numerical_grade >= 60:\n        letter_grade = 'D'\n        gpa = 1.0\n    else:\n        letter_grade = 'F'\n        gpa = 0.0\n\n    return letter_grade, gpa\n\n"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item[1] * item[2]\n    return total\n"}
{"task_id": "valid/103", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count_dict = {}\n\n    for palindrome in palindrome_tuples:\n        vowel_count = 0\n        for char in palindrome:\n            if char in vowels:\n                vowel_count += 1\n        vowel_count_dict[palindrome] = vowel_count\n\n    return vowel_count_dict\n\n\npalindrome_tuples = ('level', 'radar', 'deed', 'hello', 'python', 'repaper')"}
{"task_id": "valid/104", "completion": "\n    # 1. If the string is empty, return \"Empty String\"\n    if s == \"\":\n        return \"Empty String\"\n\n    # 2. If the string is a number, return \"Number\"\n    if s.isdigit():\n        return \"Number\"\n\n    # 3. If the string is a float, return \"Float\"\n    if s.replace('.','').isdigit():\n        return \"Float\"\n\n    # 4. If the string is a alphanumeric, return \"Alphanumeric\"\n    if s.isalnum():\n        return \"Alphanumeric\"\n\n    # 5. If the string is a alphabetic, return \"Alphabetic\"\n    if s.isalpha():\n        return \"Alphabetic\"\n\n    # 6. If the string is a lowercase, return \"Lowercase\"\n    if s.islower():\n        return \"Lowercase\"\n\n    # 7. If the string is a uppercase, return \"Uppercase\"\n    if s.isupper():\n        return \"Uppercase\"\n\n    # 8. If the string is a titlecase, return \"Titlecase\"\n    if s.istitle():\n        return \"Titlecase\"\n\n    # 9. If the string is a space, return \"Space\"\n    if s.isspace():\n        return \"Space\"\n\n    # 10. If the string is a punctuation, return \"Punctuation\"\n    if s.isprintable() is False and s.isalnum() is False:\n        return \"Punctuation\"\n\n    # 11. If the string is a special character, return \"Special Character\"\n    if s.isprintable() is False and s.isalnum() is False and s.isspace() is False:\n        return \"Special Character\"\n\n    # 12. If the string is a symbol, return \"Symbol\"\n    if s.isprintable() is False and s.isalnum() is False and s.isspace() is False and s.islower() is False and s.isupper() is False:\n        return \"Symbol\"\n\n    # 13. If the string"}
{"task_id": "valid/105", "completion": "\n    # Create an empty hash set\n    s = set()\n\n    # Traverse through the given array\n    for i in range(0, len(arr)):\n        if arr[i] in s:\n            return True\n        s.add(0 - arr[i])\n\n    return False\n\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n    for dependency in dependencies:\n        name, version = dependency\n        version_number = int(version.split('_')[1])\n        if name in latest_versions:\n            if version_number > latest_versions[name][1]:\n                latest_versions[name] = (version, version_number)\n        else:\n            latest_versions[name] = (version, version_number)\n    return list(latest_versions.values())\n\n\ndependencies = [('package1', 'v1_auto_202009_1200'),\n                ('package1', 'v1_auto_202009_1300'),\n                ('package2', 'v2_auto_202009_1400'),\n                ('package1', 'v1_auto_202009_1500'),\n                ('package3', 'v3_auto_202009_1600'),\n                ('package3', 'v4_auto_202009_1700'),\n                ('package1', 'v5_auto_202009_1800')]\n"}
{"task_id": "valid/107", "completion": "\n    causes_dict = {}\n    for cause in causes:\n        action, result = cause.split(\" \")\n        if action in causes_dict:\n            causes_dict[action].append(result)\n        else:\n            causes_cause_dict[action] = [result]\n    return causes_dict\n\n\ncauses = [\"kill love\", \"missed opportunity\", \"lack of sleep\", \"kill love\", \"missed opportunity\", \"lack of sleep\"]"}
{"task_id": "valid/108", "completion": "\n    return name.replace(' ', '-').lower()\n\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(c) > 127 for c in text)\n\n"}
{"task_id": "valid/110", "completion": "\n    punctuations = ''''''\n    for char in string:\n        if char not in punctuations:\n            punctuations = punctuations + char\n    return punctuations\n"}
{"task_id": "valid/111", "completion": "\n    return [num ** exp for num in num_list]\n\n"}
{"task_id": "valid/112", "completion": "\n    min_values = [min(row) for row in grid]\n    return min_values\n\n\ngrid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"}
{"task_id": "valid/113", "completion": "\n    if n <= 0:\n        return\n    if current_num % 2 == 0:\n        print(\"Thank you\")\n    print_thank_you(n-1, current_num+1)\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    max_count = 0\n    for i in range(len(lst)):\n        if lst[i] == element:\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    return max_count\n\n"}
{"task_id": "valid/115", "completion": "\n    str_num = str(num)\n    first_digit = str_num[0]\n    return all(digit == first_digit for digit in str_num)\n\n"}
{"task_id": "valid/116", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    if len(s) == 0:\n        return s\n    elif s[0] in vowels:\n        return remove_vowels_recursive(s[1:])\n    else:\n        return s[0] + remove_vowels_recursive(s[1:])\n\n"}
{"task_id": "valid/117", "completion": "\n    help_text = \"Usage: my_app [OPTIONS]\\n\\nOptions:\\n\"\n    for option in options:\n        help_text += f\"  {option[0]}\\t{option[1]}\\n\"\n    return help_text\n\n\noptions = [(\"-h\", \"Show this help message\"), (\"-v\", \"Verbose mode\"), (\"-o FILE\", \"Output to FILE\")]"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n\n"}
{"task_id": "valid/119", "completion": "\n    count = 0\n    for i in Val:\n        if i == Val:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/120", "completion": "\n    return sample_bitset ^ 0xFFFFFFFF\n"}
{"task_id": "valid/121", "completion": "\n    vowels = \"aeiou\"\n    return all(c in vowels for c in s)\n\n"}
{"task_id": "valid/122", "completion": "\n    return sequence.count(subsequence)\n\nsequence = \"Please find the number of occurrences of this sentence. This sentence is just an example for the purpose of this function.\"\nsubsequence = \"this\""}
{"task_id": "valid/123", "completion": "\n    # your code here\n    return h // t\n\n"}
{"task_id": "valid/124", "completion": "\n    sum_odd_numbers = 0\n    for i in input_list:\n        if i % 2 != 0:\n            sum_odd_numbers += i\n    return sum_odd_numbers\n\n"}
{"task_id": "valid/125", "completion": "\n    vowels = \"aeiou\"\n    consonants = 0\n    for char in string.lower():\n        if char.isalpha() and char not in vowels:\n            consonants += 1\n    return consonants\n\n"}
{"task_id": "valid/126", "completion": "\n    # Initialize the electron count to 0\n    electron_count = 0\n\n    # Calculate the total energy in the grid\n    total_energy = sum(grid_energies)\n\n    # Calculate the energy per grid point\n    energy_per_grid_point = total_energy / len(grid_energies)\n\n    # Calculate the number of electrons based on the doping\n    electron_count = ados * (1 + dope)\n\n    # Calculate the number of electrons that can be excited from each grid point\n    electrons_per_grid_point = energy_per_grid_point / dos_grid_size\n\n    # Calculate the total number of electrons that can be excited from the grid\n    total_electrons = electrons_per_grid_point * len(grid_energies)\n\n    # If the total number of electrons is greater than the initial number of electrons, return the initial number of electrons\n    if total_electrons > electron_count:\n        return electron_count\n\n    # Otherwise, return the total number of electrons\n    return total_electrons\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    min_index = 1\n    max_index = len(arr) - 1\n    while min_index < max_index:\n        arr[min_index], arr[max_index] = arr[max_index], arr[min_index]\n        min_index += 2\n        max_index -= 2\n    return arr\n\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n\n\ncolor_list = [(\"red\", \"#FF0000\"), (\"green\", \"#00FF00\"), (\"blue\", \"#0000FF\")]"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    brackets = {'(': ')', '{': '}', '[': ']'}\n    for char in string:\n        if char in brackets:\n            stack.append(char)\n        elif len(stack) == 0 or brackets[stack.pop()] != char:\n            return False\n    return len(stack) == 0\n\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for element in lst:\n        if element not in unique_elements:\n            unique_elements.append(element)\n        if len(unique_elements) == 3:\n            break\n    return unique_elements\n\n"}
{"task_id": "valid/132", "completion": "\n    fruit_list.sort()\n    return fruit_list\n\nfruit_list = ['banana', 'apple', 'kiwi', 'orange', 'pineapple', 'grape']"}
{"task_id": "valid/133", "completion": "\n    sublists = []\n    for i in range(len(lst) + 1):\n        for j in range(i + 1, len(lst) + 1):\n            sublists.append(lst[i:j])\n    return sublists\n\n"}
{"task_id": "valid/134", "completion": "\n    return bool(re.search(r'\\d\\.\\d', string))\n\n"}
{"task_id": "valid/135", "completion": "\n    from django.db import migrations\n\n    class Migration(migrations.Migration):\n\n        dependencies = [\n            (f'{app_name}', '0001_initial'),\n        ]\n\n        operations = [\n            migrations.AddField(\n                model_name='commmember',\n                name='{field_name}',\n                field=models.CharField(default='default_value', max_length=200),\n                preserve_default=False,\n            ),\n        ]\n\n    return Migration\n\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = set(list1).intersection(list2)\n    return sum(common_elements)\n\n"}
{"task_id": "valid/137", "completion": "\n    return math.ceil(len(df))\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: getattr(x, attr))\n\n"}
{"task_id": "valid/139", "completion": "\n    start_index = (page_number - 1) * items_per_page\n    end_index = page_number * items_per_page\n    return items[start_index:end_index]\n\n\nitems = [\"item1\", \"item2\", \"item3\", \"item4\", \"item5\", \"item6\", \"item7\", \"item8\", \"item9\", \"item10\"]\nitems_per_page = 3\npage_number = 2\n"}
{"task_id": "valid/140", "completion": "\n    n = int(n_str)\n    return str(n * 2)\n\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        'home': [0.0, 0.0],\n        'preset1': [1.0, 1.0],\n        'preset2': [2.0, 2.0],\n        'preset3': [3.0, 3.0],\n        'preset4': [4.0, 4.0],\n        'preset5': [5.0, 5.0]\n    }\n\n    return presets[preset_name]\n\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = set(list1).intersection(list2)\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product\n\n"}
{"task_id": "valid/143", "completion": "\n    if allow_multiple_answer:\n        print(\"Allowing multiple answers\")\n    else:\n        print(\"Not allowing multiple answers\")\n\n    if zoom_level > 0:\n        print(f\"Zoom level is set to {zoom_level}\")\n    else:\n        print(\"Zoom level is not set\")\n\n\nquiz_system_behavior(True, 10)\nquiz_system_behavior(False, 0)\nquiz_system_behavior(True, 0)\nquiz_system_behavior(False, 10)\n\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    new_sentence = ''\n    for char in sentence:\n        if char not in vowels:\n            new_sentence += char\n    return new_sentence\n\n"}
{"task_id": "valid/146", "completion": "\n    merged_object = {}\n    for key, value in {**a, **b}.items():\n        if key.isalpha():\n            if isinstance(value, dict):\n                merged_object[key] = merge_objects(a.get(key, {}), b.get(key, {}))\n            else:\n                merged_object[key] = value\n\n    return dict(sorted(merged_object.items()))\n\n\na = {'a': 1, 'b': 2, 'n': {'x': 5, '': 6}}\nb = {'c': 3, 'nested': {'y': 7, 'z': 8}}\n"}
{"task_id": "valid/147", "completion": "\n    try:\n        return max(d.values())\n    except ValueError:\n        return \"Empty dictionary\"\n    except TypeError:\n        return \"Not a dictionary\"\n\n"}
{"task_id": "valid/148", "completion": "\n    grades = dict[key]\n    avg = sum(grades) / len(grades)\n    return avg\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == \"\":\n        return None\n    else:\n        return string.replace('e', '*')\n\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n\n"}
{"task_id": "valid/151", "completion": "\n    return sqrt(x).is_integer()\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n"}
