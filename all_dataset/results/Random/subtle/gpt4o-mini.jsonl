{"task_id": "EvoEval/0", "completion": "\n    if not numbers or threshold < 0:\n        return False\n\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False\n"}
{"task_id": "EvoEval/1", "completion": "\n    '()']\n    \"\"\"\n    result = []\n    current_group = []\n    balance = 0\n\n    for char in paren_string:\n        if char == '(':\n            balance += 1\n            current_group.append(char)\n        elif char == ')':\n            balance -= 1\n            current_group.append(char)\n\n        if balance == 0 and current_group:\n            result.append(''.join(current_group))\n            current_group = []\n\n    return sorted(result)\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return (integer_part, decimal_part)\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not numbers:\n        return float('nan')\n    \n    median = sorted(numbers)[len(numbers) // 2]\n    absolute_deviations = [abs(x - median) for x in numbers]\n    mad = sorted(absolute_deviations)[len(absolute_deviations) // 2]\n    \n    return mad\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not numbers:\n        return []\n    \n    result = []\n    for number in numbers:\n        result.append(number)\n        result.append(delimeter)\n    \n    result.pop()  # Remove the last delimiter\n    return result\n"}
{"task_id": "EvoEval/6", "completion": "\n    levels = []\n    current_level = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n        elif char == ')':\n            if current_level > 0:\n                levels.append(current_level)\n                current_level -= 1\n\n    return sorted(levels, reverse=True)\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring not in s]\n"}
{"task_id": "EvoEval/8", "completion": "\n    if not numbers:\n        return (0, 1)\n    \n    total_sum = sum(num for num in numbers if num >= 0)\n    total_product = 1\n    for num in numbers:\n        if num >= 0:\n            total_product *= num\n            \n    return (total_sum, total_product)\n"}
{"task_id": "EvoEval/9", "completion": "\n    if not numbers:\n        return []\n\n    rolling_mins = []\n    current_min = float('inf')\n\n    for number in numbers:\n        current_min = min(current_min, number)\n        rolling_mins.append(current_min)\n\n    return rolling_mins\n"}
{"task_id": "EvoEval/10", "completion": "\n    n = len(string)\n    for i in range(n):\n        if is_palindrome(string[:n - i]):\n            return string + string[n - i:][::-1]\n    return string\n"}
{"task_id": "EvoEval/11", "completion": "\n    return ''.join('1' if x != y else '0' for x, y in zip(a, b))[::-1]\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    return min(strings, key=len)\n"}
{"task_id": "EvoEval/13", "completion": "\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = y, x % y\n        return x\n\n    return abs(a * b) // gcd(a, b)\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[:i] for i in range(len(string), 0, -1)]\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n"}
{"task_id": "EvoEval/17", "completion": "\n    note_durations = {\n        'o|': 4,\n        '.|': 1,\n        '||': 2,\n        '..|': 2,\n        '|': 1\n    }\n\n    notes = music_string.split()\n    durations = {note_durations[note] for note in notes if note in note_durations}\n    \n    return sorted(durations, reverse=True)\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    start = 0\n    \n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1  # Move to the next character to allow for overlapping\n        \n    return count\n"}
{"task_id": "EvoEval/19", "completion": "\n    # Define a mapping from words to their corresponding numeric values\n    word_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Split the input string into words\n    words = numbers.split()\n\n    # Convert words to their numeric values\n    numeric_values = [word_to_number[word] for word in words]\n\n    # Sort the numeric values in descending order\n    sorted_values = sorted(numeric_values, reverse=True)\n\n    # Convert sorted numeric values back to words\n    number_to_word = {v: k for k, v in word_to_number.items()}\n    sorted_words = [number_to_word[value] for value in sorted_values]\n\n    # Join the sorted words into a single string and return\n    return ' '.join(sorted_words)\n"}
{"task_id": "EvoEval/20", "completion": "\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two numbers.\")\n\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i + 1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return (closest_pair[1], closest_pair[0])\n"}
{"task_id": "EvoEval/21", "completion": "\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two elements.\")\n    \n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    if max_val == min_val:\n        return [0.0] * len(numbers)\n    \n    rescaled = [(num - min_val) / (max_val - min_val) for num in numbers]\n    return sorted(rescaled, reverse=True)\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string)\n"}
{"task_id": "EvoEval/24", "completion": "\n    if n <= 1:\n        return None\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors[::-1]\n"}
{"task_id": "EvoEval/26", "completion": "\n    unique_numbers = list(set(numbers))\n    return unique_numbers[::-1]\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case not in ['lower', 'upper']:\n        raise ValueError(\"exclusive_case must be either 'lower' or 'upper'\")\n\n    result = []\n    for char in string:\n        if char.islower() and exclusive_case == 'upper':\n            result.append(char.upper())\n        elif char.isupper() and exclusive_case == 'lower':\n            result.append(char.lower())\n        else:\n            result.append(char)\n\n    return ''.join(result)\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ''.join(strings)\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted(num for num in l if isinstance(num, (int, float)) and num > 0)\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) < 2:\n        raise ValueError(\"The list of coefficients must have at least two elements.\")\n    \n    # Using the Newton-Raphson method to find a root\n    def derivative(xs):\n        return [i * coeff for i, coeff in enumerate(xs)][1:]\n\n    x0 = 0  # Initial guess\n    tolerance = 1e-7\n    max_iterations = 1000\n\n    for _ in range(max_iterations):\n        f_x0 = poly(xs, x0)\n        f_prime_x0 = poly(derivative(xs), x0)\n\n        if abs(f_prime_x0) < tolerance:  # Avoid division by zero\n            break\n\n        x1 = x0 - f_x0 / f_prime_x0\n\n        if abs(x1 - x0) < tolerance:\n            return x1\n\n        x0 = x1\n\n    raise ValueError(\"Failed to converge to a root.\")\n"}
{"task_id": "EvoEval/33", "completion": "\n    # Extract elements that are divisible by 3 and sort them in descending order\n    divisible_by_three = sorted([x for x in l if x % 3 == 0], reverse=True)\n    \n    # Create a new list to hold the result\n    result = []\n    div_index = 0  # Index for the sorted divisible by three elements\n\n    for x in l:\n        if x % 3 == 0:\n            result.append(divisible_by_three[div_index])\n            div_index += 1\n        else:\n            result.append(x)\n\n    return result\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n"}
{"task_id": "EvoEval/35", "completion": "\n    if not l:\n        return None\n    min_val = l[0]\n    for num in l:\n        if num < min_val:\n            min_val = num\n    return min_val\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 3 == 0:\n            count += str(i).count('8')\n    return count\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    odd_indices = [l[i] for i in range(len(l)) if i % 2 != 0]\n    \n    sorted_even = sorted(even_indices, reverse=True)\n    \n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(sorted_even[i // 2])\n        else:\n            result.append(odd_indices[i // 2])\n    \n    return result\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "EvoEval/39", "completion": "\n    if n < 0:\n        return None\n\n    fibs = [0, 1]\n    while len(fibs) <= n:\n        fibs.append(fibs[-1] + fibs[-2])\n\n    prime_fibs = []\n    for num in fibs:\n        if num > 1 and all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            prime_fibs.append(num)\n\n    return prime_fibs\n"}
{"task_id": "EvoEval/40", "completion": "\n    n = len(l)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * (n - 1) // 2\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n"}
{"task_id": "EvoEval/43", "completion": "\n    seen = set()\n    for number in l:\n        if 1 - number in seen:\n            return True\n        seen.add(number)\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if base < 2 or base > 36:\n        raise ValueError(\"Base must be between 2 and 36\")\n    \n    if x == 0:\n        return '0'\n    \n    digits = []\n    while x:\n        digits.append(int(x % base))\n        x //= base\n    \n    return ''.join(str(x) for x in digits[::-1])\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n"}
{"task_id": "EvoEval/46", "completion": "\n    def fib4(n: int) -> str:\n    if n < 0:\n        return '0'\n    elif n == 0:\n        return '0'\n    elif n == 1:\n        return '4'\n    \n    a, b = 0, 4\n    for _ in range(2, n + 1):\n        a, b = b, a + b + 4\n    return str(b)\n"}
{"task_id": "EvoEval/47", "completion": "\n    if not l:\n        return 0\n    l.sort()\n    n = len(l)\n    mid = n // 2\n    if n % 2 == 0:\n        return (l[mid - 1] + l[mid]) / 2\n    else:\n        return l[mid]\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]\n"}
{"task_id": "EvoEval/49", "completion": "\n    if p <= 0 or q <= 0:\n        raise ValueError(\"p and q must be positive integers.\")\n    \n    result = (2 * n + (p % q)) % q\n    return result\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char in vowels])\n"}
{"task_id": "EvoEval/52", "completion": "\n    return all(x < t for x in l)\n"}
{"task_id": "EvoEval/53", "completion": "\n    return (x + y) + 1\n"}
{"task_id": "EvoEval/54", "completion": "\n    if len(s0) != len(s1):\n        return False\n    return sorted(s0) == sorted(s1)\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "EvoEval/57", "completion": "\n    if not l:\n        return False\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(set(l1) & set(l2), reverse=True)\n"}
{"task_id": "EvoEval/59", "completion": "\n    if n <= 1:\n        return None\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/60", "completion": "\n    if m > n:\n        return 0\n    return sum(range(m, n + 1))\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for char in brackets:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [i * coeff for i, coeff in enumerate(xs)][1:]\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib = [0, 0, 1]  # Initialize the first three Fibonacci-like numbers\n        for i in range(3, n + 1):\n            fib.append(fib[i - 3] + fib[i - 2] - fib[i - 1])\n        return fib[n]\n"}
{"task_id": "EvoEval/64", "completion": "\n    count = 0\n    vowels = 'aeiou'\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    if shift < 0:\n        shift = -shift\n        x_str = str(x)[::-1]\n    else:\n        x_str = str(x)\n\n    shift = shift % len(x_str)\n    return x_str[shift:] + x_str[:shift]\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(char) for char in s)\n"}
{"task_id": "EvoEval/67", "completion": "\n    # Split the input string to extract the number of apples and oranges\n    parts = s.split(',')\n    apples = int(parts[0].split()[0])  # Extract the number of apples\n    oranges = int(parts[1].split()[0])  # Extract the number of oranges\n\n    # Calculate the total number of fruits in the basket\n    total_fruits = apples + oranges + n\n\n    # Return the number of mangoes, which is the total fruits minus the number of apples and oranges\n    return total_fruits - (apples + oranges)\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return []\n\n    smallest_odd = float('inf')\n    smallest_index = -1\n\n    for index, value in enumerate(arr):\n        if value % 2 == 1:  # Check if the value is odd\n            if value < smallest_odd:\n                smallest_odd = value\n                smallest_index = index\n\n    if smallest_index == -1:\n        return []\n    \n    return [smallest_index, smallest_odd]\n"}
{"task_id": "EvoEval/69", "completion": "\n    def search(nums):\n    from collections import Counter\n    \n    # Count the frequency of each number in the list\n    frequency = Counter(nums)\n    \n    # Initialize the result variable\n    result = -1\n    \n    # Iterate through the frequency dictionary\n    for num in frequency:\n        if num > 0 and frequency[num] >= num:\n            result = max(result, num)\n    \n    return result\n"}
{"task_id": "EvoEval/70", "completion": "\n    def strange_sort_list(st):\n    if not st:\n        return []\n    \n    sorted_list = sorted(st)\n    result = []\n    \n    while sorted_list:\n        if sorted_list:\n            result.append(sorted_list.pop())  # Append the maximum\n        if sorted_list:\n            result.append(sorted_list.pop(0))  # Append the minimum\n    \n    return result\n"}
{"task_id": "EvoEval/71", "completion": "\n    if a <= 0 or c <= 0:\n        return -1\n    \n    # Using Heron's formula to calculate the area\n    s = (a + c + b) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    \n    return round(area, 3)\n"}
{"task_id": "EvoEval/72", "completion": "\n    def willit_fly(q, max_weight):\n    if sum(q) > max_weight:\n        return False\n    return sum(q) % 2 == 0 and all(x % 2 == 0 for x in q)\n"}
{"task_id": "EvoEval/73", "completion": "\n    n = len(arr)\n    changes = 0\n\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n\n    return changes\n"}
{"task_id": "EvoEval/74", "completion": "\n    def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 > total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 > total_chars_lst1:\n        return lst2\n    else:\n        return []\n"}
{"task_id": "EvoEval/75", "completion": "\n    if a >= 100:\n        return False\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if is_prime(i):\n            count += 1\n            if count == 4:\n                return True\n    return False\n"}
{"task_id": "EvoEval/76", "completion": "\n    if n <= 1:\n        return (False, None) if x != 1 else (True, 0)\n    \n    power = 0\n    current = 1\n    \n    while current < x:\n        current *= n\n        power += 1\n    \n    if current == x:\n        return (True, power)\n    else:\n        return (False, None)\n"}
{"task_id": "EvoEval/77", "completion": "\n    def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is the cube of some positive number.\n    You can assume input is always valid.   \n    Examples:\n    iscube(27) ==> True\n    iscube(64) ==> True\n    iscube(-1) ==> False\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a < 0:\n        return False\n    return round(a ** (1/3)) ** 3 == a\n"}
{"task_id": "EvoEval/78", "completion": "\n    # Define the set of digits to count\n    count_digits = {'1', '4', '6', '8', '9', 'A', 'C', 'D', 'E', 'F'}\n    \n    # Initialize a counter\n    count = 0\n    \n    # Iterate through each character in the hexadecimal number\n    for char in num:\n        if char in count_digits:\n            count += 1\n            \n    return count\n"}
{"task_id": "EvoEval/79", "completion": "\n    if decimal == 0:\n        return \"db0bd\"\n    \n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    \n    return \"db\" + binary + \"bd\"\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    \n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) < 4:\n            return False\n            \n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    letter_grades = []\n    for gpa in grades:\n        if gpa > 3.7:\n            letter_grades.append('A+')\n        elif gpa > 3.3:\n            letter_grades.append('A')\n        elif gpa > 3.0:\n            letter_grades.append('A-')\n        elif gpa > 2.7:\n            letter_grades.append('B+')\n        elif gpa > 2.3:\n            letter_grades.append('B')\n        elif gpa > 2.0:\n            letter_grades.append('B-')\n        elif gpa > 1.7:\n            letter_grades.append('C+')\n        elif gpa > 1.3:\n            letter_grades.append('C')\n        elif gpa > 1.0:\n            letter_grades.append('C-')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n"}
{"task_id": "EvoEval/82", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    length = len(string)\n    return is_prime(length)\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n <= 0:\n        return 0\n    \n    count = 0\n    for i in range(1, 10**n):\n        str_i = str(i)\n        if len(str_i) == n and (str_i[0] == '1' or str_i[0] == '2'):\n            count += 1\n            \n    return count\n"}
{"task_id": "EvoEval/84", "completion": "\n    digit_sum = sum(int(digit) for digit in str(N))\n    return hex(digit_sum)[2:].upper()\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst)\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split(' ')\n    ordered_words = []\n\n    for word in words:\n        if word:  # Check if the word is not empty\n            ordered_word = ''.join(sorted(word))\n            ordered_words.append(ordered_word)\n        else:\n            ordered_words.append('')  # Preserve the space\n\n    return ' '.join(ordered_words)\n"}
{"task_id": "EvoEval/87", "completion": "\n    if x < 0 or x >= len(lst):\n        return []\n\n    coordinates = []\n    for i, row in enumerate(lst):\n        if x < len(row):\n            coordinates.append((i, row[x]))\n\n    return sorted(coordinates, key=lambda coord: (coord[1], coord[0]))\n"}
{"task_id": "EvoEval/88", "completion": "\n    # Remove duplicates\n    unique_array = list(set(array))\n    \n    # Sort based on the first element's parity\n    if unique_array and unique_array[0] % 2 == 0:\n        return sorted(unique_array)\n    else:\n        return sorted(unique_array, reverse=True)\n"}
{"task_id": "EvoEval/89", "completion": "\n    shift = 4  # Example shift value\n    result = []\n    \n    for char in s:\n        if char.isalpha():\n            # Rotate within the alphabet\n            start = ord('a') if char.islower() else ord('A')\n            result.append(chr(start + (ord(char) - start + shift) % 26))\n        else:\n            result.append(char)\n    \n    return ''.join(result)\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    \n    unique_lst = list(set(lst))\n    unique_lst.sort()\n    \n    return unique_lst[-2] if len(unique_lst) >= 2 else None\n"}
{"task_id": "EvoEval/91", "completion": "\n    sentences = S.split('.')\n    boredom_count = 0\n    \n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith(\"I\") and sentence.endswith(\"boredom\"):\n            boredom_count += 1\n            \n    return boredom_count\n"}
{"task_id": "EvoEval/92", "completion": "\n    def any_int(x, y):\n    return abs(x) + abs(y) == abs(x + y)\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    \n    for char in message:\n        if char in vowels:\n            if char.islower():\n                encoded_message += chr((ord(char) - ord('a') + 3) % 26 + ord('a'))\n            else:\n                encoded_message += chr((ord(char) - ord('A') + 3) % 26 + ord('A'))\n        else:\n            encoded_message += char\n            \n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    # Remove duplicates and filter out non-integer values\n    filtered_lst = list(filter(lambda x: isinstance(x, int), set(lst)))\n    \n    # Find the smallest value in the list\n    smallest_value = min(filtered_lst)\n    \n    # Calculate the sum of the digits of the smallest value\n    digit_sum = sum(int(digit) for digit in str(smallest_value))\n    \n    return digit_sum\n"}
{"task_id": "EvoEval/95", "completion": "\n    def check_dict_case(d):\n    if not d or len(d) < 3:\n        return False\n    \n    for key in d.keys():\n        if not isinstance(key, str) or not key.islower():\n            return False\n            \n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    if n < 2:\n        return []\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n + 1) if is_prime(i)]\n    return primes[::-1]\n"}
{"task_id": "EvoEval/97", "completion": "\n    return (a % 10) + (b % 10)\n"}
{"task_id": "EvoEval/98", "completion": "\n    return sum(1 for char in s if char.isupper())\n"}
{"task_id": "EvoEval/99", "completion": "\n    def closest(value):\n    # Convert the string to a float\n    num = float(value)\n    # Use the built-in round function to get the closest integer\n    return round(num)\n"}
