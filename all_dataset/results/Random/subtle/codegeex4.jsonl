{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    result = []\n    stack = []\n    current_group = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                current_group.append(char)\n                if not stack:\n                    result.append(''.join(current_group))\n                    current_group = []\n            else:\n                break\n    return sorted(result)\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    return (int(number), number - int(number))\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    median = statistics.median(numbers)\n    deviations = [abs(x - median) for x in numbers]\n    mad = statistics.median(deviations)\n    return mad\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    return [delimeter] + [delimeter if i != len(numbers) - 1 else '' for i in range(len(numbers))]\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    stack = []\n    max_depth = 0\n    current_depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n            stack.append(current_depth)\n        elif char == ')':\n            current_depth -= 1\n            stack.append(current_depth)\n\n    return sorted(stack, reverse=True)\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring not in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    if not numbers:\n        return 0, 1\n\n    sum_ = 0\n    product = 1\n\n    for num in numbers:\n        if num >= 0:\n            sum_ += num\n            product *= num\n\n    return sum_, product\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(min(numbers[:i+1]))\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            return string + string[i:][::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_string = strings[0]\n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n    return shortest_string\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    return a * b // gcd(a, b)"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[:i] for i in range(len(string), 0, -1)]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n    "}
{"task_id": "EvoEval/17", "completion": "\n    notes = music_string.split()\n    note_lengths = []\n    for note in notes:\n        if note == 'o|':\n            note_lengths.append(4)\n        elif note == '.|':\n            note_lengths.append(2)\n        elif note == '||':\n            note_lengths.append(0)\n        else:\n            note_lengths.append(1)\n    return sorted(set(note_lengths), reverse=True)\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    return string.count(substring)"}
{"task_id": "EvoEval/19", "completion": "\n    # Create a dictionary to map the string numerals to their corresponding integer values\n    numeral_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Split the input string into a list of numerals\n    numerals = numbers.split('-')\n\n    # Convert the numerals to integers and sort them in descending order\n    sorted_numerals = sorted(numerals, key=lambda x: numeral_dict[x], reverse=True)\n\n    # Join the sorted numerals back into a string with dashes\n    sorted_string = '-'.join(sorted_numerals)\n\n    return sorted_string\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers\")\n    min_diff = float('inf')\n    result = None\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i + 1], numbers[i])\n    return result\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string)"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    return list(set(numbers))\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.swapcase()\n    elif exclusive_case == 'upper':\n        return string.swapcase()\n    else:\n        return string\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ''.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) < 2:\n        raise ValueError(\"The polynomial must have at least two coefficients\")\n    if xs[0] == 0:\n        raise ValueError(\"The first coefficient must be non-zero\")\n    if xs[1] == 0:\n        raise ValueError(\"The second coefficient must be non-zero\")\n    if xs[-1] == 0:\n        raise ValueError(\"The last coefficient must be non-zero\")\n    if xs[0] * xs[-1] > 0:\n        raise ValueError(\"The product of the first and last coefficients must be negative\")\n    if xs[1] * xs[-1] > 0:\n        raise ValueError(\"The product of the second and last coefficients must be negative\")\n    if xs[0] * xs[1] > 0:\n        raise ValueError(\"The product of the first and second coefficients must be negative\")\n    if xs[0] * xs[-1] > 0:\n        raise ValueError(\"The product of the first and last coefficients must be negative\")\n    if xs[1] * xs[-1] > 0:\n        raise ValueError(\"The product of the second and last coefficients must be negative\")\n    if xs[0] * xs[1] > 0:\n        raise ValueError(\"The product of the first and second coefficients must be negative\")\n    if xs[0] * xs[-1] > 0:\n        raise ValueError(\"The product of the first and last coefficients must be negative\")\n    if xs[1] * xs[-1] > 0:\n        raise ValueError(\"The product of the second and last coefficients must be negative\")\n    if xs[0] * xs[1] > 0:\n        raise ValueError(\"The product of the first and second coefficients must be negative\")\n    if xs[0] * xs[-1] > 0:\n        raise ValueError(\"The product of the first and last coefficients must be negative\")\n    if xs[1] * xs[-1] > 0:\n        raise ValueError(\"The product of the second and last coefficients must be negative\")\n    if xs[0] * xs[1] > 0:\n        raise ValueError(\"The product of the first and second coefficients must be negative\")\n    if xs[0] * xs[-1] > 0:\n        raise ValueError(\"The product of the first and last coefficients must be negative\")\n    if xs[1] * xs[-1] > 0:\n        raise ValueError(\"The product"}
{"task_id": "EvoEval/33", "completion": "\n    l = list(l)\n    l1 = []\n    l2 = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l1.append(l[i])\n        else:\n            l2.append(l[i])\n    l1.sort(reverse=True)\n    l2.sort()\n    l3 = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l3.append(l1.pop())\n        else:\n            l3.append(l2.pop())\n    return l3\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 22 == 0:\n            count += str(i).count('8')\n    return count\n"}
{"task_id": "EvoEval/37", "completion": "\n    l = list(l)\n    l[::2] = sorted(l[::2], reverse=True)\n    return l\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n):\n        if n <= 0:\n            return []\n        elif n == 1:\n            return [0]\n        elif n == 2:\n            return [0, 1]\n        else:\n            fib_seq = [0, 1]\n            while len(fib_seq) < n:\n                fib_seq.append(fib_seq[-1] + fib_seq[-2])\n            return fib_seq\n\n    fib_seq = fib(n)\n    for num in fib_seq:\n        if is_prime(num):\n            return num\n    return None\n"}
{"task_id": "EvoEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * (n + 1) // 2\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 1:\n                return True\n    return False\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10\")\n    if x < 0:\n        raise ValueError(\"x must be non-negative\")\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return \"\".join(digits[::-1])"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '4'\n    if n == 4:\n        return '8'\n    if n == 5:\n        return '14'\n    if n == 6:\n        return '26'\n    if n == 7:\n        return '50'\n    if n == 8:\n        return '98'\n    if n == 9:\n        return '190'\n    if n == 10:\n        return '372'\n    if n == 11:\n        return '726'\n    if n == 12:\n        return '1430'\n    if n == 13:\n        return '2864'\n    if n == 14:\n        return '5688'\n    if n == 15:\n        return '11356'\n    if n == 16:\n        return '22652'\n    if n == 17:\n        return '45364'\n    if n == 18:\n        return '90728'\n    if n == 19:\n        return '180144'\n    if n == 20:\n        return '360288'\n    if n == 21:\n        return '720576'\n    if n == 22:\n        return '1441152'\n    if n == 23:\n        return '2882304'\n    if n == 24:\n        return '5764608'\n    if n == 25:\n        return '11529216'\n    if n == 26:\n        return '23058432'\n    if n == 27:\n        return '46116864'\n    if n == 28:\n        return '9227464'\n    if n == 29:\n        return '18446736'\n    if n == 30:\n        return '36893488'\n    if n == 31:\n        return '73786976'\n    if n == 32:\n        return '14757344'\n    if n == 33:\n        return '29496729'\n    if n == 34:\n        return '58893584'\n    if n == 35:\n        return '117779648'\n    if n == 36:\n        return '235559"}
{"task_id": "EvoEval/47", "completion": "\n    if len(l) == 0:\n        return 0\n    else:\n        l.sort()\n        if len(l) % 2 == 0:\n            return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n        else:\n            return l[len(l) // 2]"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return (2 * n + p) % q\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    return \"\".join([char for char in text if char not in consonants])\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    return all(x < t for x in l)\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n"}
{"task_id": "EvoEval/54", "completion": "\n    if len(s0) != len(s1):\n        return False\n    for c in s0:\n        if c not in s1:\n            return False\n    return True"}
{"task_id": "EvoEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) < 2:\n        return False\n    return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    i = j = 0\n    res = []\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            res.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n    return res\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    if n < 2:\n        return None\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [i * j for i, j in enumerate(xs)][1:]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n\n    The sequence is a sequence similar the Fibacci sequne that as\n fib(0) == 0\n  fib(1) == 0\n    fibf(2) == 1\n  (n) fibib-3 +fibn2 - fibf(n).   Please a to efficiently compute the- element the fibf number sequence.\n  >>> fibfib1\n   0\n   >>> fibfib(5)\n    -\n    >>> fibfib\n    4\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-3) + fibfib(n-2) - fibfib(n-1)\n    \"\"\"\n    The sequence is a sequence similar the Fibacci sequne that as\n fib(0) == 0\n  fib(1) == 0\n    fibf(2) == 1\n  (n) fibib-3 +fibn2 - fibf(n).   Please a to efficiently compute the- element the fibf number sequence.\n  >>> fibfib1\n   0\n   >>> fibfib(5)\n    -\n    >>> fibfib\n    4\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-3) + fibfib(n-2) - fibfib(n-1)\n    \"\"\"\n    The sequence is a sequence similar the Fibacci sequne that as\n fib(0) == 0\n  fib(1) == 0\n    fibf(2) == 1\n  (n) fibib-3 +fibn2 - fibf(n).   Please a to efficiently compute the- element the fibf number sequence.\n  >>> fibfib1\n   0\n   >>> fibfib(5)\n    -\n    >>> fibfib\n    4\n    \"\"\"\n    if n == 0:\n        return 0"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = \"aeiou\"\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    return str(x)[-shift:] + str(x)[:-shift]\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) - ord('a') + 1 for c in s.lower() if c.isalpha())\n"}
{"task_id": "EvoEval/67", "completion": "\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n   "}
{"task_id": "EvoEval/68", "completion": "\n    # Initialize variables to store the smallest odd value and its index\n    smallest_odd_value = float('inf')\n    smallest_odd_index = -1\n\n    # Iterate through the array to find the smallest odd value and its index\n    for i, value in enumerate(arr):\n        if value % 2 != 0 and value < smallest_odd_value:\n            smallest_odd_value = value\n            smallest_odd_index = i\n\n    # Return the plucked node if an odd value was found, otherwise return an empty array\n    if smallest_odd_index != -1:\n        return [smallest_odd_index, smallest_odd_value]\n    else:\n        return []\n"}
{"task_id": "EvoEval/69", "completion": "\n    def search(lst):\n        freq = {}\n        for num in lst:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n        for num, count in freq.items():\n            if num > 0 and count >= num:\n                return num\n        return -1\n    return search\n"}
{"task_id": "EvoEval/70", "completion": "\n    return sorted(st, reverse=True) + sorted(st, reverse=False)\n"}
{"task_id": "EvoEval/71", "completion": "\n    if a + c > b and a + b > c and b + c > a:\n        return round((a * c * math.sin(math.radians(180 - math.degrees(math.acos((a**2 + c**2 - b**2) / (2 * a * c)))))) / 2, 3)\n    else:\n        return -1\n"}
{"task_id": "EvoEval/72", "completion": "\n    if q[0] % 2 == 0 and sum(q) <= max(q):\n        return True\n    else:\n        return False"}
{"task_id": "EvoEval/73", "completion": "\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return 0\n        else:\n            return 1\n    if len(arr) == 3:\n        if arr[0] == arr[2]:\n            return 0\n        else:\n            return 1\n    if len(arr) == 4:\n        if arr[0] == arr[3] and arr[1] == arr[2]:\n            return 0\n        elif arr[0] == arr[3] or arr[1] == arr[2]:\n            return 1\n        else:\n            return 2\n    if len(arr) == 5:\n        if arr[0] == arr[4] and arr[1] == arr[3]:\n            return 0\n        elif arr[0] == arr[4] or arr[1] == arr[3]:\n            return 1\n        else:\n            return 2\n    if len(arr) == 6:\n        if arr[0] == arr[5] and arr[1] == arr[4] and arr[2] == arr[3]:\n            return 0\n        elif arr[0] == arr[5] and arr[1] == arr[4] or arr[2] == arr[3]:\n            return 1\n        elif arr[0] == arr[5] or arr[1] == arr[4] or arr[2] == arr[3]:\n            return 2\n        else:\n            return 3\n    if len(arr) == 7:\n        if arr[0] == arr[6] and arr[1] == arr[5] and arr[2] == arr[4] and arr[3] == arr[3]:\n            return 0\n        elif arr[0] == arr[6] and arr[1] == arr[5] and arr[2] == arr[4] or arr[3] == arr[3]:\n            return 1\n        elif arr[0] == arr[6] and arr[1] == arr[5] or arr[2] == arr[4] or arr[3] == arr[3]:\n            return 2\n        elif arr[0] == arr"}
{"task_id": "EvoEval/74", "completion": "\n    def total_match(lst1, lst2):\n        if len(lst1) > len(lst2):\n            return lst1\n        elif len(lst2) > len(lst1):\n            return lst2\n        else:\n            return lst1\n\n    print(total_match([], []))\n    print(total_match(['admin'], ['I ', 'Hi']))\n    print(total_match([' ', 'admin'], ['hi', 'admin', 'project']))\n    print(total_match(['', 'hi', 'admin'], ['hi', '']))\n    print(total_match(['1', '2', '3', '4', '5'], ['', '', '', '', '5']))\n    print(total_match(['1', '2', '3', '4', '5'], ['', '', '', '', '5']))\n    print(total_match(['1', '2', '3', '4', '5'], ['', '', '', '', '5']))\n    print(total_match(['1', '2', '3', '4', '5'], ['', '', '', '', '5']))\n    print(total_match(['1', '2', '3', '4', '5'], ['', '', '', '', '5']))\n    print(total_match(['1', '2', '3', '4', '5'], ['', '', '', '', '5']))\n    print(total_match(['1', '2', '3', '4', '5'], ['', '', '', '', '5']))\n    print(total_match(['1', '2', '3', '4', '5'], ['', '', '', '', '5']))\n    print(total_match(['1', '2', '3', '4', '5'], ['', '', '', '', '5']))\n    print(total_match(['1', '2', '3', '4', '5'], ['', '', '', '', '5']))\n    print(total_match(['1', '2', '3', '4', '5'], ['', '', '', '', '5']))\n    print(total_match(['1', '2', '3', '4', '5'], ['', '', '', '', '5']))\n    print(total_match(['1', '2', '3', '4', '5'], ['', '', '', '', '5']))\n    print(total_match(['1', '2', '3', '4', '5'], ['', '', '', '', '5']))\n    print(total_match(['1', '2', '3', '4', '5'], ['', '', '', '', '5']))\n    print(total_match(['1', '2', '3', '4', '"}
{"task_id": "EvoEval/75", "completion": "\n    if a < 2:\n        return False\n    for i in range(2, int(a ** 0.5) + 1):\n        if a % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x < 1 or n < 1:\n        return False, None\n    power = 1\n    while power <= x:\n        if power == x:\n            return True, n\n        power *= n\n    return False, None\n"}
{"task_id": "EvoEval/77", "completion": "\n    def iscubea(a):\n        if a < 0:\n            return False\n        elif a == 0:\n            return True\n        else:\n            for i in range(1, a+1):\n                if i**3 == a:\n                    return True\n            return False\n    print(iscubea(64))\n    print(iscubea(180))\n    print(iscubea(0))\n    print(iscubea(-1))\n    print(iscubea(1))\n    print(iscubea(2))\n    print(iscubea(3))\n    print(iscubea(4))\n    print(iscubea(5))\n    print(iscubea(6))\n    print(iscubea(7))\n    print(iscubea(8))\n    print(iscubea(9))\n    print(iscubea(10))\n    print(iscubea(11))\n    print(iscubea(12))\n    print(iscubea(13))\n    print(iscubea(14))\n    print(iscubea(15))\n    print(iscubea(16))\n    print(iscubea(17))\n    print(iscubea(18))\n    print(iscubea(19))\n    print(iscubea(20))\n    print(iscubea(21))\n    print(iscubea(22))\n    print(iscubea(23))\n    print(iscubea(24))\n    print(iscubea(25))\n    print(iscubea(26))\n    print(iscubea(27))\n    print(iscubea(28))\n    print(iscubea(29))\n    print(iscubea(30))\n    print(iscubea(31))\n    print(iscubea(32))\n    print(iscubea(33))\n    print(iscubea(34))\n    print(iscubea(35))\n    print(iscubea(36))\n    print(iscubea(37))\n    print(iscubea(38))\n    print(iscubea(39))\n    print(iscubea(40))\n    print(iscubea(41))\n    print(iscubea(42))\n    print(iscubea(43))\n    print(iscubea(44))\n    print(iscubea(45))\n    print(iscubea(46))\n    print"}
{"task_id": "EvoEval/78", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_special_digit(digit):\n        return digit in ['1', '4', '6', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n\n    hex_digits = '0123456789ABCDEF'\n    prime_digits = ['2', '3', '5', '7']\n    special_digits = ['1', '4', '6', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n        elif digit in special_digits:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/79", "completion": "\n    return \"db\" + bin(decimal)[2:] + \"bd\"\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if s[i] == s[i + 1] == s[i + 2] == s[i + 3]:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    letter_grades = []\n    for grade in grades:\n        if grade > 3.7:\n            letter_grades.append('A+')\n        elif grade > 3.3:\n            letter_grades.append('A')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C')\n        elif grade > 1.7:\n            letter_grades.append('C-')\n        elif grade > 1.3:\n            letter_grades.append('D')\n        elif grade > 1.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n\ngrades = [4.0, 1.7, 2.3, 3.5]"}
{"task_id": "EvoEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    string = string.replace(\" \", \"\")\n    return is_prime(len(string))\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 2\n    else:\n        return 2 * starts_one_ends(n - 1)\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    # Convert the input number to a string\n    num_str = str(N)\n    \n    # Calculate the sum of the digits\n    digit_sum = sum(int(digit) for digit in num_str)\n    \n    # Convert the sum to a hexadecimal string\n    hex_str = hex(digit_sum)[2:]\n    \n    return hex_str\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    return ' '.join(sorted(s.split()))\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    return sorted([(i, lst[i].index(x)) for i in range(len(lst)) if x in lst[i]])\n"}
{"task_id": "EvoEval/88", "completion": "\n    array = sorted(set(array))\n    if array[0] % 2 == 0:\n        return array\n    else:\n        return array[::-1]\n"}
{"task_id": "EvoEval/89", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    shift = 3\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            if char.isupper():\n                encrypted += chr((ord(char) - 65 + shift) % 26 + 65)\n            else:\n                encrypted += chr((ord(char) - 97 + shift) % 26 + 97)\n        else:\n            encrypted += char\n    return encrypted\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    lst.sort(reverse=True)\n    return lst[1]\n"}
{"task_id": "EvoEval/91", "completion": "\n    return sum(1 for s in S.split(',') if s.strip().startswith('I') and s.strip().endswith('boredom'))\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    if isinstance(z, int) and isinstance(z, int) and isinstance(z, int):\n        if z == abs(x) + abs(y):\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.lower() in vowels:\n            encoded_message += chr(ord(char) + 3)\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    lst = [int(i) for i in lst]\n    lst.sort()\n    return sum(int(i) for i in str(lst[0]))\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.islower() or key.isupper():\n            return True\n    return False\n"}
{"task_id": "EvoEval/96", "completion": "\n    primes = []\n    for i in range(2, n+1):\n        if is_prime(i):\n            primes.append(i)\n    primes.reverse()\n    return primes\n"}
{"task_id": "EvoEval/97", "completion": "\n    return int(str(a)[-1]) * int(str(b)[-1])\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    return sum(1 for c in s if c.isupper() and c in 'AEIOUaeiou')\n    "}
{"task_id": "EvoEval/99", "completion": "\n    return round(value)\n"}
