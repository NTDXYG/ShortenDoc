{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    result = []\n    current_group = []\n    depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n            current_group.append(char)\n        elif char == ')':\n            depth -= 1\n            current_group.append(char)\n            if depth == 0:\n                result.append(''.join(current_group))\n                current_group = []\n\n    return result\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    numbers.sort()\n    median = numbers[len(numbers) // 2]\n    mad = [abs(x - median) for x in numbers]\n    return mad[len(mad) // 2]\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.extend([delimeter, num])\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    groups = paren_string.split(' ')\n    depths = []\n    for group in groups:\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        depths.append(max_depth)\n    return sorted(depths, reverse=True)\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring not in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return sum_of_numbers, product_of_numbers\n"}
{"task_id": "EvoEval/9", "completion": "\n    min_so_far = float('inf')\n    result = []\n    for num in numbers:\n        min_so_far = min(min_so_far, num)\n        result.append(min_so_far)\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    return ''.join('1' if bit1 != bit2 else '0' for bit1, bit2 in zip(a, b))[::-1]\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    min_len = min(len(s) for s in strings)\n    for s in strings:\n        if len(s) == min_len:\n            return s\n    return None\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    return abs(a*b) // greatest_common_divisor(a, b)\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[:i] for i in range(len(string), 0, -1)]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n"}
{"task_id": "EvoEval/17", "completion": "\n    # Your code here\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x], reverse=True)\n    return ' '.join(num_list)\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair[::-1]\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    count = 0\n    for i in string:\n        count += 1\n    return count\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    return list(set(numbers))[::-1]\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return ''.join([char.upper() if char.islower() else char.lower() for char in string])\n    elif exclusive_case == 'upper':\n        return ''.join([char.lower() if char.isupper() else char.upper() for char in string])\n    else:\n        return string\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ''.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([num for num in l if num > 0])\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    def derivative(xs):\n        return [i * coeff for i, coeff in enumerate(xs)][1:]\n\n    def find_zero_rec(xs, a, b):\n        if abs(b - a) < 1e-6:\n            return a\n        c = (a + b) / 2\n        if poly(xs, a) * poly(xs, c) <= 0:\n            return find_zero_rec(xs, a, c)\n        else:\n            return find_zero_rec(xs, c, b)\n\n    a, b = -100, 100\n    while poly(xs, a) * poly(xs, b) > 0:\n        a *= 2\n        b *= 2\n    return find_zero_rec(xs, a, b)\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    divisible_by_three.sort(reverse=True)\n    \n    result = []\n    divisible_index = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result.append(divisible_by_three[divisible_index])\n            divisible_index += 1\n        else:\n            result.append(l[i])\n    return result\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n"}
{"task_id": "EvoEval/35", "completion": "\n    min_num = l[0]\n    for num in l:\n        if num < min_num:\n            min_num = num\n    return min_num\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('8')\n    return count\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    even_indices.sort(reverse=True)\n    result = l[:]\n    for i, value in enumerate(even_indices):\n        result[2 * i] = value\n    return result\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # decycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(num):\n        a, b = 0, 1\n        for _ in range(num):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while True:\n        fib_num = fibonacci(i)\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num\n        i += 1\n"}
{"task_id": "EvoEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n ** 2\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n"}
{"task_id": "EvoEval/43", "completion": "\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if base == 10:\n        return str(x)\n    elif base == 2:\n        return bin(x)\n    elif base == 8:\n        return oct(x)\n    elif base == 16:\n        return hex(x)\n    else:\n        result = \"\"\n        while x > 0:\n            result = str(x % base) + result\n            x //= base\n        return result\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 4\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 4, 2, 0\n        for i in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    if not l:\n        return 0\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]\n"}
{"task_id": "EvoEval/49", "completion": "\n    return (2 * n + 1) % p ** q\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    return ''.join([char for char in text if char in consonants])\n"}
{"task_id": "EvoEval/52", "completion": "\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n <= 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    balance = 0\n    for char in brackets:\n        if char == \"(\":\n            balance += 1\n        elif char == \")\":\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n"}
{"task_id": "EvoEval/57", "completion": "\n    if not l:\n        return False\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing\n"}
{"task_id": "EvoEval/58", "completion": "\n    l1 = list(set(l1))\n    l2 = list(set(l2))\n    l1.sort(reverse=True)\n    l2.sort(reverse=True)\n    common_elements = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            if l1[i] not in common_elements:\n                common_elements.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] > l2[j]:\n            i += 1\n        else:\n            j += 1\n    return common_elements\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    if n <= 1:\n        return None\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/60", "completion": "\n    if n < m:\n        return 0\n    else:\n        return n + sum_to_n(n - 1, m)\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    balance = 0\n    for bracket in brackets:\n        if bracket == \"[\":\n            balance += 1\n        elif bracket == \"]\":\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [xs[i] * i for i in range(1, len(xs))]\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-3) + fibfib(n-2) - fibfib(n-1)\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[shift:] + str(x)[:shift]\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s if c.isalpha())\n"}
{"task_id": "EvoEval/67", "completion": "\n    fruit_count = 0\n    for fruit in s.split():\n        if fruit.isdigit():\n            fruit_count += int(fruit)\n    return n - fruit_count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return []\n    odd_nodes = [(i, v) for i, v in enumerate(arr) if v % 2 == 1]\n    if not odd_nodes:\n        return []\n    return list(min(odd_nodes, key=lambda x: (x[1], x[0])))\n"}
{"task_id": "EvoEval/69", "completion": "\n\n    def search1(nums):\n        freq = {}\n        for num in nums:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n        for num in sorted(freq):\n            if num <= freq[num]:\n                return num\n        return -1\n    \"\"\"\n    def search2(nums):\n        freq = {}\n        for num in nums:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n        for num in sorted(freq):\n            if num <= freq[num]:\n                return num\n        return -1\n    \"\"\"\n    def search3(nums):\n        freq = {}\n        for num in nums:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n        for num in sorted(freq):\n            if num <= freq[num]:\n                return num\n        return -1\n    \"\"\"\n    def search4(nums):\n        freq = {}\n        for num in nums:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n        for num in sorted(freq):\n            if num <= freq[num]:\n                return num\n        return -1\n    \"\"\"\n    def search5(nums):\n        freq = {}\n        for num in nums:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n        for num in sorted(freq):\n            if num <= freq[num"}
{"task_id": "EvoEval/70", "completion": "\ndef strange_sort_list(st):\n    st.sort()\n    result = []\n    while st:\n        result.append(st.pop())\n        if st:\n            result.append(st.pop(0))\n    return result\n"}
{"task_id": "EvoEval/71", "completion": "\ndef triangle_(a, c):\n    if a + c > a and a + c > c and a > 0 and c > 0:\n        p = (a + b + c) / 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area, 3)\n    else:\n        return -1\n"}
{"task_id": "EvoEval/72", "completion": "\n    def is_balanced(q):\n        # Check if the list is balanced\n        return q == q[::-1]\n\n    def sum_is_even(q):\n        # Check if the sum of the elements is even\n        return sum(q) % 2 == 0\n\n    def max_weight(q):\n        # Check if the sum of the elements is less than or equal to the maximum weight\n        return sum(q) <= 5\n\n    return is_balanced(q) and sum_is_even(q) and max_weight(q)\n"}
{"task_id": "EvoEval/73", "completion": "\n    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-i - 1]:\n            changes += 1\n    return changes\n\n"}
{"task_id": "EvoEval/74", "completion": "\n    def total_match(lst1, lst2):\n      if not lst1 and not lst2:\n        return []\n      total1 = sum(len(s) for s in lst1)\n      total2 = sum(len(s) for s in lst2)\n      if total1 > total2:\n        return lst1\n      elif total2 > total1:\n        return lst2\n      else:\n        return lst1 + lst2\n    \n    print(total_match([], []))  # []\n    print(total_match(['', 'admin'], ['I ', 'Hi']))  # ['admin']\n    print(total_match([' ', 'admin'], ['', 'hi', 'admin', 'project']))  # ['hi', 'admin', 'project']\n    print(total_match([' '], ['hhi', '']))  # ['hi', 'admin']\n    print(total_match([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))  # [1, 2, 3, 4, 5]\n    print(total_match([1, 2, 3, 4, 5], [1, 2, 3, 4]))  # [1, 2, 3, 4, 5]\n    print(total_match([1, 2, 3, 4], [1, 2, 3, 4, 5]))  # [1, 2, 3, 4]\n    print(total_match([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]))  # [1, 2, 3, 4, 5, 6]\n    print(total_match([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]))  # [1, 2, 3, 4, 5, 6, 7]\n    print(total_match([1, 2, 3, 4], [1,"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            prime_count += 1\n            if prime_count > 4:\n                return False\n    return prime_count == 4\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return True, None\n    if n <= 1:\n        return False, None\n    power = 1\n    while power < x:\n        power *= n\n    return power == x, power if power == x else None\n"}
{"task_id": "EvoEval/77", "completion": "\ndef iscube(a):\n    if a < 0:\n        return False\n    if a == 0:\n        return True\n    cube_root = round(a ** (1/3))\n    return cube_root ** 3 == a\n"}
{"task_id": "EvoEval/78", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"bd\"\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) < 4:\n            return False\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/82", "completion": "\n    string = string.replace(\" \", \"\")\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 18\n    else:\n        return 18 * (10 ** (n - 2))\n"}
{"task_id": "EvoEval/84", "completion": "\n    sum_digits = sum(int(digit) for digit in str(N))\n    return hex(sum_digits)[2:]\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst)\n"}
{"task_id": "EvoEval/86", "completion": "\n    s = s.split(' ')\n    for i in range(len(s)):\n        s[i] = ''.join(sorted(s[i]))\n    return ' '.join(s)\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((j, i))\n    result.sort(key=lambda x: (x[1], x[0]))\n    return result\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    if not array:\n        return []\n    array = list(set(array))\n    array.sort()\n    if array[0] % 2 == 0:\n        return array[::-1]\n    else:\n        return array[1:] + array[:1]\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    result = ''\n    for char in s:\n        if char.isalpha():\n            shift = 3\n            if char.islower():\n                result += chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[-2]\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith(\"I\") and sentence.endswith(\"boredom\"):\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/92", "completion": "\n    def is_int(x):\n        return x == int(x)\n    \n    def abs_sum(a, b):\n        return sum(map(abs, (a, b)))\n    \n    def abs_sum_all(numbers):\n        return sum(map(abs, numbers))\n    \n    if is_int(z):\n        return abs_sum(z, z) == abs_sum_all([z])\n    else:\n        return False\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                # Find the index of the vowel in the vowels string\n                index = vowels.index(char.lower())\n                # Find the vowel 3 places ahead\n                new_index = (index + 3) % len(vowels)\n                # Replace the vowel with the new vowel\n                new_char = vowels[new_index]\n                # Preserve the case of the original character\n                if char.isupper():\n                    new_char = new_char.upper()\n                encoded_message += new_char\n            else:\n                # If the character is not a vowel, just add it to the encoded message\n                encoded_message += char\n        else:\n            # If the character is not a letter, just add it to the encoded message\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    min_val = min(lst)\n    sum_digits = sum(int(digit) for digit in str(min_val))\n    return sum_digits\n"}
{"task_id": "EvoEval/95", "completion": "\n    if not dict or len(dict) < 3:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str) or len(key) < 3:\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n, 1, -1) if is_prime(i)]\n    return primes\n"}
{"task_id": "EvoEval/97", "completion": "\n    return (a % 10) * (b % 10)\n"}
{"task_id": "EvoEval/98", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if i % 2 != 0 and s[i].isupper():\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n    # Your code here\n    return int(value) if float(value) % 1 == 0 else round(float(value))\n\n"}
