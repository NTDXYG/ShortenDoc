{"task_id": "EvoEval/0", "completion": "\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) <= threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    stack = []\n    result = []\n    current_string = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            if current_string:\n                stack.append(current_string)\n                current_string = \"\"\n            stack.append(char)\n        elif char == \")\":\n            stack.append(char)\n            current_string = \"\".join(stack)\n            result.append(current_string)\n            stack = []\n            current_string = \"\"\n    result.sort()\n    return result\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    import math\n    int_part = math.floor(number)\n    dec_part = number - int_part\n    return int_part, dec_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance <= 0:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    median = sorted(numbers)[len(numbers) // 2]\n    return sum(abs(x - median) for x in numbers) / len(numbers)\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    return [delimeter] * (len(numbers) * 2 - 1) + numbers + [delimeter]\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    stack = []\n    groups = []\n    group_counts = []\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            group_counts.append(1)\n        elif char == ')':\n            if not stack:\n                raise ValueError(\"Mismatched parentheses\")\n            stack.pop()\n            if not stack:\n                groups.append(sum(group_counts))\n                group_counts = []\n\n    if stack:\n        raise ValueError(\"Mismatched parentheses\")\n\n    groups.sort(reverse=True)\n    return groups\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring not in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_numbers = 0\n    product_numbers = 1\n    for num in numbers:\n        if num >= 0:\n            sum_numbers += num\n            product_numbers *= num\n    return (sum_numbers, product_numbers)\n"}
{"task_id": "EvoEval/9", "completion": "\n    min_num = numbers[0]\n    min_list = [min_num]\n    for num in numbers[1:]:\n        if num < min_num:\n            min_num = num\n        min_list.append(min_num)\n    return min_list\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n    return string + string[::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result[::-1]\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_string = strings[0]\n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n    return shortest_string\n"}
{"task_id": "EvoEval/13", "completion": "\n    # YOUR CODE HERE\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    return a * b // gcd(a, b)\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[i:] for i in range(len(string)+1)]\n"}
{"task_id": "EvoEval/15", "completion": "\n    return \" \".join(str(i) for i in range(1, n + 1))\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    music_string = music_string.replace(' ', '')\n    notes = music_string.split('|')\n    note_lengths = []\n    for note in notes:\n        if note == 'o':\n            note_lengths.append(2)\n        elif note == '.':\n            note_lengths.append(1)\n        elif note == '||':\n            note_lengths[-1] *= 2\n        elif note == '|':\n            continue\n        else:\n            raise ValueError(f\"Unknown note: {note}\")\n    return sorted(set(note_lengths), reverse=True)\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            return count\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x], reverse=True)\n\n    return ' '.join(num_list)\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i - 1], numbers[i])\n    return result if result[0] < result[1] else (result[1], result[0])\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    max_num = max(numbers)\n    min_num = min(numbers)\n    range_num = max_num - min_num\n    return [(i - min_num) / range_num for i in numbers]\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string)\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    if n < 1:\n        return\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while(divisor <= n):\n        if (n % divisor) == 0:\n            factors.append(divisor)\n            n = n / divisor\n        else:\n            divisor += 1\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    numbers.reverse()\n    return list(set(numbers))\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.swapcase()\n    elif exclusive_case == 'upper':\n        return string.lower()\n    else:\n        raise ValueError(\"Invalid value for exclusive_case. It can be either 'lower' or 'upper'\")\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ''.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) < 2:\n        raise ValueError(\"List must have at least two elements\")\n\n    # Initialize the initial guess\n    x = 0.0\n\n    # Iterate until the result converges\n    while True:\n        # Calculate the value of the polynomial at the current guess\n        y = poly(xs, x)\n\n        # If the result is close to zero, return the current guess\n        if abs(y) < 1e-6:\n            return x\n\n        # If the result is not close to zero, update the guess and continue\n        x = x - y / poly([coeff if i != 0 else 0 for i, coeff in enumerate(xs)], x)\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    third = [i for i in l if i % 3 == 0]\n    third.sort(reverse=True)\n    l_prime = []\n    j = 0\n    for i in l:\n        if i % 3 == 0:\n            l_prime.append(third[j])\n            j += 1\n        else:\n            l_prime.append(i)\n    return l_prime\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or '8' in str(i):\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = [l[i] for i in even_indices]\n    even_values.sort(reverse=True)\n    for i, v in zip(even_indices, even_values):\n        l[i] = v\n    return l\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    if n < 2:\n        return\n    fib_numbers = [0, 1]\n    while fib_numbers[-1] < n:\n        fib_numbers.append(fib_numbers[-1] + fib_numbers[-2])\n    if fib_numbers[-1] > n:\n        fib_numbers.pop()\n    for fib_number in fib_numbers:\n        if is_prime(fib_number):\n            print(fib_number)\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n\n            if current_sum == 10:\n                return True\n            elif current_sum < 10:\n                left += 1\n            else:\n                right -= 1\n\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * n\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x+2 for x in l]\n"}
{"task_id": "EvoEval/43", "completion": "\n    # your code here\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 1:\n                return True\n    return False\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    fib_dict = {0: 0, 1: 1, 2: 1, 3: 2}\n    for i in range(4, n + 1):\n        fib_dict[i] = fib_dict[i - 1] + fib_dict[i - 2] + fib_dict[i - 3] + fib_dict[i - 4]\n    return fib_dict[n]\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    if len(l) == 0:\n        return 0\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return (n % p) % q\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = \"aeiou\"\n    return \"\".join([char for char in text if char.lower() in vowels])\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    for i in l:\n        if i > t:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n < 2:\n        return n\n    else:\n        return fib(n-2) + fib(n-1)\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack or stack.pop() != \"(\":\n                return False\n    return not stack\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) < 2:\n        return False\n    if l[0] < l[1]:\n        return all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    if l[0] > l[1]:\n        return all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    return False\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    common_elements = []\n    i = j = 0\n    l1.sort(reverse=True)\n    l2.sort(reverse=True)\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            common_elements.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] > l2[j]:\n            i += 1\n        else:\n            j += 1\n    return common_elements\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    if n < 2:\n        return None\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if not stack or stack.pop() != \"[\":\n                return False\n    return not stack\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    if len(xs) == 0:\n        return []\n    else:\n        return [i * xs[i] for i in range(1, len(xs))]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_n_minus_3 = 0\n        fibfib_n_minus_2 = 0\n        fibfib_n_minus_1 = 1\n        for _ in range(3, n + 1):\n            fibfib_n = fibfib_n_minus_3 + fibfib_n_minus_2 - fibfib_n_minus_1\n            fibfib_n_minus_3 = fibfib_n_minus_2\n            fibfib_n_minus_2 = fibfib_n_minus_1\n            fibfib_n_minus_1 = fibfib_n\n        return fibfib_n\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = \"aeiou\"\n    count = 0\n    for letter in s:\n        if letter in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n    else:\n        return x[shift:] + x[:shift]\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    sum = 0\n    for i in s:\n        sum += ord(i)\n    return sum\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    s = s.split(\",\")\n    apples = int(s[0].split()[0])\n    oranges = int(s[1].split()[1])\n    mangoes = int(s[2].split()[1])\n    return oranges - apples - mangoes\n"}
{"task_id": "EvoEval/68", "completion": "\n    smallest_odd = float('inf')\n    smallest_odd_index = -1\n    for i, node in enumerate(arr):\n        if node[1] % 2 == 1 and node[1] < smallest_odd:\n            smallest_odd = node[1]\n            smallest_odd_index = i\n    if smallest_odd == float('inf'):\n        return []\n    else:\n        return [smallest_odd_index, smallest_odd]\n\n"}
{"task_id": "EvoEval/69", "completion": "\n"}
{"task_id": "EvoEval/70", "completion": "\n\n\n"}
{"task_id": "EvoEval/71", "completion": "\n\n    if (a < b + c) and (b < a + c) and (c < a + b):\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 3)\n    else:\n        return -1\n    \"\"\"\n\n"}
{"task_id": "EvoEval/72", "completion": "\n\n    def will_it_fly(q):\n        max_weight = 10\n        if len(q) % 2 == 0:\n            if sum(q) <= max_weight:\n                return True\n            else:\n                return False\n        else:\n            return False\n\n    print(will_it_fly([3, 2, 3, 9]))  # True\n    print(will_it_fly([2, 2, 2, 2, 2, 2]))  # True\n    print(will_it_fly([3, 3, 3, 3, 3, 3]))  # False\n    print(will_it_fly([1, 2, 3, 4, 5, 6]))  # False\n    print(will_it_fly([10, 2, 3, 4, 5, 6]))  # False\n    print(will_it_fly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))  # False\n    print(will_it_fly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))  # False\n    print(will_it_fly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))  # False\n    print(will_it_fly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))  # False\n    print(will_it_fly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))  # False\n    print(will_it_fly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12"}
{"task_id": "EvoEval/73", "completion": "\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes\n\n"}
{"task_id": "EvoEval/74", "completion": "\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, a) if is_prime(i)]\n    if len(primes) < 4:\n        return False\n    for i in range(len(primes) - 3):\n        if primes[i] * primes[i+1] * primes[i+2] * primes[i+3] == a:\n            return True\n    return False\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return True, 0\n    elif x < 1:\n        return False, None\n    else:\n        power = 0\n        while x % n == 0:\n            x /= n\n            power += 1\n        return (x == 1, power if power > 0 else None)\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    import math\n    if a < 0:\n        a = abs(a)\n    return math.isqrt(a) ** 3 == a\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    hex_to_dec = {\n        \"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6,\n        \"7\": 7, \"8\": 8, \"9\": 9, \"A\": 10, \"B\": 11,\n        \"C\": 12, \"D\": 13, \"E\": 14, \"F\": 15, \"0\": 0\n    }\n    dec_to_hex = {v: k for k, v in hex_to_dec.items()}\n    dec_num = 0\n    for i in range(len(num)):\n        dec_num += hex_to_dec[num[i]] * (16 ** (len(num) - 1 - i))\n    prime_count = 0\n    for i in range(2, dec_num + 1):\n        if dec_num % i == 0:\n            prime_count += 1\n    return prime_count\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal).replace(\"0b\", \"\")\n    return \"db\" + binary + \"bd\"\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if s[i:i+4] == s[i]*4:\n            return False\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    letter_grades = []\n    for gpa in grades:\n        if gpa > 3.7:\n            letter_grades.append('A+')\n        elif 3.7 >= gpa > 3.5:\n            letter_grades.append('A')\n        elif 3.5 >= gpa > 3.0:\n            letter_grades.append('B+')\n        elif 3.0 >= gpa > 2.7:\n            letter_grades.append('B')\n        elif 2.7 >= gpa > 2.3:\n            letter_grades.append('B-')\n        elif 2.3 >= gpa > 1.7:\n            letter_grades.append('C')\n        elif 1.7 >= gpa > 1.3:\n            letter_grades.append('C-')\n        elif 1.3 >= gpa > 1.0:\n            letter_grades.append('D')\n        elif 1.0 >= gpa > 0.7:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 2\n    else:\n        return 2 * starts_one_ends(n - 1)\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    # convert the number to hexadecimal\n    hex_num = hex(N)[2:]\n    # calculate the sum of the digits\n    sum_hex = sum(int(i, 16) for i in hex_num)\n    # convert the sum to hexadecimal\n    hex_sum = hex(sum_hex)[2:]\n    return hex_sum\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split(' ')\n    result = ''\n    for word in words:\n        result += word[::-1] + ' '\n    return result.rstrip()\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        temp = []\n        for j, col in enumerate(row):\n            if col != x:\n                temp.append((j, col))\n        temp.sort()\n        result.append((i, tuple(temp)))\n    result.sort()\n    return [tup[1] for tup in result]\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    array = list(set(array))\n    if array[0] % 2 == 0:\n        array.sort()\n    else:\n        array.sort(reverse=True)\n    return array\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    shift = 'gfedcba'\n    table = s.maketrans(alphabet, shift)\n    return s.translate(table)\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[-2]\n"}
{"task_id": "EvoEval/91", "completion": "\n    count = 0\n    sentences = S.split('. ')\n    for sentence in sentences:\n        if sentence.startswith('I ') and sentence.endswith(' boredom.'):\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/92", "completion": "\n\n\n    def def_(x, y, z):\n        if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            if abs(x) + abs(y) == z:\n                return True\n            else:\n                return False\n        else:\n            return False\n    \"\"\"\n\n    def any_int(x, y, z):\n        if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            if abs(x) + abs(y) == z:\n                return True\n            else:\n                return False\n        else:\n            return False\n    \"\"\"\n\n    def any_int(x, y, z):\n        if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            if abs(x) + abs(y) == z:\n                return True\n            else:\n                return False\n        else:\n            return False\n    \"\"\"\n\n    def any_int(x, y, z):\n        if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            if abs(x) + abs(y) == z:\n                return True\n            else:\n                return False\n        else:\n            return False\n    \"\"\"\n\n    def any_int(x, y, z):\n        if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            if abs(x) + abs(y) == z:\n                return True\n            else:\n                return False\n        else:\n            return False\n    \"\"\"\n\n    def any_int(x, y, z):\n        if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            if abs(x) + abs(y) == z:\n                return True\n            else:\n                return False\n        else:"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char) + 23) % 26 + ord('a'))\n            else:\n                encoded_message += chr((ord(char) + 3) % 26 + ord('a'))\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    return sum(map(int, str(min(lst)))))\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower():\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    return primes[::-1]\n"}
{"task_id": "EvoEval/97", "completion": "\n    # convert the numbers to strings\n    a = str(a)\n    b = str(b)\n\n    # initialize the sum of unit digits\n    sum_of_unit_digits = 0\n\n    # iterate over the digits of the numbers\n    for digit in a:\n        for digit2 in b:\n            # add the unit digit of the product to the sum\n            sum_of_unit_digits += int(digit) * int(digit2)\n\n    return sum_of_unit_digits\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    return sum(1 for c in s if c.isupper())\n"}
{"task_id": "EvoEval/99", "completion": "\n\n    def closest_integer(value):\n        return round(float(value))\n\n    def closest(value):\n        return closest_integer(value) if value.isdigit() else float(value)\n\n    print(closest(\"10\"))\n    print(closest(\"15.3\"))\n    print(closest(\"14.5\"))\n    print(closest(\"-14.5\"))\n\n"}
