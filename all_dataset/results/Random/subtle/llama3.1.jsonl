{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    # remove all the ignored characters\n    paren_string = paren_string.replace(' ', '')\n    # find all the groups\n    groups = []\n    group = ''\n    for char in paren_string:\n        if char == '(':\n            group += char\n        elif char == ')':\n            group += char\n            groups.append(group)\n            group = ''\n    # sort the groups\n    groups.sort()\n    return groups\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 1:\n        median = numbers[n // 2]\n    else:\n        median = (numbers[n // 2 - 1] + numbers[n // 2]) / 2\n    mad = sum(abs(x - median) for x in numbers) / n\n    return mad\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for num in numbers:\n        result.append(num)\n        result.append(delimeter)\n    result.pop()  # remove the last delimeter\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    stack = []\n    count = 0\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if stack:\n                stack.pop()\n                count += 1\n    return [count] + parse_nested_parens(\"\".join(stack))\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [string for string in strings if substring not in string]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_val = 0\n    product = 1\n    for num in numbers:\n        if num < 0:\n            return sum_val, product\n        sum_val += num\n        product *= num\n    return sum_val, product\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    result = []\n    min_val = float('inf')\n    for num in numbers:\n        if num < min_val:\n            min_val = num\n        result.append(min_val)\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    else:\n        for i in range(len(string), 0, -1):\n            if is_palindrome(string[:i]):\n                return string + string[i:][::-1]\n    return string\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    return ''.join('1' if (a[i] == '0' and b[i] == '1') or (a[i] == '1' and b[i] == '0') else '0' for i in range(len(a)))\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_str = min(strings, key=len)\n    return shortest_str\n    return None\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str\n    return shortest_str"}
{"task_id": "EvoEval/13", "completion": "\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a: int, b: int) -> int:\n        return a * b // gcd(a, b)\n\n    return lcm(a, b)  # Return the least common multiple of a and b\n"}
{"task_id": "EvoEval/14", "completion": "\n    prefixes = []\n    for i in range(len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))  # Convert the string to a set to remove duplicates and count the number of elements"}
{"task_id": "EvoEval/17", "completion": "\n    music_dict = {'o': 4, '|': 2, '.': 1}\n    music_list = music_string.split()\n    result = []\n    for note in music_list:\n        for char in note:\n            if char in music_dict:\n                result.append(music_dict[char])\n    return sorted(result, reverse=True)\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/19", "completion": "\n    # Split the string into a list of numbers\n    num_list = numbers.split()\n    \n    # Define a dictionary to map string numbers to integers\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    \n    # Sort the list of numbers based on their integer values\n    sorted_num_list = sorted(num_list, key=lambda x: num_dict[x], reverse=True)\n    \n    # Join the sorted list back into a string\n    sorted_str = ' '.join(sorted_num_list)\n    \n    return sorted_str\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    closest = numbers[0]\n    second_closest = numbers[1]\n    min_diff = abs(numbers[0] - numbers[1])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest = numbers[i]\n            second_closest = numbers[i + 1]\n    return second_closest, closest\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    if max_val == min_val:\n        return [0.0] * len(numbers)\n    return [(n - min_val) / (max_val - min_val) for n in numbers]\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    # Create a dictionary to store the count of each number\n    count_dict = {}\n    for num in numbers:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Create a list of numbers that occur only once\n    unique_numbers = [num for num in numbers if count_dict[num] == 1]\n\n    # Return the list in the reverse order\n    return unique_numbers[::-1]\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return ''.join('' if c.islower() else c.lower() for c in string)\n    elif exclusive_case == 'upper':\n        return ''.join('' if c.isupper() else c.upper() for c in string)\n    else:\n        raise ValueError(\"Invalid exclusive_case. It should be either 'lower' or 'upper'.\")\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ''.join(strings)  # <--- concatenate strings with empty string as separator\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    # find the largest zero\n    return find_zero_largest(xs)\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    return [x if x % 3 != 0 else y for x, y in sorted(zip([x for x in l if x % 3 != 0], [x for x in l if x % 3 == 0]), reverse=True)]\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 8 == 0:\n            count += str(i).count('8')\n    return count\n"}
{"task_id": "EvoEval/37", "completion": "\n    return [l[i] for i in range(0, len(l), 2)] + sorted([l[i] for i in range(1, len(l), 2)], reverse=True)  # [1, 2, 3, 4, 6, 3]  # [1, 2, 3, 4, 6, 3]  # [1, 2, 3, 4, 6, 3]  # [1, 2, 3, 4, 6, 3]  # [1, 2, 3, 4, 6, 3]  # [1, 2, 3, 4, 6, 3]  # [1, 2, 3, 4, 6, 3]  # [1, 2, 3, 4, 6, 3]  # [1, 2, 3, 4, 6, 3]  # [1, 2, 3, 4, 6, 3]  # [1, 2, 3, 4, 6, 3]  # [1, 2, 3, 4, 6, 3]  # [1, 2, 3, 4, 6, 3]  # [1, 2, 3, 4, 6, 3]  # [1, 2, 3, 4, 6, 3]  # [1, 2, 3, 4, 6, 3]  # [1, 2, 3, 4, 6, 3]  # [1, 2, 3, 4, 6, 3]  # [1, 2, 3, 4, 6, 3]  # [1, 2, 3, 4, 6, 3]  # [1, 2, 3, 4, 6, 3]  # [1, 2, 3, 4, 6, 3]  # [1, 2, 3, 4, 6, 3]  # [1, 2, 3,"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        a, b = 2, 3\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    # Sort the list in ascending order\n    l.sort()\n    # Iterate over the list with three nested loops\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                # Check if the sum of the three elements is equal to 10\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n*(n-1)//2\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n\nincr_list([1, 3])  # [3, 5]\nincr_list([5, 3, 0, 123])  # [7, 7, 4, 11, 2, 125]\nincr_list([1, 2, 3, 4, 5])  # [3, 4, 5, 6, 7]\nincr_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])  # [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nincr_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])  # [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\nincr_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])  # [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\nincr_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])  # [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\nincr_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])  # [3, 4, 5, 6, 7, 8, 9, 10, 11, 12,"}
{"task_id": "EvoEval/43", "completion": "\n    seen = set()\n    for num in l:\n        if 1 - num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if base < 2:\n        raise ValueError(\"Base must be greater than 1\")\n    if x == 0:\n        return 0\n    digits = []\n    while x:\n        digits.append(int(x % base))\n        x //= base\n    return int(''.join(map(str, digits[::-1])))\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 1:\n        return '0'\n    elif n == 2:\n        return '1'\n    else:\n        fib_prev = 0\n        fib_curr = 1\n        for _ in range(2, n):\n            fib_next = fib_prev + fib_curr + 4 * fib_curr\n            fib_prev = fib_curr\n            fib_curr = fib_next\n        return str(fib_curr)  # return the nth element of the fib4 sequence"}
{"task_id": "EvoEval/47", "completion": "\n    if len(l) == 0:\n        return 0\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 1:\n        return sorted_l[n // 2]\n    else:\n        return (sorted_l[n // 2 - 1] + sorted_l[n // 2]) / 2.0\n"}
{"task_id": "EvoEval/48", "completion": "\n    if case_sensitive:\n        return text == text[::-1]\n    else:\n        return text.lower() == text.lower()[::-1]\n"}
{"task_id": "EvoEval/49", "completion": "\n    return (2 * n + p) % q\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char in vowels])\n"}
{"task_id": "EvoEval/52", "completion": "\n    return all(i <= t for i in l)\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n"}
{"task_id": "EvoEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) < 2:\n        return False\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    return [x for x in l1 if x in l2 and l1.index(x) == l2.index(x)]\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            return i\n    return n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))  # sum of numbers from m to n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [i * x for i, x in enumerate(xs)][1:]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 0\n        for i in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "EvoEval/64", "completion": "\n    return sum(1 for c in s if c in 'aeiou')\n"}
{"task_id": "EvoEval/65", "completion": "\n    shift = shift % 10\n    if shift > 5:\n        return str(x)[::-1]\n    else:\n        return str(x)[:shift] + str(x)[shift:]\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(int(c) for c in s if c.isdigit())  # return the sum of the digits in the string\n"}
{"task_id": "EvoEval/67", "completion": "\n    # split the string into two parts: the number of apples and the number of oranges\n    apples, oranges = s.split(', ')\n    \n    # convert the number of apples and oranges to integers\n    apples = int(apples.split(' ')[0])\n    oranges = int(oranges.split(' ')[0])\n    \n    # calculate the total number of fruits\n    total_fruits = n - 1\n    \n    # calculate the number of mango fruits\n    mango_fruits = total_fruits - apples + oranges\n    \n    return mango_fruits\n"}
{"task_id": "EvoEval/68", "completion": "\n    odd = []\n    for i, node in enumerate(arr):\n        if node % 2 != 0:\n            odd.append([node, i])\n    if not odd:\n        return []\n    return min(odd, key=lambda x: x[0])  # Return the smallest odd value and its index\n"}
{"task_id": "EvoEval/69", "completion": "\n    def search(nums):\n        count = {}\n        for num in nums:\n            if num in count:\n                count[num] += 1\n            else:\n                count[num] = 1\n        for num in sorted(count.keys()):\n            if count[num] >= num:\n                return num\n        return -1\n    return search(nums)"}
{"task_id": "EvoEval/70", "completion": "\n    if not st:\n        return []\n    max_val = max(st)\n    min_val = min(st)\n    return [max_val] + [x for x in st if x != max_val and x != min_val] + [min_val]\n"}
{"task_id": "EvoEval/71", "completion": "\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return None\n\n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n\n    # Calculate the area using Heron's formula\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    # Return the area rounded to 3 decimal points\n    return round(area, 3)\n"}
{"task_id": "EvoEval/72", "completion": "\n\n    return (q[0] + q[1] + q[2] <= 5 and q[0] % 2 == 0 and q[1] % 2 == 0 and q[2] % 2 == 0)\n    \"\"\"\n    return (q[0] + q[1] + q[2] <= 5 and q[0] % 2 == 0 and q[1] % 2 == 0 and q[2] % 2 == 0)\n    \"\"\"\n    return (q[0] + q[1] + q[2] <= 5 and q[0] % 2 == 0 and q[1] % 2 == 0 and q[2] % 2 == 0)\n    \"\"\"\n    return (q[0] + q[1] + q[2] <= 5 and q[0] % 2 == 0 and q[1] % 2 == 0 and q[2] % 2 == 0)\n    \"\"\"\n    return (q[0] + q[1] + q[2] <= 5 and q[0] % 2 == 0 and q[1] % 2 == 0 and q[2] % 2 == 0)\n    \"\"\"\n    return (q[0] + q[1] + q[2] <= 5 and q[0] % 2 == 0 and q[1] % 2 == 0 and q[2] % 2 == 0)\n    \"\"\"\n    return (q[0] + q[1] + q[2] <= 5 and q[0] % 2 == 0 and q[1] % 2 == 0 and q[2] % 2 == 0)\n    \"\"\"\n    return (q[0] + q[1] + q[2] <= 5 and q[0] % 2 == 0 and q[1] % 2 == 0 and q[2] % 2 == 0)\n    \"\"\"\n    return (q[0] +"}
{"task_id": "EvoEval/73", "completion": "\n    n = len(arr)\n    # create a 2D array to store the minimum number of changes\n    dp = [[0] * n for _ in range(n)]\n    # fill the diagonal of the 2D array with 0\n    for i in range(n):\n        dp[i][i] = 0\n    # fill the rest of the 2D array\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            # if the first and last elements are the same, no change is needed\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            # otherwise, try all possible changes and take the minimum\n            else:\n                dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]\n"}
{"task_id": "EvoEval/74", "completion": "\n    if len(lst1) > len(lst2):\n        return lst1\n    elif len(lst1) < len(lst2):\n        return lst2\n    else:\n        return lst1\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return lst1\n    return lst2\n    return"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_product_of_primes(n):\n        for i in range(2, n):\n            if n % i == 0 and is_prime(i):\n                n //= i\n                if n == 1:\n                    return True\n        return False\n\n    return is_product_of_primes(a) and a < 100\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    if n == 1:\n        return (True, 0)\n    if x % n != 0:\n        return (False, None)\n    power = 0\n    while x % n == 0:\n        x = x // n\n        power += 1\n    return (x == 1, power) if power > 0 else (False, None)  # if power is 0, then x is not a power of n"}
{"task_id": "EvoEval/77", "completion": "\n    return a ** (1. / 3.) % 1 == 0\n"}
{"task_id": "EvoEval/78", "completion": "\n    # Define the prime digits\n    prime_digits = [2, 3, 5, 7, 11, 13, 17]\n    # Define the non-prime digits\n    non_prime_digits = [1, 4, 6, 8, 9, 10, 12, 15]\n    # Convert the input string to a list of integers\n    num_list = [int(digit, 16) for digit in num]\n    # Count the number of prime digits\n    prime_count = sum(1 for digit in num_list if digit in prime_digits)\n    # Count the number of non-prime digits\n    non_prime_count = sum(1 for digit in num_list if digit in non_prime_digits)\n    # Return the maximum count\n    return max(prime_count, non_prime_count)  # Changed to return the maximum count\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return 'db' + binary + 'bd'\n"}
{"task_id": "EvoEval/80", "completion": "\n    for i in range(len(s) - 3):\n        if s[i] == s[i + 1] == s[i + 2] == s[i + 3]:\n            return False\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    letter_grades = []\n    for grade in grades:\n        if grade >= 3.7:\n            letter_grades.append('A+')\n        elif grade >= 3.3:\n            letter_grades.append('A')\n        elif grade >= 3.0:\n            letter_grades.append('A-')\n        elif grade >= 2.7:\n            letter_grades.append('B+')\n        elif grade >= 2.3:\n            letter_grades.append('B')\n        elif grade >= 2.0:\n            letter_grades.append('B-')\n        elif grade >= 1.7:\n            letter_grades.append('C+')\n        elif grade >= 1.3:\n            letter_grades.append('C')\n        elif grade >= 1.0:\n            letter_grades.append('C-')\n        elif grade >= 0.7:\n            letter_grades.append('D+')\n        elif grade >= 0.3:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('F')\n    return letter_grades\n"}
{"task_id": "EvoEval/82", "completion": "\n    length = len(string.replace(\" \", \"\"))\n    return is_prime(length)\n"}
{"task_id": "EvoEval/83", "completion": "\n    return 9 * (10 ** (n - 1)) + 9 * (10 ** (n - 2))\n"}
{"task_id": "EvoEval/84", "completion": "\n    hexa = hex(N)[2:]\n    return hex(int(hexa))\n"}
{"task_id": "EvoEval/85", "completion": "\n    return max(lst)\n"}
{"task_id": "EvoEval/86", "completion": "\n    # Split the string into a list of words\n    words = s.split()\n    # Sort the list of words\n    words.sort()\n    # Join the sorted list of words back into a string\n    return ' '.join(words)\n"}
{"task_id": "EvoEval/87", "completion": "\n    return sorted([(i, y) for i, y in enumerate(lst) if y == x], key=lambda x: x[0])"}
{"task_id": "EvoEval/88", "completion": "\n    # First, we sort the array in ascending order\n    sorted_array = sorted(array)\n    # Then, we check if the first element is odd\n    if sorted_array[0] % 2 != 0:\n        # If it's odd, we sort the array in descending order\n        sorted_array = sorted(sorted_array, reverse=True)\n    # Finally, we remove any duplicate values from the array\n    sorted_array = list(dict.fromkeys(sorted_array))\n    return sorted_array\n"}
{"task_id": "EvoEval/89", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    shift = 3\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                encrypted += alphabet[(alphabet.index(char) + shift) % 26]\n            else:\n                encrypted += alphabet[(alphabet.index(char.lower()) + shift) % 26].upper()\n        else:\n            encrypted += char\n    return encrypted\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[-2]  # return the second largest element\n"}
{"task_id": "EvoEval/91", "completion": "\n    return S.count('boredom') == 1 and S.startswith('I') and S.endswith('.') and any(c in S for c in ',?')\n"}
{"task_id": "EvoEval/92", "completion": "\n    return abs(a) + abs(b) + abs(c) == a + b + c\n"}
{"task_id": "EvoEval/93", "completion": "\n    # Define the vowels and their corresponding shifted letters\n    vowels = 'aeiou'\n    shifted_vowels = 'ckmop'\n    \n    # Initialize an empty string to store the encoded message\n    encoded_message = ''\n    \n    # Iterate over each character in the message\n    for char in message:\n        # Check if the character is a vowel\n        if char.lower() in vowels:\n            # If it's a vowel, replace it with the shifted vowel\n            encoded_message += shifted_vowels[vowels.index(char.lower())]\n        else:\n            # If it's not a vowel, just append the character to the encoded message\n            encoded_message += char\n    \n    # Return the encoded message\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    return sum(int(digit) for digit in str(min(lst)))\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower():\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    primes = []\n    for possiblePrime in range(n, 1, -1):\n        # Assume number is prime until shown it is not. \n        isPrime = True\n        for num in range(2, int(possiblePrime ** 0.5) + 1):\n            if possiblePrime % num == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(possiblePrime)\n    return primes\n"}
{"task_id": "EvoEval/97", "completion": "\n    return (a % 10) * (b % 10)"}
{"task_id": "EvoEval/98", "completion": "\n    return sum(1 for c in s if c in 'AEIOUaeiou' and s.index(c) % 2 == 0)  # count vowels in even positions\n\n"}
{"task_id": "EvoEval/99", "completion": "\n    return round(float(value))\n"}
