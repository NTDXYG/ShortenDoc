{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "EvoEval/1", "completion": "\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            temp += char\n        elif char == ')':\n            stack.append(char)\n            temp += char\n            result.append(temp)\n            temp = ''\n        else:\n            temp += char\n    return result\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n\n    return integer_part, decimal_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "EvoEval/4", "completion": "\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        median1 = numbers[length // 2]\n        median2 = numbers[length // 2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = numbers[length // 2]\n    mad = sum(abs(num - median) for num in numbers) / len(numbers)\n    return mad\n"}
{"task_id": "EvoEval/5", "completion": "\n    interspersed_list = []\n    for i in range(len(numbers)):\n        interspersed_list.append(numbers[i])\n        if i != len(numbers) - 1:\n            interspersed_list.append(delimeter)\n    return interspersed_list\n"}
{"task_id": "EvoEval/6", "completion": "\n    def count_parentheses(s: str) -> int:\n        count = 0\n        max_count = 0\n        for c in s:\n            if c == '(':\n                count += 1\n                max_count = max(max_count, count)\n            elif c == ')':\n                count -= 1\n        return max_count\n\n    max_counts = []\n    for i in range(len(paren_string)):\n        for j in range(i+2, len(paren_string)+1):\n            if j-i < max_counts[-1] if max_counts else True:\n                continue\n            if paren_string[i:j] == paren_string[i:j][::-1]:\n                max_counts.append(count_parentheses(paren_string[i:j]))\n    return sorted(max_counts, reverse=True)\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring not in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_num = 0\n    product = 1\n    for num in numbers:\n        if num >= 0:\n            sum_num += num\n            product *= num\n    return (sum_num, product)\n"}
{"task_id": "EvoEval/9", "completion": "\n    min_list = []\n    min_val = float('inf')\n    for num in numbers:\n        min_val = min(min_val, num)\n        min_list.append(min_val)\n    return min_list\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    else:\n        for i in range(len(string)):\n            if is_palindrome(string[i:]):\n                return string + string[:i][::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(reversed(a), reversed(b)))\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_string = strings[0]\n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n    return shortest_string\n"}
{"task_id": "EvoEval/13", "completion": "\n    from math import gcd\n    return a * b // gcd(a, b)\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[0:i] for i in range(1, len(string) + 1)]\n"}
{"task_id": "EvoEval/15", "completion": "\n    sequence = [str(i) for i in range(1, n+1)]\n    return ' '.join(sequence)\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n"}
{"task_id": "EvoEval/17", "completion": "\n    notes = music_string.split()\n    note_dict = {'o': 1, '|': 2, '.': 4}\n    beats_dict = {'o': 4, '|': 2, '.': 1}\n    result = []\n\n    for note in notes:\n        beats = note_dict[note[0]]\n        result.append(beats)\n\n    result.sort(reverse=True)\n\n    return result\n"}
{"task_id": "EvoEval/18", "completion": "\n    return string.count(substring)\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers = numbers.split()\n    numbers = [num_dict[num] for num in numbers]\n    numbers.sort(reverse=True)\n    return ' '.join(str(num) for num in numbers)\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    result = None\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i + 1], numbers[i])\n    return result\n"}
{"task_id": "EvoEval/21", "completion": "\n    max_val = max(numbers)\n    min_val = min(numbers)\n    max_index = numbers.index(max_val)\n    min_index = numbers.index(min_val)\n    if max_index < min_index:\n        numbers[max_index], numbers[min_index] = numbers[min_index], numbers[max_index]\n    rescaled_numbers = [(number - min_val) / (max_val - min_val) for number in numbers]\n    rescaled_numbers.reverse()\n    return rescaled_numbers\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string)\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/25", "completion": "\n    def factor(n: int) -> List[int]:\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    return factor(n)\n"}
{"task_id": "EvoEval/26", "completion": "\n    seen = set()\n    result = []\n    for number in reversed(numbers):\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.swapcase()\n    elif exclusive_case == 'upper':\n        return string.upper()\n    else:\n        return string\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ''.join(strings)\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    def derivative(xs: list):\n        return [coeff * i for i, coeff in enumerate(xs)][1:]\n\n    def solve(xs: list, x0: float):\n        return poly(xs, x0)\n\n    def newton_method(xs: list, x0: float):\n        return x0 - solve(xs, x0) / derivative(xs)\n\n    x0 = [0, 1]\n    while True:\n        x1 = newton_method(xs, x0)\n        if abs(solve(xs, x1)) < 1e-6:\n            return x1\n        x0 = x1\n\n    return x0\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    l_prime = [i for i in l if i % 3 == 0]\n    l_prime.sort(reverse=True)\n    j = 0\n    for i in range(len(l)):\n        if l[i] % 3 == 0:\n            l[i] = l_prime[j]\n            j += 1\n    return l\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(list(set(l)), reverse=True)\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    def fizz_buzz(n: int):\n        count = 0\n        for i in range(1, n):\n            if i % 11 == 0 or i % 8 == 0:\n                count += str(i).count('8')\n        return count\n\n    print(fizz_buzz(n))\n\nfizz_buzz(50)\nfizz_buzz(79)\nfizz_buzz(1)\nfizz_buzz(8)\nfizz_buzz(11)\nfizz_buzz(81)\nfizz_buzz(88)\nfizz_buzz(100)\nfizz_buzz(108)\nfizz_buzz(110)\nfizz_buzz(118)\nfizz_buzz(121)\nfizz_buzz(128)\nfizz_buzz(131)\nfizz_buzz(138)\nfizz_buzz(140)\nfizz_buzz(148)\nfizz_buzz(150)\nfizz_buzz(158)\nfizz_buzz(161)\nfizz_buzz(168)\nfizz_buzz(170)\nfizz_buzz(178)\nfizz_buzz(180)\nfizz_buzz(188)\nfizz_buzz(190)\nfizz_buzz(198)\nfizz_buzz(200)\nfizz_buzz(208)\nfizz_buzz(210)\nfizz_buzz(218)\nfizz_buzz(220)\nfizz_buzz(228)\nfizz_buzz(230)\nfizz_buzz(238)\nfizz_buzz(240)\nfizz_buzz(248)\nfizz_buzz(250)\nfizz_buzz(258)\nfizz_buzz(261)\nfizz_bu"}
{"task_id": "EvoEval/37", "completion": "\n    even_indices_values = [(i, l[i]) for i in range(0, len(l), 2)]\n    even_indices_values.sort(key=lambda x: x[1], reverse=True)\n    new_list = [None] * len(l)\n    for i, (index, value) in enumerate(even_indices_values):\n        new_list[index] = value\n    return new_list\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # uncycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n: int) -> int:\n        if n < 2:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b\n\n    i = 0\n    while True:\n        fib_i = fib(i)\n        if fib_i > n:\n            return None\n        if is_prime(fib_i):\n            return fib_i\n        i += 1\n"}
{"task_id": "EvoEval/40", "completion": "\n\n    def triples_sum_to_ten(l: list):\n        l.sort()\n        for i in range(len(l) - 2):\n            for j in range(i + 1, len(l) - 1):\n                for k in range(j + 1, len(l)):\n                    if l[i] + l[j] + l[k] == 10:\n                        return True\n        return False\n\n    print(triples_sum_to_ten([3, 5, 0]))\n    print(triples_sum_to_ten([1, 3, -1]))\n    print(triples_sum_to_ten([1, 2, 3, 7]))\n    print(triples_sum_to_ten([2, 4, 5, 3, 9, 7]))\n    print(triples_sum_to_ten([1]))\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    # The number of cars is even, so the collision can occur at the middle\n    # If the number of cars is odd, the collision can occur at the middle and one more\n    return n % 2 == 0\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [i+2 for i in l]\n"}
{"task_id": "EvoEval/43", "completion": "\n    if len(l) == 0:\n        return False\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if x < base:\n        return x\n    else:\n        return change_base(x // base, base) + x % base\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b\n"}
{"task_id": "EvoEval/47", "completion": "\n    l = [x if x != 0 else 1 for x in l]\n    l.sort()\n    n = len(l)\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n"}
{"task_id": "EvoEval/48", "completion": "\n    if case_sensitive:\n        return text == text[::-1]\n    else:\n        return text.lower() == text[::-1].lower()\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return (2 * n + q) % p\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    return \"\".join([char for char in text if char in consonants])\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    for i in l:\n        if i >= t:\n            return False\n    return True\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    if len(s0) != len(s1):\n        return False\n    return sorted(s0) == sorted(s1)\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 34\n    else:\n        return fib(n-1) + fib(n-2)\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    bracket_map = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n\n    for bracket in brackets:\n        if bracket in bracket_map:\n            stack.append(bracket)\n        elif len(stack) == 0 or bracket_map[stack.pop()] != bracket:\n            return False\n    return len(stack) == 0\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    return all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:]))\n"}
{"task_id": "EvoEval/58", "completion": "\n    l1.sort(reverse=True)\n    l2.sort(reverse=True)\n    common_list = [i for i in l1 if i in l2]\n    common_list = list(set(common_list))\n    common_list.sort(reverse=True)\n    return common_list\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    while n % 2 == 0:\n        n = n / 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            n = n / i\n    return int(n)\n"}
{"task_id": "EvoEval/60", "completion": "\n    if m > n:\n        return 0\n    else:\n        return m + sum_to_n(n, m + 1)\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    bracket_map = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n\n    for bracket in brackets:\n        if bracket in bracket_map:\n            if stack and stack[-1] == bracket_map[bracket]:\n                stack.pop()\n            else:\n                return False\n        else:\n            stack.append(bracket)\n\n    return not stack\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    if len(xs) == 0:\n        return []\n    if len(xs) == 1:\n        return [0]\n    return [i * j for i, j in enumerate(xs[:-1])]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b - c\n        return c\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    x = str(x)\n    shift %= len(x)\n    return x[-shift:] + x[:-shift]\n"}
{"task_id": "EvoEval/66", "completion": "\n\n    def digitSum(s):\n        return sum(int(c) for c in s if c.isdigit())\n\n    print(digitSum(\"abAB => 195\"))\n    print(digitSum(\"abc => 394\"))\n    print(digitSum(\"hello => 5\"))\n    print(digitSum(\"aaaaa => 6\"))\n    print(digitSum(\"digitSumwoArBld => 10\"))\n\n\nA: Here is a Python solution for the problem:\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    if \",\" in s:\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"apples\", \"\")\n        s = s.replace(\"oranges\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\",\", \"\")\n        s = s.split()\n        s = [int(i) for i in s]\n        return s[0] + s[1] - s[2] - s[3] + s[4]\n    else:\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"apples\", \"\")\n        s = s.replace(\"oranges\", \"\")\n        s = s.split()\n        s = [int(i) for i in s]\n        return s[0] - s[1] + s[2] - s[3] + s[4]\n"}
{"task_id": "EvoEval/68", "completion": "\n\n    def pluck(arr):\n        smallest_value = float('inf')\n        smallest_index = -1\n        for i, num in enumerate(arr):\n            if num % 2 != 0 and num < smallest_value:\n                smallest_value = num\n                smallest_index = i\n        return [smallest_index, smallest_value] if smallest_index != -1 else []\n\n    # Test cases\n    print(pluck([4,5])) # [1, 3]\n    print(pluck([1,2,3])) # [0, 1]\n    print(pluck([5,1,3,0,4,2])) # [1, 1]\n    print(pluck([])) # []\n    print(pluck([5,1,3,0,4,2])) # [1, 1]\n"}
{"task_id": "EvoEval/69", "completion": "\n\n    def search(lst):\n        for i in range(1, max(lst)+1):\n            if lst.count(i) >= i:\n                return i\n        return -1\n\n    print(search([1, 1, 2, 2, 3, 3, 4, 4]))\n    print(search([5, 5, 4]))\n\n"}
{"task_id": "EvoEval/70", "completion": "\n\n    def strange_sort_list(st):\n        st.sort()\n        st[::2], st[1::2] = st[-1:0:-1], st[:0:-1]\n        return st\n\n    print(strange_sort_list([2, 3]))\n    print(strange_sort_list([5, 5, 5]))\n    print(strange_sort_list([]))\n\n"}
{"task_id": "EvoEval/71", "completion": "\n\n\n"}
{"task_id": "EvoEval/72", "completion": "\n\n    The function will_it_ will return True if the list q is balanced (i.e., all elements are even) and the sum of the elements is less than or equal to the maximum weight. Otherwise, it will return False.\n    \"\"\"\n\n    \"\"\"\n    The function will_it_ will return True if the list q is balanced (i.e., all elements are even) and the sum of the elements is less than or equal to the maximum weight. Otherwise, it will return False.\n    \"\"\"\n\n    \"\"\"\n    The function will_it_ will return True if the list q is balanced (i.e., all elements are even) and the sum of the elements is less than or equal to the maximum weight. Otherwise, it will return False.\n    \"\"\"\n\n    \"\"\"\n    The function will_it_ will return True if the list q is balanced (i.e., all elements are even) and the sum of the elements is less than or equal to the maximum weight. Otherwise, it will return False.\n    \"\"\"\n\n    \"\"\"\n    The function will_it_ will return True if the list q is balanced (i.e., all elements are even) and the sum of the elements is less than or equal to the maximum weight. Otherwise, it will return False.\n    \"\"\"\n\n    \"\"\"\n    The function will_it_ will return True if the list q is balanced (i.e., all elements are even) and the sum of the elements is less than or equal to the maximum weight. Otherwise, it will return False.\n    \"\"\"\n\n    \"\"\"\n    The function will_it_ will return True if the list q is balanced (i.e., all elements are even) and the sum of the elements is less than or equal to the maximum weight. Otherwise,"}
{"task_id": "EvoEval/73", "completion": "\n    def smallest_change(arr):\n        n = len(arr)\n        count = 0\n        for i in range(n//2):\n            if arr[i] != arr[n-i-1]:\n                count += 1\n        return count\n\n    print(smallest_change([1, 2, 3, 2, 1]))\n\nsmallest_change([1, 2, 3, 2, 1])\n"}
{"task_id": "EvoEval/74", "completion": "\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n            if count > 4:\n                return False\n    return count == 4\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return True, None\n    elif n == 1:\n        return False, x\n    else:\n        return False, None\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    def iscube(a):\n        if a < 0:\n            return False\n        cube_root = a ** (1./3.)\n        return cube_root == int(cube_root)\n\n    print(iscube(64))\n    print(iscube(-180))\n    print(iscube(0))\n    print(iscube(180))\n\nThe function iscube() takes an integer a as input and returns True if the cube of some positive number is equal to the input number, otherwise it returns False.\n\nThe function iscube() works by first checking if the input number is less than 0. If it is, the function immediately returns False.\n\nNext, the function calculates the cube root of the input number. It does this by raising the input number to the power of 1/3.\n\nFinally, the function checks if the cube root of the input number is equal to the integer version of the cube root. If it is, the function returns True; otherwise, it returns False.\n\nThe function iscube() is then called with a few different inputs, and the results are printed to the console.\n"}
{"task_id": "EvoEval/78", "completion": "\n    hex_dict = {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n        \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n    }\n\n    num_str = str(num)\n    count = 0\n    for i in num_str:\n        if i in hex_dict:\n            count += hex_dict[i]\n        else:\n            return \"Invalid input\"\n    return count\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal).replace(\"0b\", \"\")\n    return binary + \"db\"\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    def check_consecutive(s):\n        for i in range(len(s) - 1):\n            if s[i] == s[i + 1]:\n                return False\n        return True\n\n    def check_repeated(s):\n        for i in range(len(s) - 1):\n            if s[i] == s[i + 1]:\n                return True\n        return False\n\n    return check_consecutive(s) and check_repeated(s)\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    letter_grades = []\n    for grade in grades:\n        if grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3:\n            letter_grades.append('B+')\n        elif grade > 2.0:\n            letter_grades.append('B')\n        elif grade > 1.7:\n            letter_grades.append('C+')\n        elif grade > 1.0:\n            letter_grades.append('C')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('E')\n        else:\n            letter_grades.append('F')\n    return letter_grades\n"}
{"task_id": "EvoEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_length(string):\n        string = string.replace(' ', '')\n        return is_prime(len(string))\n\n    print(prime_length('Hello'))\n    print(prime_length(' a b c d c a '))\n    print(prime_length(''))\n\nprime_length()\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 3\n    elif n == 2:\n        return 9\n    else:\n        return 0\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    def sum_of_digits(n):\n        return sum(int(i) for i in str(n))\n\n    return hex(sum_of_digits(N))[2:]\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst)\n"}
{"task_id": "EvoEval/86", "completion": "\n    s = s.split(' ')\n    s.sort()\n    return ''.join(s)\n"}
{"task_id": "EvoEval/87", "completion": "\n    def get_row(lst, x):\n        result = []\n        for i, row in enumerate(lst):\n            if i == x:\n                result.extend([(j, i) for j, val in enumerate(row) if val])\n        return sorted(result, key=lambda t: t[1])\n\n    print(get_row([[1,2,45,6],[1,4,1,4,1],[2,2,3]], 1))\n    print(get_row([[],[2,2,3]], 1))\n\nget_row([[1,2,45,6],[1,4,1,4,1],[2,2,3]], 1)\nget_row([[],[2,2,3]], 1)\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<empty_output>\n<jupy"}
{"task_id": "EvoEval/88", "completion": "\n\n    def sort_array(array):\n        if array:\n            array.sort()\n            if array[0] % 2 == 0:\n                array = [i for i in array if i % 2 != 0]\n            else:\n                array = [i for i in array if i % 2 == 0]\n            return array\n        else:\n            return array\n\n    print(sort_array([5]))\n    print(sort_array([2, 4, 3, 0, 1, 6]))\n    print(sort_array([4, 0, 1, 6]))\n\n\nsort_array([5])\nsort_array([2, 4, 3, 0, 1, 6])\nsort_array([4, 0, 1, 6])\n"}
{"task_id": "EvoEval/89", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_string = ''\n    for char in s:\n        if char.lower() in alphabet:\n            index = alphabet.index(char.lower())\n            new_index = (index + s.count(char.lower())*2) % 26\n            encrypted_string += alphabet[new_index] if char.isupper() else alphabet[new_index].upper()\n        else:\n            encrypted_string += char\n    return encrypted_string\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst)<2:\n        return None\n    max1 = max(lst[0], lst[1])\n    max2 = min(lst[0], lst[1])\n    for i in range(2, len(lst)):\n        if lst[i] > max1:\n            max2 = max1\n            max1 = lst[i]\n        elif lst[i] > max2:\n            max2 = lst[i]\n    return max2\n"}
{"task_id": "EvoEval/91", "completion": "\n    # Your code here\n    S = S.split(' ')\n    count = 0\n    for word in S:\n        if word.startswith('I') and word.endswith('boredom'):\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/92", "completion": "\n\n    def any_int(x, y, z):\n        return (abs(x) + abs(y) + abs(z)) % 2 == 0\n\n    print(any_int(5, 7, 1))  # True\n    print(any_int(3, 2, 3))  # True\n    print(any_int(3, -2, 2))  # True\n    print(any_int(3, -2, 2.2))  # False\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            if char.isupper():\n                encoded_message += chr(ord('A') + (index + 3) % 26)\n            else:\n                encoded_message += chr(ord('a') + (index + 3) % 26)\n        else:\n            encoded_message += char\n    return encoded_message\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return [sum_of_digits(i) for i in lst]\n"}
{"task_id": "EvoEval/95", "completion": "\n    if not dict:\n        return False\n    if len(dict) < 3:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not isinstance(dict[key], str):\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(n, 0, -1) if is_prime(num)]\n    return primes\n"}
{"task_id": "EvoEval/97", "completion": "\n    return sum(int(digit) for digit in str(a) if digit != '0') * sum(int(digit) for digit in str(b) if digit != '0')\n"}
{"task_id": "EvoEval/98", "completion": "\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n\n    def closest_integer(value):\n        if '.' in value:\n            value = float(value)\n            if value >= 0:\n                return int(value) if value - int(value) < 0.5 else int(value) + 1\n            else:\n                return int(value) if int(value) - value < 0.5 else int(value) - 1\n        else:\n            return int(value)\n\n    print(closest_integer(\"14.5\"))\n    print(closest_integer(\"-14.5\"))\n    print(closest_integer(\"15.3\"))\n\nclosest_integer()\n\n\nA: Here is a Python solution for the problem:\n\n"}
