{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\n"}
{"task_id": "HumanEval/1", "completion": "\n    result = []\n    current_group = []\n    depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n            current_group.append(char)\n        elif char == ')':\n            depth -= 1\n            current_group.append(char)\n            if depth == 0:\n                result.append(''.join(current_group))\n                current_group = []\n\n    return result\n"}
{"task_id": "HumanEval/2", "completion": "\n    return number - int(number)\n\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/4", "completion": "\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n"}
{"task_id": "HumanEval/5", "completion": "\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result += [delimeter, num]\n    return result\n\n"}
{"task_id": "HumanEval/6", "completion": "\n    depths = []\n    current_depth = 0\n    max_depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        elif char == ' ':\n            if max_depth > 0:\n                depths.append(max_depth)\n            max_depth = 0\n\n    if max_depth > 0:\n        depths.append(max_depth)\n\n    return depths\n\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "HumanEval/8", "completion": "\n    total_sum = 0\n    total_product = 1\n    for number in numbers:\n        total_sum += number\n        total_product *= number\n    return total_sum, total_product\n\n"}
{"task_id": "HumanEval/9", "completion": "\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n\n"}
{"task_id": "HumanEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string\n\n"}
{"task_id": "HumanEval/11", "completion": "\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n    longest_string = max(strings, key=len)\n    return longest_string\n\n"}
{"task_id": "HumanEval/13", "completion": "\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n"}
{"task_id": "HumanEval/14", "completion": "\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n"}
{"task_id": "HumanEval/15", "completion": "\n    return ' '.join(str(i) for i in range(n))\n"}
{"task_id": "HumanEval/16", "completion": "\n    return len(set(string))\n"}
{"task_id": "HumanEval/17", "completion": "\n    beats = []\n    for note in music_string.split():\n        if note == 'o|':\n            beats.append(2)\n        elif note == 'o':\n            beats.append(1)\n        elif note == '.':\n            beats.append(0.5)\n        elif note == '':\n            beats.append(4)\n    return beats\n\n"}
{"task_id": "HumanEval/18", "completion": "\n    count = 0\n    start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            count += 1\n            start = pos + 1\n        else:\n            break\n    return count\n\n"}
{"task_id": "HumanEval/19", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)\n\n"}
{"task_id": "HumanEval/20", "completion": "\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements.\")\n\n    closest_pair = (numbers[0], numbers[1])\n    min_distance = abs(numbers[1] - numbers[0])\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[j] - numbers[i])\n            if distance < min_distance:\n                min_distance = distance\n                closest_pair = (min(numbers[i], numbers[j]), max(numbers[i], numbers[j]))\n\n    return closest_pair\n\n"}
{"task_id": "HumanEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n"}
{"task_id": "HumanEval/23", "completion": "\n    count = 0\n    for i in string:\n        count += 1\n    return count\n\n"}
{"task_id": "HumanEval/24", "completion": "\n    for i in range(n, 0, -1):\n        if n % i == 0:\n            return i\n\n"}
{"task_id": "HumanEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "HumanEval/26", "completion": "\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n\n"}
{"task_id": "HumanEval/27", "completion": "\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [i for i in l if i > 0]\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Polynomial must have even number of coefficients\")\n\n    def derivative(xs):\n        return [i * coeff for i, coeff in enumerate(xs)][1:]\n\n    def find_zero(xs):\n        if len(xs) == 1:\n            return -xs[0]\n        else:\n            return find_zero(derivative(xs))\n\n    return find_zero(xs)\n\n"}
{"task_id": "HumanEval/33", "completion": "\n    l_third = [l[i] for i in range(len(l)) if i % 3 == 0]\n    l_third.sort()\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = l_third.pop(0)\n    return l\n\n"}
{"task_id": "HumanEval/34", "completion": "\n    unique_list = []\n    for i in l:\n        if i not in unique_list:\n            unique_list.append(i)\n    return sorted(unique_list)\n"}
{"task_id": "HumanEval/35", "completion": "\n    max_num = l[0]\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num\n\n"}
{"task_id": "HumanEval/36", "completion": "\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    even_indices.sort()\n    for i, value in enumerate(even_indices):\n        l[2 * i] = value\n    return l\n\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(num):\n        a, b = 0, 1\n        for _ in range(num):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while True:\n        fib_num = fibonacci(i)\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num\n        i += 1\n"}
{"task_id": "HumanEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"}
{"task_id": "HumanEval/41", "completion": "\n    return n ** 2\n"}
{"task_id": "HumanEval/42", "completion": "\n    return [x + 1 for x in l]\n"}
{"task_id": "HumanEval/43", "completion": "\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "\n    if base < 2 or base > 9:\n        return \"Invalid base\"\n    if x == 0:\n        return \"0\"\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n\n"}
{"task_id": "HumanEval/48", "completion": "\n    text = text.replace(' ', '').lower()\n    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2 % p\n    else:\n        half = modp(n // 2, p)\n        if n % 2 == 0:\n            return (half * half) % p\n        else:\n            return (2 * half * half) % p\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n"}
{"task_id": "HumanEval/52", "completion": "\n    return all(x < t for x in l)\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "\n    return set(s0) == set(s1)\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\n"}
{"task_id": "HumanEval/56", "completion": "\n    balance = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            balance += 1\n        elif bracket == \">\":\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n\n"}
{"task_id": "HumanEval/57", "completion": "\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n"}
{"task_id": "HumanEval/58", "completion": "\n    # Using list comprehension to find common elements\n    common_elements = [element for element in l1 if element in l2]\n    return common_elements\n"}
{"task_id": "HumanEval/59", "completion": "\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return max(factors)\n"}
{"task_id": "HumanEval/60", "completion": "\n    return n * (n + 1) // 2\n\n"}
{"task_id": "HumanEval/61", "completion": "\n    balance = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            balance += 1\n        elif bracket == \")\":\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n"}
{"task_id": "HumanEval/62", "completion": "\n    return [xs[i] * i for i in range(1, len(xs))]\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(1) * fibfib(n - 2) + fibfib(n - 3)\n"}
{"task_id": "HumanEval/64", "completion": "\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    if s[-1].lower() == 'y':\n        count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "\n    if not x:\n        return \"\"\n    shift %= len(x)\n    return x[-shift:] + x[:-shift]\n"}
{"task_id": "HumanEval/66", "completion": "\n    s = s.replace(\" \", \"\")\n    sum = 0\n    for i in range(len(s)):\n        if s[i].isalpha():\n            sum += ord(s[i].upper()) - 64\n    return sum\n"}
{"task_id": "HumanEval/67", "completion": "\n    fruit_dict = {\"apples\":0,\"oranges\":0}\n    for fruit in s.split():\n        if fruit.isdigit():\n            fruit_dict[s.split()[s.split().index(fruit)-1]] = int(fruit)\n    return n - sum(fruit_dict.values())\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "HumanEval/68", "completion": "\n    if not arr:\n        return []\n    evens = [(i, x) for i, x in enumerate(arr) if x % 2 == 0]\n    if not evens:\n        return []\n    return list(min(evens, key=lambda x: (x[1], x[0])))\n\n"}
{"task_id": "HumanEval/69", "completion": "\n    freq = {}\n    for num in lst:\n        if num > 0:\n            freq[num] = freq.get(num, 0) + 1\n    max_freq = max(freq.values()) if freq else 1\n    return max_freq\n"}
{"task_id": "HumanEval/70", "completion": "\n    result = []\n    while lst:\n        result.append(max(lst))\n        lst.remove(max(lst))\n        if lst:\n            result.append(min(lst))\n            lst.remove(min(lst))\n    return result\n"}
{"task_id": "HumanEval/71", "completion": "\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n"}
{"task_id": "HumanEval/72", "completion": "\n    if sum(q) > w:\n        return False\n    else:\n        return q == q[::-1]"}
{"task_id": "HumanEval/73", "completion": "\n    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-i - 1]:\n            changes += 1\n    return changes\n\n"}
{"task_id": "HumanEval/74", "completion": "\n    if not lst1 and not lst2:\n        return []\n    elif not lst1:\n        return lst2\n    elif not lst2:\n        return lst1\n    else:\n        total1 = sum(len(i) for i in lst1)\n        total2 = sum(len(i) for i in lst2)\n        if total1 < total2:\n            return lst1\n        elif total2 < total1:\n            return lst2\n        else:\n            return lst1, lst2\n\n"}
{"task_id": "HumanEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, 101) if is_prime(i)]\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            for k in range(j + 1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n"}
{"task_id": "HumanEval/76", "completion": "\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x\n"}
{"task_id": "HumanEval/77", "completion": "\n    return a**(1./3.) % 1 == 0\n    pass\n"}
{"task_id": "HumanEval/78", "completion": "\n    # your code here\n    count = 0\n    for i in num:\n        if i in ['3', '5', '7', 'B', 'D']:\n            count += 1\n    return count\n    pass\n\n"}
{"task_id": "HumanEval/79", "completion": "\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return binary + \"db\"\n\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 2:\n        return False\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "\n    pass\n"}
{"task_id": "HumanEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n"}
{"task_id": "HumanEval/83", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return 18 * starts_one_ends(n - 1)\n\n"}
{"task_id": "HumanEval/84", "completion": "\n    return bin(N)[2:]\n\n"}
{"task_id": "HumanEval/85", "completion": "\n    return sum(x for x in lst if x % 2 == 0)\n"}
{"task_id": "HumanEval/86", "completion": "\n    words = s.split(' ')\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)\n"}
{"task_id": "HumanEval/87", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort()\n    return result\n    pass\n\n"}
{"task_id": "HumanEval/88", "completion": "\n    if not array:\n        return []\n    else:\n        if (array[0] + array[-1]) % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)\n\n"}
{"task_id": "HumanEval/89", "completion": "\n    return ''.join([chr((ord(c) - 97 + 2 * 2) % 26 + 97) if c.islower() else chr((ord(c) - 65 + 2 * 2) % 26 + 65) if c.isupper() else c for c in s])\n"}
{"task_id": "HumanEval/90", "completion": "\n    if not lst:\n        return None\n    unique_lst = list(set(lst))\n    unique_lst.sort()\n    if len(unique_lst) < 2:\n        return None\n    else:\n        return unique_lst[1]\n"}
{"task_id": "HumanEval/91", "completion": "\n    count = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/92", "completion": "\n    return (x + y == z) or (x + z == y) or (y + z == x) and (x, y, z).isnumeric()\n"}
{"task_id": "HumanEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            new_index = (index + 2) % len(vowels)\n            new_char = vowels[new_index]\n            encoded_message += new_char.upper() if char.isupper() else new_char\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "HumanEval/94", "completion": "\n    # your code here\n    return max(sum(int(digit) for digit in str(abs(num))) for num in lst)\n\n"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:\n        return True\n    lower_case = upper_case = False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            lower_case = True\n        elif key.isupper():\n            upper_case = True\n        else:\n            return False\n        if lower_case and upper_case:\n            return False\n    return True\n"}
{"task_id": "HumanEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "\n    return (a % 10) * (b % 10) if b != 0 else 0\n"}
{"task_id": "HumanEval/98", "completion": "\n    count = 0\n    for char in s:\n        if char in 'AEIOU':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "\n    return int(float(value))\n"}
{"task_id": "HumanEval/100", "completion": "\n    pile = []\n    if n % 2 == 0:\n        for i in range(n):\n            pile.append(n + 2*i)\n    else:\n        for i in range(n):\n            pile.append(n + 2*i)\n    return pile\n"}
{"task_id": "HumanEval/101", "completion": "\n    s = s.replace(\",\", \" \")\n    words = s.split()\n    return words\n"}
{"task_id": "HumanEval/102", "completion": "\n    if x > y:\n        return 1\n    else:\n        return x + 1\n\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)\n"}
{"task_id": "HumanEval/104", "completion": "\n    result = []\n    for num in x:\n        if any(int(digit) % 2 == 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)\n"}
{"task_id": "HumanEval/105", "completion": "\n    # Your code here\n    num_to_word = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    if not arr:\n        return []\n    \n    arr = sorted([num for num in arr if 1 <= num <= 9])\n    arr.reverse()\n    \n    return [num_to_word[num] for num in arr]\n"}
{"task_id": "HumanEval/106", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n    \n    def sum_to_n(n):\n        return n * (n + 1) // 2\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_n(i))\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return even_count, odd_count\n"}
{"task_id": "HumanEval/108", "completion": "\n    def sum_digits(n):\n        if n < 0:\n            n = -n\n            return -int(str(n)[0]) + sum(int(digit) for digit in str(n)[1:])\n        else:\n            return sum(int(digit) for digit in str(n))\n\n    return sum(1 for num in arr if sum_digits(num) == 0)\n"}
{"task_id": "HumanEval/109", "completion": "\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i:] + arr[:i] == sorted(arr):\n            return True\n    return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "HumanEval/110", "completion": "\n    odd_lst1 = [num for num in lst1 if num % 2 != 0]\n    even_lst2 = [num for num in lst2 if num % 2 == 0]\n    \n    if len(odd_lst1) <= len(even_lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "\n    test = test.replace(\" \", \"\")\n    dic = {}\n    for i in test:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    max_value = max(dic.values())\n    return {k: v for k, v in dic.items() if v == max_value}\n\n"}
{"task_id": "HumanEval/112", "completion": "\n    s = s.replace(c, '')\n    return s, s == s[::-1]\n"}
{"task_id": "HumanEval/113", "completion": "\n    result = []\n    for i, s in enumerate(lst, 1):\n        odd_count = sum(1 for c in s if int(c) % 2 == 1)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result\n"}
{"task_id": "HumanEval/114", "completion": "\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "\n    total_bucket_lowering = 0\n    for row in grid:\n        total_water = sum(row)\n        total_bucket_lowering += math.ceil(total_water / capacity)\n    return total_bucket_lowering\n\n"}
{"task_id": "HumanEval/116", "completion": "\n    # Your code here\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"}
{"task_id": "HumanEval/117", "completion": "\n    words = s.split()\n    result = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = \"aeiouAEIOU\"\n    closest_vowel = \"\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i+1] not in vowels and word[i-1] not in vowels:\n            closest_vowel = word[i]\n            break\n    return closest_vowel\n"}
{"task_id": "HumanEval/119", "completion": "\n    def is_balanced(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            elif char == ')':\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if i != j and is_balanced(lst[i] + lst[j]):\n                return 'Yes'\n    return 'No'\n"}
{"task_id": "HumanEval/120", "completion": "\n    # Your code here\n\n"}
{"task_id": "HumanEval/121", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)\n\n"}
{"task_id": "HumanEval/122", "completion": "\n    sum = 0\n    for i in range(k):\n        if arr[i] < 100:\n            sum += arr[i]\n    return sum\n"}
{"task_id": "HumanEval/123", "completion": "\n    odd_collatz = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_collatz.append(n)\n        n = 3 * n + 1 if n % 2 else n // 2\n    odd_collatz.append(1)  # Add 1 to the list as per the problem statement\n    return sorted(odd_collatz)  # Return the sorted list of odd numbers in the Collatz sequence\n"}
{"task_id": "HumanEval/124", "completion": "\n    if len(date) != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n        return False\n    month = int(date[:2])\n    day = int(date[3:5])\n    year = int(date[6:])\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month == 4 or month == 6 or month == 9 or month == 11:\n        if day == 31:\n            return False\n    if month == 2:\n        if day > 29:\n            return False\n    return True\n"}
{"task_id": "HumanEval/125", "completion": "\n    if ',' in txt:\n        return [i.strip() for i in txt.split(',')]\n    elif ' ' in txt:\n        return [i.strip() for i in txt.split(' ')]\n    else:\n        return [i for i in txt if ord(i) % 2 == 1]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "HumanEval/126", "completion": "\n    if len(lst) < 2:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/127", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    intersection_length = end - start\n\n    if intersection_length > 0 and is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= num\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes\n"}
{"task_id": "HumanEval/129", "completion": "\n    N = len(grid)\n    if N == 1:\n        return [grid[0][0]]\n    if k == 1:\n        return [min(grid[i][j] for i in range(N) for j in range(N))]\n    if k == N * N:\n        return [grid[i][j] for i in range(N) for j in range(N)]\n    if k == 2:\n        return [min(grid[i][j] for i in range(N) for j in range(N)), max(grid[i][j] for i in range(N) for j in range(N))]\n    if k == 3:\n        return [min(grid[i][j] for i in range(N) for j in range(N)), max(grid[i][j] for i in range(N) for j in range(N)), grid[N // 2][N // 2]]\n    if k == 4:\n        return [min(grid[i][j] for i in range(N) for j in range(N)), max(grid[i][j] for i in range(N) for j in range(N)), grid[N // 2][N // 2], grid[N // 2 - 1][N // 2 - 1]]\n    if k == 5:\n        return [min(grid[i][j] for i in range(N) for j in range(N)), max(grid[i][j] for i in range(N) for j in range(N)), grid[N // 2][N // 2], grid[N // 2 - 1][N // 2 - 1], grid[N // 2 - 2][N // 2 - 2]]\n    if k == 6:\n        return [min(grid[i][j] for i in range(N) for j in range(N)), max(grid[i][j] for i in range(N) for j in range(N)), grid[N // 2][N // 2], grid[N // 2 - 1][N // 2 - 1], grid[N // 2 - 2][N // 2 - 2],"}
{"task_id": "HumanEval/130", "completion": "\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        sequence = [1, 1, 2]\n        for i in range(3, n):\n            next_value = sequence[i-1] + sequence[i-2] + sequence[i-3]\n            sequence.append(next_value)\n        return sequence[:n]\n"}
{"task_id": "HumanEval/131", "completion": "\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0\n"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack[-1] != '[':\n                return False\n            stack.pop()\n    return len(stack) > 0\n"}
{"task_id": "HumanEval/133", "completion": "\n    return sum(int(i**2) for i in lst)\n"}
{"task_id": "HumanEval/134", "completion": "\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha():\n        if len(txt) == 1 or txt[-2] == \" \":\n            return True\n    return False\n"}
{"task_id": "HumanEval/135", "completion": "\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] >= arr[i - 1]:\n            max_index = i\n    return max_index\n"}
{"task_id": "HumanEval/136", "completion": "\n    neg = [x for x in lst if x < 0]\n    pos = [x for x in lst if x > 0]\n    return (max(neg) if neg else None, min(pos) if pos else None)\n"}
{"task_id": "HumanEval/137", "completion": "\n    if isinstance(a, str):\n        a = a.replace(\",\", \".\")\n        if \".\" in a:\n            a = float(a)\n        else:\n            a = int(a)\n    if isinstance(b, str):\n        b = b.replace(\",\", \".\")\n        if \".\" in b:\n            b = float(b)\n        else:\n            b = int(b)\n    if a == b:\n        return None\n    return a\n\n"}
{"task_id": "HumanEval/138", "completion": "\n    if n < 10:\n        return False\n    for i in range(1, n//4 + 1):\n        for j in range(i, n//3 + 1):\n            for k in range(j, n//2 + 1):\n                l = n - (i + j + k)\n                if l > k and l % 2 == 0:\n                    return True\n    return False\n"}
{"task_id": "HumanEval/139", "completion": "\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial\n"}
{"task_id": "HumanEval/140", "completion": "\n    result = \"\"\n    space_count = 0\n    for char in text:\n        if char == \" \":\n            space_count += 1\n        else:\n            if space_count > 2:\n                result += \"_\" + str(space_count)\n            elif space_count > 0:\n                result += \"_\" * space_count\n            result += char\n            space_count = 0\n    if space_count > 2:\n        result += \"_\" + str(space_count)\n    elif space_count > 0:\n        result += \"_\" * space_count\n    return result\n"}
{"task_id": "HumanEval/141", "completion": "\n    if file_name.count('.') != 1:\n        return 'No'\n    name, extension = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if extension not in ['exe', 'dll']:\n        return 'No'\n    if name.count('-') > 0:\n        return 'No'\n    return 'Yes'\n"}
{"task_id": "HumanEval/142", "completion": "\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 == 0:\n            sum += lst[i]\n    return sum\n"}
{"task_id": "HumanEval/143", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)\n"}
{"task_id": "HumanEval/144", "completion": "\n    # your code here\n    return False\n"}
{"task_id": "HumanEval/145", "completion": "\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))\n"}
{"task_id": "HumanEval/146", "completion": "\n    def is_odd(n):\n        return n % 2 != 0\n\n    def is_odd_digit(n):\n        return is_odd(int(str(n)[0])) and is_odd(int(str(n)[-1]))\n\n    return sum(1 for num in nums if is_odd_digit(num) and num > 10)\n"}
{"task_id": "HumanEval/147", "completion": "\n    a = [i for i in range(1, n+1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if a[i] % 3 == 0 and a[j] % 3 == 0 and a[k] % 3 == 0:\n                    count += 1\n    return count\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = [\"Mercury\", \"Venus\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    return tuple(planets[index1 + 1:index2])\n"}
{"task_id": "HumanEval/149", "completion": "\n    # Your code here\n    new_list = []\n    for i in lst:\n        if len(i) % 2 == 0:\n            new_list.append(i)\n    new_list.sort(key=lambda x: (len(x), x))\n    return new_list\n"}
{"task_id": "HumanEval/150", "completion": "\n    if isinstance(n, int):\n        return x\n    else:\n        return y\n"}
{"task_id": "HumanEval/151", "completion": "\n    return sum(x**2 for x in lst if x > 0 and x % 2 == 1)\n"}
{"task_id": "HumanEval/152", "completion": "\n    return [abs(a-b) for a,b in zip(game,guess)]"}
{"task_id": "HumanEval/153", "completion": "\n    strongest = ''\n    max_strength = float('-inf')\n    for extension in extensions:\n        upper_count = sum(1 for char in extension if char.isupper())\n        lower_count = sum(1 for char in extension if char.islower())\n        strength = upper_count - lower_count\n        if strength > max_strength:\n            max_strength = strength\n            strongest = extension\n    return f\"{class_name}.{strongest}\"\n"}
{"task_id": "HumanEval/154", "completion": "\n    if b == \"\":\n        return True\n    if len(b) > len(a):\n        return False\n    for i in range(len(a)):\n        if a[i:] + a[:i] == b:\n            return True\n    return False\n"}
{"task_id": "HumanEval/155", "completion": "\n    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count\n\n"}
{"task_id": "HumanEval/156", "completion": "\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            result += roman_numerals[value]\n            number -= value\n    return result\n"}
{"task_id": "HumanEval/157", "completion": "\n    # Sort the sides of the triangle\n    sides = sorted([a, b, c])\n    # Check if the square of the longest side is equal to the sum of the squares of the other two sides\n    return sides[2]**2 == sides[0]**2 + sides[1]**2\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique or (len(unique_chars) == max_unique and word < max_word):\n            max_unique = len(unique_chars)\n            max_word = word\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n    pass\n"}
{"task_id": "HumanEval/160", "completion": "\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result\n"}
{"task_id": "HumanEval/161", "completion": "\n    if not s.isalpha():\n        return s[::-1]\n    return ''.join(c.swapcase() if c.isalpha() else c for c in s)\n"}
{"task_id": "HumanEval/162", "completion": "\n    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "\n    if a > b:\n        return []\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n"}
