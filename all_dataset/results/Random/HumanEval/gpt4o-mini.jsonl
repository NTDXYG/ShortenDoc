{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "\n    stack = []\n    groups = []\n    current_group = []\n    \n    for char in paren_string:\n        if char == '(':\n            if not stack:\n                current_group = []\n            stack.append(char)\n            current_group.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                current_group.append(char)\n                if not stack:\n                    groups.append(''.join(current_group))\n            else:\n                continue\n        else:\n            if current_group:\n                current_group = []\n    \n    return [group for group in groups if group]\n"}
{"task_id": "HumanEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "\n    if not numbers:\n        return 0.0\n\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    return sum(absolute_deviations) / len(absolute_deviations)\n"}
{"task_id": "HumanEval/5", "completion": "\n    if not numbers:\n        return []\n    \n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if (i + 1) % 2 == 0 and i != len(numbers) - 1:\n            result.append(delimeter)\n    \n    return result\n"}
{"task_id": "HumanEval/6", "completion": "\n    levels = []\n    max_depth = 0\n    current_depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n            if current_depth < 0:\n                return []  # Unmatched parentheses\n\n        if char == ' ' or char == ')':\n            if max_depth > 0:\n                levels.append(max_depth)\n                max_depth = 0\n\n    if current_depth != 0:\n        return []  # Unmatched parentheses\n\n    return levels\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n"}
{"task_id": "HumanEval/8", "completion": "\n    if not numbers:\n        return 0, 1\n    \n    total_sum = sum(numbers)\n    total_product = 1\n    for number in numbers:\n        total_product *= number\n    \n    return total_sum, total_product\n"}
{"task_id": "HumanEval/9", "completion": "\n    if not numbers:\n        return []\n\n    max_values = []\n    current_max = numbers[0]\n    \n    for number in numbers:\n        current_max = max(current_max, number)\n        max_values.append(current_max)\n    \n    return max_values\n"}
{"task_id": "HumanEval/10", "completion": "\n    # Find the longest palindromic suffix\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            # The prefix that needs to be added in front\n            prefix = string[:i][::-1]\n            return prefix + string\n    return string  # In case the string is already a palindrome\n"}
{"task_id": "HumanEval/11", "completion": "\n    if len(b) == 0:\n        return a\n    return ''.join('1' if a[i] != b[i] else '0' for i in range(len(a)))\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n    return max(strings, key=len)\n"}
{"task_id": "HumanEval/13", "completion": "\n    while b:\n        a, b = b, a % b\n    return a\n"}
{"task_id": "HumanEval/14", "completion": "\n    return [string[:i] for i in range(1, len(string) + 1)]\n"}
{"task_id": "HumanEval/15", "completion": "\n    return ' '.join(str(i) for i in range(2, n + 1))\n"}
{"task_id": "HumanEval/16", "completion": "\n    return len(set(string))\n"}
{"task_id": "HumanEval/17", "completion": "\n    note_durations = {\n        'o': 4,   # whole note\n        'o|': 2,  # half note\n        '.': 1,   # quarter note\n        '|': 0    # bar line, not counted\n    }\n    \n    music_notes = music_string.split()\n    result = []\n\n    for note in music_notes:\n        if note in note_durations:\n            result.append(note_durations[note])\n        else:\n            # Handle cases where the note might be a combination\n            if note.startswith('o'):\n                result.append(4)\n            elif note.startswith('.'):\n                result.append(1)\n            elif note == '|':\n                continue  # Ignore bar lines\n\n    return result\n"}
{"task_id": "HumanEval/18", "completion": "\n    count = 0\n    start = 0\n    \n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1  # Move to the next character to allow overlapping\n    \n    return count\n"}
{"task_id": "HumanEval/19", "completion": "\n    number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Split the input string into words\n    words = numbers.split()\n    \n    # Convert words to their corresponding numbers\n    num_list = [number_map[word] for word in words if word in number_map]\n    \n    # Sort the numbers\n    num_list.sort()\n    \n    # Convert sorted numbers back to words\n    sorted_words = [list(number_map.keys())[list(number_map.values()).index(num)] for num in num_list]\n    \n    # Join the sorted words into a single string\n    return ' '.join(sorted_words)\n"}
{"task_id": "HumanEval/20", "completion": "\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two elements.\")\n\n    numbers = sorted(set(numbers))  # Remove duplicates and sort the list\n\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two unique elements.\")\n\n    return (numbers[0], numbers[1])\n"}
{"task_id": "HumanEval/21", "completion": "\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two elements.\")\n    \n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    if max_val == min_val:\n        return [0.0] * len(numbers)\n    \n    return [(num - min_val) / (max_val - min_val) for num in numbers]\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n"}
{"task_id": "HumanEval/24", "completion": "\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n"}
{"task_id": "HumanEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "\n    count = {}\n    for number in numbers:\n        count[number] = count.get(number, 0) + 1\n\n    return [number for number in numbers if count[number] == 1]\n"}
{"task_id": "HumanEval/27", "completion": "\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [num for num in l if num > 0]\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The list of coefficients must have an even number of elements.\")\n    \n    # Using the bisection method to find a root\n    a, b = -1000, 1000  # Initial interval\n    while b - a > 1e-7:  # Precision threshold\n        mid = (a + b) / 2\n        if poly(xs, mid) * poly(xs, a) < 0:\n            b = mid\n        else:\n            a = mid\n    return (a + b) / 2\n"}
{"task_id": "HumanEval/33", "completion": "\n    divisible_by_three = [x for x in l if x % 3 == 0]\n    sorted_divisible = sorted(divisible_by_three)\n    \n    result = []\n    for x in l:\n        if x % 3 == 0:\n            result.append(sorted_divisible.pop(0))\n        else:\n            result.append(x)\n    \n    return result\n"}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "\n    if not l:\n        return None\n    max_val = l[0]\n    for num in l:\n        if num > max_val:\n            max_val = num\n    return max_val\n"}
{"task_id": "HumanEval/36", "completion": "\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = sorted(l[i] for i in even_indices)\n    \n    for index, value in zip(even_indices, even_values):\n        l[index] = value\n    \n    return l\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements back in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/39", "completion": "\n    if n < 1:\n        return None\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci():\n        a, b = 0, 1\n        while True:\n            a, b = b, a + b\n            yield a\n\n    count = 0\n    for fib in fibonacci():\n        if is_prime(fib):\n            count += 1\n            if count == n:\n                return fib\n"}
{"task_id": "HumanEval/40", "completion": "\n    l.sort()\n    n = len(l)\n    \n    for i in range(n - 2):\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n                \n    return False\n"}
{"task_id": "HumanEval/41", "completion": "\n    # Since all cars are moving at the same speed, we can simply count the number of cars\n    # moving in each direction. Each car moving left will collide with each car moving right.\n    \n    # For n cars moving left and n cars moving right, the total number of collisions is:\n    collisions = n * n\n    \n    return collisions\n"}
{"task_id": "HumanEval/42", "completion": "\n    return [x + 1 for x in l]\n"}
{"task_id": "HumanEval/43", "completion": "\n    seen = set()\n    for number in l:\n        if -number in seen:\n            return True\n        seen.add(number)\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10.\")\n    \n    if x == 0:\n        return '0'\n    \n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    \n    return ''.join(reversed(digits))\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3)\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    mid = n // 2\n    if n % 2 == 0:\n        return (l[mid - 1] + l[mid]) / 2\n    else:\n        return l[mid]\n"}
{"task_id": "HumanEval/48", "completion": "\n    text = text.lower().replace(\" \", \"\")\n    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "\n    if p == 0:\n        return 1\n    return (modp(n, p // 2) ** 2) % n * (2 if p % 2 == 1 else 1) % n\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/51", "completion": "\n    return ''.join(char for char in text if char.lower() not in 'aeiou')\n"}
{"task_id": "HumanEval/52", "completion": "\n    return [x for x in l if x < t]\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "\n    return set(s0) == set(s1)\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n"}
{"task_id": "HumanEval/56", "completion": "\n    balance = 0\n    for char in brackets:\n        if char == \"<\":\n            balance += 1\n        elif char == \">\":\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n"}
{"task_id": "HumanEval/57", "completion": "\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing\n"}
{"task_id": "HumanEval/58", "completion": "\n    return list(set(l1) & set(l2))\n"}
{"task_id": "HumanEval/59", "completion": "\n    if n < 2:\n        return None\n\n    # Function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Start with the largest possible prime factor\n    largest_factor = None\n\n    # Check for number of 2s that divide n\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n\n    # n must be odd at this point, so we can skip even numbers\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n\n    # This condition is to check if n is a prime number greater than 2\n    if n > 2:\n        largest_factor = n\n\n    return largest_factor\n"}
{"task_id": "HumanEval/60", "completion": "\n    if n < 1:\n        return 0\n    return n * (n + 1) // 2\n"}
{"task_id": "HumanEval/61", "completion": "\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/62", "completion": "\n    if len(xs) == 0:\n        return []\n    \n    return [i * coeff for i, coeff in enumerate(xs)][1:]\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 4\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"}
{"task_id": "HumanEval/64", "completion": "\n    vowels = \"aeiou\"\n    count = 0\n    s = s.lower()\n    \n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n        elif s[i] == 'y' and i == len(s) - 1:\n            count += 1\n            \n    return count\n"}
{"task_id": "HumanEval/65", "completion": "\n    if not isinstance(x, int) or not isinstance(shift, int):\n        return \"Invalid input\"\n\n    str_x = str(x)\n    if len(str_x) == 0:\n        return \"\"\n\n    shift = shift % len(str_x)  # Normalize shift\n    if shift == 0:\n        return str_x\n    elif shift < 0:\n        return str_x[::-1]  # Return reversed if shift is negative\n\n    return str_x[-shift:] + str_x[:-shift]\n"}
{"task_id": "HumanEval/66", "completion": "\n    total = 0\n    for char in s:\n        if char.isalpha():\n            total += ord(char)\n    return total\n"}
{"task_id": "HumanEval/67", "completion": "\n    import re\n\n    # Extract the number of apples and oranges from the string\n    apples = sum(int(num) for num in re.findall(r'(\\d+)\\s*apples?', s))\n    oranges = sum(int(num) for num in re.findall(r'(\\d+)\\s*oranges?', s))\n\n    # Calculate the number of mangoes\n    mangoes = n - (apples + oranges)\n\n    return mangoes\n"}
{"task_id": "HumanEval/68", "completion": "\n    if not arr:\n        return []\n    \n    smallest_even = float('inf')\n    smallest_index = -1\n    \n    for index, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even:\n            smallest_even = value\n            smallest_index = index\n    \n    if smallest_index == -1:\n        return []\n    \n    return [smallest_even, smallest_index]\n"}
{"task_id": "HumanEval/69", "completion": "\n    if not lst:\n        return 1\n\n    frequency = {}\n    for num in lst:\n        if num > 0:\n            frequency[num] = frequency.get(num, 0) + 1\n\n    result = -1\n    for num, freq in frequency.items():\n        if freq > num and num > result:\n            result = num\n\n    return result if result != -1 else 1\n"}
{"task_id": "HumanEval/70", "completion": "\n    if not lst:\n        return []\n    \n    sorted_lst = sorted(lst)\n    result = []\n    \n    while sorted_lst:\n        result.append(sorted_lst.pop())  # Add the maximum\n        if sorted_lst:\n            result.append(sorted_lst.pop(0))  # Add the minimum\n    \n    return result\n"}
{"task_id": "HumanEval/71", "completion": "\n    # Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "\n    def will_it_fly(q, w):\n    if sum(q) > w:\n        return False\n    return q == q[::-1]\n"}
{"task_id": "HumanEval/73", "completion": "\n    if not arr:\n        return 0\n\n    left, right = 0, len(arr) - 1\n    changes = 0\n\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n\n    return changes\n"}
{"task_id": "HumanEval/74", "completion": "\n    if not lst1 and not lst2:\n        return []\n    \n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    \n    if total1 < total2:\n        return lst1\n    elif total2 < total1:\n        return lst2\n    else:\n        return lst1\n"}
{"task_id": "HumanEval/75", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        factors = []\n        for i in range(2, n + 1):\n            while n % i == 0 and is_prime(i):\n                factors.append(i)\n                n //= i\n        return factors\n\n    factors = prime_factors(a)\n    unique_factors = set(factors)\n\n    return len(unique_factors) == 3 and all(is_prime(factor) for factor in unique_factors)\n"}
{"task_id": "HumanEval/76", "completion": "\n    if n <= 1:\n        return False\n    if x < 1:\n        return False\n    power = 1\n    while True:\n        result = n ** power\n        if result == x:\n            return True\n        elif result > x:\n            return False\n        power += 1\n"}
{"task_id": "HumanEval/77", "completion": "\n    return round(a ** (1/3)) ** 3 == a\n"}
{"task_id": "HumanEval/78", "completion": "\n    prime_digits = {'3', '5', '7', 'D'}\n    count = 0\n    \n    for char in num:\n        if char in prime_digits:\n            count += 1\n            \n    return count\n"}
{"task_id": "HumanEval/79", "completion": "\n    if decimal == 0:\n        return \"0db\"\n    \n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    \n    return binary + \"db\"\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 2:\n        return False\n    \n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            return False\n            \n    return True\n"}
{"task_id": "HumanEval/81", "completion": "\n    letter_grades = []\n    for grade in grades:\n        if grade >= 3.3:\n            letter_grades.append('A')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    \n    return letter_grades\n"}
{"task_id": "HumanEval/82", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    length = len(string)\n    return is_prime(length)\n"}
{"task_id": "HumanEval/83", "completion": "\n    count = 0\n    for i in range(1, n + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/84", "completion": "\n    return bin(N)[2:]\n"}
{"task_id": "HumanEval/85", "completion": "\n    return sum(x for x in lst if x % 2 == 0)\n"}
{"task_id": "HumanEval/86", "completion": "\n    if not s:\n        return ''\n    \n    words = s.split()\n    sorted_words = []\n    \n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        sorted_words.append(sorted_word)\n    \n    return ' '.join(sorted_words)\n"}
{"task_id": "HumanEval/87", "completion": "\n    def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                coordinates.append((i, j))\n    return sorted(coordinates)\n"}
{"task_id": "HumanEval/88", "completion": "\n    if not array:\n        return []\n\n    first_value = array[0]\n    last_value = array[-1]\n    sum_values = first_value + last_value\n\n    sorted_array = sorted(array)\n\n    if (last_value % 2) == 1:\n        return sorted_array\n    elif (sum_values % 2) == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array\n"}
{"task_id": "HumanEval/89", "completion": "\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            if char.islower():\n                encrypted += chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                encrypted += chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n        else:\n            encrypted += char\n    return encrypted\n"}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    \n    unique_lst = list(set(lst))\n    unique_lst.sort()\n    \n    if len(unique_lst) < 2:\n        return None\n    \n    return unique_lst[1]\n"}
{"task_id": "HumanEval/91", "completion": "\n    sentences = S.split('.')\n    boredom_count = 0\n    \n    for sentence in sentences:\n        if sentence.strip().startswith(\"I \"):\n            boredom_count += 1\n            \n    return boredom_count\n"}
{"task_id": "HumanEval/92", "completion": "\n    return (x == y + z) or (y == x + z) or (z == x + y)\n"}
{"task_id": "HumanEval/93", "completion": "\n    vowels = 'aeiouAEIOU'\n    encoded_message = []\n\n    for char in message:\n        if char in vowels:\n            # Find the index of the vowel and get the character 2 places ahead\n            new_char = chr(ord(char) + 2)\n            encoded_message.append(new_char)\n        else:\n            encoded_message.append(char)\n\n    return ''.join(encoded_message)\n"}
{"task_id": "HumanEval/94", "completion": "\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(n) if digit.isdigit())\n\n    return max(digit_sum(num) for num in lst if isinstance(num, int))\n"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:\n        return True\n\n    all_lower = all(key.islower() for key in dict.keys())\n    all_upper = all(key.isupper() for key in dict.keys())\n\n    return all_lower or all_upper\n"}
{"task_id": "HumanEval/96", "completion": "\n    def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/97", "completion": "\n    def product_of_unit_digits(n):\n        return (n % 10) * ((n // 10) % 10)\n\n    if isinstance(a, int) and isinstance(b, int):\n        return product_of_unit_digits(a) * product_of_unit_digits(b)\n    elif isinstance(a, int):\n        return product_of_unit_digits(a)\n    else:\n        return None\n"}
{"task_id": "HumanEval/98", "completion": "\n    return sum(1 for char in s if char.isupper())\n"}
{"task_id": "HumanEval/99", "completion": "\n    # Convert the string to a float\n    num = float(value)\n    \n    # Get the floor and ceiling of the number\n    lower = int(num // 1)\n    upper = lower + 1\n    \n    # Check the distance to the lower and upper integers\n    if abs(num - lower) < abs(num - upper):\n        return lower\n    elif abs(num - lower) > abs(num - upper):\n        return upper\n    else:\n        # If equidistant, return the one farther from zero\n        return upper if upper > 0 else lower\n"}
{"task_id": "HumanEval/100", "completion": "\n    if n <= 0:\n        return []\n    \n    stones = []\n    for i in range(n):\n        if i % 2 == 0:  # even index\n            stones.append(2 * i + 1)  # odd number\n        else:  # odd index\n            stones.append(2 * i + 2)  # even number\n    \n    return stones\n"}
{"task_id": "HumanEval/101", "completion": "\n    # Replace commas with spaces and split the string into words\n    words = s.replace(',', ' ').split()\n    return words\n"}
{"task_id": "HumanEval/102", "completion": "\n    if x > y:\n        return 1\n    return (x + y) // 2\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    \n    total = sum(range(n, m + 1))\n    count = m - n + 1\n    average = total // count  # Use integer division to round down\n    return bin(average)\n"}
{"task_id": "HumanEval/104", "completion": "\n    return sorted(set(d for d in x if any(int(digit) % 2 == 0 for digit in str(d))))\n"}
{"task_id": "HumanEval/105", "completion": "\n    if not arr:\n        return []\n    \n    # Filter and sort the array\n    filtered_arr = sorted([x for x in arr if 1 <= x <= 9])\n    \n    # Reverse the array\n    reversed_arr = filtered_arr[::-1]\n    \n    # Mapping of digits to their names\n    digit_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    # Replace digits with their corresponding names\n    result = [digit_to_name[x] for x in reversed_arr]\n    \n    return result\n"}
{"task_id": "HumanEval/106", "completion": "\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            # Calculate factorial\n            fact = 1\n            for j in range(1, i + 1):\n                fact *= j\n            result.append(fact)\n        else:\n            # Calculate sum of numbers from 1 to i\n            sum_numbers = sum(range(1, i + 1))\n            result.append(sum_numbers)\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "\n    def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n"}
{"task_id": "HumanEval/108", "completion": "\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) == 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/109", "completion": "\n    def move_one_ball(arr):\n    n = len(arr)\n    if n == 0:\n        return True\n    \n    # Create a sorted version of the array\n    sorted_arr = sorted(arr)\n    \n    # Check if we can match the sorted array by right shifts\n    for i in range(n):\n        if arr[i:] + arr[:i] == sorted_arr:\n            return True\n            \n    return False\n"}
{"task_id": "HumanEval/110", "completion": "\n    even_count_lst1 = sum(1 for x in lst1 if x % 2 == 0)\n    odd_count_lst1 = len(lst1) - even_count_lst1\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0\n    \n    # Calculate total even numbers we can have after exchanges\n    total_even_needed = len(lst1)\n    \n    # Check if we can make all elements in lst1 even\n    if even_count_lst1 + even_count_lst2 >= total_even_needed:\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "\n    counts = {}\n    for char in test.split():\n        counts[char] = counts.get(char, 0) + 1\n    return counts\n"}
{"task_id": "HumanEval/112", "completion": "\n    # Remove characters in c from s\n    for char in c:\n        s = s.replace(char, \"\")\n    \n    # Check if the remaining string is a palindrome\n    is_palindrome = s == s[::-1]\n    \n    return s, is_palindrome\n"}
{"task_id": "HumanEval/113", "completion": "\n    return [f\"the number of odd elements {sum(1 for char in s if int(char) % 2 != 0)} in the string {i} of the input.\" for i, s in enumerate(lst)]\n"}
{"task_id": "HumanEval/114", "completion": "\n    if not nums:\n        return 0\n\n    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum > 0:\n            current_sum = 0\n\n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "\n    total_water = 0\n    \n    for row in grid:\n        total_water += sum(row)\n    \n    return math.ceil(total_water / capacity)\n"}
{"task_id": "HumanEval/116", "completion": "\n    # Count the number of ones in the binary representation of each number\n    def count_ones(n):\n        return bin(n).count('1')\n\n    # Sort the array based on the number of ones and then by the decimal value\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n"}
{"task_id": "HumanEval/117", "completion": "\n    if not s:\n        return []\n\n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonant_count = sum(1 for char in word if char.isalpha() and char.lower() not in 'aeiou')\n        if consonant_count == n:\n            result.append(word)\n    \n    return result\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = \"aeiouAEIOU\"\n    word = word.rstrip()  # Remove trailing spaces\n    if not word:\n        return \"\"\n\n    # Find the last two consonants\n    consonants = []\n    for char in reversed(word):\n        if char.isalpha() and char not in vowels:\n            consonants.append(char)\n        if len(consonants) == 2:\n            break\n\n    if len(consonants) < 2:\n        return \"\"\n\n    # Find the closest vowel before the last two consonants\n    for char in reversed(word):\n        if char in vowels:\n            return char\n        if char in consonants:\n            break\n\n    return \"\"\n"}
{"task_id": "HumanEval/119", "completion": "\n    combined = lst[0] + lst[1]\n    balance = 0\n    \n    for char in combined:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        \n        if balance < 0:\n            return 'No'\n    \n    return 'Yes' if balance == 0 else 'No'\n"}
{"task_id": "HumanEval/120", "completion": "\n    if k <= 0 or k > len(arr):\n        return []\n\n    arr.sort(reverse=True)\n    return arr[:k]\n"}
{"task_id": "HumanEval/121", "completion": "\n    return sum(x for x in lst if x % 2 != 0 and x % 2 == 0)\n"}
{"task_id": "HumanEval/122", "completion": "\n    # Filter the elements that are two digits and less than or equal to k\n    filtered_elements = [x for x in arr if 10 <= x <= 99 and x <= k]\n    \n    # Return the sum of the filtered elements\n    return sum(filtered_elements)\n"}
{"task_id": "HumanEval/123", "completion": "\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    collatz_sequence = []\n    \n    while n != 1:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n    \n    collatz_sequence.append(1)  # Add the last term, which is always 1\n    \n    # Filter out the odd numbers and sort the list\n    odd_collatz_sequence = sorted(filter(lambda x: x % 2 != 0, collatz_sequence))\n    \n    return odd_collatz_sequence\n"}
{"task_id": "HumanEval/124", "completion": "\n    if not date or len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n\n    month = int(date[:2])\n    day = int(date[3:5])\n    year = int(date[6:])\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 1 <= day <= 31\n    elif month in [4, 6, 9, 11]:\n        return 1 <= day <= 30\n    elif month == 2:\n        return 1 <= day <= 29  # Leap year check can be added if needed\n\n    return False\n"}
{"task_id": "HumanEval/125", "completion": "\n    if ',' in txt:\n        return [word.strip() for word in txt.split(',')]\n    else:\n        return [txt[i:i+1] for i in range(len(txt)) if txt[i].isspace() or txt[i].isalpha()]\n"}
{"task_id": "HumanEval/126", "completion": "\n    if len(lst) < 2:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i + 1]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/127", "completion": "\n    if interval1[1] < interval1[0] or interval2[1] < interval2[0]:\n        return \"NO\"\n    \n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start + 1\n    \n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return \"YES\" if not is_prime(length) else \"NO\"\n"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n    \n    product = 1\n    sum_magnitudes = 0\n    \n    for num in arr:\n        product *= num\n        sum_magnitudes += abs(num)\n    \n    return sum_magnitudes * (1 if product >= 0 else -1)\n"}
{"task_id": "HumanEval/129", "completion": "\n    from collections import deque\n"}
{"task_id": "HumanEval/130", "completion": "\n    def tri(n):\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    \n    tribonacci = [1, 1, 2]\n    for i in range(3, n):\n        next_value = tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3]\n        tribonacci.append(next_value)\n    \n    return tribonacci[:n]\n"}
{"task_id": "HumanEval/131", "completion": "\n    product = 1\n    has_odd = False\n    \n    for digit in str(n):\n        if int(digit) % 2 != 0:  # Check if the digit is odd\n            product *= int(digit)\n            has_odd = True\n            \n    return product if has_odd else 0\n"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0 and '][' not in string\n"}
{"task_id": "HumanEval/133", "completion": "\n    return sum(int(round(x)) ** 2 for x in lst)\n"}
{"task_id": "HumanEval/134", "completion": "\n    if not txt:\n        return False\n    last_char = txt.strip()[-1]\n    return last_char.isalpha()\n"}
{"task_id": "HumanEval/135", "completion": "\n    n = len(arr)\n    for i in range(n - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/136", "completion": "\n    smallest = None\n    largest = None\n\n    for num in lst:\n        if num < 0:\n            if smallest is None or num < smallest:\n                smallest = num\n        elif num > 0:\n            if largest is None or num > largest:\n                largest = num\n\n    return (smallest, largest)\n"}
{"task_id": "HumanEval/137", "completion": "\n    try:\n        if isinstance(a, str):\n            a = float(a.replace(',', '.'))\n        if isinstance(b, str):\n            b = float(b.replace(',', '.'))\n    except ValueError:\n        return None\n\n    return a if a == b else None\n"}
{"task_id": "HumanEval/138", "completion": "\n    if n < 4:\n        return False\n    return (n % 2 == 0) and (n // 2 >= 2)\n"}
{"task_id": "HumanEval/139", "completion": "\n    if n < 0:\n        return None  # Factorial is not defined for negative numbers\n    elif n == 0 or n == 1:\n        return 1  # Base case for factorial\n\n    # Calculate the Brazilian factorial\n    factorial_n = 1\n    for i in range(1, n + 1):\n        factorial_n *= i\n\n    factorial_n_minus_1 = 1\n    for i in range(1, n):\n        factorial_n_minus_1 *= i\n\n    return factorial_n * factorial_n_minus_1\n"}
{"task_id": "HumanEval/140", "completion": "\n    # Replace multiple spaces with a single underscore\n    text = ' '.join(text.split())\n    text = text.replace(' ', '_')\n    \n    # Replace any occurrence of more than two consecutive underscores with a single underscore\n    while '___' in text:\n        text = text.replace('___', '_')\n    \n    return text\n"}
{"task_id": "HumanEval/141", "completion": "\n    if file_name.count('-') > 2:\n        return 'No'\n    \n    if file_name.count('.') != 1:\n        return 'No'\n    \n    name_part, extension_part = file_name.split('.')\n    \n    if not name_part or not name_part[0].isalpha():\n        return 'No'\n    \n    if extension_part not in ['', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n"}
{"task_id": "HumanEval/142", "completion": "\n    return sum(x for i, x in enumerate(lst) if (i % 3 == 0 and x % 4 == 0) or (i % 3 != 0 and i % 4 != 0))\n"}
{"task_id": "HumanEval/143", "completion": "\n    words = sentence.split()\n    prime_lengths = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29}  # Extend this set as needed\n    result = []\n\n    for word in words:\n        if len(word) in prime_lengths:\n            result.append(word)\n\n    return ' '.join(result)\n"}
{"task_id": "HumanEval/144", "completion": "\n    from fractions import Fraction\n\n    def is_whole_number(value):\n        return value == int(value)\n\n    # Convert the string representation of the fraction to a Fraction object\n    fraction_n = Fraction(n)\n\n    # Calculate the product\n    product = x * fraction_n\n\n    # Check if the product is a whole number\n    return is_whole_number(product)\n"}
{"task_id": "HumanEval/145", "completion": "\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))\n"}
{"task_id": "HumanEval/146", "completion": "\n    def is_special(num):\n        str_num = str(num)\n        return (int(str_num[0]) % 2 != 0 and int(str_num[-1]) % 2 != 0 and num > 10)\n\n    return len([num for num in nums if is_special(num)])\n"}
{"task_id": "HumanEval/147", "completion": "\n    a = [i for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    return tuple(planets[index1 + 1:index2])\n"}
{"task_id": "HumanEval/149", "completion": "\n    # Filter out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list first by length, then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    \n    return sorted_lst\n"}
{"task_id": "HumanEval/150", "completion": "\n    if isinstance(n, (int, float)):\n        return x\n    else:\n        return y\n"}
{"task_id": "HumanEval/151", "completion": "\n    if not lst:\n        return 0\n    \n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)\n"}
{"task_id": "HumanEval/152", "completion": "\n    return [abs(g - s) if g != s else 0 for s, g in zip(game, guess)]\n"}
{"task_id": "HumanEval/153", "completion": "\n    def strength(extension, class_name):\n        upper_count = sum(1 for c in extension if c.isupper())\n        lower_count = sum(1 for c in class_name if c.islower())\n        return upper_count ** lower_count\n\n    strongest_extension = None\n    max_strength = -1\n\n    for extension in extensions:\n        current_strength = strength(extension, class_name)\n        if (current_strength > max_strength or \n            (current_strength == max_strength and (strongest_extension is None or extension < strongest_extension))):\n            max_strength = current_strength\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\" if strongest_extension else None\n"}
{"task_id": "HumanEval/154", "completion": "\n    if not b:\n        return True\n    if len(a) < len(b):\n        return False\n    return b in (a + a)\n"}
{"task_id": "HumanEval/155", "completion": "\n    even_count = 0\n    odd_count = 0\n    \n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/156", "completion": "\n    if not (1 <= number <= 1000):\n        raise ValueError(\"Number must be between 1 and 1000\")\n\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syms = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n    ]\n    \n    roman_num = \"\"\n    for i in range(len(val)):\n        while number >= val[i]:\n            roman_num += syms[i]\n            number -= val[i]\n    \n    return roman_num\n"}
{"task_id": "HumanEval/157", "completion": "\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n"}
{"task_id": "HumanEval/158", "completion": "\n    if not words:\n        return \"\"\n    \n    def unique_count(word):\n        return len(set(word))\n    \n    max_word = \"\"\n    max_unique = -1\n    \n    for word in words:\n        count = unique_count(word)\n        if count > max_unique or (count == max_unique and word < max_word):\n            max_unique = count\n            max_word = word\n            \n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "\n    total_eaten = min(need, remaining)\n    total_after_meals = number + total_eaten\n    remaining_after_meals = remaining - total_eaten\n    return [total_after_meals, remaining_after_meals]\n"}
{"task_id": "HumanEval/160", "completion": "\n    if len(operator) < 1 or len(operand) < 2:\n        raise ValueError(\"Operator list must have at least one element and operand list must have at least two elements.\")\n\n    expression = str(operand[0])\n    \n    for i in range(1, len(operand)):\n        expression += f\" {operator[i-1]} {operand[i]}\"\n    \n    result = eval(expression)\n    return result\n"}
{"task_id": "HumanEval/161", "completion": "\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    \n    result = []\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n    \n    return ''.join(result)\n"}
{"task_id": "HumanEval/162", "completion": "\n    if not text:\n        return None\n    \n    import hashlib\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash\n"}
{"task_id": "HumanEval/163", "completion": "\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n"}
