{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n\n"}
{"task_id": "HumanEval/1", "completion": "\n    stack = []\n    result = []\n    current = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            if current:\n                stack.append(current)\n                current = \"\"\n            stack.append(char)\n        elif char == \")\":\n            stack.append(char)\n            current = \"\".join(stack)\n            stack = []\n            result.append(current)\n            current = \"\"\n    return result\n"}
{"task_id": "HumanEval/2", "completion": "\n    return number - int(number)\n\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/4", "completion": "\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n"}
{"task_id": "HumanEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n\n"}
{"task_id": "HumanEval/6", "completion": "\n    max_depth = 0\n    current_depth = 0\n    depths = []\n\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            if current_depth > max_depth:\n                max_depth = current_depth\n            depths.append(current_depth)\n        elif char == ')':\n            current_depth -= 1\n            depths.append(current_depth)\n\n    return [max_depth, depths]\n\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "HumanEval/8", "completion": "\n    sum_numbers = 0\n    product_numbers = 1\n    for num in numbers:\n        sum_numbers += num\n        product_numbers *= num\n    return (sum_numbers, product_numbers)\n\n"}
{"task_id": "HumanEval/9", "completion": "\n    max_num = numbers[0]\n    max_list = []\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n        max_list.append(max_num)\n    return max_list\n"}
{"task_id": "HumanEval/10", "completion": "\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[::-1]\n\n"}
{"task_id": "HumanEval/11", "completion": "\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n\n"}
{"task_id": "HumanEval/13", "completion": "\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n"}
{"task_id": "HumanEval/14", "completion": "\n    return [string[i:] for i in range(len(string))]\n\n"}
{"task_id": "HumanEval/15", "completion": "\n    return \" \".join(str(i) for i in range(2, n+1))\n\n"}
{"task_id": "HumanEval/16", "completion": "\n    return len(set(string))\n\n"}
{"task_id": "HumanEval/17", "completion": "\n    music_string = music_string.replace(' ', '')\n    music_list = list(music_string)\n    result = []\n    for note in music_list:\n        if note == 'o':\n            result.append(4)\n        elif note == '|':\n            result.append(2)\n        elif note == '.':\n            result.append(1)\n    return result\n"}
{"task_id": "HumanEval/18", "completion": "\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count+=1\n        else:\n            return count\n\n"}
{"task_id": "HumanEval/19", "completion": "\n    numbers_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: numbers_dict[x])\n\n    return ' '.join(numbers_list)\n\n"}
{"task_id": "HumanEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i - 1], numbers[i])\n    return result\n\n"}
{"task_id": "HumanEval/21", "completion": "\n    max_value = max(numbers)\n    return [number / max_value for number in numbers]\n\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n\n"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n\n"}
{"task_id": "HumanEval/24", "completion": "\n    for i in range(n, 0, -1):\n        if n % i == 0:\n            return i\n\n"}
{"task_id": "HumanEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while(divisor <= n):\n        if (n % divisor) == 0:\n            factors.append(divisor)\n            n = n / divisor\n        else:\n            divisor += 1\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "\n    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n"}
{"task_id": "HumanEval/27", "completion": "\n    return \"\".join(char.lower() if char.isupper() else char.upper() for char in string)\n\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [n for n in l if n > 0]\n\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/32", "completion": "\n    if len(xs) % 2 == 0:\n        return None\n    a = xs[0]\n    b = xs[1]\n    c = xs[2]\n    return (-b + math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n\n"}
{"task_id": "HumanEval/33", "completion": "\n    div_by_three = [i for i in l if i % 3 == 0]\n    div_by_three.sort()\n    res = []\n    j = 0\n    for i in range(len(l)):\n        if l[i] % 3 == 0:\n            res.append(div_by_three[j])\n            j += 1\n        else:\n            res.append(l[i])\n    return res\n\n"}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(set(l))\n\n"}
{"task_id": "HumanEval/35", "completion": "\n    max_el = l[0]\n    for el in l:\n        if el > max_el:\n            max_el = el\n    return max_el\n\n"}
{"task_id": "HumanEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/37", "completion": "\n    even_indexes = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = sorted([l[i] for i in even_indexes])\n    for i, j in zip(even_indexes, even_values):\n        l[i] = j\n    return l\n\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # un-cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    i = 1\n    while True:\n        f = fib(i)\n        if is_prime(f):\n            if i == n:\n                return f\n            i += 1\n        i += 1\n\n"}
{"task_id": "HumanEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            sum = l[i] + l[left] + l[right]\n            if sum < 0:\n                left += 1\n            elif sum > 0:\n                right -= 1\n            else:\n                return True\n    return False\n\n"}
{"task_id": "HumanEval/41", "completion": "\n    return n * (n - 1) // 2\n\n"}
{"task_id": "HumanEval/42", "completion": "\n    return [i+1 for i in l]\n"}
{"task_id": "HumanEval/43", "completion": "\n    num_set = set(l)\n    for num in l:\n        if -num in num_set:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/44", "completion": "\n    if x == 0:\n        return '0'\n    nums = []\n    while x:\n        nums.append(str(x % base))\n        x //= base\n    return ''.join(reversed(nums))\n\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n\n"}
{"task_id": "HumanEval/48", "completion": "\n    text = text.replace(' ', '').lower()\n    return text == text[::-1]\n\n"}
{"task_id": "HumanEval/49", "completion": "\n    return n % p\n\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = 'aeiou'\n    return ''.join([char for char in text if char.lower() not in vowels])\n\n"}
{"task_id": "HumanEval/52", "completion": "\n    return all(x < t for x in l)\n\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n\n"}
{"task_id": "HumanEval/54", "completion": "\n    s0 = s0.replace(\" \", \"\")\n    s1 = s1.replace(\" \", \"\")\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n"}
{"task_id": "HumanEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack.pop() != \"<\":\n                return False\n    return not stack\n\n"}
{"task_id": "HumanEval/57", "completion": "\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n"}
{"task_id": "HumanEval/58", "completion": "\n    return [i for i in l1 if i in l2]\n\n"}
{"task_id": "HumanEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n"}
{"task_id": "HumanEval/60", "completion": "\n    return sum(range(1, n + 1))\n\n"}
{"task_id": "HumanEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack or stack.pop() != \"(\":\n                return False\n    return not stack\n\n"}
{"task_id": "HumanEval/62", "completion": "\n    return xs[1:]\n\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib_sequence = [0, 0, 1]\n        for i in range(3, n + 1):\n            fib_sequence.append(fib_sequence[i - 1] + fib_sequence[i - 2] + fib_sequence[i - 3])\n        return fib_sequence[n]\n\n"}
{"task_id": "HumanEval/64", "completion": "\n    vowels = \"aeiou\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n        if s[i] == \"y\" and i == len(s) - 1:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/65", "completion": "\n    return str(x)[shift:] + str(x)[:shift]\n\n"}
{"task_id": "HumanEval/66", "completion": "\n    sum = 0\n    for char in s:\n        if char.isdigit():\n            sum += int(char)\n    return sum\n\n"}
{"task_id": "HumanEval/67", "completion": "\n    s = s.split()\n    apples = int(s[2])\n    oranges = int(s[4])\n    total_fruits = int(s[6])\n    mangoes = total_fruits - (apples + oranges)\n    return mangoes\n"}
{"task_id": "HumanEval/68", "completion": "\n    if not arr:\n        return []\n    min_even = float('inf')\n    min_even_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num <= min_even:\n            min_even = num\n            min_even_index = i\n    if min_even_index == -1:\n        return []\n    return [min_even_index, min_even]\n\n"}
{"task_id": "HumanEval/69", "completion": "\n    from collections import Counter\n    c = Counter(lst)\n    max_val = max(c.keys())\n    if max_val > 0:\n        for i in range(max_val, 0, -1):\n            if c[i] > i:\n                return i\n    return 1\n\n"}
{"task_id": "HumanEval/70", "completion": "\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        return [max(lst), min(lst)]\n    result = []\n    lst.sort()\n    while len(lst) > 0:\n        result.append(lst.pop(0))\n        if len(lst) > 0:\n            result.append(lst.pop())\n    return result\n\n"}
{"task_id": "HumanEval/71", "completion": "\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n\n"}
{"task_id": "HumanEval/72", "completion": "\n    if sum(q) > w:\n        return False\n    else:\n        return True\n"}
{"task_id": "HumanEval/73", "completion": "\n    n = len(arr)\n    count = 0\n    i = 0\n    j = n - 1\n    while i <= j:\n        if arr[i] != arr[j]:\n            count += 1\n        i += 1\n        j -= 1\n    return count\n\n"}
{"task_id": "HumanEval/74", "completion": "\n    return lst1 if sum(len(i) for i in lst1) < sum(len(i) for i in lst2) else lst2\n\n"}
{"task_id": "HumanEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n            if len(factors) > 3:\n                return False\n    return len(factors) == 3 and is_prime(a // factors[0] // factors[1])\n\n"}
{"task_id": "HumanEval/76", "completion": "\n    if n == 1:\n        return x == 1\n    if n == 0:\n        return x == 0\n    if x == 0:\n        return True\n    while x % n == 0:\n        x /= n\n    return x == 1\n\n"}
{"task_id": "HumanEval/77", "completion": "\n    x = int(a ** (1. / 3.))\n    return x * x * x == a\n\n"}
{"task_id": "HumanEval/78", "completion": "\n    hex_digits = \"0123456789ABCDEF\"\n    prime_hex_digits = \"2357BCDEF\"\n    count = 0\n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    return binary\n\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 2:\n        return False\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/81", "completion": "\n    def grade_to_letter(grade):\n        if grade >= 40:\n            return '+'\n        elif grade >= 37:\n            return 'C'\n        elif grade >= 33:\n            return 'C-'\n        elif grade >= 30:\n            return 'B+'\n        elif grade >= 27:\n            return 'B-'\n        elif grade >= 23:\n            return 'B'\n        elif grade >= 20:\n            return 'C+'\n        elif grade >= 17:\n            return 'C'\n        elif grade >= 13:\n            return 'C-'\n        elif grade >= 10:\n            return 'D+'\n        elif grade >= 7:\n            return 'D'\n        elif grade >= 3:\n            return 'D-'\n        else:\n            return 'E'\n\n    return [grade_to_letter(grade) for grade in grades]\n"}
{"task_id": "HumanEval/82", "completion": "\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/83", "completion": "\n    # Your code here\n    if n == 1:\n        return 2\n    else:\n        return 2 * starts_one_ends(n - 1)\n\n"}
{"task_id": "HumanEval/84", "completion": "\n    return bin(N)[2:]\n\n"}
{"task_id": "HumanEval/85", "completion": "\n    return sum(i for i in lst if i % 2 == 0)\n\n"}
{"task_id": "HumanEval/86", "completion": "\n    words = s.split(' ')\n    words.sort()\n    return ' '.join(words)\n\n"}
{"task_id": "HumanEval/87", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return sorted(result)\n"}
{"task_id": "HumanEval/88", "completion": "\n    if len(array) == 0:\n        return array\n    if len(array) == 1:\n        return array\n    if len(array) % 2 == 0:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)\n\n"}
{"task_id": "HumanEval/89", "completion": "\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            char_code = ord(char)\n            new_char_code = char_code + shift\n            if char.isupper():\n                if new_char_code > ord('Z'):\n                    new_char_code -= 26\n            else:\n                if new_char_code > ord('z'):\n                    new_char_code -= 26\n            new_char = chr(new_char_code)\n            encrypted += new_char\n        else:\n            encrypted += char\n    return encrypted\n\n"}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n"}
{"task_id": "HumanEval/91", "completion": "\n    boredoms = S.split('.')\n    count = 0\n    for sentence in boredoms:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/92", "completion": "\n    return x + y == z or x + z == y or y + z == x\n"}
{"task_id": "HumanEval/93", "completion": "\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            encoded_message += chr((ord(char) + 2) % 256)\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "HumanEval/94", "completion": "\n    lst = [18132,35,4,2,3,0,32,132,4,5,5,5,2,1]\n    lst.sort()\n    lst.reverse()\n    sum = 0\n    for i in lst:\n        sum += i\n    return sum\n"}
{"task_id": "HumanEval/95", "completion": "\n    for key in dict.keys():\n        if key != key.lower():\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "\n    # convert the numbers to strings\n    a = str(a)\n    b = str(b)\n\n    # initialize the product to 1\n    product = 1\n\n    # iterate over each character in the strings\n    for char in a:\n        if char != '-':\n            # convert the character back to an integer and multiply it with the product\n            product *= int(char)\n\n    for char in b:\n        if char != '-':\n            product *= int(char)\n\n    # return the product\n    return product\n\n"}
{"task_id": "HumanEval/98", "completion": "\n    count = 0\n    for char in s:\n        if char.isupper() and char in 'AEIOU':\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/99", "completion": "\n    return round(float(value))\n"}
{"task_id": "HumanEval/100", "completion": "\n    if n < 1:\n        return []\n    result = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            result.append(n + 2 * i)\n        else:\n            result.append(n + 2 * i)\n    return result\n\n"}
{"task_id": "HumanEval/101", "completion": "\n    return s.split(\",\")\n\n"}
{"task_id": "HumanEval/102", "completion": "\n    if x > y:\n        return \"There is no such number\"\n    else:\n        return x + (y - x) // 2\n\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)\n\n"}
{"task_id": "HumanEval/104", "completion": "\n    return [x for x in range(1, 10) if x % 2 == 0]\n\n"}
{"task_id": "HumanEval/105", "completion": "\n    # your code here\n    num_to_name = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    name_to_num = {v: k for k, v in num_to_name.items()}\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(num_to_name[num])\n    result.sort(reverse=True)\n    return [name_to_num[name] for name in result]\n"}
{"task_id": "HumanEval/106", "completion": "\n    def fact(n):\n        if n == 0:\n            return 1\n        else:\n            return n * fact(n - 1)\n\n    def sum_to_n(n):\n        return n * (n + 1) // 2\n\n    return [fact(i) if i % 2 == 0 else sum_to_n(i) for i in range(1, n + 1)]\n\n"}
{"task_id": "HumanEval/107", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def is_odd(n):\n        return n % 2 != 0\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if is_odd(i):\n                odd_count += 1\n            else:\n                even_count += 1\n\n    return (even_count, odd_count)\n\n"}
{"task_id": "HumanEval/108", "completion": "\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = -num\n        while num > 0:\n            digit = num % 10\n            num = num // 10\n            if digit == 0:\n                count += 1\n    return count\n\n"}
{"task_id": "HumanEval/109", "completion": "\n    # Write your code here\n    def check(arr):\n        for i in range(len(arr) - 1):\n            if arr[i] > arr[i + 1]:\n                return False\n        return True\n\n    for i in range(len(arr)):\n        if check(arr[i:] + arr[:i]):\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/110", "completion": "\n    lst1_odd = [i for i in lst1 if i % 2 != 0]\n    lst2_even = [i for i in lst2 if i % 2 == 0]\n    if len(lst1_odd) == len(lst2_even):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n"}
{"task_id": "HumanEval/111", "completion": "\n    # your code here\n    pass\n\n"}
{"task_id": "HumanEval/112", "completion": "\n    s = list(s)\n    c = list(c)\n    for i in c:\n        while i in s:\n            s.remove(i)\n    s = ''.join(s)\n    return s, s == s[::-1]\n"}
{"task_id": "HumanEval/113", "completion": "\n    count = 0\n    for i in lst:\n        for j in i:\n            if j in '13579':\n                count += 1\n    return count\n\n"}
{"task_id": "HumanEval/114", "completion": "\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)\n\n"}
{"task_id": "HumanEval/116", "completion": "\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n"}
{"task_id": "HumanEval/117", "completion": "\n    vowels = \"aeiou\"\n    words = s.split()\n    result = []\n\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter.lower() in vowels:\n                count = 0\n                break\n            elif letter.isalpha():\n                count += 1\n        if count == n:\n            result.append(word)\n\n    return result\n\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\"\n\n"}
{"task_id": "HumanEval/119", "completion": "\n    # your code here\n    open_count = lst[0].count('(')\n    close_count = lst[1].count(')')\n\n    if open_count == close_count:\n        return 'Yes'\n    else:\n        return 'No'\n\n"}
{"task_id": "HumanEval/120", "completion": "\n    # sort the array in ascending order\n    arr.sort()\n\n    # return the kth largest number\n    return arr[-k]\n\n"}
{"task_id": "HumanEval/121", "completion": "\n    # Your code here\n    sum_even = 0\n    sum_odd = 0\n    for num in lst:\n        if num % 2 == 0:\n            sum_even += num\n        else:\n            sum_odd += num\n    return sum_even - sum_odd\n\n"}
{"task_id": "HumanEval/122", "completion": "\n    # your code here\n    arr.sort()\n    return sum(arr[-k:])\n\n"}
{"task_id": "HumanEval/123", "completion": "\n    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return sorted([i for i in collatz if i % 2 != 0])\n\n"}
{"task_id": "HumanEval/124", "completion": "\n    import re\n    date_format = \"^(0[1-9]|1[0-2])[\\\\-\\\\/](0[1-9]|[12][0-9]|3[01])[\\\\-\\\\/](19|20)\\\\d\\\\d$\"\n    if re.match(date_format, date):\n        m, d, y = map(int, re.split('[\\\\-\\\\/]', date))\n        if m in (4, 6, 9, 11) and d > 30:\n            return False\n        if m == 2:\n            if y % 4 == 0 and (y % 100 != 0 or y % 400 == 0):\n                if d > 29:\n                    return False\n            elif d > 28:\n                return False\n        return True\n    return False\n\n"}
{"task_id": "HumanEval/125", "completion": "\n    words = txt.split()\n    result = []\n    for word in words:\n        if ',' in word:\n            result.extend(word.split(','))\n        else:\n            result.append(word)\n    return result\n\n"}
{"task_id": "HumanEval/126", "completion": "\n    return lst == sorted(lst)\n\n"}
{"task_id": "HumanEval/127", "completion": "\n    # find the intersection of the two intervals\n    intersection_start = max(interval1[0], interval2[0])\n    intersection_end = min(interval1[1], interval2[1])\n\n    # if the intersection is empty, return \"NO\"\n    if intersection_start > intersection_end:\n        return \"NO\"\n\n    # calculate the length of the intersection\n    intersection_length = intersection_end - intersection_start + 1\n\n    # check if the length is a prime number\n    if intersection_length < 2:\n        return \"NO\"\n    for i in range(2, int(intersection_length ** 0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n\n    return \"YES\"\n\n"}
{"task_id": "HumanEval/128", "completion": "\n    if len(arr) == 0:\n        return None\n    else:\n        product = 1\n        for num in arr:\n            product *= num\n        return product\n\n"}
{"task_id": "HumanEval/129", "completion": "\n    n = len(grid)\n    dp = [[[float('inf')] * (k + 1) for _ in range(n)] for _ in range(n)]\n    dp[0][0][0] = grid[0][0]\n    moves = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    for s in range(1, n * n):\n        for kk in range(min(s, k) + 1):\n            i, j = divmod(s, n)\n            for di, dj in moves:\n                ni, nj = i + di, j + dj\n                if 0 <= ni < n and 0 <= nj < n:\n                    dp[ni][nj][kk] = min(dp[ni][nj][kk], dp[i][j][kk - 1] + grid[ni][nj])\n    res = min(dp[n - 1][n - 1])\n    return res if res != float('inf') else -1\n\n"}
{"task_id": "HumanEval/130", "completion": "\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    if n == 3:\n        return [1, 1, 2]\n    tri = [1, 1, 2]\n    for i in range(3, n):\n        tri.append(tri[i-1] + tri[i-2] + tri[i-3])\n    return tri\n"}
{"task_id": "HumanEval/131", "completion": "\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product\n\n"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if not stack or stack.pop() != '[':\n                return False\n    return not stack\n\n"}
{"task_id": "HumanEval/133", "completion": "\n    return sum(i**2 for i in lst)\n\n"}
{"task_id": "HumanEval/134", "completion": "\n    if not txt:\n        return False\n    last_char = txt[-1]\n    return last_char.isalpha()\n\n"}
{"task_id": "HumanEval/135", "completion": "\n    arr = sorted(arr)\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            arr[i], arr[i - 1] = arr[i - 1], arr[i]\n            return arr\n    return -1\n"}
{"task_id": "HumanEval/136", "completion": "\n    neg_count = 0\n    pos_count = 0\n    for i in lst:\n        if i < 0:\n            neg_count += 1\n        elif i > 0:\n            pos_count += 1\n    return (neg_count, pos_count)\n\n"}
{"task_id": "HumanEval/137", "completion": "\n    if a == b:\n        return a\n    elif a.replace('.', '').replace(',', '.') == b:\n        return float(b)\n    elif a == b.replace('.', '').replace(',', '.'):\n        return float(a)\n    elif a.replace(',', '') == b.replace(',', ''):\n        return int(a)\n    elif a.replace(',', '') == b.replace(',', ''):\n        return int(b)\n    else:\n        return None\n\n"}
{"task_id": "HumanEval/138", "completion": "\n    # Write your code here\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/139", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n\n"}
{"task_id": "HumanEval/140", "completion": "\n    return \" \".join(text.split())\n\n"}
{"task_id": "HumanEval/141", "completion": "\n    import re\n\n    pattern = r'^[a-zA-Z]+\\.[a-z]+$'\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'\n\n"}
{"task_id": "HumanEval/142", "completion": "\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 == 0:\n            sum += lst[i]\n    return sum\n"}
{"task_id": "HumanEval/143", "completion": "\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return \" \".join(result)\n\n"}
{"task_id": "HumanEval/144", "completion": "\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    whole_num = x_num * n_num\n    whole_den = x_den * n_den\n\n    return str(whole_num) + '/' + str(whole_den) if whole_den else str(whole_num)\n\n"}
{"task_id": "HumanEval/145", "completion": "\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sorted(nums, key=sum_of_digits)\n\n"}
{"task_id": "HumanEval/146", "completion": "\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in '3579' and str(num)[-1] in '3579':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "\n    a = [i * 2 + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] * a[j] * a[k] % 3 == 0:\n                    count += 1\n    return count\n\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        if index1 > index2:\n            index1, index2 = index2, index1\n        return tuple(planets[index1+1:index2])\n"}
{"task_id": "HumanEval/149", "completion": "\n    lst = [i for i in lst if len(i) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst\n\n"}
{"task_id": "HumanEval/150", "completion": "\n    if n == 1:\n        return x\n    elif n == 2:\n        return y\n    else:\n        return \"Invalid input\"\n"}
{"task_id": "HumanEval/151", "completion": "\n    return sum(i**2 for i in lst if i > 0 and i % 2 != 0) * 2\n\n"}
{"task_id": "HumanEval/152", "completion": "\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result\n"}
{"task_id": "HumanEval/153", "completion": "\n    class_name = class_name.lower()\n    class_name_upper = sum(1 for c in class_name if c.isupper())\n    strongest_extension = None\n    max_strength = 0\n    for extension in extensions:\n        extension_upper = sum(1 for c in extension if c.isupper())\n        strength = class_name_upper * extension_upper\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"\n\n"}
{"task_id": "HumanEval/154", "completion": "\n    if len(b) > len(a):\n        return False\n    if len(b) == 0:\n        return True\n    for i in range(len(a) - len(b) + 1):\n        if a[i:i+len(b)] == b:\n            return True\n    return False\n"}
{"task_id": "HumanEval/155", "completion": "\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n"}
{"task_id": "HumanEval/156", "completion": "\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num\n"}
{"task_id": "HumanEval/157", "completion": "\n    sides = [a, b, c]\n    sides.sort()\n\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_unique = 0\n    max_word = \"\"\n\n    for word in words:\n        unique = len(set(word))\n        if unique > max_unique:\n            max_unique = unique\n            max_word = word\n        elif unique == max_unique:\n            max_word = min(word, max_word)\n\n    return max_word\n\n"}
{"task_id": "HumanEval/159", "completion": "\n    if number + remaining >= need:\n        return [number + need, 0]\n    else:\n        return [number + remaining, need - (number + remaining)]\n\n"}
{"task_id": "HumanEval/160", "completion": "\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '/':\n            result /= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result\n\n"}
{"task_id": "HumanEval/161", "completion": "\n    res = ''\n    for i in s:\n        if i.isalpha():\n            if i.islower():\n                res += i.upper()\n            else:\n                res += i.lower()\n        else:\n       \n            res += i\n    return res[::-1] if not res.isalpha() else res\n"}
{"task_id": "HumanEval/162", "completion": "\n    import hashlib\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n\n"}
{"task_id": "HumanEval/163", "completion": "\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n"}
