{"task_id": "EvoEval/0", "completion": "\n    # Initialize the total shipping cost\n    total_cost = 0.0\n    \n    # Define the location factors\n    location_factors = {\n        \"Local\": 1.0,\n        \"National\": 1.5,\n        \"International\": 2.5\n    }\n    \n    # Check if the location is valid\n    if location not in location_factors:\n        raise ValueError(\"Invalid location\")\n    \n    # Calculate the shipping cost for each item\n    for item in items:\n        # Convert string items to float and multiply by 15\n        if isinstance(item, str):\n            item = float(item) * 15.0\n        \n        # Calculate the base shipping cost\n        base_cost = 5.0\n        \n        # Add an additional charge if the item's weight is greater than 5kg\n        if item > 5.0:\n            base_cost += 2.0\n        \n        # Calculate the total shipping cost for the item\n        item_cost = base_cost * location_factors[location]\n        \n        # Add the item cost to the total cost\n        total_cost += item_cost\n    \n    # Return the total shipping cost rounded to two decimal places as a string\n    return \"{:.2f}\".format(total_cost)"}
{"task_id": "EvoEval/1", "completion": "\n    total_cost = 0.0\n    for item in items:\n        weight = item if isinstance(item, float) else 1.0\n        base_cost = 5.0 + (10.0 if weight > 5.0 else 0.0)\n        location_factor = 0.5 if location == 'Local' else 2.0 if location == 'International' else 1.0\n        total_cost += base_cost * location_factor\n    return round(total_cost, 2)"}
{"task_id": "EvoEval/2", "completion": "\n    encrypted_words = []\n    for word in words:\n        encrypted_word = \"\"\n        for char in word:\n            if char.isalpha():\n                if isinstance(key, str):\n                    key = sum(ord(c) for c in key)\n                shift = key % 26\n                if char.islower():\n                    encrypted_char = chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n                else:\n                    encrypted_char = chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n            else:\n                encrypted_char = char\n            encrypted_word += encrypted_char\n        encrypted_words.append(encrypted_word)\n    return encrypted_words\n"}
{"task_id": "EvoEval/3", "completion": "\n    # Convert the input string to a list of integers\n    digits = [int(digit) for digit in input_string]\n\n    # Initialize the result list\n    result = []\n\n    # Define a recursive function to generate all possible combinations\n    def generate_combinations(index, current_combination):\n        # Base case: if we have reached the end of the input string, add the current combination to the result list\n        if index == len(digits):\n            result.append(current_combination)\n            return\n\n        # Recursive case: generate all possible combinations by appending the current digit to the current combination\n        # and recursively calling the function with the next index\n        current_digit = digits[index]\n        current_letter = chr(ord('a') + current_digit - 1)\n        generate_combinations(index + 1, current_combination + current_letter)\n\n        # If the current digit is less than 26, generate all possible combinations by appending the current digit and the next digit to the current combination\n        # and recursively calling the function with the next index\n        if current_digit < 26:\n            next_digit = digits[index + 1] if index + 1 < len(digits) else 0\n            next_letter = chr(ord('a') + current_digit + next_digit - 1)\n            generate_combinations(index + 2, current_combination + next_letter)\n\n    # Call the recursive function to generate all possible combinations\n    generate_combinations(0, '')\n\n    return result\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    candles.sort()\n    return sum(candles[i] > candles[i - 1] for i in range(1, len(candles)))\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not matrix or not matrix[0]:\n        return []\n    \n    rows, cols = len(matrix), len(matrix[0])\n    result = []\n    direction = 1  # 1 for right, -1 for left\n    \n    for i in range(rows):\n        for j in range(cols):\n            result.append(matrix[i][j])\n            if (i + j) % 2 == 0:\n                if j == cols - 1:\n                    i += 1\n                elif i == 0:\n                    j += 1\n                else:\n                    i -= 1\n                    j += 1\n            else:\n                if i == rows - 1:\n                    j += 1\n                elif j == 0:\n                    i += 1\n                else:\n                    i += 1\n                    j -= 1\n    \n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]):\n        return grid\n    if grid[x][y] == 1:\n        return grid\n    if grid[x][y] == 0:\n        grid[x][y] = -1\n        for i in range(max(0, x - 1), min(x + 2, len(grid))):\n            for j in range(max(0, y - 1), min(y + 2, len(grid[0]))):\n                if grid[i][j] == 0:\n                    grid[i][j] = -1\n    return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\r\n    for code in code_sequence:\r\n        if code == 0:\r\n            y += 1\r\n        elif code == 1:\r\n            x += 1\r\n        elif code == 2:\r\n            y -= 1\r\n        elif code == 3:\r\n            x -= 1\r\n    if x == 0 and y == 0:\r\n        return 'ShangriLa found'\r\n    else:\r\n        return 'ShangriLa not found'\r\n"}
{"task_id": "EvoEval/8", "completion": "\n    # Check if there is more than one 'P' or if the canvas is invalid\n    if canvas.count('P') != 1 or canvas.count('#') == 0:\n        return 'canvas'\n    \n    # Find the index of the 'P'\n    p_index = canvas.index('P')\n    \n    # Check if the canvas is divided into two parts\n    if canvas[:p_index].count('#') != 0 or canvas[p_index:].count('#') != 0:\n        return 'canvas'\n    \n    # Create a list to store the transformed canvas\n    transformed_canvas = list(canvas)\n    \n    # Iterate through the canvas and paint the accessible spaces\n    for i in range(len(transformed_canvas)):\n        if transformed_canvas[i] == '-':\n            transformed_canvas[i] = '*'\n    \n    # Return the transformed canvas as a string\n    return ''.join(transformed_canvas)\n"}
{"task_id": "EvoEval/9", "completion": "\n    # Remove punctuation and convert to lowercase\n    string = string.lower()\n    string = string.replace(\",\", \"\")\n    string = string.replace(\".\", \"\")\n    string = string.replace(\"!\", \"\")\n    string = string.replace(\"?\", \"\")\n    string = string.replace(\":\", \"\")\n    string = string.replace(\";\", \"\")\n    string = string.replace(\"-\", \"\")\n    string = string.replace(\"(\", \"\")\n    string = string.replace(\")\", \"\")\n    string = string.replace(\"[\", \"\")\n    string = string.replace(\"]\", \"\")\n    string = string.replace(\"{\", \"\")\n    string = string.replace(\"}\", \"\")\n    string = string.replace(\"/\", \"\")\n    string = string.replace(\"\\\\\", \"\")\n    string = string.replace(\"\\\"\", \"\")\n    string = string.replace(\"'\", \"\")\n    string = string.replace(\"`\", \"\")\n    string = string.replace(\"\u201c\", \"\")\n    string = string.replace(\"\u201d\", \"\")\n    string = string.replace(\"\u2018\", \"\")\n    string = string.replace(\"\u2019\", \"\")\n    string = string.replace(\"\u2014\", \"\")\n    string = string.replace(\"\u2013\", \"\")\n    string = string.replace(\"\u2026\", \"\")\n    string = string.replace(\"!\", \"\")\n    string = string.replace(\"?\", \"\")\n    string = string.replace(\";\", \"\")\n    string = string.replace(\":\", \"\")\n    string = string.replace(\",\", \"\")\n    string = string.replace(\".\", \"\")\n    string = string.replace(\"-\", \"\")\n    string = string.replace(\"(\", \"\")\n    string = string.replace(\")\", \"\")\n    string = string.replace(\"[\", \"\")\n    string = string.replace(\"]\", \"\")\n    string = string.replace(\"{\", \"\")\n    string = string.replace(\"}\", \"\")\n    string = string.replace(\"/\", \"\")\n    string = string.replace(\"\\\\\", \"\")\n    string = string.replace(\"\\\"\", \"\")\n    string = string.replace(\"'\", \"\")\n    string = string.replace(\"`\", \"\")\n    string = string.replace(\"\u201c\", \"\")\n    string = string.replace(\"\u201d\", \"\")\n    string = string.replace(\"\u2018\", \"\")\n    string = string.replace(\"\u2019\", \"\")\n    string = string.replace(\"\u2014\", \"\")\n    string = string.replace(\"\u2013\", \"\")\n    string = string.replace(\"\u2026\", \"\")\n    string = string.replace(\"!\", \"\")\n    string = string.replace(\"?\", \"\")\n    string = string.replace(\";\", \"\")\n    string = string.replace(\":\", \"\")\n    string = string.replace(\",\", \"\")\n    string = string.replace(\".\", \"\")\n    string = string.replace(\"-\", \"\")\n    string = string.replace(\"(\", \"\")\n    string = string.replace(\")\", \"\")\n    string = string.replace(\"[\", \"\")\n    string = string.replace(\"]\", \"\")\n    string = string.replace(\"{\", \"\")\n"}
{"task_id": "EvoEval/10", "completion": "\n    animal_dict = {'C': 0, 'D': 0, 'B': 0}\r\n    animal_sound = {'C': 'meow', 'D': 'woof', 'B': 'chp'}\r\n    animal_count = []\r\n    animal_list = animal_string.split(' ')\r\n    for animal in animal_list:\r\n        if len(animal) > 0 and animal[0] in animal_dict and animal_dict[animal[0]] < 2:\r\n            animal_dict[animal[0]] += 1\r\n            animal_count.append(len(animal) - 1)\r\n    return animal_count\r\n\r"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f'Oh, are those {fruits[0]} from {location}? Marvelous!'\n    elif len(fruits) == 2:\n        return f'Oh, are those {fruits[0]} and {fruits[1]} from {location}? Marvelous!'\n    else:\n        return f'Oh, are those {fruits[0]} and {fruits[2]} from {location}? Marvelous!'\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    counter = Counter(flux_values)\n    max_occurrence = max(counter.values())\n    most_occurred = min([k for k, v in counter.items() if v == max_occurrence])\n    total_sum = sum(flux_values)\n    return most_occurred * total_sum\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    count = {}\n    for elem in elems:\n        count[elem] = count.get(elem, 0) + 1\n    min_count = min(count.values())\n    rarest_elems = [elem for elem, count in count.items() if count == min_count]\n    return rarest_elems[0] if len(rarest_elems) == 1 else rarest_elems[0]\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    name = name.lower()\n    alias = ''\n    for char in name:\n        if char in vowels:\n            alias += vowels[(vowels.index(char) + 1) % len(vowels)]\n        elif char in consonants:\n            alias += consonants[(consonants.index(char) + 1) % len(consonants)]\n        else:\n            alias += char\n    return alias.upper()"}
{"task_id": "EvoEval/15", "completion": "\n    # Create a dictionary to store the count of each card value\n    card_counts = {}\n    for card in hand:\n        value = card[:-1]\n        if value in card_counts:\n            card_counts[value] += 1\n        else:\n            card_counts[value] = 1\n\n    # Initialize the score to 0\n    score = 0\n\n    # Check for pairs, triples, and quads\n    for value, count in card_counts.items():\n        if count == 2:\n            score += int(value) * 2\n        elif count == 3:\n            score += int(value) * 2\n        elif count == 4:\n            score += int(value) * 3\n\n    return score\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return a + b"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        dragon_hp -= wizard[1]\n        if dragon_hp <= 0:\n            return wizard[0]\n    return 'The dragon won'\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    return [i for i in range(1, 1000) if str(i).count('7') == 7][n - 1]\n \n "}
{"task_id": "EvoEval/19", "completion": "\n    danger = 0\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 1:\n                if i > 0 and m[i-1][j] == 2:\n                    danger += 1\n                if i < len(m)-1 and m[i+1][j] == 2:\n                    danger += 1\n                if j > 0 and m[i][j-1] == 2:\n                    danger += 1\n                if j < len(m[i])-1 and m[i][j+1] == 2:\n                    danger += 1\n    return danger\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    pattern = []\n    for i in range(1, n+1):\n        pattern.append(str(i))\n    pattern.append(str(n))\n    for i in range(n-1, 0, -1):\n        pattern.append(str(i))\n    return pattern\n"}
{"task_id": "EvoEval/21", "completion": "\n    # TODO: implement this function\n    pass\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return round(t * v * 12, 10)\n"}
{"task_id": "EvoEval/23", "completion": "\n    # Create a dictionary to map each letter to its corresponding prime number\n    prime_dict = {chr(i): str(i - 96) for i in range(97, 123)}\n    \n    # Replace each letter in the string with its corresponding prime number\n    result = ''.join(prime_dict.get(c, c) for c in s)\n    \n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {'a': '+', 'b': ' ', 'c': '*', 'd': '%', 'e': ',', 'f': '.', 'g': '!', 'h': '?', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '_', 'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<', 'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'}\n    return ''.join(alien_dict[i] for i in english_word)\n"}
{"task_id": "EvoEval/25", "completion": "\n    sentences = text.split(\".\")\r\n    max_frequency = 0\r\n    most_frequent_sentence = \"\"\r\n    for sentence in sentences:\r\n        frequency = sentence.count(word)\r\n        if frequency > max_frequency:\r\n            max_frequency = frequency\r\n            most_frequent_sentence = sentence\r\n    if max_frequency == 0:\r\n        return (0, \"\")\r\n    else:\r\n        return (max_frequency, most_frequent_sentence)\n"}
{"task_id": "EvoEval/26", "completion": "\n    # Check if start or end is out of bounds\n    if start[0] < 0 or start[0] >= len(maze) or start[1] < 0 or start[1] >= len(maze[0]):\n        return []\n    if end[0] < 0 or end[0] >= len(maze) or end[0] < 0 or end[0] >= len(maze[0]):\n        return []\n    # Check if start or end is a wall\n    if maze[start[0]][start[1]] == 1 or maze[end[0]][end[1]] == 1:\n        return []\n    # Check if start and end are the same\n    if start == end:\n        return []\n    # Initialize the queue and visited set\n    queue = [(start, [])]\n    visited = set()\n    # Perform breadth-first search\n    while queue:\n        (current, path) = queue.pop(0)\n        if current == end:\n            return path\n        if current not in visited:\n            visited.add(current)\n            # Add neighboring cells to the queue\n            for direction in [\"up\", \"down\", \"left\", \"right\"]:\n                next_cell = get_next_cell(maze, current, direction)\n                if next_cell is not None:\n                    queue.append((next_cell, path + [direction]))\n    # If no path is found, return an empty list\n    return []"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]"}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    if taxable_income <= 10000:\n        return taxable_income * 0.1\n    elif taxable_income <= 35000:\n        return 10000 * 0.1 + (taxable_income - 10000) * 0.15\n    elif taxable_income <= 80000:\n        return 10000 * 0.1 + 25000 * 0.15 + (taxable_income - 35000) * 0.2\n    else:\n        return 10000 * 0.1 + 25000 * 0.15 + 45000 * 0.2 + (taxable_income - 80000) * 0.3"}
{"task_id": "EvoEval/29", "completion": "\n    palindromes = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if substring == substring[::-1]:\n                palindromes.add(substring)\n    return sorted(list(palindromes))\n"}
{"task_id": "EvoEval/30", "completion": "\n    # Check if start or end is out of bounds\n    if start[0] < 0 or start[0] >= len(maze) or start[1] < 0 or start[1] >= len(maze[0]):\n        return []\n    if end[0] < 0 or end[0] >= len(maze) or end[1] < 0 or end[1] >= len(maze[0]):\n        return []\n\n    # Check if start or end is a wall\n    if maze[start[0]][start[1]] == 0 or maze[end[0]][end[1]] == 0:\n        return []\n\n    # Initialize the visited matrix\n    visited = [[False] * len(maze[0]) for _ in range(len(maze))]\n\n    # Perform depth-first search to find the path\n    stack = [(start[0], start[1], [])]\n    while stack:\n        x, y, path = stack.pop()\n        if (x, y) == end:\n            return path\n        if not visited[x][y]:\n            visited[x][y] = True\n            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < len(maze) and 0 <= ny < len(maze[0]) and maze[nx][ny] == 1 and not visited[nx][ny]:\n                    stack.append((nx, ny, path + [(nx, ny)]))\n    return []"}
{"task_id": "EvoEval/31", "completion": "\n    # Create a 2D array to store the number of unique paths to each cell\n    dp = [[0] * n for _ in range(m)]\n    # Initialize the first row and column to 1, as there is only one way to reach them\n    for i in range(m):\n        dp[i][0] = 1\n    for j in range(n):\n        dp[0][j] = 1\n    # Fill in the rest of the array using the recurrence relation\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    # The number of unique paths to the bottom-right corner is stored in the bottom-right cell of the array\n    return dp[m-1][n-1]\n"}
{"task_id": "EvoEval/32", "completion": "\n    # create a copy of the playlist\n    shuffled_playlist = playlist.copy()\n    # initialize the seed\n    seed = seed\n    # iterate over the playlist\n    for i in range(len(shuffled_playlist)):\n        # if the song contains the word \"Rock\", skip the swap\n        if \"Rock\" in shuffled_playlist[i]:\n            continue\n        # calculate the index to swap with\n        swap_index = seed % len(shuffled_playlist)\n        # swap the songs\n        shuffled_playlist[i], shuffled_playlist[swap_index] = shuffled_playlist[swap_index], shuffled_playlist[i]\n        # update the seed\n        seed = (seed * 807) % 147483647\n    return shuffled_playlist\n"}
{"task_id": "EvoEval/33", "completion": "\n    # Base case: If there are no steps, there is only one way to reach the top (by not taking any steps).\n    if n == 0:\n        return 1\n\n    # If there are negative steps, it is not possible to reach the top.\n    if n < 0:\n        return 0\n\n    # Initialize a list to store the number of ways to reach each step.\n    ways = [0] * (n + 1)\n\n    # There is only one way to reach the first step (by taking one step).\n    ways[0] = 1\n\n    # Iterate through each step.\n    for i in range(1, n + 1):\n        # For each step, iterate through each magic stone.\n        for stone in magic_stones:\n            # If the current step is greater than or equal to the power of the magic stone,\n            # add the number of ways to reach the previous step to the current step.\n            if i >= stone:\n                ways[i] += ways[i - stone]\n\n    # Return the number of ways to reach the top of the staircase.\n    return ways[n]\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    transformation = [0]\n    for i in range(1, n + 1):\n        if i == m:\n            transformation.append(100)\n        elif i < m:\n            transformation.append(transformation[-1] + 10)\n        elif i > m:\n            transformation.append(transformation[-1] - 10)\n    return transformation\n\n    # Test cases\n    print(werewolf_transformation(7, 4))  # [0, 10, 20, 30, 60, 50, 40, 20]\n    print(werewolf_transformation(10, 5))  # [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n    print(werewolf_transformation(5, 3))  # [0, 10, 20, 30, 20]\n    print(werewolf_transformation(3, 2))  # [0, 10, 20, 10, 0]\n    print(werewolf_transformation(1, 1))  # [0, 100]\n    print(werewolf_transformation(2, 1))  # [0, 100, 0]\n    print(werewolf_transformation(2, 2))  # [0, 100, 0]\n    print(werewolf_transformation(2, 3))  # [0, 100, 0]\n    print(werewolf_transformation(3, 3))  # [0, 100, 0]\n    print(werewolf_transformation(3, 4))  # [0, 100, 0]\n    print(werewolf_transformation(4, 4))  # [0, 100, 0, 0]\n    print(werewolf_transformation(4, 5))  # [0, 100, 0, 0]\n    print(werewolf_transformation(5, 5))  # [0, 100, 0, 0, 0]\n    print(werewolf_transformation(5, 6))  # [0, 100, 0, 0, 0]\n    print(werewolf_transformation(6, 6))  # [0, 100, 0, 0, 0, 0]\n   "}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or email.count(\"@\") != 1 or email[-1] == \"@\" or email[0] == \"@\" or \".\" not in email or email.count(\".\") > 1:\n        return False\n    else:\n        return True"}
{"task_id": "EvoEval/36", "completion": "\n    coefficients = [0] * (len(xs) + 1)\n    for i, x in enumerate(xs):\n        coefficients[i+1] = x / (i+1)\n    return coefficients\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed_string = ''\n    for char in s:\n        if char.lower() in vowels:\n            if char.isupper():\n                transformed_string += vowels[vowels.index(char.lower()) + 1].upper()\n            else:\n                transformed_string += vowels[vowels.index(char.lower()) + 1]\n        elif char.lower() in consonants:\n            if char.isupper():\n                transformed_string += consonants[consonants.index(char.lower()) + 1].upper()\n            else:\n                transformed_string += consonants[consonants.index(char.lower()) + 1]\n        else:\n            transformed_string += char\n    return transformed_string\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude09\",\n        \":P\": \"\ud83d\ude1b\",\n        \":O\": \"\ud83d\ude32\",\n        \":(\": \"\u2639\ufe0f\",\n        \":)\": \"\ud83d\ude0a\",\n        \":D\": \"\ud83d\ude09\",\n        \":P\": \"\ud83d\ude1b\",\n        \":O\": \"\ud83d\ude32\",\n        \":(\": \"\u2639\ufe0f\",\n        \":)\": \"\ud83d\ude0a\",\n        \":D\": \"\ud83d\ude09\",\n        \":P\": \"\ud83d\ude1b\",\n        \":O\": \"\ud83d\ude32\",\n        \":(\": \"\u2639\ufe0f\",\n        \":)\": \"\ud83d\ude0a\",\n        \":D\": \"\ud83d\ude09\",\n        \":P\": \"\ud83d\ude1b\",\n        \":O\": \"\ud83d\ude32\",\n        \":(\": \"\u2639\ufe0f\",\n        \":)\": \"\ud83d\ude0a\",\n        \":D\": \"\ud83d\ude09\",\n        \":P\": \"\ud83d\ude1b\",\n        \":O\": \"\ud83d\ude32\",\n        \":(\": \"\u2639\ufe0f\",\n        \":)\": \"\ud83d\ude0a\",\n        \":D\": \"\ud83d\ude09\",\n        \":P\": \"\ud83d\ude1b\",\n        \":O\": \"\ud83d\ude32\",\n        \":(\": \"\u2639\ufe0f\",\n        \":)\": \"\ud83d\ude0a\",\n        \":D\": \"\ud83d\ude09\",\n        \":P\": \"\ud83d\ude1b\",\n        \":O\": \"\ud83d\ude32\",\n        \":(\": \"\u2639\ufe0f\",\n        \":)\": \"\ud83d\ude0a\",\n        \":D\": \"\ud83d\ude09\",\n        \":P\": \"\ud83d\ude1b\",\n        \":O\": \"\ud83d\ude32\",\n        \":(\": \"\u2639\ufe0f\",\n        \":)\": \"\ud83d\ude0a\",\n        \":D\": \"\ud83d\ude09\",\n        \":P\": \"\ud83d\ude1b\",\n        \":O\": \"\ud83d\ude32\",\n        \":(\": \"\u2639\ufe0f\",\n        \":)\": \"\ud83d\ude0a\",\n        \":D\": \"\ud83d\ude09\",\n        \":P\": \"\ud83d\ude1b\",\n        \":O\": \"\ud83d\ude32\",\n        \":(\": \"\u2639\ufe0f\",\n        \":)\": \"\ud83d\ude0a\",\n        \":D\": \"\ud83d\ude09\",\n        \":P\": \"\ud83d\ude1b\",\n        \":O\": \"\ud83d\ude32\",\n        \":(\": \"\u2639\ufe0f\",\n        \":)\": \"\ud83d\ude0a\",\n        \":D\": \"\ud83d\ude09\",\n        \":P\": \"\ud83d\ude1b\",\n        \":O\": \"\ud83d\ude32\",\n        \":(\": \"\u2639\ufe0f\",\n        \":)\": \"\ud83d\ude0a\",\n        \":D\": \"\ud83d\ude09\",\n        \":P\": \"\ud83d\ude1b\",\n        \":O\": \"\ud83d\ude32\",\n"}
{"task_id": "EvoEval/39", "completion": "\n    return '*' + s * n + '*' + '\\n' * (n - 1) + '*' + s[0] * n + '*' + '\\n' * (n - 1) + '*' * (n * 2 + 1)\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    potions = [potion.strip() for potion in potions]\n    potions.sort(key=lambda x: (int(x.split()[-1]), x))\n    for i in range(len(potions)):\n        for j in range(i + 1, len(potions)):\n            if int(potions[i].split()[-1]) + int(potions[j].split()[-1]) == target:\n                return [potions[i], potions[j]]\n    return []\n"}
{"task_id": "EvoEval/41", "completion": "\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n   "}
{"task_id": "EvoEval/42", "completion": "\n    def find_legendary_item(player_input):\n        # Sort the player_input list in descending order\n        player_input.sort(reverse=True)\n        \n        # Check if the player has acquired a legendary item\n        if 5 in player_input:\n            return True, player_input[1]\n        else:\n            return False, None\n"}
{"task_id": "EvoEval/43", "completion": "\n    # calculate the duration of the trip\n    duration = distance / speed\n\n    # calculate the fuel consumption\n    fuel_consumption = spaceship_weight * planet_gravity * 1\n\n    # calculate the remaining fuel\n    remaining_fuel = fuel - fuel_consumption * duration\n\n    # check if the spaceship can reach the planet\n    if remaining_fuel > 0:\n        # calculate the time it takes to reach the planet\n        time_to_planet = duration * 365\n\n        # calculate the time it takes to land on the planet\n        time_to_land = remaining_fuel / fuel_consumption\n\n        # calculate the total time\n        total_time = time_to_planet + time_to_land\n\n        # return the total time rounded to once\n        return round(total_time, 1)\n    else:\n        return 'Insufficient fuel'\n\n"}
{"task_id": "EvoEval/44", "completion": "\n\n    def fairy_tale_transport(weights, w, e):\n        if sum(weights) > w + e:\n            return False\n        return True\n    \"\"\"\n    def fairy_tale_transport(weights, w, e):\n        if sum(weights) > w + e:\n            return False\n        return True\n    \"\"\"\n    def fairy_tale_transport(weights, w, e):\n        if sum(weights) > w + e:\n            return False\n        return True\n    \"\"\"\n    def fairy_tale_transport(weights, w, e):\n        if sum(weights) > w + e:\n            return False\n        return True\n    \"\"\"\n    def fairy_tale_transport(weights, w, e):\n        if sum(weights) > w + e:\n            return False\n        return True\n    \"\"\"\n    def fairy_tale_transport(weights, w, e):\n        if sum(weights) > w + e:\n            return False\n        return True\n    \"\"\"\n    def fairy_tale_transport(weights, w, e):\n        if sum(weights) > w + e:\n            return False\n        return True\n    \"\"\"\n    def fairy_tale_transport(weights, w, e):\n        if sum(weights) > w + e:\n            return False\n        return True\n    \"\"\"\n    def fairy_tale_transport(weights, w, e):\n        if sum(weights) > w + e:\n            return False\n        return True\n    \"\"\"\n    def fairy_tale_transport(weights, w, e):\n        if sum(weights) > w + e:\n            return False\n        return True\n    \"\"\"\n    def fairy_tale_transport(weights, w, e):\n        if sum(weights) > w + e:\n            return False\n        return True\n    \"\"\"\n    def fairy_tale_transport(weights, w, e):\n        if sum(weights) > w + e:\n            return False\n        return True\n    \"\"\"\n    def fairy_tale_transport(weights, w, e):\n        if sum(weights) > w + e:\n            return False\n        return True\n    \"\"\"\n    def fairy_tale_transport(weights, w, e):\n        if sum(weights) > w + e:\n            return False\n        return True\n    \"\"\"\n    def fairy_tale_transport(weights, w, e):\n        if sum(weights) > w + e:\n            return False\n        return True\n    \"\"\"\n"}
{"task_id": "EvoEval/45", "completion": "\n    def find_castle(arr):\n        count = 0\n        for i in range(len(arr)):\n            if i == 0:\n                count += 1\n            elif i == len(arr) - 1:\n                count += 1\n            else:\n                if arr[i] > arr[i-1] and arr[i] > arr[i+1]:\n                    count += 1\n        return count\n    return count"}
{"task_id": "EvoEval/46", "completion": "\n    def hidden(test_cases):\n        secret_messages = []\n        for test_case in test_cases:\n            secret_message = ''\n            for word in test_case:\n                if word[0] in 'aeiou':\n                    secret_message += word[0]\n            secret_messages.append(secret_message)\n        return secret_messages\n    return hidden"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    inventory_ = {}\n    for item in inventory_:\n        if item[\"item\"] in inventory_:\n            inventory_[item[\"item\"]] += item[\"quantity\"]\n        else:\n            inventory_[item[\"item\"]] = item[\"quantity\"]\n    return {k: v for k, v in inventory_.items() if v > 0}\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse = {\n        'A': '01', 'B': '1000', 'C': '1010', 'D': '100', 'E': '0', 'F': '0010', 'G': '110', 'H': '0000', 'I': '00', 'J': '0111', 'K': '101', 'L': '0100', 'M': '11', 'N': '10', 'O': '111', 'P': '0110', 'Q': '1101', 'R': '010', 'S': '000', 'T': '1', 'U': '001', 'V': '0001', 'W': '011', 'X': '1001', 'Y': '1011', 'Z': '1100', '1': '11111', '2': '01111', '3': '00111', '4': '00011', '5': '00001', '6': '10000', '7': '11000', '8': '11100', '9': '11110', '0': '11111'\n    }\n    msg = msg.replace('/', ' ')\n    words = msg.split(' ')\n    decoded = ''\n    for word in words:\n        if word == '':\n            decoded += ' '\n        else:\n            for char in word:\n                decoded += list(morse.keys())[list(morse.values()).index(char)]\n    return decoded\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..',\n        '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.',\n        ',': '--..--', '.': '.-.-.-', '?': '..--..', '/': '-..-.', '-': '-....-', '(': '-.--.', ')': '-.--.-', ' ': ' '\n    }\n    morse = ''\n    for char in text.upper():\n        morse += morse_code[char] + ' '\n    return morse.strip()\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not list_of_alphabets:\n        return string\n    if len(string) > len(list_of_alphabets):\n        return string\n    result = ''\n    for i in range(len(string)):\n        result += list_of_alphabets[i]\n    return result\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    # Sort the orders in descending order\n    orders.sort(reverse=True)\n    # Initialize the number of orders fulfilled\n    fulfilled_orders = 0\n    # Initialize the number of batches used\n    batches_used = 0\n    # Iterate through the orders\n    for order in orders:\n        # If the order can be fulfilled in a single batch, do so\n        if order <= n:\n            fulfilled_orders += 1\n            batches_used += 1\n        # If the order can be fulfilled in multiple batches, do so\n        elif order <= n * m:\n            fulfilled_orders += 1\n            batches_used += order // n\n        # If the order cannot be fulfilled, break out of the loop\n        else:\n            break\n        # If the maximum number of batches has been reached, break out of the loop\n        if batches_used >= m:\n            break\n    return fulfilled_orders\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for char in s:\n        if char.lower() in vowels:\n            transformed += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            transformed += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        else:\n            transformed += char\n    return transformed\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == star:\n                result.append((j, i))\n    return result\n"}
{"task_id": "EvoEval/55", "completion": "\n    result = ''\n    for i, char in enumerate(message):\n        if char.isalpha():\n            shift_amount = (i + shift) % 26\n            if char.isupper():\n                result += chr((ord(char) - 65 + shift_amount) % 26 + 65)\n            else:\n                result += chr((ord(char) - 97 + shift_amount) % 26 + 97)\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..', ' ': ' '}\n    morse_code = ''\n    for char in s:\n        morse_code += morse_code_dict[char] + ' '\n    return morse_code.strip()\n"}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_dish = ''\n        for i, letter in enumerate(dish):\n            new_dish += magic_spell[i % len(magic_spell)]\n        new_menu[new_dish] = price\n    return new_menu\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated_phrase = ''\n    for char in earth_phrase:\n        if char in vowels:\n            translated_phrase += vowels[vowels.index(char) + 1]\n        elif char in consonants:\n            translated_phrase += consonants[consonants.index(char) + 1]\n        elif char == ' ':\n            translated_phrase += '@'\n    translated_words = translated_phrase.split('@')\n    translated_words = [word.capitalize() for word in translated_words]\n    translated_phrase = '@'.join(translated_words)\n    if translated_phrase[0] in vowels:\n        translated_phrase += 'xy'\n    else:\n        translated_phrase += 't'\n    return translated_phrase\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    result = []\n    for ingredient, count in ingredient_dict.items():\n        result.append((ingredient, count))\n    result.sort(key=lambda x: (-x[1], x[0]))\n    return result\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    # TODO: implement this function\n    pass\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = ''\n    for i, char in enumerate(s):\n        if char == ' ':\n            result += ' '\n        elif i % 2 == 0:\n            if char in vowels:\n                result += vowels[(vowels.index(char) + 1) % len(vowels)]\n            elif char in consonants:\n                result += consonants[(consonants.index(char) + 1) % len(consonants)]\n            else:\n                result += char.swapcase()\n        else:\n            result += char.swapcase()\n    return result\n"}
{"task_id": "EvoEval/62", "completion": "\n    pass"}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = []\n    blocks = p\n    while blocks > 0:\n        pyramid.append(blocks)\n        if blocks % 2 == 0:\n            blocks -= 2\n        else:\n            blocks -= 1\n    return pyramid\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in range(start, end + 1):\n        if num % divisor == 0 and is_prime(num):\n            result.append(num)\n    return result\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    final_order = {}\n    for food, ingredients in order.items():\n        if food in menu:\n            final_order[food] = menu[food].copy()\n            if \"add\" in ingredients:\n                final_order[food].extend(ingredients[\"add\"])\n            if \"remove\" in ingredients:\n                final_order[food] = [ingredient for ingredient in final_order[food] if ingredient not in ingredients[\"remove\"]]\n    return final_order\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_anagram(a, b):\n        return sorted(str(a)) == sorted(str(b))\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    anagram_pairs = []\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if is_anagram(primes[i], primes[j]):\n                anagram_pairs.append((primes[i], primes[j]))\n\n    return sorted(anagram_pairs, key=lambda x: (x[0], x[1]))\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        total_calories = 0\n        if customer in meals:\n            for meal in meals[customer]:\n                total_calories += meal['calories']\n        result[customer] = total_calories\n    return result\n"}
{"task_id": "EvoEval/68", "completion": "\n    if len(arr) == 0:\n        return True\n    if arr == sorted(arr):\n        return True\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n            if arr == sorted(arr):\n                return True\n            else:\n                return False\n    return False\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    if path[0] not in planets:\n        return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets or path[i + 1] not in planets[path[i]]:\n            return False\n    return True\n"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    result = ''\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                vowel_count += 1\n            shifted_char = chr((ord(char.lower()) - 97 + n) % 26 + 97)\n            if char.isupper():\n                shifted_char = shifted_char.upper()\n            result += shifted_char\n        else:\n            result += char\n    return result, vowel_count\n"}
{"task_id": "EvoEval/72", "completion": "\n    fairy_tales = []\n    for i in lst:\n        fairy_tales.append(\"Once upon a time, in a far away, lived a magical creature with the name of '{}' who was known for telling {} tales a day\".format(i, len(i)))\n    return fairy_tales\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n   "}
{"task_id": "EvoEval/74", "completion": "\n    new = ''\n    for i in s:\n        if i in cipher:\n            new += cipher[i]\n        else:\n            new += i\n    return new\n\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    result = []\n    for i, char in enumerate(input_str):\n        if char in vowels:\n            result.append(vowels[(vowels.index(char) + 1) % len(vowels)])\n        elif char in consonants:\n            result.append(consonants[(consonants.index(char) + 1) % len(consonants)])\n        elif char.isdigit():\n            result.append(str((int(char) + 1) % 10))\n        else:\n            result.append(char)\n    for i in range(0, len(result), 2):\n        if result[i] == \"?\":\n            result[i] = \"!\"\n    for i in range(1, len(result), 2):\n        if result[i] == \"?\":\n            result[i] = \"!\"\n    return \"\".join(result)\n"}
{"task_id": "EvoEval/76", "completion": "\n    def create_pyramid(lst):\n        if not lst:\n            return []\n        pyramid = []\n        level = 1\n        for i in range(len(lst)):\n            pyramid.append('#' * level)\n            level += 1\n        return pyramid[::-1]\n    return create_pyramid(lst)\n"}
{"task_id": "EvoEval/77", "completion": "\n    def points(n):\n        count = 0\n        while n > 1:\n            if n % 2 == 0:\n                n //= 2\n            else:\n                n = 3 * n + 1\n            count += 1\n        return count\n\n    return sorted([(points(x), x) for x in sequence], reverse=True)[:k]\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    pattern = []\n    for i in range(n):\n        for j in range(n):\n            if i == j or i + j == n - 1:\n                pattern.append(mat[i][j])\n    return pattern\n"}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    for i in range(len(prices)):\n        for j in range(i + days, len(prices)):\n            profit = prices[j] - prices[i]\n            if profit > max_profit:\n                max_profit = profit\n    return max_profit\n"}
{"task_id": "EvoEval/80", "completion": "\n    def adventure_game(map, instructions):\n        start_row = start_col = None\n        for i, row in enumerate(map):\n            for j, col in enumerate(row):\n                if col == 'S':\n                    start_row, start_col = i, j\n                    break\n            if start_row is not None:\n                break\n        if start_row is None:\n            return []\n        row, col = start_row, start_col\n        path = [(row, col)]\n        for instruction in instructions:\n            if instruction == 'up':\n                if row > 0 and map[row - 1][col] != 'X':\n                    row -= 1\n            elif instruction == 'down':\n                if row < len(map) - 1 and map[row + 1][col] != 'X':\n                    row += 1\n            elif instruction == 'left':\n                if col > 0 and map[row][col - 1] != 'X':\n                    col -= 1\n            elif instruction == 'right':\n                if col < len(map[0]) - 1 and map[row][col + 1] != 'X':\n                    col += 1\n            if map[row][col] == 'E':\n                break\n            path.append((row, col))\n        return path\n"}
{"task_id": "EvoEval/81", "completion": "\n    # Create a dictionary to store the order of characters in the alien language\n    alien_order = {}\n    for char in alien_dictionary:\n        alien_order[char] = len(alien_order)\n\n    # Check if the word list is sorted according to the alien language\n    for i in range(len(word_list) - 1):\n        word1, word2 = word_list[i], word_list[i + 1]\n        min_length = min(len(word1), len(word2))\n        for j in range(min_length):\n            if word1[j] != word2[j]:\n                if alien_order[word1[j]] > alien_order[word2[j]]:\n                    return \"WRONG\"\n                break\n        else:\n            if len(word1) > len(word2):\n                return \"WRONG\"\n\n    return \"CORRECT\"\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_signs = {\n        \"aries\": (3, 21, 4, 19),\n        \"taurus\": (4, 20, 5, 20),\n        \"gemini\": (6, 21, 7, 22),\n        \"cancer\": (7, 23, 8, 22),\n        \"leo\": (8, 23, 9, 22),\n        \"virgo\": (9, 23, 10, 22),\n        \"libra\": (10, 23, 11, 21),\n        \"scorpio\": (11, 22, 12, 21),\n        \"sagittarius\": (12, 22, 1, 19),\n        \"capricorn\": (1, 20, 2, 18),\n        \"aquarius\": (2, 19, 3, 20),\n        \"pisces\": (3, 21, 4, 19),\n    }\n    zodiac_elements = {\n        \"fire\": [\"aries\", \"leo\", \"sagittarius\"],\n        \"earth\": [\"taurus\", \"virgo\", \"capricorn\"],\n        \"air\": [\"gemini\", \"libra\", \"aquarius\"],\n        \"water\": [\"cancer\", \"scorpio\", \"pisces\"],\n    }\n    element_counts = {\"fire\": 0, \"earth\": 0, \"air\": 0, \"water\": 0}\n    for birthday in birthdays:\n        year, month, day = map(int, birthday.split(\"-\"))\n        for sign, (start_month, start_day, end_month, end_day) in zodiac_signs.items():\n            if (\n                (month == start_month and day >= start_day)\n                or (month == end_month and day <= end_day)\n                or (month > start_month and month < end_month)\n            ):\n                for element, signs in zodiac_elements.items():\n                    if sign in signs:\n                        element_counts[element] += 1\n    return element_counts\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n"}
{"task_id": "EvoEval/84", "completion": "\n    def tree_traversal(tree):\n        paths = []\n        stack = [(tree, [])]\n        while stack:\n            node, path = stack.pop()\n            path = path + [node]\n            if not node:\n                continue\n            if not node.get('left') and not node.get('right'):\n                paths.append(path)\n            stack.append((node.get('left'), path))\n            stack.append((node.get('right'), path))\n        return paths\n    return tree_traversal\n"}
{"task_id": "EvoEval/85", "completion": "\n    # Initialize the number of steps to 0\n    steps = 0\n    \n    # Get the number of rows and columns in the grid\n    rows = len(grid)\n    cols = len(grid[0])\n    \n    # Get the coordinates of the princess\n    princess_row, princess_col = coord\n    \n    # Get the coordinates of the starting point\n    start_row, start_col = 0, 0\n    \n    # Create a visited set to keep track of visited cells\n    visited = set()\n    \n    # Create a queue to perform breadth-first search\n    queue = [(start_row, start_col)]\n    \n    # Perform breadth-first search\n    while queue:\n        # Get the current cell from the queue\n        current_row, current_col = queue.pop(0)\n        \n        # Check if the current cell is the princess's cell\n        if (current_row, current_col) == (princess_row, princess_col):\n            return steps\n        \n        # Check if the current cell is a valid cell\n        if 0 <= current_row < rows and 0 <= current_col < cols and grid[current_row][current_col] == 0 and (current_row, current_col) not in visited:\n            # Mark the current cell as visited\n            visited.add((current_row, current_col))\n            \n            # Add the neighboring cells to the queue\n            queue.append((current_row + 1, current_col))\n            queue.append((current_row, current_col + 1))\n        \n        # Increment the number of steps\n        steps += 1\n    \n    # If the princess's cell is not reachable, return -1\n    return -1\n"}
{"task_id": "EvoEval/86", "completion": "\n    def sort_movies_by_ratings_and_date(movies_dict):\n        sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n        return [movie[0] for movie in sorted_movies]\n\n    movies_dict = {\n        \"Inception\": [8.8, 2010],\n        \"The Dark Knight Rises\": [8.8, 2012],\n        \"Interstellar\": [8.6, 2014],\n        \"Toy Story\": [8.3, 1995],\n        \"Toy Story 2\": [7.9, 1999],\n        \"Toy Story 3\": [8.3, 2010],\n        \"Toy Story 4\": [7.8, 2019]\n    }\n\n    sorted_movies = sort_movies_by_ratings_and_date(movies_dict)\n    print(sorted_movies)\n"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    rows = len(arr)\n    cols = len(arr[0])\n    result = []\n    top = left = 0\n    bottom = right = rows - 1\n    while top <= bottom and left <= right:\n        for i in range(left, right + 1):\n            result.append(arr[top][i])\n        top += 1\n        for i in range(top, bottom + 1):\n            result.append(arr[i][right])\n        right -= 1\n        if top <= bottom:\n            for i in range(right, left - 1, -1):\n                result.append(arr[bottom][i])\n            bottom -= 1\n        if left <= right:\n            for i in range(bottom, top - 1, -1):\n                result.append(arr[i][left])\n            left += 1\n    return ''.join(result)\n"}
{"task_id": "EvoEval/88", "completion": "\n\n    def planet_population(dict_ofplanets):\n        new_dict = {}\n        for planet, data in dict_ofplanets.items():\n            if data[0] is not None and data[1] is not None:\n                population = data[0]\n                size = data[1]\n                density = round(population / size, 2)\n                new_dict[planet] = density\n        return new_dict\n    \"\"\"\n    def planet_population(dict_ofplanets):\n        new_dict = {}\n        for planet, data in dict_ofplanets.items():\n            if data[0] is not None and data[1] is not None:\n                population = data[0]\n                size = data[1]\n                density = round(population / size, 2)\n                new_dict[planet] = density\n        return new_dict\n    \"\"\"\n    def planet_population(dict_ofplanets):\n        new_dict = {}\n        for planet, data in dict_ofplanets.items():\n            if data[0] is not None and data[1] is not None:\n                population = data[0]\n                size = data[1]\n                density = round(population / size, 2)\n                new_dict[planet] = density\n        return new_dict\n    \"\"\"\n    def planet_population(dict_ofplanets):\n        new_dict = {}\n        for planet, data in dict_ofplanets.items():\n            if data[0] is not None and data[1] is not None:\n                population = data[0]\n                size = data[1]\n                density = round(population / size, 2)\n                new_dict[planet] = density\n        return new_dict\n    \"\"\"\n    def planet_population(dict_ofplanets):\n        new_dict = {}\n        for planet, data in dict_ofplanets.items():\n            if data[0] is not None and data[1] is not None:\n                population = data[0]\n                size = data[1]\n                density = round(population / size, 2)\n                new_dict[planet] = density\n        return new"}
{"task_id": "EvoEval/89", "completion": "\n    return [i for i in aliens if i not in range(ray - 1, ray + 2)]\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    def get_unique_digits(s):\n        return set(s)\n\n    def get_combinations(s):\n        combinations = []\n        for i in range(len(s)):\n            for j in range(i+1, len(s)+1):\n                combinations.append(s[i:j])\n        return combinations\n\n    def get_sum_of_combinations(s):\n        unique_digits = get_unique_digits(s)\n        combinations = get_combinations(s)\n        sum_of_combinations = 0\n        for combination in combinations:\n            sum_of_combinations += int(combination)\n        return sum_of_combinations\n\n    return get_sum_of_combinations(s1) * get_sum_of_combinations(s2)\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if status == 'On Ground':\n            if action == 'Launch':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif status == 'In Space':\n            if action == 'Move':\n                pass\n            elif action == 'Land':\n                status = 'On Ground'\n            else:\n                return 'Invalid Action Sequence'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = ''\n    for i in range(n):\n        layer = alphabet[i] * (2 * i + 1)\n        result += layer.center(2 * n - 1) + '\\n'\n    return result.strip()\n"}
{"task_id": "EvoEval/93", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    result = \"\"\n    for i in range(len(message)):\n        if message[i] == \" \":\n            result += \" \"\n        else:\n            index = alphabet.index(message[i])\n            n = n_values[i % len(n_values)]\n            new_index = (index + n) % 26\n            result += alphabet[new_index]\n    return result\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    return [sorted(word) for word in strings]\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    else:\n        sum1 = 0\n        sum2 = 0\n        for i in range(len(m)):\n            sum1 += m[i][i]\n            sum2 += m[i][len(m)-i-1]\n        return abs(sum1 - sum2)\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] == 0:\n            continue\n        if lst[i] % i == 0 and all(int(digit) > 0 for digit in str(lst[i])):\n            product = 1\n            for digit in str(lst[i]):\n                product *= int(digit)\n            if product == i:\n                magic_indices.append(i)\n    return magic_indices\n"}
{"task_id": "EvoEval/97", "completion": "\n\n    def alien_invasion(alien, humans):\n        if not isinstance(alien, str) or not isinstance(humans, dict):\n            return []\n        alien = alien.lower()\n        humans = {k.lower(): v.lower() for k, v in humans.items()}\n        encounter = []\n        for name, continent in humans.items():\n            if continent in [\"asia\", \"south america\"]:\n                encounter.append(name)\n        for name, continent in humans.items():\n            if continent in [\"africa\", \"europe\", \"north america\", \"south america\"]:\n                encounter.append(name)\n        return encounter\n    \"\"\"\n    def alien_invasion(alien, humans):\n        if not isinstance(alien, str) or not isinstance(humans, dict):\n            return []\n        alien = alien.lower()\n        humans = {k.lower(): v.lower() for k, v in humans.items()}\n        encounter = []\n        for name, continent in humans.items():\n            if continent in [\"asia\", \"south america\"]:\n                encounter.append(name)\n        for name, continent in humans.items():\n            if continent in [\"africa\", \"europe\", \"north america\", \"south america\"]:\n                encounter.append(name)\n        return encounter\n    \"\"\"\n    def alien_invasion(alien, humans):\n        if not isinstance(alien, str) or not isinstance(humans, dict):\n            return []\n        alien = alien.lower()\n        humans = {k.lower(): v.lower() for k, v in humans.items()}\n        encounter = []\n        for name, continent in humans.items():\n            if continent in [\"asia\", \"south america\"]:\n                encounter.append(name)\n        for name, continent in humans.items():\n            if continent in [\"africa\", \"europe\", \"north america\", \"south america\"]:\n                encounter.append(name)\n        return encounter\n    \"\"\"\n    def alien_invasion(alien, humans):\n        if not isinstance(alien"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[-1] + i\n        if is_prime(next_num):\n            sequence.append('prime')\n        else:\n            sequence.append(next_num)\n    return sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    # Initialize the list of players\n    players = list(range(1, n + 1))\n\n    # Initialize the current position\n    current_position = 0\n\n    # Iterate over the rounds\n    for round in rounds:\n        # Calculate the number of positions to move\n        positions_to_move = round * music\n\n        # Update the current position\n        current_position = (current_position + positions_to_move) % len(players)\n\n        # Remove the player at the current position\n        players.pop(current_position)\n\n    # Return the players left\n    return players\n"}
