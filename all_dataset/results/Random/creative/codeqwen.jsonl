{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0\n    for item in items:\n        if isinstance(item, str):\n            item = 1.5\n        if item < 5:\n            total_cost += 5.0 + 1.5\n        else:\n            total_cost += 5.0 + 2 * (item - 5)\n    if location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n    return \"{:.2f}\".format(total_cost)\n"}
{"task_id": "EvoEval/1", "completion": "\n    total_cost = 0\n    for item in items:\n        if isinstance(item, str):\n            weight = 1\n        else:\n            weight = item\n        base_cost = 5.0\n        if weight > 5:\n            base_cost += 10.0\n        total_cost += base_cost\n    if location == 'Local':\n        pass\n    elif location == 'International':\n        total_cost *= 2\n    else:\n        total_cost *= 1\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    def caesar_shift(c: str, key: Union[str, int]) -> str:\n        if not c.isalpha():\n            return c\n        shift = ord(key) if isinstance(key, str) else key\n        return chr((ord(c.lower()) - ord('a') + shift) % 26 + ord('a'))\n\n    def encrypt_word(word: str, key: Union[str, int]) -> str:\n        return ''.join(caesar_shift(c, key) for c in word)\n\n    return [encrypt_word(word, key) for word in words]\n"}
{"task_id": "EvoEval/3", "completion": "\n    def helper(s, path):\n        if not s:\n            result.append(path)\n            return\n        for i in range(1, 27):\n            if 1 <= int(s[:i]) <= 26:\n                helper(s[i:], path + [chr(int(s[:i]) + 96)])\n\n    result = []\n    helper(input_string, [])\n    return result\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    max_height = max(candles)\n    lit_candles = 0\n    for candle in candles:\n        if candle >= max_height:\n            lit_candles += 1\n    return lit_candles\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = 0, 0\n    while row < len(matrix) and col < len(matrix[0]):\n        result.append(matrix[row][col])\n        if col == 0:\n            while row < len(matrix) - 1 and col < len(matrix[0]):\n                row += 1\n                result.append(matrix[row][col])\n        else:\n            while row > 0 and col < len(matrix[0]) - 1:\n                row -= 1\n                col += 1\n                result.append(matrix[row][col])\n        row += 1\n        col += 1\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    pass\n"}
{"task_id": "EvoEval/7", "completion": "\n    # Your code here\r\n    direction = {0: 'North', 1: 'East', 2: 'South', 3: 'West'}\r\n    current_direction = 0\r\n    visited_directions = set()\r\n\r\n    for move in code_sequence:\r\n        current_direction = (current_direction + move) % 4\r\n        visited_directions.add(current_direction)\r\n\r\n    if 0 in visited_directions:\r\n        return 'Shangri-La found'\r\n    else:\r\n        return 'Shangri-La not found'\n"}
{"task_id": "EvoEval/8", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/9", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/10", "completion": "\n    animal_string = animal_string.split(' ')\r\n    animal_dict = {'C': 'meow', 'D': 'wo', '': 'chp'}\r\n    animal_count = {}\r\n    for animal in animal_string:\r\n        if animal in animal_dict:\r\n            if animal in animal_count:\r\n                if animal_count[animal] < 2:\r\n                    animal_count[animal] += 1\r\n            else:\r\n                animal_count[animal] = 1\r\n    return [animal_count[animal] for animal in animal_dict if animal in animal_count]\n"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh, are those {fruits[0]} {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh, are those {fruits[0]} and {fruits[1]} {location}? Marvelous!\"\n    else:\n        return f\"Oh, are those {fruits[0]} and {fruits[2]} {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not flux_values:\n        return 0\n    max_count = 0\n    max_value = 0\n    for value in set(flux_values):\n        count = flux_values.count(value)\n        if count > max_count or (count == max_count and value < max_value):\n            max_count = count\n            max_value = value\n    return max_value * sum(flux_values)\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n\n    count = {}\n    for elem in elems:\n        if elem in count:\n            count[elem] += 1\n        else:\n            count[elem] = 1\n\n    min_count = min(count.values())\n    rarest_elements = [elem for elem, freq in count.items() if freq == min_count]\n\n    return min(rarest_elements)\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                new_char = vowels[(index + 1) % len(vowels)]\n                alias += new_char.upper() if char.isupper() else new_char\n            else:\n                index = consonants.index(char.lower())\n                new_char = consonants[(index + 1) % len(consonants)]\n                alias += new_char.upper() if char.isupper() else new_char\n        else:\n            alias += char\n    return alias\n"}
{"task_id": "EvoEval/15", "completion": "\n    # Your code here\n    pass\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b = 0, 1\n        sum = 2\n        for i in range(3, n + 1):\n            a, b = b, a + b\n            sum += b\n        return sum\n"}
{"task_id": "EvoEval/17", "completion": "\n    while dragon_hp > 0:\n        for wizard in wizards:\n            dragon_hp -= wizard[1]\n            if dragon_hp <= 0:\n                return wizard[0]\n    return 'The dragon won!'\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    num = 7\n    while count < n:\n        if all(int(digit) % 7 == 0 for digit in str(num)):\n            count += 1\n        num += 1\n    return num - 1\n"}
{"task_id": "EvoEval/19", "completion": "\n    vampires = 0\n    for row in m:\n        if 2 in row:\n            vampires += 1\n    return vampires\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    ascending = ','.join(str(i) for i in range(1, n+1))\n    descending = ','.join(str(i) for i in range(n-1, 0, -1))\n    return [ascending, descending]\n"}
{"task_id": "EvoEval/21", "completion": "\n    # Your code here\n    pass\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    # Conversion factor from km to light years\n    km_to_ly = 1.057e-13\n    # Calculate the distance traveled in km\n    distance_km = t * v\n    # Convert the distance to light years\n    distance_ly = distance_km * km_to_ly\n    return distance_ly\n"}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_number(n):\n        count = 0\n        num = 2\n        while True:\n            if is_prime(num):\n                count += 1\n                if count == n:\n                    return num\n            num += 1\n\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                prime_num = prime_number(ord(char) - ord('a') + 1)\n                result += str(prime_num)\n            else:\n                prime_num = prime_number(ord(char) - ord('A') + 1)\n                result += str(prime_num)\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {'a': '+', 'b': '', 'c': '*', 'd': '^', 'e': '', 'f': '', 'g': '&', 'h': '(', 'i': '?', 'j': ':', 'k': ';', 'l': '`', 'm': '~', 'n': '>', 'o': '<', 'p': '{', 'q': '}', 'r': '[', 's': ']', 't': '|'}\n    alien_word = ''\n    for letter in english_word:\n        alien_word += alien_dict[letter]\n    return alien_word\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    sentences = text.split(\".\")\r\n    max_count = 0\r\n    max_sentence = \"\"\r\n    for sentence in sentences:\r\n        words = sentence.split()\r\n        count = words.count(word)\r\n        if count > max_count:\r\n            max_count = count\r\n            max_sentence = sentence\r\n    return max_count, max_sentence.strip() if max_sentence else \"\"\r\n\r"}
{"task_id": "EvoEval/26", "completion": "\n    directions = [\"up\", \"down\", \"left\", \"right\"]\n    stack = [(start, [])]\n    visited = set()\n    while stack:\n        current, path = stack.pop()\n        if current == end:\n            return path\n        if current in visited:\n            continue\n        visited.add(current)\n        for direction in directions:\n            new_pos = move(current, direction)\n            if is_valid(new_pos, maze):\n                stack.append((new_pos, path + [direction]))\n    return []\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    tax = 0\n    if taxable_income > 130000:\n        tax += (taxable_income - 130000) * 0.3\n        taxable_income = 130000\n    if taxable_income > 45000:\n        tax += (taxable_income - 45000) * 0.15\n        taxable_income = 45000\n    if taxable_income > 10000:\n        tax += (taxable_income - 10000) * 0.1\n    return tax\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(sub):\n        return sub == sub[::-1]\n\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            sub = s[i:j]\n            if is_palindrome(sub):\n                substrings.add(sub)\n\n    return sorted(list(substrings))\n"}
{"task_id": "EvoEval/30", "completion": "\n    rows, cols = len(maze), len(maze[0])\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    queue = [(start, [start])]\n    visited = set([start])\n\n    while queue:\n        current, path = queue.pop(0)\n        if current == end:\n            return path\n        for dx, dy in directions:\n            nx, ny = current[0] + dx, current[1] + dy\n            if 0 <= nx < rows and 0 <= ny < cols and maze[nx][ny] == 1 and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                queue.append(((nx, ny), path + [(nx, ny)]))\n    return []\n"}
{"task_id": "EvoEval/31", "completion": "\n    dp = [[1] * n for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    return dp[m - 1][n - 1]\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    import random\n    random.seed(seed)\n    for i in range(len(playlist)):\n        j = random.randint(i, len(playlist) - 1)\n        playlist[i], playlist[j] = playlist[j], playlist[i]\n    return playlist\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    count = 0\n    for stone in magic_stones:\n        count += magical_staircase(n - stone, magic_stones)\n    return count\r\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    transformation_percentages = []\n    for day in range(n):\n        if day == m - 1:\n            transformation_percentages.append(min(100, transformation_percentages[-1] * 2))\n        elif day < m - 1:\n            transformation_percentages.append(min(100, transformation_percentages[-1] + 10))\n        else:\n            transformation_percentages.append(max(0, transformation_percentages[-1] - 10))\n    return transformation_percentages\n"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or email.startswith(\"@\") or email.endswith(\"@\"):\r\n        return False\r\n    username, domain = email.split(\"@\")\r\n    if \".\" in domain or \" \" in domain:\r\n        return False\r\n    if not username or not domain:\r\n        return False\r\n    return True\r\n\r\n\r"}
{"task_id": "EvoEval/36", "completion": "\n    return [0] + [x / (i + 1) for i, x in enumerate(xs)]\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for char in s:\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            if index == 4:\n                transformed += 'a' if char.islower() else 'A'\n            else:\n                transformed += vowels[index + 1] if char.islower() else vowels[index + 1].upper()\n        elif char.lower() in consonants:\n            index = consonants.index(char.lower())\n            if index == 20:\n                transformed += 'b' if char.islower() else 'B'\n            else:\n                transformed += consonants[index + 1] if char.islower() else consonants[index + 1].upper()\n        else:\n            transformed += char\n    return transformed\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \"(\": \"\ufffd\",\n        \"D\": \")\",\n        \")\": \"\ud83d\ude09\"\n    }\n    translated_sentence = \"\"\n    in_emoticon = False\n    for char in sentence:\n        if char in emoticons:\n            translated_sentence += emoticons[char]\n            in_emoticon = True\n        elif in_emoticon and char.isalpha():\n            translated_sentence += char\n            in_emoticon = False\n        else:\n            translated_sentence += char\n    return translated_sentence\n"}
{"task_id": "EvoEval/39", "completion": "\n    # your code here\n    return \"*\" + s + \"*\" + \"\\n\" + \"*\" + \"*\" * len(s) + \"*\" + \"\\n\" + \"*\" + s + \"*\" + \"\\n\" + \"*\" + \"*\" * len(s) + \"*\" + \"\\n\" + \"*\" + s + \"*\" + \"\\n\" + \"*\" + \"*\" * len(s) + \"*\" + \"\\n\" + \"*\" + s + \"*\" + \"\\n\" + \"*\" + \"*\" * len(s) + \"*\" + \"\\n\" + \"*\" + s + \"*\" + \"\\n\" + \"*\" + \"*\" * len(s) + \"*\" + \"\\n\" + \"*\" + s + \"*\" + \"\\n\" + \"*\" + \"*\" * len(s) + \"*\" + \"\\n\" + \"*\" + s + \"*\" + \"\\n\" + \"*\" + \"*\" * len(s) + \"*\" + \"\\n\" + \"*\" + s + \"*\" + \"\\n\" + \"*\" + \"*\" * len(s) + \"*\" + \"\\n\" + \"*\" + s + \"*\" + \"\\n\" + \"*\" + \"*\" * len(s) + \"*\" + \"\\n\" + \"*\" + \"*\" * len(s) + \"*\" + \"\\n\" + \"*\" + s + \"*\" + \"\\n\" + \"*\" + \"*\" * len(s) + \"*\" + \"\\n\" + \"*\" + \"*\" * len(s) + \"*\" + \"\\n\" + \"*\" + \"*\" * len(s) + \"*\" + \"\\n\" + \"*\" + \"*\" * len(s) + \"*\" + \"\\n\" + \"*\" + \"*\" * len(s) + \"*\" + \"\\n\" + \"*\" + \"*\" * len(s) + \"*\" + \"\\n\" + \"*\" + \"*\" * len(s) + \"*\" + \"\\n\" + \"*\" + \"*\""}
{"task_id": "EvoEval/40", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/41", "completion": "\n    # Your code here\n    # You can use the following code to get the length of the array\n    length = len(arr)\n    # You can use the following code to get the length of the first element of the array\n    length_first = len(arr[0])\n    # You can use the following code to get the value of the first element of the array\n    value_first = arr[0][0]\n    # You can use the following code to get the value of the last element of the array\n    value_last = arr[length - 1][length_first - 1]\n    # You can use the following code to get the value of the second element of the array\n    value_second = arr[1][0]\n    # You can use the following code to get the value of the second last element of the array\n    value_second_last = arr[length - 2][length_first - 1]\n    # You can use the following code to get the value of the third element of the array\n    value_third = arr[0][1]\n    # You can use the following code to get the value of the third last element of the array\n    value_third_last = arr[length - 1][length_first - 2]\n    # You can use the following code to get the value of the fourth element of the array\n    value_fourth = arr[1][1]\n    # You can use the following code to get the value of the fourth last element of the array\n    value_fourth_last = arr[length - 2][length_first - 2]\n    # You can use the following code to get the value of the fifth element of the array\n    value_fifth = arr[0][2]\n    # You can use the following code to get the value of the fifth last element of the array\n    value_fifth_last = arr[length - 1][length_first - 3]\n    # You can use the following code to get the value of the sixth element of the array\n    value_sixth = arr[1][2]\n    # You can use the following code to get the value of the sixth last element of the array\n    value_sixth_last = arr[length - 2][length_first"}
{"task_id": "EvoEval/42", "completion": "\n    def find_end_item(player_input):\r\n        if 5 in player_input:\r\n            return True, sorted(set(player_input) - {5})[-2] if len(set(player_input) - {5}) > 0 else -1\r\n        else:\r\n            return False, None\r\n\r\n    # Test cases\r\n    assert find_end_item([3, 4, 5]) == (True, 4)\r\n    assert find_end_item([]) == (True, -1)\r\n    assert find_end_item([3]) == (False, None)\r\n    assert find_end_item([5, 5, 5, 5]) == (True, 4)\r\n    assert find_end_item([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (True, 9)\r\n    assert find_end_item([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == (True, 10)\r\n    assert find_end_item([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == (True, 11)\r\n    assert find_end_item([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == (True, 12)\r\n    assert find_end_item([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == (True, 13)\r\n    assert find_end_item([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == (True, 14)\r\n    assert find_end_item([1, 2, 3, 4, 5, 6, 7, 8"}
{"task_id": "EvoEval/43", "completion": "\n    # Calculate the time required to travel the distance\n    time_required = distance / speed\n    # Calculate the fuel consumption for the trip\n    fuel_consumption = fuel * time_required\n    # Calculate the remaining fuel after the trip\n    remaining_fuel = fuel - fuel_consumption\n    # Check if the spaceship can reach the planet\n    if remaining_fuel < 0:\n        return 'Insufficient fuel'\n    else:\n        # Calculate the time required to reach the planet\n        time_to_planet = distance / speed\n        # Calculate the fuel consumption for reaching the planet\n        fuel_consumption_to_planet = fuel * time_to_planet\n        # Calculate the remaining fuel after reaching the planet\n        remaining_fuel_to_planet = fuel - fuel_consumption_to_planet\n        # Return the remaining fuel after reaching the planet\n        return round(remaining_fuel_to_planet, 2)\n"}
{"task_id": "EvoEval/44", "completion": "\n    def_tale_trans(qw, w, d, g):\n    qw.sort()\n    for i in range(len(qw)):\n        if qw[i] > w:\n            return False\n        w -= qw[i]\n    return True\n\n    # Test cases\n    assert fairy_tale_trans([5, 10, 15], 5, 20, 30) == False\n    assert fairy_tale_trans([10, 20, 30], 5, 10, 15) == False\n    assert fairy_tale_trans([1, 2, 3, 1, 5], 5, 10, 15) == True\n    assert fairy_tale_trans([5, 10], 15, 15, 20) == True\n    assert fairy_tale_trans([1, 2, 3, 4, 5], 10, 10, 10) == True\n    assert fairy_tale_trans([1, 2, 3, 4, 5], 10, 5, 5) == False\n    assert fairy_tale_trans([1, 2, 3, 4, 5], 10, 15, 10) == False\n    assert fairy_tale_trans([1, 2, 3, 4, 5], 10, 10, 5) == False\n    assert fairy_tale_trans([1, 2, 3, 4, 5], 10, 5, 10) == False\n    assert fairy_tale_trans([1, 2, 3, 4, 5], 10, 5, 5) == False\n    assert fairy_tale_trans([1, 2, 3, 4, 5], 10, 5, 5) == False\n    assert fairy_tale_trans([1, 2, 3, 4, 5], 10, 5, 5) == False\n    assert fairy_tale_trans([1, 2, 3, 4, 5], 10, 5, 5) == False\n    assert fairy_tale_"}
{"task_id": "EvoEval/45", "completion": "\n    count = 0\n    for i in range(len(arr)):\n        left = right = 0\n        for j in range(i - 1, -1, -1):\n            if arr[j] < arr[i]:\n                left += 1\n            else:\n                break\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[i]:\n                right += 1\n            else:\n                break\n        count += left * right\n    return count\n"}
{"task_id": "EvoEval/46", "completion": "\n\n    def(test_cases):  ''\n    Co Agent X has a unique way of encrypting secret messages for others \n  decipher. He encrypts his messages by providing strings of words, where\n    the first letter each wordwhenced together) forms a secret message.\n\n   task to write a function that takes in of cases, \n   and returns the secret message each test case.   Each test case a. The function return list of strings,\n    where each string is a secret message decoded from a test    If the secret message be found within the original strings, the secret message nowTake the cann.\"\n\n   Note: \n    - Words may symbols next to them, but these.\n    - the messagecase\n\n   Examples:\n  message([['Hello, world!',okay?'],Every', 'good 'does', 'fine']]) ->ho', 'egb   hiddenmessage([['apple'],',rape 'kiwi','melon' -> ['Take the cann.'''\n  hidden_([['This',is', '? 'test??], ['']]) ->tiatc','the cannoli.']   ''\n    \"\"\"\n    def hidden_message(test_cases):\n        result = []\n        for case in test_cases:\n            secret = ''\n            for word in case:\n                secret += word[0]\n            result.append(secret)\n        return result\n    \"\"\"\n    def(test_cases):  ''\n    Co Agent X has a unique way of encrypting secret messages for others \n  decipher. He encrypts his messages by providing strings of words, where\n    the first letter each wordwhenced together) forms a secret message.\n\n   task to write a function that takes in of cases, \n   and returns the secret message each test case.   Each test case a. The function return list of strings,\n    where each string is a secret message decoded from a test    If the secret message be found within the original strings, the secret message nowTake the cann.\"\n\n   Note"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n"}
{"task_id": "EvoEval/48", "completion": "\n    def wizard_inventory(inventory_logs):\n        inventory = {}\n        for log in inventory_logs:\n            item = log[\"item\"]\n            quantity = log[\"quantity\"]\n            if item in inventory:\n                inventory[item] += quantity\n            else:\n                inventory[item] = quantity\n        return {item: quantity for item, quantity in inventory.items() if quantity > 0}\n\n    # Test cases\n    print(wizard_inventory([{\"item\": \"Dragon Scale\", \"quantity\": 2}, {\"item\": \"Phoenix Feather\", \"quantity\": 1}, {\"item\": \"Dragon Scale\", \"quantity\": 1}]))  # {\" Scale\": 1, \"Phoenix\": 1}\n    print(wizard_inventory([{\"item\": \"Maid Hair\", \"quantity\": 5}, {\"item\": \"Mermaid Hair\", \"quantity\": -1}]))  # {}\n    print(wizard_inventory([{\"item\": \"Unicorn Horn\", \"quantity\": 3}, {\"item\": \"Dragon Scale\", \"quantity\": -2}, {\"item\": \"Phoenix Feather\", \"quantity\": 1}]))  # {\"Unicorn Horn\": 3, \"Phoenix\": 1}\n    print(wizard_inventory([{\"item\": \"Wand\", \"quantity\": -1}, {\"item\": \"Ring\", \"quantity\": 2}, {\"item\": \"Amulet\", \"quantity\": 3}]))  # {\"Ring\": 2, \"Amulet\": 3}\n    print(wizard_inventory([{\"item\": \"Sword\", \"quantity\": 4}, {\"item\": \"Shield\", \"quantity\": -3}, {\"item\": \"Helmet\", \"quantity\": 2}]))  # {\"Sword\": 4, \"Helmet\": 2}\n    print(wizard_inventory([{\"item\": \"Potion\", \"quantity\": -5}, {\"item\": \"Scroll\", \"quantity\": 2}, {\"item\": \"Rune\", \"quantity\": 3}]))  # {\"Scroll\": 2, \"Rune\": 3}\n    print(w"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code = {\n        '01': 'A', '0010': 'B', '1010': 'C', '000': 'D', '0': 'E', '0011': 'F',\n        '110': 'G', '111': 'H', '010': 'I', '11': 'J', '0100': 'K', 'L': 'L',\n        '0101': 'M', '11': 'N', '0001': 'O', '1011': 'P', '1101': 'Q', '010': 'R',\n        '000': 'S', '1': 'T', '0000': 'U', '1001': 'V', 'W': 'W', '0001': 'X',\n        '1011': 'Y', '1100': 'Z', '01': '1', '00111': '2', '00011': '3', '1': '4',\n        '00000': '5', '10000': '6', '11000': '7', '11100': '8', '11110': '9', '11111': '0'\n    }\n    decoded_message = ''\n    current_code = ''\n    for char in msg:\n        if char == ' ':\n            if current_code:\n                decoded_message += morse_code[current_code]\n                current_code = ''\n        elif char == '/':\n            if current_code:\n                decoded_message += morse_code[current_code]\n                current_code = ''\n            decoded_message += ' '\n        else:\n            current_code += char\n    if current_code:\n        decoded_message += morse_code[current_code]\n    return decoded_message.strip()\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.', '0': '-----', ', ': '--..--', '.': '.-.-.-', '?': '..--..', '/': '-..-.', '-': '-....-', '(': '-.--.', ')': '-.--.-', ' ': ' '\n    }\n    morse_code = ''\n    for char in text.upper():\n        if char in morse_code_dict:\n            morse_code += morse_code_dict[char] + ' '\n    return morse_code.strip()\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not list_of_alphabets:\n        return string\n    result = ''\n    for i in range(len(string)):\n        if string[i] != ' ':\n            result += list_of_alphabets[i % len(list_of_alphabets)]\n        else:\n            result += ' '\n    return result\n"}
{"task_id": "EvoEval/52", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.lower() == 'u':\n                transformed += 'a' if char.islower() else 'A'\n            else:\n                transformed += vowels[vowels.index(char.lower()) + 1]\n            if char.isupper():\n                transformed = transformed.upper()\n        elif char.lower() in consonants:\n            if char.lower() == 'z':\n                transformed += 'b' if char.islower() else 'B'\n            else:\n                transformed += consonants[consonants.index(char.lower()) + 1]\n            if char.isupper():\n                transformed = transformed.upper()\n        elif char == ' ':\n            transformed += ' '\n        else:\n            transformed += char\n    return transformed[::-1]\n"}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == star:\n                result.append((i, j))\n    return result\n"}
{"task_id": "EvoEval/55", "completion": "\n    encrypted_message = \"\"\n    for i in range(len(message)):\n        char = message[i]\n        if char.isalpha():\n            shift_amount = (i % shift) + 1\n            if char.islower():\n                encrypted_message += chr((ord(char) - ord('a') + shift_amount) % 26 + ord('a'))\n            else:\n                encrypted_message += chr((ord(char) - ord('A') + shift_amount) % 26 + ord('A'))\n        else:\n            encrypted_message += char\n    return encrypted_message\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.',\n        'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..',\n        'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.',\n        's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-',\n        'y': '-.--', 'z': '--..', ' ': '/'\n    }\n    return ' '.join(morse_code_dict[char] for char in s.lower())\n"}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_dish = ''\n        for letter in dish:\n            if letter.isalpha():\n                new_dish += magic_spell[magic_spell.index(letter) % len(dish)]\n            else:\n                new_dish += letter\n        new_menu[new_dish] = price\n    return new_menu\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated_phrase = ''\n    for word in earth_phrase.split():\n        if word[0] in vowels:\n            translated_word = 'xy' + word[1:]\n        else:\n            translated_word = word[1:] + 'to'\n        translated_word = translated_word.replace('z', 'b')\n        translated_word = translated_word.replace(' ', '@')\n        translated_word = translated_word[0].upper() + translated_word[1:]\n        translated_phrase += translated_word + ' '\n    return translated_phrase.strip()\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    \n    sorted_ingredients = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n    return [ingredient for ingredient, _ in sorted_ingredients]\n"}
{"task_id": "EvoEval/60", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i, char in enumerate(s):\n        if char.isalpha():\n            if i % 2 == 0:  # Swap case for odd indexed characters\n                char = char.swapcase()\n            if char.lower() in vowels:  # Replace vowels with next sequence\n                index = vowels.index(char.lower())\n                new_char = vowels[(index + 1) % len(vowels)]\n                result += new_char.upper() if char.isupper() else new_char\n            elif char.lower() in consonants:  # Replace consonants with 'z'\n                result += 'z'\n            else:\n                result += char\n        else:\n            result += char  # Preserve spaces\n    return result\n"}
{"task_id": "EvoEval/62", "completion": "\n    converted_recipe = {}\n    for ingredient, quantity in recipe.items():\n        converted_recipe[ingredient] = quantity * conversion_factor\n    return converted_recipe\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = []\n    while p > 0:\n        pyramid.append(p)\n        if p % 2 == 0:\n            p -= 2\n        else:\n            p -= 2\n    return pyramid[::-1]\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in range(start, end + 1):\n        if is_prime(num) and num % divisor == 0:\n            result.append(num)\n    return result\n"}
{"task_id": "EvoEval/65", "completion": "\n    final_order = {}\n    for food, ingredients in order.items():\n        if food in menu:\n            final_order[food] = menu[food].copy()\n            for ingredient in ingredients:\n                if ingredient not in final_order[food]:\n                    final_order[food].append(ingredient)\n        else:\n            final_order[food] = ingredients\n    return final_order\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_anagram(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    prime_pairs = []\n    for i in range(2, n):\n        if is_prime(i):\n            for j in range(i + 1, n):\n                if is_prime(j) and is_anagram(i, j):\n                    prime_pairs.append((i, j))\n    return prime_pairs\n"}
{"task_id": "EvoEval/67", "completion": "\n    total_calories = {}\n    for customer in customers:\n        total_calories[customer] = 0\n        for meal in meals[customer]:\n            total_calories[customer] += meal['calories']\n    return total_calories\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                arr = arr[j:] + arr[:j]\n                break\n        else:\n            continue\n        break\n    else:\n        return True\n    return False\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    # Create a set to store the numbers we've seen so far\n    seen = set()\n\n    # Iterate over the list of cards\n    for i, card in enumerate(cards):\n        # Calculate the number we need to find to make the product equal to the magic number\n        needed = magicNumber / card\n\n        # If we've seen this number before, we've found a pair of cards that make the product equal to the magic number\n        if needed in seen:\n            return (seen[needed], i)\n\n        # Otherwise, add the current card to the set of seen numbers\n        seen.add(card)\n\n    # If we've gone through the entire list without finding a pair of cards that make the product equal to the magic number, return \"No magic today\"\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if path[0] not in planets or path[-1] not in planets:\n        return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets[path[i + 1]]:\n            return False\n    return True\n"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    shifted_s = ''\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            shifted_char = chr(((ord(char.lower()) - ord('a') + n) % 26) + ord('a'))\n            if shifted_char in vowels:\n                vowel_count += 1\n            shifted_s += shifted_char\n        else:\n            shifted_s += char\n    return (shifted_s, vowel_count)\n"}
{"task_id": "EvoEval/72", "completion": "\n    output = []\n    for i, string in enumerate(lst, start=1):\n        tales = len(string)\n        creature_name = string.replace(' ', '')\n        story = f\"Once upon a time, in a far away, lived a magical creature with the name '{creature_name}' who was known for telling {tales} tales a day\"\n        output.append(story)\n    return output\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Your code here\r\n    def dfs(i, j, visited, grid, bag_capacity):\r\n        if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]) or visited[i][j] or grid[i][j] == 0:\r\n            return 0\r\n        visited[i][j] = True\r\n        if grid[i][j] == 1:\r\n            bag_capacity -= 1\r\n            if bag_capacity < 0:\r\n                bag_capacity += 1\r\n                visited[i][j] = False\r\n                return 0\r\n        return 1 + dfs(i+1, j, visited, grid, bag_capacity) + dfs(i-1, j, visited, grid, bag_capacity) + dfs(i, j+1, visited, grid, bag_capacity) + dfs(i, j-1, visited, grid, bag_capacity)\r\n    \r\n    max_treasures = 0\r\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\r\n    for i in range(len(grid)):\r\n        for j in range(len(grid[0])):\r\n            max_treasures = max(max_treasures, dfs(i, j, visited, grid, bag_capacity))\r\n    return max_treasures\r\n\r"}
{"task_id": "EvoEval/74", "completion": "\n    return ''.join(cipher.get(c, c) for c in s)\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed_str = ''\n    for i, char in enumerate(input_str):\n        if char.isalpha():\n            if char.lower() in vowels:\n                new_char = vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n                transformed_str += new_char.upper() if char.isupper() else new_char\n            else:\n                new_char = consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n                transformed_str += new_char.upper() if char.isupper() else new_char\n        elif char.isdigit():\n            new_char = str((int(char) + 1) % 10)\n            transformed_str += new_char\n        elif char in '!?':\n            if i % 2 == 0:\n                transformed_str += '!'\n            else:\n                transformed_str += '?'\n        else:\n            transformed_str += char\n    return transformed_str\n"}
{"task_id": "EvoEval/76", "completion": "\n\n    defpy(lst):\n    if not lst:\n        return []\n    max_len = max(len(str(i)) for i in lst)\n    pyramid = []\n    for i in range(len(lst)):\n        level = ''.join('#' * (lst[i] + i))\n        pyramid.append(level.center(max_len * (i + 1)))\n    return pyramid\n    \"\"\"\n    defpy(lst):\n    if not lst:\n        return []\n    max_len = max(len(str(i)) for i in lst)\n    pyramid = []\n    for i in range(len(lst)):\n        level = ''.join('#' * (lst[i] + i))\n        pyramid.append(level.center(max_len * (i + 1)))\n    return pyramid\n    \"\"\"\n    defpy(lst):\n    if not lst:\n        return []\n    max_len = max(len(str(i)) for i in lst)\n    pyramid = []\n    for i in range(len(lst)):\n        level = ''.join('#' * (lst[i] + i))\n        pyramid.append(level.center(max_len * (i + 1)))\n    return pyramid\n    \"\"\"\n    defpy(lst):\n    if not lst:\n        return []\n    max_len = max(len(str(i)) for i in lst)\n    pyramid = []\n    for i in range(len(lst)):\n        level = ''.join('#' * (lst[i] + i))\n        pyramid.append(level.center(max_len * (i"}
{"task_id": "EvoEval/77", "completion": "\n    def count_points(n):\n        points = 0\n        while n > 1:\n            n = n // k\n            points += 1\n        return points\n\n    sequence.sort(reverse=True)\n    points_list = [count_points(num) for num in sequence]\n    return points_list\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    pattern = []\n    # Top left to bottom right\n    for i in range(n):\n        for j in range(i, n):\n            pattern.append(mat[i][j])\n    # Top right to bottom left\n    for i in range(1, n):\n        for j in range(i, n):\n            pattern.append(mat[j][n-i-1])\n    return pattern\n"}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\r\n    for i in range(days):\r\n        for j in range(i + 1, days):\r\n            profit = prices[j] - prices[i] + prices[j + 1] - prices[j]\r\n            if profit > max_profit:\r\n                max_profit = profit\r\n    return max_profit\r\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    def adventure_game(map, instructions):\n        start = None\n        end = None\n        for i in range(len(map)):\n            for j in range(len(map[i])):\n                if map[i][j] == 'S':\n                    start = (i, j)\n                elif map[i][j] == 'E':\n                    end = (i, j)\n        if start is None or end is None:\n            return []\n        path = [start]\n        for instruction in instructions:\n            if instruction == 'up':\n                if start[0] > 0 and map[start[0] - 1][start[1]] != 'X':\n                    start = (start[0] - 1, start[1])\n            elif instruction == 'down':\n                if start[0] < len(map) - 1 and map[start[0] + 1][start[1]] != 'X':\n                    start = (start[0] + 1, start[1])\n            elif instruction == 'left':\n                if start[1] > 0 and map[start[0]][start[1] - 1] != 'X':\n                    start = (start[0], start[1] - 1)\n            elif instruction == 'right':\n                if start[1] < len(map[0]) - 1 and map[start[0]][start[1] + 1] != 'X':\n                    start = (start[0], start[1] + 1)\n            path.append(start)\n            if start == end:\n                break\n        return path\n    \n    print(adventure_game([['S', '.'], ['X', '.']], ['', 'right', 'down', 'down', 'right']))\n    print(adventure_game([['.', '.', 'E'], ['.', 'X', '.']], ['', 'right']))\n    print(adventure_game([['.', '.', 'E']], ['', 'right']))\n    print(adventure_game([['S', '.'], ['X', '.']], ['', 'up"}
{"task_id": "EvoEval/81", "completion": "\n    # Create a mapping of each letter to its position in the alien dictionary\n    alien_dict = {char: index for index, char in enumerate(alien_dictionary)}\n\n    # Iterate through the word list and compare each word with the next one\n    for i in range(len(word_list) - 1):\n        word1 = word_list[i]\n        word2 = word_list[i + 1]\n\n        # Find the first differing character between the two words\n        for j in range(min(len(word1), len(word2))):\n            if word1[j] != word2[j]:\n                # If the character in the first word is later in the dictionary than the character in the second word, return \"RECT\"\n                if alien_dict[word1[j]] > alien_dict[word2[j]]:\n                    return \"RECT\"\n                break\n        else:\n            # If the words are the same up to the length of the shorter word, and the shorter word is longer than the longer word, return \"RECT\"\n            if len(word1) > len(word2):\n                return \"RECT\"\n\n    # If all words are in the correct order, return \"CORRECT\"\n    return \"CORRECT\"\n"}
{"task_id": "EvoEval/82", "completion": "\n    zodiac_dict = {\"aries\": 0, \"taurus\": 0, \"gemini\": 0, \"cancer\": 0, \"leo\": 0, \"virgo\": 0, \"libra\": 0, \"scorpio\": 0, \"sagittarius\": 0, \"capricorn\": 0, \"aquarius\": 0, \"pisces\": 0}\n    for date in birthdays:\n        if date:\n            month = int(date[5:7])\n            day = int(date[8:10])\n            if month == 1:\n                if day >= 20:\n                    zodiac_dict[\"aquarius\"] += 1\n                else:\n                    zodiac_dict[\"capricorn\"] += 1\n            elif month == 2:\n                if day >= 19:\n                    zodiac_dict[\"pisces\"] += 1\n                else:\n                    zodiac_dict[\"aquarius\"] += 1\n            elif month == 3:\n                if day >= 21:\n                    zodiac_dict[\"aries\"] += 1\n                else:\n                    zodiac_dict[\"pisces\"] += 1\n            elif month == 4:\n                if day >= 20:\n                    zodiac_dict[\"taurus\"] += 1\n                else:\n                    zodiac_dict[\"aries\"] += 1\n            elif month == 5:\n                if day >= 21:\n                    zodiac_dict[\"gemini\"] += 1\n                else:\n                    zodiac_dict[\"taurus\"] += 1\n            elif month == 6:\n                if day >= 22:\n                    zodiac_dict[\"cancer\"] += 1\n                else:\n                    zodiac_dict[\"gemini\"] += 1\n            elif month == 7:\n                if day >= 23:\n                    zodiac_dict[\"leo\"] += 1\n                else:\n                    zodiac_dict[\"cancer\"] += 1\n            el"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] in vowels and s[right] in vowels:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n        elif s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n    return ''.join(s)\n"}
{"task_id": "EvoEval/84", "completion": "\n\n    def tree_vers():\n      result = []\n      def dfs(node, path):\n        if not node:\n          return\n        path.append(node)\n        if not node[1] and not node[2]:\n          result.append(list(path))\n        dfs(node[1], path)\n        dfs(node[2], path)\n        path.pop()\n      dfs(list(tree.keys())[0], [])\n      return result\n\n    tree = {1: {2: {4: {}, 3: 6}, 7}}\n    print(tree_traversal(tree))  # Output: [[1, 2, 4], [1, 2, 3, 6], [1, 7]]\n\n    tree = {1: {2: {4: {7: 5, 3: {6: {}}}}}}\n    print(tree_traversal(tree))  # Output: [[1, 2, 4, 7], [1, 2, 4, 3"}
{"task_id": "EvoEval/85", "completion": "\n    def is_valid(x, y):\n        return 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] == 0\n    \n    def dfs(x, y):\n        if not is_valid(x, y):\n            return float('inf')\n        if (x, y) == coord:\n            return 0\n        grid[x][y] = 1  # Mark as visited\n        res = 1 + min(dfs(x + 1, y), dfs(x, y + 1))\n        grid[x][y] = 0  # Backtrack\n        return res\n    \n    return -1 if not is_valid(coord[0], coord[1]) else dfs(0, 0)\n"}
{"task_id": "EvoEval/86", "completion": "\n\n    The function should return the sorted list of movie names.\n    \"\"\"\n    def sort_movies_by_ratings_and_date(movies_dict):\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n    return [movie[0] for movie in sorted_movies]\n\n    movies_dict = {\"Inception\": [8.8, 2008], \"Interstellar\": [8.6, 2014], \"The Dark Knight Rises\": [8.0, 2012], \"Toy Story\": [8.0, 1995], \"Toy Story 2\": [7.9, 1999], \"Toy Story 3\": [8.3, 2010], \"Toy\": [8.0, 2019]}\n    print(sort_movies_by_ratings_and_date(movies_dict))  # Output: [\"Toy Story\", \"Toy Story 2\", \"Toy Story 3\"]\n    \"\"\"\n    The function should return the sorted list of movie names.\n    \"\"\"\n    def sort_movies_by_ratings_and_date("}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    \n    top = 0\n    bottom = len(arr) - 1\n    left = 0\n    right = len(arr[0]) - 1\n    \n    result = ''\n    \n    while top <= bottom and left <= right:\n        # Top row\n        for i in range(left, right + 1):\n            result += arr[top][i]\n        top += 1\n        \n        # Right column\n        for i in range(top, bottom + 1):\n            result += arr[i][right]\n        right -= 1\n        \n        # Bottom row\n        if top <= bottom:\n            for i in range(right, left - 1, -1):\n                result += arr[bottom][i]\n            bottom -= 1\n        \n        # Left column\n        if left <= right:\n            for i in range(bottom, top - 1, -1):\n                result += arr[i][left]\n            left += 1\n    \n    return result\n"}
{"task_id": "EvoEval/88", "completion": "\n\n    \"\"\"\n    def planet_population(dict_ofplan):\n      result = {}\n      for planet, features in dict_ofplan.items():\n        if len(features) == 2 and features[0] is not None and features[1] is not None:\n          population = int(features[0])\n          size = int(features[1])\n          density = round(population / size, 2)\n          result[planet] = density\n      return result\n    \"\"\"\n    \"\"\"\n    def planet_population(dict_ofplan):\n      result = {}\n      for planet, features in dict_ofplan.items():\n        if len(features) == 2 and features[0] is not None and features[1] is not None:\n          population = int(features[0])\n          size = int(features[1])\n          density = round(population / size, 2)\n          result[planet] = density\n      return result\n    \"\"\"\n    \"\"\"\n    def planet_population(dict_ofplan):\n      result = {}\n      for planet, features in dict_ofplan.items():\n        if len(features) == 2 and features[0] is not None and features[1] is not None:\n          population = int(features[0])\n          size = int(features[1])\n          density = round(population / size, 2)\n          result[planet] = density\n      return result\n    \"\"\"\n    \"\"\"\n    def planet_population(dict_ofplan):\n      result = {}\n      for planet, features in dict_ofplan.items"}
{"task_id": "EvoEval/89", "completion": "\n    aliens = set(aliens)\n    aliens.discard(ray)\n    aliens.discard(ray - 1)\n    aliens.discard(ray + 1)\n    return list(aliens)\n"}
{"task_id": "EvoEval/90", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if action == 'Launch':\n            if status == 'On Ground':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Move':\n            if status == 'In Space':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Land':\n            if status == 'In Space':\n                status = 'On Ground'\n            else:\n                return 'Invalid Action Sequence'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    fountain = ''\n    for i in range(n):\n        fountain += ' ' * (n - i - 1) + alphabet[i] + ' ' * (n - i - 1) + '\\n'\n    return fountain.center(2 * n + 1)\n"}
{"task_id": "EvoEval/93", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    result = \"\"\n    for i in range(len(message)):\n        if message[i].isalpha():\n            new_index = (alphabet.index(message[i].lower()) + n_values[i % len(n_values)]) % 26\n            new_char = alphabet[new_index]\n            result += new_char.upper() if message[i].isupper() else new_char\n        else:\n            result += message[i]\n    return result\n"}
{"task_id": "EvoEval/94", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    \n    left_to_right = sum(m[i][i] for i in range(len(m)))\n    right_to_left = sum(m[i][len(m)-i-1] for i in range(len(m)))\n    \n    return abs(left_to_right - right_to_left)\n"}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        if i % lst[i] == 0 and lst[i] == abs(lst[i]):\n            magic_indices.append(i)\n    return magic_indices\n"}
{"task_id": "EvoEval/97", "completion": "\n\n    definv(alien, humans):\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    encountered = []\n    for name, continent in humans.items():\n        if alien in name:\n            encountered.append(name)\n    encountered.sort()\n    return encountered\n    \"\"\"\n    # Your code here\n    \"\"\"\n    definv(alien, humans):\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    encountered = []\n    for name, continent in humans.items():\n        if alien in name:\n            encountered.append(name)\n    encountered.sort()\n    return encountered\n    \"\"\"\n    # Your code here\n    \"\"\"\n    definv(alien, humans):\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    encountered = []\n    for name, continent in humans.items():\n        if alien in name:\n            encountered.append(name)\n    encountered.sort()\n    return encountered\n    \"\"\"\n    # Your code here\n    \"\"\"\n    definv(alien, humans):\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    encountered = []\n    for name, continent in humans.items():\n        if alien in name:\n            encountered.append(name)\n    encountered.sort()\n    return encountered\n    \"\"\"\n    # Your code here\n    \"\"\"\n    definv(alien, humans):\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    encountered = []\n    for name, continent in humans.items():\n        if alien in name:\n            encountered.append(name)\n    encountered.sort()\n    return encountered\n    \"\"\"\n    # Your code here\n    \"\"\"\n    definv(alien, humans):\n    if not isinstance(alien, str) or not isinstance(humans"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    sequence = []\n    for i in range(n):\n        if i == 0:\n            sequence.append(a)\n        elif i == 1:\n            sequence.append(b)\n        else:\n            sequence.append(sequence[i-1] + sequence[i-2] + i + 1)\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime ' + str(sequence[i])\n\n    return sequence[:n]\n"}
{"task_id": "EvoEval/99", "completion": "\n    # Your code here\n    pass\n"}
