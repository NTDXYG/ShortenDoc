{"task_id": "EvoEval/0", "completion": "\n    base_cost = 5.0\n    location_factors = {\n        \"Local\": 1.0,\n        \"National\": 1.5,\n        \"International\": 2.5\n    }\n    \n    total_cost = 0.0\n    location_factor = location_factors.get(location, 1.0)\n\n    for item in items:\n        if isinstance(item, str):\n            weight = 1.0  # Assume string items weigh 1kg\n            item_cost = base_cost * location_factor * 15\n        else:\n            weight = item\n            item_cost = base_cost * location_factor\n            \n            if weight > 5:\n                item_cost += 10  # Additional charge for items over 5kg\n\n        total_cost += item_cost\n\n    return f\"{total_cost:.2f}\"\n"}
{"task_id": "EvoEval/1", "completion": "\n    base_cost = 5.0\n    additional_cost = 10.0\n    total_cost = 0.0\n\n    for item in items:\n        if isinstance(item, str):\n            weight = 1.0\n        else:\n            weight = item\n\n        cost = base_cost\n        if weight > 5:\n            cost += additional_cost\n\n        total_cost += cost\n\n    if location == \"Local\":\n        factor = 1.0\n    elif location == \"International\":\n        factor = 2.0\n    else:\n        factor = 1.0\n\n    total_cost *= factor\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    if isinstance(key, str):\n        key = sum(ord(char) for char in key)\n\n    encrypted_words = []\n    \n    for word in words:\n        encrypted_word = \"\"\n        for char in word:\n            if char.isalpha():\n                shifted = ord(char.lower()) + key\n                if shifted > ord('z'):\n                    shifted -= 26\n                encrypted_word += chr(shifted)\n            else:\n                encrypted_word += char\n        encrypted_words.append(encrypted_word)\n\n    return encrypted_words\n"}
{"task_id": "EvoEval/3", "completion": "\n    def backtrack(index: int, path: str):\n        if index == len(input_string):\n            combinations.append(path)\n            return\n        \n        # Single digit decoding\n        if index < len(input_string):\n            num = int(input_string[index])\n            if 1 <= num <= 26:\n                backtrack(index + 1, path + chr(num + 96))\n        \n        # Double digit decoding\n        if index + 1 < len(input_string):\n            num = int(input_string[index:index + 2])\n            if 10 <= num <= 26:\n                backtrack(index + 2, path + chr(num + 96))\n\n    combinations = []\n    backtrack(0, \"\")\n    return combinations\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n\n    count = 1  # The first candle is always lit\n    max_height = candles[0]\n\n    for height in candles[1:]:\n        if height > max_height:\n            count += 1\n            max_height = height\n\n    return count\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not matrix or not matrix[0]:\n        return []\n\n    result = []\n    rows, cols = len(matrix), len(matrix[0])\n\n    for r in range(rows):\n        if r % 2 == 0:  # even row index: left to right\n            for c in range(cols):\n                result.append(matrix[r][c])\n        else:  # odd row index: right to left\n            for c in range(cols - 1, -1, -1):\n                result.append(matrix[r][c])\n\n    return result\n"}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n\n    # Check if the position is out of bounds\n    if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]):\n        return grid\n\n    # Check if the clicked cell is a mine\n    if grid[x][y] == 1:\n        return grid\n\n    # Check if the clicked cell is already revealed\n    if grid[x][y] == 0:\n        return grid\n\n    # Directions for adjacent cells (8 directions)\n    directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]\n\n    # Function to reveal adjacent cells\n    def reveal(x, y):\n        if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]):\n            return\n        if grid[x][y] == 0:  # If it's an empty cell\n            grid[x][y] = -1  # Mark it as revealed\n            for dx, dy in directions:\n                reveal(x + dx, y + dy)\n\n    # Start revealing from the clicked position\n    reveal(x, y)\n\n    return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    # Initialize the starting position\n    position = (0, 0)\n\n    # Define the movement directions\n    directions = {\n        0: (0, 1),   # North\n        1: (1, 0),   # East\n        2: (0, -1),  # South\n        3: (-1, 0)   # West\n    }\n\n    # Process each move in the code sequence\n    for code in code_sequence:\n        if code in directions:\n            move = directions[code]\n            position = (position[0] + move[0], position[1] + move[1])\n\n    # Check if the final position is back at the starting point\n    if position == (0, 0):\n        return 'ShangriLa found'\n    else:\n        return 'Shangri-La not found'\n"}
{"task_id": "EvoEval/8", "completion": "\n    # Check for invalid canvas conditions\n    if canvas.count('P') != 1:\n        return 'Invalid canvas'\n    \n    # Convert the canvas into a list for easier manipulation\n    canvas_list = list(canvas)\n    start_index = canvas_list.index('P')\n    \n    # Function to paint the canvas\n    def paint(index):\n        if index < 0 or index >= len(canvas_list) or canvas_list[index] in ['#', 'P']:\n            return\n        canvas_list[index] = '*'\n        paint(index - 1)  # Paint left\n        paint(index + 1)  # Paint right\n        paint(index - len(canvas_list))  # Paint up\n        paint(index + len(canvas_list))  # Paint down\n    \n    # Start painting from the painter's position\n    paint(start_index)\n    \n    # Convert the list back to a string and return\n    return ''.join(canvas_list)\n"}
{"task_id": "EvoEval/9", "completion": "\n    import string as str_lib\n\n    # Normalize the string: convert to lower case and remove punctuation\n    normalized_string = string.lower().translate(str.maketrans('', '', str_lib.punctuation))\n    \n    # Split the string into words\n    words = normalized_string.split()\n    \n    # Calculate frequency\n    frequency = {}\n    for word in words:\n        frequency[word] = frequency.get(word, 0) + 1\n    \n    return frequency\n"}
{"task_id": "EvoEval/10", "completion": "\n    animal_count = {'C': 0, 'D': 0, 'B': 0}\n    sounds = animal_string.split()\n    result = []\n    \n    for sound in sounds:\n        if len(result) >= 3:\n            break\n        \n        animal = sound[0]\n        sound_count = sound.count('|')\n        \n        if animal in animal_count and animal_count[animal] < 2:\n            animal_count[animal] += 1\n            result.append(sound_count)\n    \n    return result\n"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh, are those {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh, are those {fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"Oh, are those {fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n\n    # Count the occurrences of each element\n    count = Counter(flux_values)\n    \n    # Find the element with maximum occurrence (smallest in case of tie)\n    most_common_value = min((key for key, value in count.items() if value == max(count.values())))\n    \n    # Calculate the sum of all elements in the array\n    total_sum = sum(flux_values)\n    \n    # Calculate the unique energy signature\n    unique_energy_signature = total_sum * most_common_value\n    \n    return unique_energy_signature\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n\n    from collections import Counter\n\n    # Count the occurrences of each element\n    counts = Counter(elems)\n\n    # Find the minimum occurrence count\n    min_count = min(counts.values())\n\n    # Get all elements with the minimum occurrence count\n    rarest_elements = [elem for elem, count in counts.items() if count == min_count]\n\n    # Return the first rarest element found\n    return rarest_elements[0]\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiouAEIOU'\n    vowel_cycle = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    \n    def next_vowel(vowel):\n        index = vowel_cycle.index(vowel.lower())\n        return vowel_cycle[(index + 1) % len(vowel_cycle)].upper() if vowel.isupper() else vowel_cycle[(index + 1) % len(vowel_cycle)]\n    \n    def next_consonant(consonant):\n        index = consonants.index(consonant.lower())\n        return consonants[(index + 1) % len(consonants)].upper() if consonant.isupper() else consonants[(index + 1) % len(consonants)]\n    \n    alias = []\n    \n    for char in name:\n        if char in vowels:\n            alias.append(next_vowel(char))\n        elif char in consonants:\n            alias.append(next_consonant(char))\n        else:\n            alias.append(char)\n    \n    return ''.join(alias)\n"}
{"task_id": "EvoEval/15", "completion": "\n    from collections import Counter\n\n    def card_value(card):\n        value = card[:-1]  # Remove the suit\n        if value.isdigit():\n            return int(value)\n        elif value == 'J':\n            return 11\n        elif value == 'Q':\n            return 12\n        elif value == 'K':\n            return 13\n        return 0\n\n    values = [card_value(card) for card in hand]\n    value_counts = Counter(values)\n\n    score = 0\n    for value, count in value_counts.items():\n        if count == 2:\n            score += value\n        elif count == 3:\n            score += 2 * value\n        elif count == 4:\n            score += 3 * value\n        elif count == 5:\n            score += 4 * value\n\n    return score\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    a, b = 0, 1\n    total = a + b\n\n    for _ in range(2, n):\n        a, b = b, a + b\n        total += b\n\n    return total\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        name, magic = wizard\n        dragon_hp -= magic\n        if dragon_hp <= 0:\n            return name\n    return 'The dragon won!'\n"}
{"task_id": "EvoEval/18", "completion": "\n    if n < 1:\n        return None\n    \n    count = 0\n    num = 7\n    while count < n:\n        if all(int(digit) <= 7 for digit in str(num)):\n            count += 1\n            if count == n:\n                return num\n        num += 7\n"}
{"task_id": "EvoEval/19", "completion": "\n    danger_count = 0\n    rows = len(m)\n    cols = len(m[0]) if rows > 0 else 0\n\n    for i in range(rows):\n        for j in range(cols):\n            if m[i][j] == 1:  # Human found\n                # Check for vampires in the same row or column\n                in_danger = False\n                for k in range(rows):\n                    if m[k][j] == 2:  # Vampire in the same column\n                        in_danger = True\n                        break\n                if not in_danger:\n                    for k in range(cols):\n                        if m[i][k] == 2:  # Vampire in the same row\n                            in_danger = True\n                            break\n                if in_danger:\n                    danger_count += 1\n\n    return danger_count\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    \n    ascending = [str(i) for i in range(1, n + 1)]\n    descending = ascending[-2::-1]  # Skip the last element to avoid duplication\n    pattern = ascending + descending\n    \n    return [','.join(pattern)]\n"}
{"task_id": "EvoEval/21", "completion": "\n    def search_word(word, grid):\n        n = len(grid)\n        word_length = len(word)\n\n        # Check all rows and columns\n        for i in range(n):\n            row = ''.join(grid[i])\n            col = ''.join(grid[j][i] for j in range(n))\n\n            if word in row or word in col:\n                return True\n            if word[::-1] in row or word[::-1] in col:\n                return True\n\n        # Check diagonals\n        for d in range(-n + 1, n):\n            diag1 = ''.join(grid[i][i + d] for i in range(max(0, d), min(n, n + d)))\n            diag2 = ''.join(grid[i][n - 1 - (i + d)] for i in range(max(0, -d), min(n, n - d)))\n\n            if word in diag1 or word in diag2:\n                return True\n            if word[::-1] in diag1 or word[::-1] in diag2:\n                return True\n\n        return False\n\n    for word in words:\n        if not search_word(word, grid):\n            return False\n\n    return True\n"}
{"task_id": "EvoEval/22", "completion": "\n    light_year_km = 9.461e12  # 1 light year in kilometers\n    distance_km = v * t  # distance in kilometers\n    distance_ly = distance_km / light_year_km  # convert distance to light years\n    return distance_ly\n"}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_prime(n):\n        count = 0\n        num = 1\n        while count < n:\n            num += 1\n            if is_prime(num):\n                count += 1\n        return num\n\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            index = ord(char) - ord('a') + 1\n            result.append(str(nth_prime(index)))\n        else:\n            result.append(char)\n\n    return ''.join(result)\n"}
{"task_id": "EvoEval/24", "completion": "\n    translation_map = {\n        'a': '+', 'b': ' ', 'c': '*', 'd': ',', 'e': '%', 'f': '', \n        'g': '', 'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', \n        'm': ')', 'n': '?', 'o': ':', 'p': ';', 'q': '`', 'r': '~', \n        's': '>', 't': '<', 'u': '{', 'v': '}', 'w': '[', 'x': ']', \n        'y': '|', 'z': ''\n    }\n    \n    alien_word = ''.join(translation_map.get(char, char) for char in english_word)\n    return alien_word\n"}
{"task_id": "EvoEval/25", "completion": "\n    sentences = text.split('. ')\n    max_count = 0\n    max_sentence = \"\"\n\n    for sentence in sentences:\n        count = sentence.lower().split().count(word.lower())\n        if count > max_count:\n            max_count = count\n            max_sentence = sentence.strip()\n\n    return (max_count, max_sentence) if max_count > 0 else (0, \"\")\n"}
{"task_id": "EvoEval/26", "completion": "\n    directions = [\"up\", \"down\", \"left\", \"right\"]\n    direction_vectors = {\n        \"up\": (-1, 0),\n        \"down\": (1, 0),\n        \"left\": (0, -1),\n        \"right\": (0, 1)\n    }\n    \n    def is_valid_move(maze, position):\n        x, y = position\n        return 0 <= x < len(maze) and 0 <= y < len(maze[0]) and maze[x][y] == 0\n\n    def dfs(current, path):\n        if current == end:\n            return path\n        \n        x, y = current\n        maze[x][y] = 1  # mark as visited\n        \n        for direction in directions:\n            dx, dy = direction_vectors[direction]\n            next_position = (x + dx, y + dy)\n            if is_valid_move(maze, next_position):\n                result = dfs(next_position, path + [direction])\n                if result is not None:\n                    return result\n        \n        maze[x][y] = 0  # unmark as visited\n        return None\n\n    return dfs(start, [])\n"}
{"task_id": "EvoEval/27", "completion": "\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    # Calculate taxable income after deductions\n    if deductions <= 1000:\n        taxable_income = income - deductions\n    elif deductions <= 3000:\n        taxable_income = income - 1000 - (deductions - 1000) * 0.79\n    else:\n        taxable_income = income - 1000 - 2000 * 0.79 - (deductions - 3000)\n\n    # Calculate tax based on taxable income\n    tax = 0\n    if taxable_income <= 10000:\n        tax = taxable_income * 0.1\n    elif taxable_income <= 35000:\n        tax = 10000 * 0.1 + (taxable_income - 10000) * 0.15\n    elif taxable_income <= 80000:\n        tax = 10000 * 0.1 + 25000 * 0.15 + (taxable_income - 35000) * 0.2\n    else:\n        tax = 10000 * 0.1 + 25000 * 0.15 + 45000 * 0.2 + (taxable_income - 80000) * 0.3\n\n    return tax\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(sub: str) -> bool:\n        return sub == sub[::-1]\n\n    unique_palindromes = set()\n    n = len(s)\n\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j + 1]\n            if is_palindrome(substring):\n                unique_palindromes.add(substring)\n\n    return sorted(unique_palindromes)\n"}
{"task_id": "EvoEval/30", "completion": "\n    from collections import deque\n\n    rows, cols = len(maze), len(maze[0])\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    queue = deque([start])\n    visited = set()\n    visited.add(start)\n    parent = {start: None}\n\n    while queue:\n        current = queue.popleft()\n        if current == end:\n            path = []\n            while current is not None:\n                path.append(current)\n                current = parent[current]\n            return path[::-1]\n\n        for direction in directions:\n            neighbor = (current[0] + direction[0], current[1] + direction[1])\n            if (0 <= neighbor[0] < rows and 0 <= neighbor[1] < cols and\n                    maze[neighbor[0]][neighbor[1]] == 1 and neighbor not in visited):\n                visited.add(neighbor)\n                parent[neighbor] = current\n                queue.append(neighbor)\n\n    return []\n"}
{"task_id": "EvoEval/31", "completion": "\n    # Create a 2D array to store the number of unique paths to each cell\n    dp = [[1] * n for _ in range(m)]\n    \n    # Fill the array\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    \n    return dp[m - 1][n - 1]\n"}
{"task_id": "EvoEval/32", "completion": "\n    import random\n\n    def playlist_shuffle(playlist: list, seed: int):\n        shuffled_playlist = playlist.copy()\n        random.seed(seed)\n\n        for i in range(len(shuffled_playlist)):\n            if \"Rock\" in shuffled_playlist[i]:\n                continue\n            \n            swap_index = seed % len(shuffled_playlist)\n            shuffled_playlist[i], shuffled_playlist[swap_index] = shuffled_playlist[swap_index], shuffled_playlist[i]\n            \n            seed = (seed * 807) % 147483647\n\n        return shuffled_playlist\n"}
{"task_id": "EvoEval/33", "completion": "\n    dp = [0] * (n + 1)\n    dp[0] = 1  # There's one way to be on the ground (do nothing)\n\n    for step in range(1, n + 1):\n        for stone in magic_stones:\n            if step - stone >= 0:\n                dp[step] += dp[step - stone]\n\n    return dp[n]\n"}
{"task_id": "EvoEval/34", "completion": "\n    percentages = []\n    \n    for day in range(1, n + 1):\n        if day == m:\n            percentage = min(100, 2 * percentages[-1] if percentages else 10)\n        elif day < m:\n            percentage = min(100, (day * 10))\n        else:\n            percentage = max(0, percentages[-1] - 10)\n        \n        percentages.append(percentage)\n    \n    return percentages\n"}
{"task_id": "EvoEval/35", "completion": "\n    if not isinstance(email, str):\n        return False\n    \n    if email.count('@') != 1:\n        return False\n    \n    local_part, domain_part = email.split('@')\n    \n    if not local_part or not domain_part:\n        return False\n    \n    if domain_part.count('.') == 0 or domain_part.startswith('.') or domain_part.endswith('.'):\n        return False\n    \n    return True\n"}
{"task_id": "EvoEval/36", "completion": "\n    if not xs:\n        return []\n\n    integral_coeffs = []\n    for i, coeff in enumerate(xs):\n        integral_coeffs.append(coeff / (i + 1))\n\n    integral_coeffs.insert(0, 0)  # Add the constant term (0)\n    return integral_coeffs\n"}
{"task_id": "EvoEval/37", "completion": "\n    def string_transform(s):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    transformed = []\n\n    for char in s:\n        if char in vowels:\n            if char in \"aeiou\":\n                transformed.append(vowels[(vowels.index(char) + 1) % 5])\n            else:\n                transformed.append(vowels[(vowels.index(char) + 1) % 5].upper())\n        elif char in consonants:\n            if char in \"bcdfghjklmnpqrstvwxyz\":\n                transformed.append(consonants[(consonants.index(char) + 1) % 21])\n            else:\n                transformed.append(consonants[(consonants.index(char) + 1) % 21].upper())\n        else:\n            transformed.append(char)\n\n    return ''.join(transformed)\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticon_to_emoji = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude04\",\n        \";)\": \"\ud83d\ude09\",\n        \":P\": \"\ud83d\ude1c\",\n        \":o\": \"\ud83d\ude2e\",\n        \":/\": \"\ud83d\ude15\",\n        \"B)\": \"\ud83d\ude0e\",\n        \":'(\": \"\ud83d\ude22\",\n        \"XD\": \"\ud83d\ude02\"\n    }\n\n    for emoticon, emoji in emoticon_to_emoji.items():\n        sentence = sentence.replace(emoticon, emoji)\n\n    return sentence\n"}
{"task_id": "EvoEval/39", "completion": "\n    # Create the top border\n    top_border = '*' + s * n + '*'\n    \n    # Create the middle rows\n    middle_rows = []\n    for i in range(n):\n        row = '*' + s * (i + 1) + s * (n - i - 1) + '*'\n        middle_rows.append(row)\n    \n    # Create the bottom border\n    bottom_border = '*' + s * n + '*'\n    \n    # Combine all parts\n    art = [top_border] + middle_rows + [bottom_border]\n    \n    return '\\n'.join(art)\n"}
{"task_id": "EvoEval/40", "completion": "\n    from itertools import combinations\n\n    def clean_potion(potion):\n        name, power = potion.rsplit(' ', 1)\n        return name.strip(), int(power.strip())\n\n    potions = [clean_potion(potion) for potion in potions]\n    potions.sort(key=lambda x: (x[1], x[0]))  # Sort by power level, then by name\n\n    for r in range(1, len(potions) + 1):\n        for combo in combinations(potions, r):\n            total_power = sum(p[1] for p in combo)\n            if total_power == target:\n                return sorted(p[0] + ' ' + str(p[1]) for p in combo)\n\n    return []\n"}
{"task_id": "EvoEval/41", "completion": "\n    from collections import deque\n\n    def min_energy_path(arr):\n        rows, cols = len(arr), len(arr[0])\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        energy = [[float('inf')] * cols for _ in range(rows)]\n        energy[0][0] = arr[0][0]\n        queue = deque([(0, 0)])\n\n        while queue:\n            x, y = queue.popleft()\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < rows and 0 <= ny < cols:\n                    new_energy = energy[x][y] + arr[nx][ny]\n                    if new_energy < energy[nx][ny]:\n                        energy[nx][ny] = new_energy\n                        queue.append((nx, ny))\n\n        return energy[rows - 1][cols - 1]\n\n    return min_energy_path(arr)\n"}
{"task_id": "EvoEval/42", "completion": "\n    def find_legendary_item(player_input):\n    if not player_input:\n        return (False, None)\n    \n    unique_items = list(set(player_input))\n    if 5 in unique_items:\n        unique_items.remove(5)\n        if unique_items:\n            second_most_valuable = max(unique_items)\n            return (True, second_most_valuable)\n        else:\n            return (True, -1)\n    else:\n        return (False, None)\n"}
{"task_id": "EvoEval/43", "completion": "\n    fuel_consumption_per_year = spaceship_weight * planet_gravity\n    travel_time = distance / speed\n\n    total_fuel_needed = fuel_consumption_per_year * travel_time\n\n    if fuel < total_fuel_needed:\n        return 'Insufficient fuel'\n\n    remaining_fuel = fuel - total_fuel_needed\n    return round(remaining_fuel, 1)\n"}
{"task_id": "EvoEval/44", "completion": "\n    def fairy_tale_transport(q, w, e):\n    total_weight = sum(q)\n    total_capacity = w + e\n    return total_weight <= total_capacity\n"}
{"task_id": "EvoEval/45", "completion": "\n    total_visible_hills = 0\n    n = len(arr)\n\n    for i in range(n):\n        current_height = arr[i]\n        visible_count = 1  # Count the current hill\n\n        # Check to the left\n        for j in range(i - 1, -1, -1):\n            if arr[j] >= current_height:\n                break\n            visible_count += 1\n\n        # Check to the right\n        for j in range(i + 1, n):\n            if arr[j] >= current_height:\n                break\n            visible_count += 1\n\n        total_visible_hills += visible_count\n\n    return total_visible_hills\n"}
{"task_id": "EvoEval/46", "completion": "\n    def hidden_message(test_cases):\n    secret_messages = []\n    \n    for case in test_cases:\n        secret_message = ''.join(word[0].lower() for word in case if word)\n        secret_messages.append(secret_message)\n    \n    return secret_messages\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if available.get(ingredient, 0) < quantity:\n            return False\n    return True\n"}
{"task_id": "EvoEval/48", "completion": "\n    def wizard_inventory(inventory_logs):\n    inventory = {}\n    \n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        \n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n            \n    # Remove items with zero or negative quantity\n    inventory = {item: qty for item, qty in inventory.items() if qty > 0}\n    \n    return inventory\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code_dict = {\n        '01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E',\n        '0010': 'F', '110': 'G', '0000': 'H', '00': 'I', '0111': 'J',\n        '101': 'K', '0100': 'L', '11': 'M', '10': 'N', '111': 'O',\n        '0110': 'P', '1101': 'Q', '010': 'R', '000': 'S', '1': 'T',\n        '001': 'U', '0001': 'V', '00': 'W', '1001': 'X', '1011': 'Y',\n        '1100': 'Z', '01': '1', '00111': '2', '00011': '3', '0001': '4',\n        '00000': '5', '10000': '6', '11000': '7', '11100': '8', '11110': '9',\n        '11111': '0'\n    }\n\n    decoded_message = []\n    words = msg.split('/')\n    \n    for word in words:\n        characters = word.split()\n        decoded_word = ''.join(morse_code_dict.get(char, '') for char in characters)\n        decoded_message.append(decoded_word)\n    \n    return ' '.join(decoded_message)\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', \n        'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', \n        'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', \n        'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', \n        'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', \n        'Z': '--..', '0': '-----', '1': '.----', '2': '..---', \n        '3': '...--', '4': '....-', '5': '.....', '6': '-....', \n        '7': '--...', '8': '---..', '9': '----.', ' ': ' '\n    }\n\n    text = text.upper()\n    morse_code = []\n\n    for char in text:\n        if char in morse_code_dict:\n            morse_code.append(morse_code_dict[char])\n\n    return ' '.join(morse_code)\n"}
{"task_id": "EvoEval/51", "completion": "\n    def alien_encoding(string, list_of_alphabets):\n    if not list_of_alphabets:\n        return string\n    \n    encoded_string = []\n    for i, char in enumerate(string):\n        encoded_char = list_of_alphabets[i % len(list_of_alphabets)]\n        encoded_string.append(encoded_char)\n    \n    return ''.join(encoded_string)\n"}
{"task_id": "EvoEval/52", "completion": "\n    fulfilled_orders = 0\n\n    for order in orders:\n        if order > n:\n            continue  # Skip orders that cannot be fulfilled in one batch\n        batches_needed = (order + n - 1) // n  # Calculate the number of batches needed\n        if batches_needed <= m:\n            fulfilled_orders += 1\n            m -= batches_needed  # Decrease the number of available batches\n\n    return fulfilled_orders\n"}
{"task_id": "EvoEval/53", "completion": "\n    def magical_transformation(s):\n    vowels = 'aeiou'\n    next_vowel = {'a': 'e', 'e': 'i', 'i': 'o', 'o': 'u', 'u': 'a'}\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = []\n\n    for char in s:\n        if char.lower() in vowels:\n            transformed.append(next_vowel[char.lower()].upper() if char.isupper() else next_vowel[char.lower()])\n        elif char.lower() in consonants:\n            next_consonant = consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n            transformed.append(next_consonant.upper() if char.isupper() else next_consonant)\n        else:\n            transformed.append(char)\n\n    return ''.join(transformed)\n"}
{"task_id": "EvoEval/54", "completion": "\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                coordinates.append((i, j))\n    return coordinates\n"}
{"task_id": "EvoEval/55", "completion": "\n    encrypted_message = []\n    for i, char in enumerate(message):\n        if char.isalpha():\n            shift_amount = shift + i\n            if char.islower():\n                new_char = chr((ord(char) - ord('a') + shift_amount) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(char) - ord('A') + shift_amount) % 26 + ord('A'))\n            encrypted_message.append(new_char)\n        else:\n            encrypted_message.append(char)\n    \n    return ''.join(encrypted_message)\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_dict = {\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', \n        'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', \n        'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', \n        'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', \n        'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', \n        'z': '--..', ' ': '/'\n    }\n    \n    morse_code = ' '.join(morse_dict[char] for char in s)\n    return morse_code\n"}
{"task_id": "EvoEval/57", "completion": "\n    transformed_menu = {}\n    spell_length = len(magic_spell)\n\n    for dish, price in menu.items():\n        transformed_dish = ''.join(magic_spell[i % spell_length] for i in range(len(dish)))\n        transformed_menu[transformed_dish] = price\n\n    return transformed_menu\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated_words = []\n\n    for word in earth_phrase.split():\n        translated_word = ''\n        for char in word:\n            if char in vowels:\n                next_vowel = vowels[(vowels.index(char) + 1) % len(vowels)]\n                translated_word += next_vowel\n            elif char in consonants:\n                next_consonant = consonants[(consonants.index(char) + 1) % len(consonants)]\n                translated_word += next_consonant\n            else:\n                translated_word += char  # for spaces or any other characters\n\n        if word[0] in vowels:\n            translated_word += 'xy'\n        elif word[0] in consonants:\n            translated_word += 't'\n\n        translated_words.append(translated_word.capitalize())\n\n    return '@'.join(translated_words)\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n\n    sorted_ingredients = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n    return [(ingredient, recipes) for ingredient, recipes in sorted_ingredients]\n"}
{"task_id": "EvoEval/60", "completion": "\n    happy_count = 0\n    sugar_set = set(sugar_locations)\n\n    for position, direction in ant_positions:\n        if direction == \"right\":\n            while position < path_length:\n                if position in sugar_set:\n                    happy_count += 1\n                    sugar_set.remove(position)\n                position += 1\n        elif direction == \"left\":\n            while position >= 0:\n                if position in sugar_set:\n                    happy_count += 1\n                    sugar_set.remove(position)\n                position -= 1\n\n    return happy_count\n"}
{"task_id": "EvoEval/61", "completion": "\n    def transform_string(s):\n    def swap_case_odd(s):\n        return ''.join(c.swapcase() if i % 2 == 1 else c for i, c in enumerate(s))\n\n    def replace_vowels(s):\n        vowels = 'aeiouAEIOU'\n        next_vowel = {'a': 'e', 'e': 'i', 'i': 'o', 'o': 'u', 'u': 'a',\n                      'A': 'E', 'E': 'I', 'I': 'O', 'O': 'U', 'U': 'A'}\n        return ''.join(next_vowel[c] if c in vowels else c for c in s)\n\n    def replace_consonants(s):\n        consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n        next_consonant = {c: chr(ord(c) - 1) for c in consonants}\n        next_consonant.update({c: chr(ord(c) + 1) for c in consonants})\n        return ''.join(next_consonant[c] if c in consonants else c for c in s)\n\n    # Remove spaces for processing\n    processed_string = s.replace(\" \", \"\")\n    \n    # Apply transformations\n    processed_string = swap_case_odd(processed_string)\n    processed_string = replace_vowels(processed_string)\n    processed_string = replace_consonants(processed_string)\n\n    # Reinsert spaces\n    result = []\n    space_index = 0\n    for char in s:\n        if char == ' ':\n            result.append(' ')\n        else:\n            result.append(processed_string[space_index])\n            space_index += 1\n\n    return ''.join(result)\n"}
{"task_id": "EvoEval/62", "completion": "\n    def recipe_converter(recipe, conversion_factor):\n    \"\"\"\n    A function that takes a dictionary representing a recipe as input where the keys are the ingredients \n    and the values are the quantities needed for one serving. The function should also take a conversion \n    factor which represents the number of servings required. The function returns a dictionary where \n    quantities of each ingredient are multiplied by the conversion factor.\n\n    The quantities in recipe are integers and the factor is a positive integer. \n\n    Examples:\n    >>> recipe_converter({\"sugar\": 200, \"eggs\": 2}, 2)   \n    {'sugar': 400, 'eggs': 4}\n    >>> recipe_converter({\"milk\": 250, \"chocolate\": 75, \"butter\": 50}, 3)    \n    {'milk': 750, 'chocolate': 225, 'butter': 150}   \n    \"\"\"\n    return {ingredient: quantity * conversion_factor for ingredient, quantity in recipe.items()}\n"}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = []\n    while p > 0:\n        pyramid.append(p)\n        if p % 2 == 0:\n            p -= 2\n        else:\n            p -= 3\n    return pyramid[::-1]\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in range(start, end + 1):\n        if num % divisor == 0 and is_prime(num):\n            result.append(num)\n\n    return result\n"}
{"task_id": "EvoEval/65", "completion": "\n    final_order = {}\n    \n    for item, details in order.items():\n        if item in menu:\n            final_order[item] = menu[item].copy()  # Start with the original ingredients\n            \n            if 'add' in details:\n                final_order[item].extend(details['add'])  # Add extra ingredients\n            \n            if 'remove' in details:\n                for ingredient in details['remove']:\n                    if ingredient in final_order[item]:\n                        final_order[item].remove(ingredient)  # Remove specified ingredients\n\n    return final_order\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def are_anagrams(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    primes = [i for i in range(2, n) if is_prime(i)]\n    prime_pairs = []\n\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            if are_anagrams(primes[i], primes[j]):\n                prime_pairs.append((primes[i], primes[j]))\n\n    return sorted(prime_pairs)\n"}
{"task_id": "EvoEval/67", "completion": "\n    total_calories = {}\n    \n    for customer in customers:\n        if customer in meals:\n            total_calories[customer] = sum(meal['calories'] for meal in meals[customer])\n        else:\n            total_calories[customer] = 0\n            \n    return total_calories\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return True\n\n    n = len(arr)\n    sorted_arr = sorted(arr)\n\n    # Check if the array is already sorted\n    if arr == sorted_arr:\n        return True\n\n    # Check for the number of positions to rotate\n    for i in range(n):\n        rotated = arr[i:] + arr[:i]\n        if rotated == sorted_arr:\n            return True\n\n    # Check if we can sort by one swap\n    def can_sort_with_one_swap(arr):\n        mismatch_indices = []\n        for i in range(n):\n            if arr[i] != sorted_arr[i]:\n                mismatch_indices.append(i)\n        \n        if len(mismatch_indices) == 2:\n            i, j = mismatch_indices\n            arr[i], arr[j] = arr[j], arr[i]\n            return arr == sorted_arr\n        return False\n\n    return can_sort_with_one_swap(arr)\n"}
{"task_id": "EvoEval/69", "completion": "\n    card_indices = {}\n    \n    for index, card in enumerate(cards):\n        if card != 0 and magicNumber % card == 0:\n            complement = magicNumber // card\n            if complement in card_indices:\n                return (card_indices[complement], index)\n            card_indices[card] = index\n            \n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not path or path[0] not in planets:\n        return False\n\n    for i in range(len(path) - 1):\n        if path[i + 1] not in planets.get(path[i], []):\n            return False\n\n    return True\n"}
{"task_id": "EvoEval/71", "completion": "\n    def shift_char(c, n):\n        if c.isalpha():\n            start = ord('a') if c.islower() else ord('A')\n            return chr(start + (ord(c) - start + n) % 26)\n        return c\n\n    shifted_string = ''.join(shift_char(c, n) for c in s)\n    vowel_count = sum(1 for c in shifted_string.lower() if c in 'aeiou')\n    \n    return shifted_string, vowel_count\n"}
{"task_id": "EvoEval/72", "completion": "\n    tales = []\n    for i in lst:\n        j = sum(c.isdigit() for c in i)\n        tale = f\"Once upon a time, in a kingdom far away, lived a magical creature with the name '{i}' who was known for telling {j} tales a day.\"\n        tales.append(tale)\n    return tales\n"}
{"task_id": "EvoEval/73", "completion": "\n    def count_chests(grid):\n        return sum(sum(row) for row in grid)\n\n    total_chests = count_chests(grid)\n    trips = math.ceil(total_chests / bag_capacity) * 2  # Each trip in and out counts as 2 trips\n    return trips\n"}
{"task_id": "EvoEval/74", "completion": "\n    def cipher_mapping(s, cipher):\n    return ''.join(cipher.get(char, char) for char in s)\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    transformed = []\n\n    for i, char in enumerate(input_str):\n        if char in vowels:\n            # Transform vowel\n            next_vowel = vowels[(vowels.index(char) + 1) % len(vowels)]\n            transformed.append(next_vowel)\n        elif char in consonants:\n            # Transform consonant\n            next_consonant = chr(ord(char) + 1)\n            while next_consonant in vowels or next_consonant not in consonants:\n                next_consonant = chr(ord(next_consonant) + 1)\n                if next_consonant > 'z':\n                    next_consonant = 'a'\n                elif next_consonant > 'Z' and next_consonant < 'a':\n                    next_consonant = 'A'\n            transformed.append(next_consonant)\n        elif char.isdigit():\n            # Increment digit\n            next_digit = str((int(char) + 1) % 10)\n            transformed.append(next_digit)\n        elif char in ['!', '?']:\n            # Transform punctuation\n            if i % 2 == 0:\n                transformed.append('!' if char == '?' else '?')\n            else:\n                transformed.append(char)\n        else:\n            # Keep special characters as is\n            transformed.append(char)\n\n    return ''.join(transformed)\n"}
{"task_id": "EvoEval/76", "completion": "\n    def create_pyramid(lst):\n    if not lst:\n        return []\n    \n    max_length = max(lst)\n    pyramid = []\n    \n    for level in range(max_length, 0, -1):\n        if level in lst:\n            pyramid.append('#' * level)\n    \n    return pyramid\n"}
{"task_id": "EvoEval/77", "completion": "\n    def points(n):\n        count = 0\n        while n > 1:\n            n //= 2\n            count += 1\n        return count\n\n    points_list = [points(num) for num in sequence]\n    sorted_points = sorted(points_list, reverse=True)\n    \n    return sorted_points[:k]\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    pattern = []\n\n    for i in range(n):\n        pattern.append(mat[i][i])  # Top-left to bottom-right diagonal\n        pattern.append(mat[i][n - 1 - i])  # Top-right to bottom-left diagonal\n\n    # Remove duplicates and return the result\n    return list(set(pattern))\n"}
{"task_id": "EvoEval/79", "completion": "\n    if not prices or days <= 0:\n        return 0\n\n    max_profit = 0\n    n = len(prices)\n\n    for i in range(n - days):\n        buy_price = prices[i]\n        sell_price = max(prices[i + 1:i + days + 1])\n        profit = sell_price - buy_price\n        max_profit = max(max_profit, profit)\n\n    return max_profit\n"}
{"task_id": "EvoEval/80", "completion": "\n    def adventure_game(map, instructions):\n    start_row, start_col = next((r, c) for r, row in enumerate(map) for c, val in enumerate(row) if val == 'S')\n    path = [(start_row, start_col)]\n    current_position = (start_row, start_col)\n\n    for instruction in instructions:\n        if current_position == (start_row, start_col) and instruction == 'up':\n            continue\n        if instruction == 'up':\n            new_position = (current_position[0] - 1, current_position[1])\n        elif instruction == 'down':\n            new_position = (current_position[0] + 1, current_position[1])\n        elif instruction == 'left':\n            new_position = (current_position[0], current_position[1] - 1)\n        elif instruction == 'right':\n            new_position = (current_position[0], current_position[1] + 1)\n        else:\n            continue\n\n        if (0 <= new_position[0] < len(map) and\n                0 <= new_position[1] < len(map[0]) and\n                map[new_position[0]][new_position[1]] != 'X'):\n            current_position = new_position\n\n        path.append(current_position)\n\n        if map[current_position[0]][current_position[1]] == 'E':\n            break\n\n    return path\n"}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    \n    # Create a mapping of each character to its index in the alien dictionary\n    alien_order = {char: index for index, char in enumerate(alien_dictionary)}\n    \n    # Function to convert a word to its corresponding order based on the alien dictionary\n    def convert_word(word):\n        return [alien_order[char] for char in word]\n    \n    # Convert all words to their corresponding order\n    converted_words = [convert_word(word) for word in word_list]\n    \n    # Check if the list of converted words is sorted\n    for i in range(1, len(converted_words)):\n        if converted_words[i] < converted_words[i - 1]:\n            return \"INCORRECT\"\n    \n    return \"CORRECT\"\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n\n    zodiac_dates = {\n        \"Aries\": (\"03-21\", \"04-19\", \"Fire\"),\n        \"Taurus\": (\"04-20\", \"05-20\", \"Earth\"),\n        \"Gemini\": (\"05-21\", \"06-20\", \"Air\"),\n        \"Cancer\": (\"06-21\", \"07-22\", \"Water\"),\n        \"Leo\": (\"07-23\", \"08-22\", \"Fire\"),\n        \"Virgo\": (\"08-23\", \"09-22\", \"Earth\"),\n        \"Libra\": (\"09-23\", \"10-22\", \"Air\"),\n        \"Scorpio\": (\"10-23\", \"11-21\", \"Water\"),\n        \"Sagittarius\": (\"11-22\", \"12-21\", \"Fire\"),\n        \"Capricorn\": (\"12-22\", \"01-19\", \"Earth\"),\n        \"Aquarius\": (\"01-20\", \"02-18\", \"Air\"),\n        \"Pisces\": (\"02-19\", \"03-20\", \"Water\"),\n    }\n\n    element_dict = {\n        \"Fire\": [],\n        \"Earth\": [],\n        \"Air\": [],\n        \"Water\": []\n    }\n\n    for birthday in birthdays:\n        month_day = birthday[5:10]  # Extract MM-DD\n        for zodiac, (start, end, element) in zodiac_dates.items():\n            if (start <= month_day <= end) or (start > end and (month_day >= start or month_day <= end)):\n                element_dict[element].append(birthday)\n                break\n\n    return {element: len(dates) for element, dates in element_dict.items()}\n"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = set('aeiouAEIOU')\n    s_list = list(s)\n    left, right = 0, len(s) - 1\n\n    while left < right:\n        if s_list[left] not in vowels:\n            left += 1\n        elif s_list[right] not in vowels:\n            right -= 1\n        else:\n            s_list[left], s_list[right] = s_list[right], s_list[left]\n            left += 1\n            right -= 1\n\n    return ''.join(s_list)\n"}
{"task_id": "EvoEval/84", "completion": "\n    def tree_traversal(tree):\n    def traverse(node, path):\n        if not node:\n            return\n        path.append(node)\n        if not tree[node]:  # If there are no children\n            paths.append(path.copy())\n        else:\n            for child in tree[node]:\n                traverse(child, path)\n        path.pop()\n\n    paths = []\n    for root in tree:\n        traverse(root, [])\n    return paths\n"}
{"task_id": "EvoEval/85", "completion": "\n    from collections import deque\n\n    def is_valid(x, y):\n        return 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] == 0\n\n    start = (0, 0)\n    target = coord\n    queue = deque([(start, 0)])  # (position, steps)\n    visited = set()\n    visited.add(start)\n\n    while queue:\n        (x, y), steps = queue.popleft()\n\n        if (x, y) == target:\n            return steps\n\n        # Move right\n        if is_valid(x, y + 1) and (x, y + 1) not in visited:\n            visited.add((x, y + 1))\n            queue.append(((x, y + 1), steps + 1))\n\n        # Move down\n        if is_valid(x + 1, y) and (x + 1, y) not in visited:\n            visited.add((x + 1, y))\n            queue.append(((x + 1, y), steps + 1))\n\n    return -1\n"}
{"task_id": "EvoEval/86", "completion": "\n    def sort_movies_by_ratings_and_release_date(movies_dict):\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n    return [movie[0] for movie in sorted_movies]\n"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr or not arr[0]:\n        return \"\"\n    \n    result = []\n    top, bottom, left, right = 0, len(arr) - 1, 0, len(arr[0]) - 1\n\n    while top <= bottom and left <= right:\n        # Traverse from left to right\n        for i in range(left, right + 1):\n            result.append(arr[top][i])\n        top += 1\n        \n        # Traverse from top to bottom\n        for i in range(top, bottom + 1):\n            result.append(arr[i][right])\n        right -= 1\n        \n        if top <= bottom:\n            # Traverse from right to left\n            for i in range(right, left - 1, -1):\n                result.append(arr[bottom][i])\n            bottom -= 1\n        \n        if left <= right:\n            # Traverse from bottom to top\n            for i in range(bottom, top - 1, -1):\n                result.append(arr[i][left])\n            left += 1\n\n    return ''.join(result)\n"}
{"task_id": "EvoEval/88", "completion": "\n    def planet_population(dict_of_planets):\n    planet_population_density = {}\n    \n    for planet, features in dict_of_planets.items():\n        if len(features) == 2:\n            population, size = features\n            if isinstance(population, (int, float)) and isinstance(size, (int, float)):\n                if population > 0 and size > 0:\n                    density = round(population / size, 2)\n                    planet_population_density[planet] = density\n    \n    return planet_population_density\n"}
{"task_id": "EvoEval/89", "completion": "\n    # Remove the aliens that are hit by the ray\n    return [alien for alien in aliens if alien not in {ray - 1, ray, ray + 1}]\n"}
{"task_id": "EvoEval/90", "completion": "\n    # Convert the input strings to sets of digits\n    digits1 = set(s1)\n    digits2 = set(s2)\n\n    # Generate all unique combinations of digits from both sets\n    unique_combinations = set()\n    for d1 in digits1:\n        for d2 in digits2:\n            unique_combinations.add(int(d1) + int(d2))\n\n    # Calculate the product of the sums of unique combinations\n    result = sum(unique_combinations)\n    \n    return result\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    distance = 0\n\n    for action, value in spaceship_data:\n        if action == 'Launch':\n            if status == 'On Ground':\n                status = 'In Space'\n                distance += value\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Move':\n            if status == 'In Space':\n                distance += value\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Land':\n            if status == 'In Space':\n                status = 'On Ground'\n            else:\n                return 'Invalid Action Sequence'\n        else:\n            return 'Invalid Action Sequence'\n\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    result = []\n    width = 2 * n - 1\n\n    for i in range(n):\n        letter = chr((i % 26) + ord('A'))\n        layer = letter * (2 * i + 1)\n        centered_layer = layer.center(width)\n        result.append(centered_layer)\n\n    return '\\n'.join(result)\n"}
{"task_id": "EvoEval/93", "completion": "\n    result = []\n    n_length = len(n_values)\n\n    for i, char in enumerate(message):\n        if char.isalpha():\n            shift = n_values[i % n_length]\n            if char.islower():\n                new_char = chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n            result.append(new_char)\n        else:\n            result.append(char)\n\n    return ''.join(result)\n"}
{"task_id": "EvoEval/94", "completion": "\n    sorted_spells = []\n    for spell in strings:\n        words = spell.split()\n        words.sort(key=lambda x: (len(x), strings.index(spell)))\n        sorted_spells.append(' '.join(words))\n    return sorted_spells\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    \n    primary_diagonal_sum = 0\n    secondary_diagonal_sum = 0\n    n = len(m)\n    \n    for i in range(n):\n        primary_diagonal_sum += m[i][i]\n        secondary_diagonal_sum += m[i][n - i - 1]\n    \n    return abs(primary_diagonal_sum - secondary_diagonal_sum)\n"}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    \n    for index, value in enumerate(lst):\n        if value % index == 0 and product_of_digits(value) == index:\n            magic_indices.append(index)\n    \n    return sorted(magic_indices)\n"}
{"task_id": "EvoEval/97", "completion": "\n    def alien_invasion(alien, humans):\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    \n    encounter = []\n    \n    for human, continent in humans.items():\n        if isinstance(human, str) and isinstance(continent, str):\n            encounter.append(human)\n    \n    return sorted(encounter)\n"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_value = sequence[i - 1] + sequence[i - 2] + (i + 1)\n        if is_prime(next_value):\n            sequence.append('prime')\n        else:\n            sequence.append(next_value)\n\n    return sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    current_position = 0\n\n    for round_time in rounds:\n        # Calculate the number of positions to move\n        move_steps = round_time * music\n        current_position = (current_position + move_steps - 1) % len(players)\n        \n        # Eliminate the player at the current position\n        players.pop(current_position)\n\n    return players\n"}
