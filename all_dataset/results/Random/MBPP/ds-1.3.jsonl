{"task_id": "MBPP/11", "completion": "\n    pos = s.find(ch)\n    if pos == -1:\n        return s\n    else:\n        return s[:pos] + s[pos+1:]\n"}
{"task_id": "MBPP/12", "completion": "\n    # get the number of rows and columns\n    rows, cols = len(M), len(M[0])\n\n    # create a list to store the sum of each row\n    row_sums = [sum(row) for row in M]\n\n    # create a list to store the index of each row\n    row_indices = list(range(rows))\n\n    # sort the list of row sums\n    row_indices.sort(key=row_sums.__getitem__)\n\n    # create a new sorted matrix\n    sorted_M = [[M[i][j] for j in range(cols)] for i in row_indices]\n\n    return sorted_M\n"}
{"task_id": "MBPP/13", "completion": "\n    # Count the frequency of each word\n    word_counts = Counter(words)\n\n    # Get the 10 most common words\n    most_common = word_counts.most_common(10)\n\n    return most_common\n"}
{"task_id": "MBPP/14", "completion": "\n    if l <= 0 or b <= 0 or h <= 0:\n        return \"Invalid input\"\n    else:\n        return l * b * h\n"}
{"task_id": "MBPP/15", "completion": "\n    return re.split('(?<=[a-z])(?=[A-Z])', text)\n\n\ntext = \"HelloWorld\""}
{"task_id": "MBPP/16", "completion": "\n    return re.sub(r'([A-Z])', r'_\\1', text).lower()\n"}
{"task_id": "MBPP/17", "completion": "\n    return 4 * a\n"}
{"task_id": "MBPP/18", "completion": "\n    return [char for char in string]\n"}
{"task_id": "MBPP/19", "completion": "\n    return len(arraynums) != len(set(arraynums))\n"}
{"task_id": "MBPP/20", "completion": "\n    if x == 1:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/21", "completion": "\n    i = 1\n    while i <= m:\n        yield n * i\n        i += 1\n\n"}
{"task_id": "MBPP/22", "completion": "\n    num_dict = {}\n    for i in nums:\n        if i in num_dict:\n            return i\n        num_dict[i] = 1\n    return None\n"}
{"task_id": "MBPP/23", "completion": "\n    return sum(list1)\n"}
{"task_id": "MBPP/24", "completion": "\n    binary = str(binary)\n    decimal, i, n = 0, 0, 0\n    while(binary != 0): \n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i) \n        binary = binary//10\n        i += 1\n    return decimal\n"}
{"task_id": "MBPP/25", "completion": "\n    product = 1\n    for i in range(n):\n        product *= arr[i]\n    return product\n"}
{"task_id": "MBPP/26", "completion": "\n    if len(test_list) < K:\n        return False\n    else:\n        return True\n"}
{"task_id": "MBPP/27", "completion": "\n    new_list = [re.sub(r'\\d', '', i) for i in list]\n    return new_list\n"}
{"task_id": "MBPP/28", "completion": "\n    if k>n or k<0:\n        return \"Invalid input\"\n    res = 1\n    for i in range(k):\n        res = res * (n-i)\n        res = res // (i+1)\n    return res\n"}
{"task_id": "MBPP/29", "completion": "\n    res = [0]*arr_size\n    for i in range(0, arr_size):\n        res[i] = arr[i]\n    for i in range(0, arr_size):\n        count = 1\n        for j in range(i+1, arr_size):\n            if(arr[i] == arr[j]):\n                count += 1\n            res[i] = max(count, res[i])\n    return res\n"}
{"task_id": "MBPP/30", "completion": "\n    def check_Equality(s):\n        if len(s) == 0:\n            return True\n        else:\n            return all(c == s[0] for c in s)\n\n    return check_Equality\n"}
{"task_id": "MBPP/31", "completion": "\n    if not nums or k <= 0:\n        return None\n\n    count_map = collections.Counter(nums)\n    queue = [(-count, num) for num, count in count_map.items()]\n    heapq.heapify(queue)\n\n    res = []\n    while queue and len(res) < k:\n        count, num = heapq.heappop(queue)\n        res.append(num)\n\n    return res\n\n"}
{"task_id": "MBPP/32", "completion": "\n    max_prime = -1\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n\n    if n > 2:\n        max_prime = n\n\n    return int(max_prime)\n\n"}
{"task_id": "MBPP/33", "completion": "\n    if N >= 1:\n        decimal_To_Binary(N // 2)\n        print(N % 2, end = '')\n"}
{"task_id": "MBPP/34", "completion": "\n    # Initialize the missing number\n    missing_number = -1\n\n    # Calculate the sum of the first N natural numbers\n    sum_N = N * (N + 1) // 2\n\n    # Calculate the sum of the given array\n    sum_ar = sum(ar)\n\n    # Find the missing number\n    missing_number = sum_N - sum_ar\n\n    return missing_number\n"}
{"task_id": "MBPP/35", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return n + find_rect_num(n - 1)\n\n"}
{"task_id": "MBPP/36", "completion": "\n\n        Helper function to find the digit at a given index in a number.\n        \"\"\"\n        for i in range(n):\n            if index == 0:\n                return int(str(n)[i])\n            else:\n                index -= 1\n\n    def find_Nth_digit_in_range(n1, n2, N):\n        \"\"\"\n        Helper function to find the Nth digit in a range of numbers.\n        \"\"\"\n        count = 0\n        for n in range(n1, n2 + 1):\n            count += str(n).count(str(N))\n        return count\n\n    if p > q:\n        p, q = q, p\n\n    if N == 0:\n        return -1\n\n    if p == 0:\n        return find_digit_at_index(q, N - 1)\n\n    if p == 1:\n        return find_digit_at_index(q, N)\n\n    if p > 1:\n        return find_digit_at_index(q, N + find_Nth_digit_in_range(p, q, N) - 1)\n\n    return -1\n\n"}
{"task_id": "MBPP/37", "completion": "\n    str_list = [i for i in mixed_list if isinstance(i, str)]\n    num_list = [i for i in mixed_list if isinstance(i, (int, float))]\n    return sorted(str_list) + sorted(num_list)\n\n"}
{"task_id": "MBPP/38", "completion": "\n    even_numbers = [num for num in list1 if num % 2 == 0]\n    odd_numbers = [num for num in list1 if num % 2 != 0]\n\n    return even_numbers, odd_numbers\n\n"}
{"task_id": "MBPP/39", "completion": "\n    # count the frequency of each character\n    count = Counter(S)\n\n    # sort the count in descending order\n    count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n\n    # check if it's possible to rearrange the string\n    if len(S) % 2:\n        # if the length of the string is odd, we can't rearrange\n        return \"Impossible\"\n\n    # if the length of the string is even\n    else:\n        # we can rearrange the string\n        return \"Possible\"\n\n"}
{"task_id": "MBPP/40", "completion": "\n    freq_dict = Counter(nums)\n    return freq_dict\n\n"}
{"task_id": "MBPP/41", "completion": "\n    return list(filter(lambda x: x % 2 == 0, nums))\n"}
{"task_id": "MBPP/42", "completion": "\n    # Initialize an empty set\n    s = set()\n\n    # Traverse through the array\n    for i in range(0, n):\n\n        # Calculate the sum of elements\n        sum = arr[i]\n\n        # Check if this sum is seen before\n        if (sum in s):\n            return True\n\n        # Add this sum to the set\n        s.add(sum)\n\n    # If no pair is found, return False\n    return False\n"}
{"task_id": "MBPP/43", "completion": "\n    pattern = re.compile(r'\\b\\w+_+\\w+\\b')\n    matches = pattern.findall(text)\n    return matches\n\ntext = \"This is a test_text. It is used to test_the_regex.\""}
{"task_id": "MBPP/44", "completion": "\n    word_list = re.findall(r'\\b\\w+\\b', text)\n    return word_list\n\ntext = \"Hello, this is a test string. This string is used for testing.\""}
{"task_id": "MBPP/45", "completion": "\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smaller+1):\n        if((x % i == 0) and (y % i == 0)):\n            gcd = i \n    return gcd\n"}
{"task_id": "MBPP/46", "completion": "\n    distinct_numbers = set(data)\n    return len(distinct_numbers) == len(data)\n"}
{"task_id": "MBPP/47", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    last_digit_A = A % 10\n    last_digit_B = B % 10\n\n    return factorial(last_digit_A) * factorial(last_digit_B)\n"}
{"task_id": "MBPP/48", "completion": "\n    return n ^ (n >> 1)\n"}
{"task_id": "MBPP/49", "completion": "\n    for i in range(N):\n        for j in range(N):\n            print(nums[i][j], end=\" \")\n        print()\n\n"}
{"task_id": "MBPP/50", "completion": "\n    return len(input_list)\n\n"}
{"task_id": "MBPP/51", "completion": "\n    if x == y == z:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/52", "completion": "\n    return b * h\n\n"}
{"task_id": "MBPP/53", "completion": "\n    if len(str) == 0:\n        return True\n    else:\n        return str[0] == str[1:len(str)]\n"}
{"task_id": "MBPP/54", "completion": "\n    # Find the maximum element in the list\n    max_val = max(my_list)\n\n    # Initialize the counting array\n    count_array = [0] * (max_val + 1)\n\n    # Count the occurrences of each element in the list\n    for num in my_list:\n        count_array[num] += 1\n\n    # Initialize the sorted list\n    sorted_list = []\n\n    # Add each element from the counting array to the sorted list\n    for i, count in enumerate(count_array):\n        sorted_list.extend([i] * count)\n\n    return sorted_list\n"}
{"task_id": "MBPP/55", "completion": "\n    return a * (1 - (1 / (1 + r))) ** n\n\n"}
{"task_id": "MBPP/56", "completion": "\n    return num == rev_ - 1\n\n"}
{"task_id": "MBPP/57", "completion": "\n    arr.sort()\n    max_num = 0\n    for i in range(n):\n        max_num = max(max_num, arr[i] + arr[n - i - 1])\n    return max_num\n\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)"}
{"task_id": "MBPP/58", "completion": "\n    if x * y < 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/59", "completion": "\n    octal = oct(n)\n    return octal == str(n)\n"}
{"task_id": "MBPP/60", "completion": "\n    if n == 1:\n        return arr\n    if n == 2:\n        return [arr[0], arr[1]]\n\n    # Initialize maximum length and ending index\n    max_len = 1\n    end_index = 0\n\n    # Initialize current length and ending index\n    cur_len = 1\n    cur_index = 0\n\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            cur_len += 1\n            if cur_len > max_len:\n                max_len = cur_len\n                end_index = i\n        else:\n            cur_len = 2\n            if arr[i] == arr[i-1]:\n                cur_index = i\n\n    return arr[cur_index-max_len+1:end_index+1]\n\n"}
{"task_id": "MBPP/61", "completion": "\n    # create a dictionary to store the count of substrings\n    count_dict = defaultdict(int)\n\n    # iterate over the string\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            # check if the substring is a valid number\n            if substring.isdigit():\n                # if yes, then count the substring\n                count_dict[substring] += 1\n\n    # return the count of substrings\n    return sum(count_dict.values())\n"}
{"task_id": "MBPP/62", "completion": "\n    return min(xs)\n"}
{"task_id": "MBPP/63", "completion": "\n    if len(test_list) < 2:\n        return \"List should have at least two elements\"\n\n    min_element = test_list[0]\n    max_difference = test_list[1] - test_list[0]\n\n    for i in range(1, len(test_list)):\n        if test_list[i] - min_element > max_difference:\n            max_difference = test_list[i] - min_element\n\n        if test_list[i] < min_element:\n            min_element = test_list[i]\n\n    return max_difference\n\n"}
{"task_id": "MBPP/64", "completion": "\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n\n"}
{"task_id": "MBPP/65", "completion": "\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"}
{"task_id": "MBPP/66", "completion": "\n    return len(list)\n"}
{"task_id": "MBPP/67", "completion": "\n    bell_number_list = [0, 1, 1]\n    for i in range(3, n+1):\n        bell_number_list.append(sum(bell_number_list[-2:]))\n    return bell_number_list[n]\n"}
{"task_id": "MBPP/68", "completion": "\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n"}
{"task_id": "MBPP/69", "completion": "\n    return s in l\n"}
{"task_id": "MBPP/70", "completion": "\n    if len(Input) != k:\n        return False\n    else:\n        return True\n"}
{"task_id": "MBPP/71", "completion": "\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.3))\n        swapped = False\n        for i in range(0, len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n\n"}
{"task_id": "MBPP/72", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return n - square(dif_Square(n - 1))\n\n"}
{"task_id": "MBPP/73", "completion": "\n    return re.split('[,;.?]+', text)\n\ntext = \"Hello, world. This is a test. How are you?\""}
{"task_id": "MBPP/74", "completion": "\n    for pattern in patterns:\n        if pattern not in colors:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/75", "completion": "\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] == test_list[j][0] and test_list[i][1] == test_list[j][1] and test_list[i][2] == test_list[j][2]:\n                result.append((test_list[i][0], test_list[i][1], test_list[i][2]))\n    return result\n\n"}
{"task_id": "MBPP/76", "completion": "\n    return m * n\n"}
{"task_id": "MBPP/77", "completion": "\n    even_sum = 0\n    odd_sum = 0\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    return even_sum, odd_sum\n\n"}
{"task_id": "MBPP/78", "completion": "\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n"}
{"task_id": "MBPP/79", "completion": "\n    return len(s)\n"}
{"task_id": "MBPP/80", "completion": "\n    if n < 1:\n        return \"Input should be a positive integer.\"\n    else:\n        return n*(n-3)//2\n"}
{"task_id": "MBPP/81", "completion": "\n    return list(zip(test_tup1, test_tup2))\n"}
{"task_id": "MBPP/82", "completion": "\n    return 4/3 * math.pi * r**3\n"}
{"task_id": "MBPP/83", "completion": "\n    result = \"\"\n    for i in strr:\n        result += i\n    return result\n\nstrr = \"Hello\""}
{"task_id": "MBPP/84", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n-1) + 2*sequence(n-2)\n\n"}
{"task_id": "MBPP/85", "completion": "\n    return 4 * math.pi * r**2\n"}
{"task_id": "MBPP/86", "completion": "\n    return (n * (2 * n - 1))\n\n"}
{"task_id": "MBPP/87", "completion": "\n    merged_dict = ct.deepcopy(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n"}
{"task_id": "MBPP/88", "completion": "\n    return collections.Counter(list1)\n\nlist1 = [1, 2, 3, 2, 1, 3, 2, 1, 1, 1, 2, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"}
{"task_id": "MBPP/89", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def find_closest(n):\n        lower = upper = n\n        while True:\n            lower -= 1\n            if is_prime(lower):\n                break\n        while True:\n            upper += 1\n            if is_prime(upper):\n                break\n        return lower, upper\n\n    return find_closest(N)\n\n"}
{"task_id": "MBPP/90", "completion": "\n    return max(list1, key=len)\n\nlist1 = [\"Python\", \"Programming\", \"Coding\"]"}
{"task_id": "MBPP/91", "completion": "\n    if str1.find(sub_str) != -1:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/92", "completion": "\n    if n % 2 == 0:\n        return False\n    else:\n        return True\n\n"}
{"task_id": "MBPP/93", "completion": "\n    return a ** b\n\n"}
{"task_id": "MBPP/94", "completion": "\n    return min(enumerate(test_list), key=itemgetter(1))[0]\n\ntest_list = [1, 2, 3, 4, 5]"}
{"task_id": "MBPP/95", "completion": "\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n"}
{"task_id": "MBPP/96", "completion": "\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\n\nn = int(input(\"Enter a number: \"))"}
{"task_id": "MBPP/97", "completion": "\n    frequency_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in frequency_dict:\n                frequency_dict[item] += 1\n            else:\n                frequency_dict[item] = 1\n    return frequency_dict\n"}
{"task_id": "MBPP/98", "completion": "\n    result = 1\n    for num in numbers:\n        result *= num\n    return result\n\n"}
{"task_id": "MBPP/99", "completion": "\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n\n"}
{"task_id": "MBPP/100", "completion": "\n    num_str = str(num)\n    if num_str == num_str[::-1]:\n        return int(num_str + num_str[::-1])\n    else:\n        return int(num_str + str(int(num_str) + 1))\n\n"}
{"task_id": "MBPP/101", "completion": "\n    if k > n:\n        return \"Invalid k\"\n    else:\n        return arr[k-1]\n"}
{"task_id": "MBPP/102", "completion": "\n    s1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    s2 = re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()\n    return s2\n"}
{"task_id": "MBPP/103", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return m\n    else:\n        return m - eulerian_num(n - 1, m)\n\n"}
{"task_id": "MBPP/104", "completion": "\n    return sorted(input_list, key=lambda x: x[0])\n\n"}
{"task_id": "MBPP/105", "completion": "\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/106", "completion": "\n    return test_list + list(test_tup)\n"}
{"task_id": "MBPP/107", "completion": "\n    count = 0\n    for i in range(L, R+1):\n        if 'x' in str(i):\n            count += 1\n    return count\n"}
{"task_id": "MBPP/108", "completion": "\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 and num2 and num3:\n        yield heapq.heappop(num1)\n        yield heapq.heappop(num2)\n        yield heapq.heappop(num3)\n\n    while num1:\n        yield heapq.heappop(num1)\n    while num2:\n        yield heapq.heappop(num2)\n    while num3:\n        yield heapq.heappop(num3)\n"}
{"task_id": "MBPP/109", "completion": "\n    # convert the string to binary\n    binary_str = ''.join(format(ord(c), '08b') for c in s)\n\n    # count the number of 1's in the binary string\n    count = binary_str.count('1')\n\n    # if the count is odd, add 1 to the end of the string\n    if count % 2 != 0:\n        binary_str += '1'\n\n    return binary_str\n"}
{"task_id": "MBPP/110", "completion": "\n    missing_list = []\n    for i in range(strt_val, stop_val):\n        if i not in test_list:\n            missing_list.append(i)\n    return missing_list\n"}
{"task_id": "MBPP/111", "completion": "\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            common_elements.append(nestedlist[i][j])\n    return common_elements\n\nnested_list = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]"}
{"task_id": "MBPP/112", "completion": "\n    radius = diameter / 2\n    length = 2 * 3.14159 * radius * height\n    perimeter = 2 * (3.14159 * radius + height)\n    return perimeter\n"}
{"task_id": "MBPP/113", "completion": "\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"}
{"task_id": "MBPP/114", "completion": "\n    freq_dict = {}\n    for tup in test_list:\n        for item in tup:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict\n"}
{"task_id": "MBPP/115", "completion": "\n    return all(not d for d in list1)\n"}
{"task_id": "MBPP/116", "completion": "\n    return int(''.join(map(str, nums)))\n\n"}
{"task_id": "MBPP/117", "completion": "\n    return [float(i) for i in test_list]\n"}
{"task_id": "MBPP/118", "completion": "\n    return string.split(\" \")\n\n"}
{"task_id": "MBPP/119", "completion": "\n    # code here\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == n:\n            return mid\n        elif arr[mid] < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n"}
{"task_id": "MBPP/120", "completion": "\n    list1.sort()\n    return (list1[-1], list1[-2])\n"}
{"task_id": "MBPP/121", "completion": "\n    for i in range(0, n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (A[i] + A[j] + A[k] == sum):\n                    count += 1\n                    print(\"Triplet is\", A[i], \", \", A[j], \", \", A[k], \"and sum is \", sum)\n    return count\n"}
{"task_id": "MBPP/122", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return n + smartNumber(n-1)\n"}
{"task_id": "MBPP/123", "completion": "\n    def d(n):\n        return sum(int(i) for i in str(n))\n\n    def is_amicable(n):\n        a = d(n)\n        b = d(a)\n        return a != n and d(b) == n\n\n    return sum(i for i in range(1, limit) if is_amicable(i))\n\n"}
{"task_id": "MBPP/124", "completion": "\n    return cmath.phase(a + b * 1j)\n"}
{"task_id": "MBPP/125", "completion": "\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for i in range(n):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_diff = max(max_diff, count_0 - count_1)\n    return max_diff\n\n"}
{"task_id": "MBPP/126", "completion": "\n    return a + b\n\n"}
{"task_id": "MBPP/127", "completion": "\n    return x * y\n\n"}
{"task_id": "MBPP/128", "completion": "\n    # Split the string into words\n    words = str.split()\n\n    # Initialize an empty list to store the long words\n    long_words = []\n\n    # Iterate over the words\n    for word in words:\n        # If the word's length is greater than or equal to n, add it to the long words list\n        if len(word) >= n:\n            long_words.append(word)\n\n    # Return the long words list\n    return long_words\n"}
{"task_id": "MBPP/129", "completion": "\n    # Check if the matrix is a square matrix\n    if not is_square(my_matrix):\n        return False\n\n    # Check if the matrix is a 3x3 matrix\n    if len(my_matrix) != 3 or len(my_matrix[0]) != 3:\n        return False\n\n    # Check if the matrix contains only integers\n    if not all(isinstance(i, int) for row in my_matrix for i in row):\n        return False\n\n    # Check if the matrix is a magic square\n    magic_constant = sum(my_matrix[0][0])\n    if not is_magic_square(my_matrix, magic_constant):\n        return False\n\n    return True\n\n"}
{"task_id": "MBPP/130", "completion": "\n    # Create a dictionary to store the count of each number\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n\n    # Find the maximum count\n    max_count = max(count_dict.values())\n\n    # Find the numbers with the maximum count\n    max_nums = [num for num, count in count_dict.items() if count == max_count]\n\n    return max_nums\n"}
{"task_id": "MBPP/131", "completion": "\n    vowels = \"aeiouAEIOU\"\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n    while i < j:\n        if str1[i] not in vowels:\n            i += 1\n        elif str1[j] not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return \"\".join(str1)\n\n"}
{"task_id": "MBPP/132", "completion": "\n    tup1 = tup1.split()\n    tup1 = tuple(tup1)\n    return tup1\n"}
{"task_id": "MBPP/133", "completion": "\n    return sum(num for num in nums if num < 0)\n\n"}
{"task_id": "MBPP/134", "completion": "\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            arr[i] = arr[i] + p\n        else:\n            arr[i] = arr[i] - p\n    return arr\n"}
{"task_id": "MBPP/135", "completion": "\n    return n*(2*5-3)//2\n"}
{"task_id": "MBPP/136", "completion": "\n    if units <= 50:\n        bill = units * 0.50\n    elif units <= 100:\n        bill = 25 + (units - 50) * 0.75\n    else:\n        bill = 100 * 0.75 + (units - 100) * 1.20\n    return bill\n"}
{"task_id": "MBPP/137", "completion": "\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)\n\nnums = array('i', [1, 0, 2, 0, 3, 0, 4, 0])"}
{"task_id": "MBPP/138", "completion": "\n    if n == 0:\n        return False\n    while n != 1:\n        if n % 2 != 0:\n            return False\n        n = n // 2\n    return True\n\n"}
{"task_id": "MBPP/139", "completion": "\n    return 2 * 3.14159 * r\n\n"}
{"task_id": "MBPP/140", "completion": "\n    result = []\n    for i in test_list:\n        if isinstance(i, tuple):\n            result.extend(i)\n        else:\n            result.append(i)\n    return result\n"}
{"task_id": "MBPP/141", "completion": "\n    for i in range(len(nums), 0, -1):\n        max_index = i\n        for j in range(1, i + 1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums[max_index], nums[i] = nums[i], nums[max_index]\n    return nums\n\n"}
{"task_id": "MBPP/142", "completion": "\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/143", "completion": "\n    return len(Input)\n"}
{"task_id": "MBPP/144", "completion": "\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = abs(arr[i] - arr[i+1])\n        min_diff = min(min_diff, diff)\n    return min_diff\n\narr = [1, 5, 3, 19, 18, 25]\nn = len(arr)"}
{"task_id": "MBPP/145", "completion": "\n    max_diff = arr[1] - arr[0]\n    min_element = arr[0]\n\n    for i in range(0, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n        elif arr[i] - min_element > max_diff:\n            max_diff = arr[i] - min_element\n\n    return max_diff\n"}
{"task_id": "MBPP/146", "completion": "\n    return ''.join(str(ord(c)) for c in str1)\n\n"}
{"task_id": "MBPP/147", "completion": "\n    for i in range(m-2, -1, -1):\n        for j in range(0, i+1):\n            tri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n    return tri[0][0]\n"}
{"task_id": "MBPP/148", "completion": "\n    if x < 0:\n        return -1\n    if x == 0:\n        return 0\n    sum = 0\n    while x:\n        sum += x % 10\n        x //= 10\n    return sum\n\n"}
{"task_id": "MBPP/149", "completion": "\n    dp = [1]*n\n    prev = [-1]*n\n    max_length = 1\n    max_index = 0\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] - arr[j] == 1 and dp[j] + 1 > dp[i]:\n                dp[i] = dp[j] + 1\n                prev[i] = j\n        if dp[i] > max_length:\n            max_length = dp[i]\n            max_index = i\n    return max_length\n\n"}
{"task_id": "MBPP/150", "completion": "\n    if b in a:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/151", "completion": "\n    if q == 0:\n        return p\n    else:\n        return gcd(q, p % q)\n\n"}
{"task_id": "MBPP/152", "completion": "\n    pass\n\n"}
{"task_id": "MBPP/153", "completion": "\n    x = ((-b) + (b**2 - 4*a*c)**0.5) / (2*a)\n    return x\n"}
{"task_id": "MBPP/154", "completion": "\n    result = []\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            if nums[i][j] == N:\n                result.append(nums[i][j])\n    return result\n\nnums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nN = 3"}
{"task_id": "MBPP/155", "completion": "\n    return n ^ 1\n\n"}
{"task_id": "MBPP/156", "completion": "\n    return tuple(int(i) for i in tuple_str)\n\n"}
{"task_id": "MBPP/157", "completion": "\n    return [(k, list(v)) for k, v in groupby(list1)]\n"}
{"task_id": "MBPP/158", "completion": "\n    # Initialize result\n    result = 0\n\n    # Sort the array\n    arr.sort()\n\n    # Traverse the array\n    for i in range(n):\n        # If current element is greater than k,\n        # then decrease all elements by k\n        if arr[i] > k:\n            result += arr[i] - k\n\n    return result\n"}
{"task_id": "MBPP/159", "completion": "\n    if (month == 12 or month == 1 or month == 2) or (month == 3 and days < 20):\n        print(\"Winter\")\n    elif (month == 3 or month == 4 or month == 5) or (month == 6 and days < 20):\n        print(\"Spring\")\n    elif (month == 6 or month == 7 or month == 8) or (month == 9 and days < 20):\n        print(\"Summer\")\n    elif (month == 9 or month == 10 or month == 11) or (month == 12 and days < 20):\n        print(\"Autumn\")\n    else:\n        print(\"Invalid month and/or day\")\n\n"}
{"task_id": "MBPP/160", "completion": "\n    return (n - b) // a\n"}
{"task_id": "MBPP/161", "completion": "\n    return [i for i in list1 if i not in list2]\n\n"}
{"task_id": "MBPP/162", "completion": "\n    if n <= 0:\n        return 0\n    else:\n        return n + sum_series(n-24)\n\n"}
{"task_id": "MBPP/163", "completion": "\n    if not isinstance(s, (int, float)) or not isinstance(l, (int, float)):\n        return \"Error: Both sides and length must be numbers\"\n    if s <= 0 or l <= 0:\n        return \"Error: Both sides and length must be greater than zero\"\n    return (s * l) / (4 * tan(pi / s))\n"}
{"task_id": "MBPP/164", "completion": "\n    sum1 = 0\n    sum2 = 0\n    for i in range(1, n+1):\n        sum1 += i\n        sum2 += i**2\n    return sum1, sum2\n\nn = int(input(\"Enter a number: \"))\nsum1, sum2 = divSum(n)"}
{"task_id": "MBPP/165", "completion": "\n    count_dict = {}\n    for char in str1:\n        if char.isalpha():\n            if char in count_dict:\n                count_dict[char] += 1\n            else:\n                count_dict[char] = 1\n    return count_dict\n\n"}
{"task_id": "MBPP/166", "completion": "\n    count = 0\n    for i in range(0, N):\n        for j in range(i + 1, N):\n            if (A[i] + A[j]) % 2 == 0:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/167", "completion": "\n    i = 1\n    while i < n:\n        i *= 2\n    return i\n\n"}
{"task_id": "MBPP/168", "completion": "\n    return a.count(x)\n\n"}
{"task_id": "MBPP/169", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        pell_numbers = [0, 1]\n        for i in range(2, n+1):\n            pell_numbers.append(2*pell_numbers[i-1] + pell_numbers[i-2])\n        return pell_numbers[n]\n"}
{"task_id": "MBPP/170", "completion": "\n    return sum(list1[m:n+1])\n"}
{"task_id": "MBPP/171", "completion": "\n    return 5 * a\n"}
{"task_id": "MBPP/172", "completion": "\n    count_dict = {}\n    for char in s:\n        if char in count_dict:\n            count_dict[char] += 1\n        else:\n            count_dict[char] = 1\n    return count_dict\n\n"}
{"task_id": "MBPP/173", "completion": "\n    return re.sub(r'[^A-Za-z0-9]+', '', text)\n"}
{"task_id": "MBPP/174", "completion": "\n    return {k: [v for v in l if v == k] for k in l}\n\n"}
{"task_id": "MBPP/175", "completion": "\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n\n    for char in str1:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []\n\n"}
{"task_id": "MBPP/176", "completion": "\n    return a + b + c\n\n"}
{"task_id": "MBPP/177", "completion": "\n    def gcd(a, b):\n        if a == 0:\n            return b\n        return gcd(b % a, a)\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    lcm_val = L\n    for i in range(L + 1, R + 1):\n        lcm_val = lcm(lcm_val, i)\n\n    return lcm_val\n"}
{"task_id": "MBPP/178", "completion": "\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return True\n    return False\n"}
{"task_id": "MBPP/179", "completion": "\n    if isinstance(x, (int, float)):\n        return True\n    return False\n\n"}
{"task_id": "MBPP/180", "completion": "\n    slat, slon, elat, elon = map(radians, [slat, slon, elat, elon])\n    dlat, dlon = elat - slat, elon - slon\n\n    a = sin(dlat/2)**2 + cos(slat) * cos(elat) * sin(dlon/2)**2\n    c = 2 * acos(a)\n    miles =  3959 * c\n    return miles\n"}
{"task_id": "MBPP/181", "completion": "\n    if not str1 or not str2:\n        return \"\"\n\n    min_len = min(len(str1), len(str2))\n\n    for i in range(min_len):\n        if str1[i] != str2[i]:\n            return str1[:i]\n\n    return str1\n\n"}
{"task_id": "MBPP/182", "completion": "\n    pattern = re.compile(r'[A-Z]')\n    return pattern.findall(string)\n"}
{"task_id": "MBPP/183", "completion": "\n    count = 0\n    arr.sort()\n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            if (arr[j] - arr[i] == k):\n                count += 1\n    return count\n"}
{"task_id": "MBPP/184", "completion": "\n    return [i for i in list if i > num]\n"}
{"task_id": "MBPP/185", "completion": "\n    # calculate the discriminant\n    d = (b**2) - (4*a*c)\n\n    # calculate the two solutions\n    sol1 = (-b - math.sqrt(d)) / (2*a)\n    sol2 = (-b + math.sqrt(d)) / (2*a)\n\n    return sol1, sol2\n"}
{"task_id": "MBPP/186", "completion": "\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return True\n    return False\n"}
{"task_id": "MBPP/187", "completion": "\n    dp = [[0]*(n+1) for _ in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    return dp[m][n]\n"}
{"task_id": "MBPP/188", "completion": "\n    if n < 0:\n        return False\n    elif n == 0 or n == 1:\n        return True\n    else:\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                if (n//i) == i:\n                    return True\n                else:\n                    return False\n        return False\n"}
{"task_id": "MBPP/189", "completion": "\n    def segregate(arr, n):\n        j = 0\n        for i in range(n):\n            if arr[i] <= 0 or arr[i] > n:\n                arr[i] = 1\n            else:\n                arr[j] = arr[i]\n                j += 1\n        return j\n\n    def get_positive(arr, n):\n        for i in range(n):\n            if abs(arr[i]) - 1 < n and arr[abs(arr[i]) - 1] > 0:\n                arr[abs(arr[i]) - 1] = -arr[abs(arr[i]) - 1]\n        for i in range(n):\n            if arr[i] > 0:\n                return i + 1\n        return n + 1\n\n    n = segregate(arr, n)\n    missing_number = get_positive(arr, n)\n    return missing_number\n\n\narr = [0, 10, 2, -10, -20]\nn = len(arr)"}
{"task_id": "MBPP/190", "completion": "\n    # Check if the points are inside the square\n    if x1 <= x2 and y1 <= y2:\n        return 1\n    else:\n        return 0\n"}
{"task_id": "MBPP/191", "completion": "\n    if monthname3.lower() in [\"january\", \"march\", \"may\", \"july\", \"august\", \"october\", \"december\"]:\n        return \"This is a 30-day month.\"\n    elif monthname3.lower() in [\"april\", \"june\", \"september\", \"november\"]:\n        return \"This is a 31-day month.\"\n    elif monthname3.lower() == \"february\":\n        return \"This is a 28-day or 29-day month.\"\n    else:\n        return \"Invalid month name.\"\n"}
{"task_id": "MBPP/192", "completion": "\n    if any(char.isalpha() for char in str):\n        if any(char.isdigit() for char in str):\n            return True\n    return False\n\n"}
{"task_id": "MBPP/193", "completion": "\n    return tuple(sorted(set(test_tup), key=test_tup.index))\n\n"}
{"task_id": "MBPP/194", "completion": "\n    return int(str(n), 8)\n\n"}
{"task_id": "MBPP/195", "completion": "\n    for i in range(0, n):\n        if (arr[i] == x):\n            return i\n    return -1\n"}
{"task_id": "MBPP/196", "completion": "\n    return [i for i in test_list if len(i) != K]\n\n"}
{"task_id": "MBPP/197", "completion": "\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i]**test_tup2[i])\n    return tuple(result)\n"}
{"task_id": "MBPP/198", "completion": "\n    # calculate the hypotenuse of the triangle\n    hypotenuse = math.sqrt(a**2 + b**2)\n\n    # calculate the angle of the triangle\n    angle = math.degrees(math.atan(b/a))\n\n    return hypotenuse, angle\n"}
{"task_id": "MBPP/199", "completion": "\n    i = 0\n    while n & (1 << i) != n:\n        i += 1\n    return 1 << i\n"}
{"task_id": "MBPP/200", "completion": "\n    max_val = max(list1)\n    return [i for i, x in enumerate(list1) if x == max_val]\n\n"}
{"task_id": "MBPP/201", "completion": "\n    if len(lst) == 0:\n        return True\n    else:\n        return lst[0] != lst[1:]\n"}
{"task_id": "MBPP/202", "completion": "\n    return ''.join([i for i in str1 if int(i) % 2 != 0])\n\n"}
{"task_id": "MBPP/203", "completion": "\n    x1 = bin(n1)[2:]\n    x2 = bin(n2)[2:]\n\n    return sum(el1 != el2 for el1, el2 in zip(x1, x2))\n"}
{"task_id": "MBPP/204", "completion": "\n    return s.count(c)\n"}
{"task_id": "MBPP/205", "completion": "\n    return [i[::-1] for i in test_tup]\n"}
{"task_id": "MBPP/206", "completion": "\n    return ''.join(test_tup)\n"}
{"task_id": "MBPP/207", "completion": "\n    n = len(str)\n    dp = [[0]*n for _ in range(n)]\n    max_length = 0\n    for i in range(n):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n                max_length = max(max_length, dp[i][j])\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return max_length\n\n"}
{"task_id": "MBPP/208", "completion": "\n    pattern = re.compile(r'^-?\\d+\\.\\d+$')\n    if pattern.match(num):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/209", "completion": "\n    heap[0] = a\n    hq.heapify(heap)\n"}
{"task_id": "MBPP/210", "completion": "\n    pattern = re.compile(r'^[a-zA-Z0-9]*$')\n    if pattern.fullmatch(string):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/211", "completion": "\n    return bin(n).count('1')\n"}
{"task_id": "MBPP/212", "completion": "\n    return sum([math.pow(i, 4) for i in range(1, n+1)])\n"}
{"task_id": "MBPP/213", "completion": "\n    return test_tup1 + test_tup2\n"}
{"task_id": "MBPP/214", "completion": "\n    return radian * (180 / math.pi)\n"}
{"task_id": "MBPP/215", "completion": "\n    return [i[::-1] for i in alist]\n"}
{"task_id": "MBPP/216", "completion": "\n    return set(list1).issubset(set(list2))\n"}
{"task_id": "MBPP/217", "completion": "\n    char_dict = {}\n    for i in range(len(str)):\n        if str[i] in char_dict:\n            return str[i]\n        else:\n            char_dict[str[i]] = 1\n    return None\n"}
{"task_id": "MBPP/218", "completion": "\n    # check if the numbers are not equal\n    if A != B:\n        # if A is greater than B, then we can subtract B from A\n        if A > B:\n            return A - B\n        else:\n            # if B is greater than A, then we can subtract A from B\n            return B - A\n    else:\n        # if A and B are equal, then we can't perform any operation\n        return 0\n"}
{"task_id": "MBPP/219", "completion": "\n    if K > len(test_tup):\n        return \"K is greater than the length of the tuple\"\n    else:\n        return test_tup[:K], test_tup[-K:]\n"}
{"task_id": "MBPP/220", "completion": "\n    # replace spaces, commas, or with a colon\n    text = re.sub(r'[ ,:]', ':', text)\n\n    # find the maximum occurrence of the colon\n    max_occurrence = max(text.count(c) for c in \":\")\n\n    # replace the maximum occurrence of the colon with n\n    text = text.replace(\":\", n * max_occurrence)\n\n    return text\n"}
{"task_id": "MBPP/221", "completion": "\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n\n"}
{"task_id": "MBPP/222", "completion": "\n    first_element_type = type(test_tuple[0])\n    return all(isinstance(x, first_element_type) for x in test_tuple)\n"}
{"task_id": "MBPP/223", "completion": "\n    count = 0\n    for i in range(0, n):\n        if (arr[i] == x):\n            count += 1\n    if (count > n / 2):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/224", "completion": "\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n"}
{"task_id": "MBPP/225", "completion": "\n    if high < low:\n        return -1\n    if high == low:\n        return arr[low]\n\n    mid = (low + high) // 2\n\n    if mid < high and arr[mid + 1] < arr[mid]:\n        return arr[mid + 1]\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid - 1)\n    return find_Min(arr, mid + 1, high)\n\n"}
{"task_id": "MBPP/226", "completion": "\n    return ''.join([i for i in str if int(i) % 2 != 0])\n\n"}
{"task_id": "MBPP/227", "completion": "\n    return min(a, b, c)\n"}
{"task_id": "MBPP/228", "completion": "\n    for i in range(l, r+1):\n        if bin(i).count('1') == len(bin(i)):\n            return True\n    return False\n"}
{"task_id": "MBPP/229", "completion": "\n    positive_nums = [num for num in arr if num > 0]\n    negative_nums = [num for num in arr if num < 0]\n    positive_nums.sort()\n    negative_nums.sort()\n    result = []\n    for i in range(n):\n        if i < len(negative_nums):\n            result.append(negative_nums[i])\n        if i < len(positive_nums):\n            result.append(positive_nums[i])\n    return result\n\n"}
{"task_id": "MBPP/230", "completion": "\n    return str1.replace(\" \", char)\n\n"}
{"task_id": "MBPP/231", "completion": "\n    dp = [0] * n\n    dp[0] = tri[0]\n    dp[1] = max(tri[0], tri[1])\n\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] + tri[i])\n\n    return dp[n-1]\n"}
{"task_id": "MBPP/232", "completion": "\n    return heapq.nlargest(n, list1)\n\nlist1 = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]\nn = 4"}
{"task_id": "MBPP/233", "completion": "\n    import math\n    pi = math.pi\n    lateral_surface_area = 2 * pi * r * h\n    return lateral_surface_area\n\n"}
{"task_id": "MBPP/234", "completion": "\n    return l ** 3\n\n"}
{"task_id": "MBPP/235", "completion": "\n    binary = bin(n)[2:]\n    count = 0\n    for bit in binary:\n        if bit == '1':\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/236", "completion": "\n    # base case\n    if N == 0 or N == 1:\n        return 0\n\n    # if N is even\n    if N % 2 == 0:\n        return N // 2 * K\n\n    # if N is odd\n    else:\n        return (N // 2) * K\n"}
{"task_id": "MBPP/237", "completion": "\n    # Create a Counter object\n    counter = Counter(test_list)\n\n    # Print the occurrences\n    for key, value in counter.items():\n        print(f\"{key}: {value}\")\n"}
{"task_id": "MBPP/238", "completion": "\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count\n"}
{"task_id": "MBPP/239", "completion": "\n    sequences = []\n    for i in range(1, n):\n        sequence = [i]\n        while i * 2 < n:\n            i *= 2\n            sequence.append(i)\n        sequences.append(sequence)\n    return sequences\n\n"}
{"task_id": "MBPP/240", "completion": "\n    for i in range(len(list1)):\n        list1[i] = list2[i]\n    return list1\n"}
{"task_id": "MBPP/241", "completion": "\n    return [['*' for _ in range(n)] for _ in range(m)]\n\n"}
{"task_id": "MBPP/242", "completion": "\n    return len(str1)\n\nstr1 = \"Hello, World!\""}
{"task_id": "MBPP/243", "completion": "\n    from collections import Counter\n    count = Counter(lst)\n    lst.sort(key=lambda x: count[x])\n    return lst\n\n"}
{"task_id": "MBPP/244", "completion": "\n    root = math.sqrt(N)\n    if int(root + 0.5) ** 2 == N:\n        return int(root + 1) ** 2\n    else:\n        return -1\n"}
{"task_id": "MBPP/245", "completion": "\n    dp = [0]*n\n    dp[0] = arr[0]\n    for i in range(1, n):\n        dp[i] = max(arr[i], dp[i-1]+arr[i])\n    return max(dp)\n\narr = [1, 2, 3, 4]\nn = len(arr)"}
{"task_id": "MBPP/246", "completion": "\n    return number ** 0.5\n\n"}
{"task_id": "MBPP/247", "completion": "\n    n = len(str)\n    lps = [0]*n\n    j = 0\n    i = 1\n    while i < n:\n        if str[i] == str[j]:\n            lps[i] = j+1\n            j += 1\n            i += 1\n        elif j != 0:\n            j = lps[j-1]\n        else:\n            lps[i] = 0\n            i += 1\n    return lps\n"}
{"task_id": "MBPP/248", "completion": "\n    if n <= 0:\n        return 0\n    else:\n        return 1/n + harmonic_sum(n-1)\n"}
{"task_id": "MBPP/249", "completion": "\n    return list(filter(lambda x: x in array_nums1, array_nums2))\n\n"}
{"task_id": "MBPP/250", "completion": "\n    return tup.count(x)\n"}
{"task_id": "MBPP/251", "completion": "\n    list.insert(0, element)\n    return list\n"}
{"task_id": "MBPP/252", "completion": "\n    result = []\n    for number in numbers:\n        r, theta = cmath.polar(number)\n        result.append((r, theta))\n    return result\n\nnumbers = [1+1j, 2+3j, 3+4j]"}
{"task_id": "MBPP/253", "completion": "\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n\nlist1 = [1, 2, 3, 4, 5, '6', '7', 'eight', 9.0, 10]"}
{"task_id": "MBPP/254", "completion": "\n    return re.findall(r'\\b[aA]\\w*', text)\n\ntext = \"Aardvark is a real animal\""}
{"task_id": "MBPP/255", "completion": "\n    return list(combinations_with_replacement(l, n))\n\nl = ['red', 'blue', 'green', 'yellow', 'orange', 'purple']\nn = 3\n"}
{"task_id": "MBPP/256", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/257", "completion": "\n    print(\"Before swapping: a =\", a, \"and b =\", b)\n    a, b = b, a\n    print(\"After swapping: a =\", a, \"and b =\", b)\n"}
{"task_id": "MBPP/258", "completion": "\n    return len(list(filter(lambda x: x % 2 != 0, array_nums)))\n"}
{"task_id": "MBPP/259", "completion": "\n    return (max(test_tup1), max(test_tup2))\n"}
{"task_id": "MBPP/260", "completion": "\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    elif n == 0:\n        return 2\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        primes = [2, 3]\n        for i in range(4, n + 1):\n            if all(i % p != 0 for p in primes):\n                primes.append(i)\n        return primes[n - 1]\n\n"}
{"task_id": "MBPP/261", "completion": "\n    if len(test_tup1) != len(test_tup2):\n        return \"Tuples are not of equal length\"\n    else:\n        return tuple(x/y for x, y in zip(test_tup1, test_tup2))\n"}
{"task_id": "MBPP/262", "completion": "\n    return list1[:L], list1[L:]\n\n"}
{"task_id": "MBPP/263", "completion": "\n    return {**d1, **d2}\n"}
{"task_id": "MBPP/264", "completion": "\n    if h_age <= 0:\n        return \"Age can't be zero or negative\"\n    elif h_age == 1:\n        return 10.5\n    else:\n        return 20.5 + (h_age - 1) * 5\n\n"}
{"task_id": "MBPP/265", "completion": "\n    if step <= 0:\n        return \"Step should be greater than 0\"\n    elif S == \"\":\n        return []\n    else:\n        return [S[i:i+step] for i in range(0, len(S), step)]\n"}
{"task_id": "MBPP/266", "completion": "\n    return 6 * l ** 2\n\n"}
{"task_id": "MBPP/267", "completion": "\n    sum_of_squares = 0\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            sum_of_squares += i**2\n    return sum_of_squares\n\nn = int(input(\"Enter a number: \"))"}
{"task_id": "MBPP/268", "completion": "\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 0\n    else:\n        return n + find_star_num(n-1)\n"}
{"task_id": "MBPP/269", "completion": "\n    return ord(k)\n\n"}
{"task_id": "MBPP/270", "completion": "\n    sum_even = 0\n    for i in range(0, n, 2):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n        elif i % 2 == 0:\n            sum_even += arr[i]\n    return sum_even\n"}
{"task_id": "MBPP/271", "completion": "\n    sum_power = 0\n    for i in range(2, n+1, 2):\n        sum_power += i**2\n    return sum_power\n\nn = int(input(\"Enter a number: \"))"}
{"task_id": "MBPP/272", "completion": "\n    return test_list[-1]\n"}
{"task_id": "MBPP/273", "completion": "\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\n"}
{"task_id": "MBPP/274", "completion": "\n    sum_val = 0\n    for i in range(0, n+1, 2):\n        sum_val += math.comb(n, i)\n    return sum_val\n"}
{"task_id": "MBPP/275", "completion": "\n    return mt.floor(a/n)%m\n"}
{"task_id": "MBPP/276", "completion": "\n    import math\n    return math.pi * r**2 * h\n\n"}
{"task_id": "MBPP/277", "completion": "\n    return {k: v for k, v in dict.items() if v >= n}\n"}
{"task_id": "MBPP/278", "completion": "\n    return len(test_tup)\n\ntest_tup = ('a', 'b', 'c', 'd', 'e')"}
{"task_id": "MBPP/279", "completion": "\n    dec_num = n / 10\n    if dec_num.is_integer():\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/280", "completion": "\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return i\n    return None\n"}
{"task_id": "MBPP/281", "completion": "\n    return len(test_list) == len(set(test_list))\n\n"}
{"task_id": "MBPP/282", "completion": "\n    return [lambda x: x - y(nums2) for x in nums1 for y in nums2]\n\n\nnums1 = [1, 2, 3, 4]\nnums2 = [10, 20, 30, 40]\n"}
{"task_id": "MBPP/283", "completion": "\n    if n < 0:\n        return False\n    str_n = str(n)\n    for i in range(10):\n        if str_n.count(str(i)) != n.count(i):\n            return False\n    return True\n\n"}
{"task_id": "MBPP/284", "completion": "\n    return all(i == element for i in list)\n\n"}
{"task_id": "MBPP/285", "completion": "\n    pattern = r'b{2,3}$'\n    if re.search(pattern, text):\n        return True\n    return False\n"}
{"task_id": "MBPP/286", "completion": "\n    # Initialize result\n    max_sum = -1\n\n    # Initialize hashmap\n    hashmap = {}\n\n    # Initialize current sum\n    curr_sum = 0\n\n    # Traverse the array\n    for i in range(n):\n\n        # Add current element to current sum\n        curr_sum += a[i]\n\n        # If current sum is equal to k, then update max_sum\n        if curr_sum == k:\n            max_sum = max(max_sum, curr_sum)\n\n        # If current sum is less than k, then update max_sum\n        if curr_sum < k:\n            max_sum = max(max_sum, curr_sum)\n\n        # If current sum is 0, then update max_sum\n        if curr_sum == 0:\n            max_sum = max(max_sum, curr_sum)\n\n        # If current sum is present in hashmap, then update max_sum\n        if curr_sum in hashmap:\n            max_sum = max(max_sum, curr_sum - hashmap[curr_sum] + k)\n\n        # Add current sum to hashmap\n        hashmap[curr_sum] = i\n\n    # Return max_sum\n    return max_sum\n"}
{"task_id": "MBPP/287", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i\n    return sum\n"}
{"task_id": "MBPP/288", "completion": "\n    count = [0]*N\n    for i in range(N):\n        count[arr[i] % P] += 1\n\n    for i in range(1, P):\n        count[i] += count[i-1]\n\n    result = [0]*N\n    for i in range(N-1, -1, -1):\n        result[count[arr[i] % P] - 1] = arr[i]\n        count[arr[i] % P] -= 1\n\n    return result\n\n"}
{"task_id": "MBPP/289", "completion": "\n    if N % 4 == 0:\n        if N % 100 == 0:\n            if N % 400 == 0:\n                return 1\n            else:\n                return 0\n        else:\n            return 1\n    else:\n        return 0\n"}
{"task_id": "MBPP/290", "completion": "\n    max_length = 0\n    max_list = []\n    for l in list1:\n        if len(l) > max_length:\n            max_length = len(l)\n            max_list = l\n    return max_list\n"}
{"task_id": "MBPP/291", "completion": "\n    dp = [[0]*k for _ in range(n+1)]\n    same = [[0]*k for _ in range(n+1)]\n    same[0][0] = same[1][1] = 1\n    dp[0][0] = dp[1][0] = dp[1][1] = 1\n    for i in range(2, n+1):\n        for j in range(k):\n            same[i][j] = (same[i-1][(j+1)%k] + same[i-1][(j-1)%k])%1000000007\n            dp[i][j] = (dp[i-1][(j+1)%k] + dp[i-1][(j-1)%k] + same[i-1][j])%1000000007\n    return dp[n][0]\n\nn = int(input())\nk = int(input())"}
{"task_id": "MBPP/292", "completion": "\n    if n > m:\n        return n\n    else:\n        return m\n"}
{"task_id": "MBPP/293", "completion": "\n    return math.sqrt(w**2 + h**2)\n"}
{"task_id": "MBPP/294", "completion": "\n    return max(listval)\n"}
{"task_id": "MBPP/295", "completion": "\n    sum_div = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div\n\n"}
{"task_id": "MBPP/296", "completion": "\n    count = 0\n    for i in range(n):\n        if arr[i] < 0:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/297", "completion": "\n    result = []\n    for i in list1:\n        if isinstance(i, list):\n            result.extend(flatten_list(i))\n        else:\n            result.append(i)\n    return result\n"}
{"task_id": "MBPP/298", "completion": "\n    return [i for i in l1 if i in l2]\n"}
{"task_id": "MBPP/299", "completion": "\n    # create a dictionary to store the aggregate values\n    aggregate_values = defaultdict(int)\n\n    # iterate over the list of tuples\n    for tup in stdata:\n        # get the aggregate value for the current tuple\n        aggregate_value = sum(tup)\n\n        # add the aggregate value to the dictionary\n        aggregate_values[tup] = aggregate_value\n\n    # get the maximum aggregate value\n    max_aggregate_value = max(aggregate_values.values())\n\n    # get the tuple with the maximum aggregate value\n    max_aggregate_tuple = [k for k, v in aggregate_values.items() if v == max_aggregate_value]\n\n    return max_aggregate_tuple\n"}
{"task_id": "MBPP/300", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return 2 ** n + count_binary_seq(n - 1)\n\n"}
{"task_id": "MBPP/301", "completion": "\n    if isinstance(d, dict):\n        return 1 + (max(d.values(), key=dict_depth) if d else 0)\n    else:\n        return 0\n"}
{"task_id": "MBPP/302", "completion": "\n    i = 0\n    while ((n & (1 << i)) == 0):\n        i += 1\n    return i\n\n"}
{"task_id": "MBPP/303", "completion": "\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] > a[j]:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/304", "completion": "\n    # Your code here\n    n = len(arr)\n    rotations = rotations % n\n    index = index % n\n    return (ranges[rotations] + index) % n\n"}
{"task_id": "MBPP/305", "completion": "\n    return [word for word in words if word.startswith('p')]\n"}
{"task_id": "MBPP/306", "completion": "\n    if n == 0 or k == 0:\n        return 0\n\n    dp = [[0 for _ in range(n)] for _ in range(k+1)]\n    prev = [[0 for _ in range(n)] for _ in range(k+1)]\n\n    for i in range(n):\n        dp[0][i] = a[i]\n        prev[0][i] = -1\n\n    for i in range(1, k+1):\n        for j in range(i, n):\n            max_sum = dp[i-1][j-1]\n            for l in range(j-1, i-1, -1):\n                if a[l] < a[j]:\n                    if max_sum < dp[i-1][l] + a[j]:\n                        max_sum = dp[i-1][l] + a[j]\n                        prev[i][j] = l\n            dp[i][j] = max_sum\n\n    sum_max = 0\n    index_max = -1\n    for i in range(k+1):\n        if sum_max < dp[i][n-1]:\n            sum_max = dp[i][n-1]\n            index_max = i\n\n    result = []\n    i = index_max\n    while i >= 0:\n        result.append(a[i])\n        i = prev[i][i]\n    return result[::-1]\n\n\na = [1, 10, 2, 9, 3]\nn = len(a)\nk = 3\nindex = 1"}
{"task_id": "MBPP/307", "completion": "\n    return tuplex[:m] + tuplex[m:n] + tuplex[n:]\n"}
{"task_id": "MBPP/308", "completion": "\n    def get_product(nums, N):\n        product = 1\n        for i in range(N):\n            product *= nums[i]\n        return product\n\n    def get_combinations(nums, N):\n        combinations = []\n        for i in range(N):\n            for j in range(i + 1, N):\n                combinations.append((nums[i], nums[j]))\n        return combinations\n\n    product1 = get_product(nums1, N)\n    product2 = get_product(nums2, N)\n\n    combinations = get_combinations(nums1, N)\n    combinations.extend(get_combinations(nums2, N))\n\n    count = 0\n    for combination in combinations:\n        if combination[0] * combination[1] == product1 * product2:\n            count += 1\n\n    return count\n\n\nnums1 = [1, 2, 3, 4, 5]\nnums2 = [6, 7, 8, 9, 10]\nN = 5"}
{"task_id": "MBPP/309", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "MBPP/310", "completion": "\n    return tuple(str1)\n"}
{"task_id": "MBPP/311", "completion": "\n    if n & (n + 1) == 0:\n        return n + 1\n    else:\n        return n & (n + 1)\n"}
{"task_id": "MBPP/312", "completion": "\n    return (1/3) * math.pi * r**2 * h\n\nr = float(input(\"Enter the radius of the cone: \"))\nh = float(input(\"Enter the height of the cone: \"))\n"}
{"task_id": "MBPP/313", "completion": "\n    for i in list1:\n        if i > 0:\n            print(i)\n"}
{"task_id": "MBPP/314", "completion": "\n    if not grid or n == 0:\n        return 0\n\n    rows, cols = len(grid), len(grid[0])\n    prefix_sum = [[0] * (cols + 1) for _ in range(rows)]\n    max_sum = float('-inf')\n\n    for row in range(rows):\n        for col in range(cols):\n            prefix_sum[row][col + 1] = prefix_sum[row][col] + grid[row][col]\n\n    for row in range(rows):\n        for col in range(cols - n + 1):\n            curr_sum = prefix_sum[row][col + n] - prefix_sum[row][col]\n            max_sum = max(max_sum, curr_sum)\n\n    return max_sum\n\n"}
{"task_id": "MBPP/315", "completion": "\n    words = str.split()\n    even_words = [word for word in words if len(word) % 2 == 0]\n    if not even_words:\n        return \"No even length word\"\n    return max(even_words, key=len)\n\n\nstr = \"Write function to the first maximum length of word\""}
{"task_id": "MBPP/316", "completion": "\n    n = len(A)\n    start, end = 0, n - 1\n    result = -1\n    while start <= end:\n        mid = (start + end) // 2\n        if A[mid] == x:\n            result = mid\n            start = mid + 1\n        elif A[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return result\n"}
{"task_id": "MBPP/317", "completion": "\n    return [(k, len(list(g))) for k, g in groupby(alist)]\n"}
{"task_id": "MBPP/318", "completion": "\n    s = s.split(' ')\n    s = [int(i) for i in s]\n    s.sort()\n    a, b, c = s[0], s[1], s[2]\n    return a * b * c\n\n"}
{"task_id": "MBPP/319", "completion": "\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) == 5]\n    return long_words\n\ntext = \"This is a test. Testing 12345 testing.\""}
{"task_id": "MBPP/320", "completion": "\n    sum_n = n * (n + 1) // 2\n    sum_sq_n = n * (n + 1) * (2*n + 1) // 6\n    return sum_n, sum_sq_n, sum_n - sum_sq_n\n\nn = int(input(\"Enter a number: \"))\nresult = sum_difference(n)"}
{"task_id": "MBPP/321", "completion": "\n    return s.count('lo')\n\n"}
{"task_id": "MBPP/322", "completion": "\n    min_val = min(list1)\n    return [i for i, x in enumerate(list1) if x == min_val]\n"}
{"task_id": "MBPP/323", "completion": "\n    temp = arr[n]\n    for i in range(n, cur, -1):\n        arr[i] = arr[i - 1]\n    arr[cur] = temp\n    out_of_place[0] = n\n    return arr\n\n"}
{"task_id": "MBPP/324", "completion": "\n    return sum(test_tuple)\n\n"}
{"task_id": "MBPP/325", "completion": "\n    if n < 0:\n        return \"Invalid input\"\n    if n == 0 or n == 1:\n        return 0\n    dp = [0]*(n+1)\n    dp[0] = dp[1] = 0\n\n    for i in range(2, n+1):\n        min_sq = float('inf')\n        for j in range(1, int(i**0.5)+1):\n            min_sq = min(min_sq, dp[i-j*j])\n        dp[i] = min_sq + 1\n\n    return dp[n]\n"}
{"task_id": "MBPP/326", "completion": "\n    word_counts = defaultdict(int)\n    for word in test_list:\n        word_counts[word] += 1\n\n    most_occurred = max(word_counts, key=word_counts.get)\n    return most_occurred\n\ntest_list = ['apple', 'banana', 'apple', 'orange', 'banana', 'banana']"}
{"task_id": "MBPP/327", "completion": "\n    if x == y or y == z or z == x:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/328", "completion": "\n    # Rotate the list to the left by m items\n    list1[:m] = list1[m-1:n-1:-1]\n    return list1\n"}
{"task_id": "MBPP/329", "completion": "\n    count = 0\n    for i in list:\n        if i < 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/330", "completion": "\n    pattern = re.compile(r'[a-zA-Z]{3,4}')\n    matches = pattern.findall(text)\n    return matches\n\ntext = \"Hello, my name is John Doe and I live in New York\""}
{"task_id": "MBPP/331", "completion": "\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n"}
{"task_id": "MBPP/332", "completion": "\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict\n"}
{"task_id": "MBPP/333", "completion": "\n    for i in range(len(sub_li)):\n        for j in range(i + 1, len(sub_li)):\n            if sub_li[i] > sub_li[j]:\n                sub_li[i], sub_li[j] = sub_li[j], sub_li[i]\n    return sub_li\n\n"}
{"task_id": "MBPP/334", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/335", "completion": "\n    return n/2 * (2*a + (n-1)*d)\n"}
{"task_id": "MBPP/336", "completion": "\n    if monthname1 in ['January', 'March', 'May', 'July', 'August', 'October', 'December']:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/337", "completion": "\n    word_pattern = re.compile(r'\\b\\w+\\b')\n    return word_pattern.findall(text)\n"}
{"task_id": "MBPP/338", "completion": "\n    count = 1\n    result = \"\"\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            count += 1\n        else:\n            result += str(count) + s[i]\n            count = 1\n    result += str(count) + s[-1]\n    return result\n"}
{"task_id": "MBPP/339", "completion": "\n    # check if x and y are positive integers\n    if not isinstance(x, int) or not isinstance(y, int) or x <= 0 or y <= 0:\n        return \"Error: x and y must be positive integers\"\n\n    # find the maximum divisor\n    for i in range(min(x, y), 0, -1):\n        if x % i == 0 and y % i == 0:\n            return i\n\n    return \"No divisor found\"\n"}
{"task_id": "MBPP/340", "completion": "\n    if len(lst) < 3:\n        return \"List should have at least 3 numbers\"\n    lst.sort()\n    return sum(lst[:3])\n\n"}
{"task_id": "MBPP/341", "completion": "\n    return tuple(sorted(list(s)))\n\n"}
{"task_id": "MBPP/342", "completion": "\n    min_range = float('inf')\n    heap = []\n\n    for i, arr in enumerate(list):\n        heappush(heap, Node(arr[0], i, 0))\n\n    while heap:\n        node = heappop(heap)\n        min_range = min(min_range, node.value)\n\n        if node.index + 1 < len(list[node.list_num]):\n            next_value = list[node.list_num][node.index + 1]\n            heappush(heap, Node(next_value, node.list_num, node.index + 1))\n\n    return min_range\n\n"}
{"task_id": "MBPP/343", "completion": "\n    return [int(i) for i in s if i.isdigit()] + [i for i in s if i.isalpha()]\n\n"}
{"task_id": "MBPP/344", "completion": "\n    count = 0\n    for i in range(n, m + 1):\n        if i % 2 != 0:\n            count += bin(i).count('1')\n    return count\n\n"}
{"task_id": "MBPP/345", "completion": "\n    diffs = [nums[i+1]-nums[i] for i in range(len(nums)-1)]\n    return diffs\n"}
{"task_id": "MBPP/346", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return n + zigzag(n-1, k)\n"}
{"task_id": "MBPP/347", "completion": "\n    return m * n\n"}
{"task_id": "MBPP/348", "completion": "\n    if r == 0:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return bin_coff(n-1, r-1) + bin_coff(n-1, r)\n\n"}
{"task_id": "MBPP/349", "completion": "\n    if string.isalpha():\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/350", "completion": "\n    if len(s) < 2:\n        return s\n    stack = []\n    for c in s:\n        if stack and stack[-1] == c:\n            stack.pop()\n        else:\n            stack.append(c)\n    return ''.join(stack)\n"}
{"task_id": "MBPP/351", "completion": "\n    # Create an empty list to store the elements\n    res = []\n\n    # Traverse the array\n    for i in range(0, n, k):\n        res.append(arr[i])\n\n    # Return the result\n    return res\n"}
{"task_id": "MBPP/352", "completion": "\n    return len(set(str)) == len(str)\n"}
{"task_id": "MBPP/353", "completion": "\n    return list1[:n] + list1[n+1:]\n"}
{"task_id": "MBPP/354", "completion": "\n    return a + (n-1) * d\n"}
{"task_id": "MBPP/355", "completion": "\n    import math\n\n    # calculate the number of rectangles\n    rectangles = (2 * radius) ** 2\n\n    return rectangles\n\n"}
{"task_id": "MBPP/356", "completion": "\n    # calculate the angle\n    angle = 180 - (a + b)\n\n    return angle\n"}
{"task_id": "MBPP/357", "completion": "\n    return max(test_list)\n\n"}
{"task_id": "MBPP/358", "completion": "\n    return [(i, j, i % j) for i in nums1 for j in nums2]\n\n"}
{"task_id": "MBPP/359", "completion": "\n    if a == 0:\n        return False\n    else:\n        d = (b**2) - (4*a*c)\n        if d < 0:\n            return False\n        else:\n            x1 = (-b - sqrt(d)) / (2*a)\n            x2 = (-b + sqrt(d)) / (2*a)\n            return x1 == x2\n"}
{"task_id": "MBPP/360", "completion": "\n    if n == 1:\n        return \"car\"\n    else:\n        return \"car\"\n\n"}
{"task_id": "MBPP/361", "completion": "\n    return [i for i in list1 if i]\n\n"}
{"task_id": "MBPP/362", "completion": "\n    from collections import Counter\n    count = Counter(nums)\n    return max(list(count.values()))\n"}
{"task_id": "MBPP/363", "completion": "\n    return tuple(x + K for x in test_list)\n"}
{"task_id": "MBPP/364", "completion": "\n    flip_count = 0\n    for i in range(len(ch)):\n        if i % 2 == 0:\n            if ch[i] != '0':\n                flip_count += 1\n        else:\n            if ch[i] != '1':\n                flip_count += 1\n    return flip_count\n\n"}
{"task_id": "MBPP/365", "completion": "\n    return len(str(n))\n"}
{"task_id": "MBPP/366", "completion": "\n    product_list = []\n    for i in range(len(list_nums)-1):\n        product_list.append(list_nums[i] * list_nums[i+1])\n    return product_list\n"}
{"task_id": "MBPP/367", "completion": "\n    if root is None:\n        return True\n\n    left_height = get_height(root.left)\n    right_height = get_height(root.right)\n\n    if abs(left_height - right_height) > 1:\n        return False\n    else:\n        return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\n"}
{"task_id": "MBPP/368", "completion": "\n    return [test_tup] * N\n"}
{"task_id": "MBPP/369", "completion": "\n    return 2 * (l*w + w*h + h*l)\n"}
{"task_id": "MBPP/370", "completion": "\n    return tuple(sorted(price, key=float))\n\n"}
{"task_id": "MBPP/371", "completion": "\n    A.sort()\n    missing_elements = []\n    for i in range(left_element, right_element + 1):\n        if i not in A:\n            missing_elements.append(i)\n    return missing_elements\n\n"}
{"task_id": "MBPP/372", "completion": "\n    return hq.nlargest(len(nums), nums)\n"}
{"task_id": "MBPP/373", "completion": "\n    return l * w * h\n"}
{"task_id": "MBPP/374", "completion": "\n    if len(str) == 0:\n        return ['']\n    if len(str) == 1:\n        return [str]\n\n    perms = []\n    for i in range(len(str)):\n        first = str[i]\n        remaining = str[:i] + str[i+1:]\n        for p in permute_string(remaining):\n            perms.append(first + p)\n    return perms\n"}
{"task_id": "MBPP/375", "completion": "\n    return round(n/m)*m\n"}
{"task_id": "MBPP/376", "completion": "\n    result = []\n    for i in test_tup:\n        if test_tup.count(i) > 1 and test_tup.index(i) == test_tup.rindex(i):\n            result.append(i)\n    return tuple(result)\n"}
{"task_id": "MBPP/377", "completion": "\n    return s.replace(c, '')\n"}
{"task_id": "MBPP/378", "completion": "\n    return test_list[1:] + [test_list[0]]\n"}
{"task_id": "MBPP/379", "completion": "\n    return 2 * (l*w + w*h + h*l)\n"}
{"task_id": "MBPP/380", "completion": "\n    result = []\n    for i in range(rownum):\n        row = []\n        for j in range(colnum):\n            row.append(i*j)\n        result.append(row)\n    return result\n"}
{"task_id": "MBPP/381", "completion": "\n    return sorted(list_data, key=itemgetter(index_no))\n"}
{"task_id": "MBPP/382", "completion": "\n    if not A:\n        return 0\n\n    low, high = 0, len(A) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if A[mid] > A[high]:\n            low = mid + 1\n        elif A[mid] < A[high]:\n            high = mid\n        else:\n            return mid\n\n    return -1\n\n"}
{"task_id": "MBPP/383", "completion": "\n    return n ^ 0xAAAAAAAA\n\n"}
{"task_id": "MBPP/384", "completion": "\n    return arr.count(min(arr))\n"}
{"task_id": "MBPP/385", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * get_perrin(n - 1) + 3 * get_perrin(n - 2)\n\n"}
{"task_id": "MBPP/386", "completion": "\n    # Initialize the count of swaps\n    count = 0\n\n    # Iterate over the string\n    for i in range(len(s)):\n        # If the current character is not the same as the next one\n        if s[i] != s[i+1]:\n            # Increment the count\n            count += 1\n\n    # Return the count of swaps\n    return count\n"}
{"task_id": "MBPP/387", "completion": "\n    if N % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\nN = int(input(\"Enter a number: \"))"}
{"task_id": "MBPP/388", "completion": "\n    i = 0\n    while 2 ** i <= n:\n        i += 1\n    return 2 ** (i - 1)\n\n"}
{"task_id": "MBPP/389", "completion": "\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    lucas = [2, 1]\n    for i in range(2, n+1):\n        lucas.append(lucas[i-1] + lucas[i-2])\n    return lucas[n]\n\n"}
{"task_id": "MBPP/390", "completion": "\n    list.insert(0, string)\n    return list\n"}
{"task_id": "MBPP/391", "completion": "\n    result_dict = {}\n    result_dict[l1[0]] = l2\n    result_dict[l1[1]] = l3\n    return result_dict\n"}
{"task_id": "MBPP/392", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return (((n**2)/5) + (n/5) + 4)\n"}
{"task_id": "MBPP/393", "completion": "\n    return max(input_list, key=len)\n"}
{"task_id": "MBPP/394", "completion": "\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/395", "completion": "\n    count = {}\n    for i in str1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n\n    for i in str1:\n        if count[i] == 1:\n            return i\n\n    return None\n\n"}
{"task_id": "MBPP/396", "completion": "\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/397", "completion": "\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]\n"}
{"task_id": "MBPP/398", "completion": "\n    return sum(int(digit) for num in nums for digit in str(num))\n\n"}
{"task_id": "MBPP/399", "completion": "\n    return test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1]\n\n"}
{"task_id": "MBPP/400", "completion": "\n    freq_dict = {}\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    return freq_dict\n\ntest_list = [(1,2), (2,3), (1,2), (3,4), (1,2), (1,2), (3,4), (1,2), (1,2), (3,4)]"}
{"task_id": "MBPP/401", "completion": "\n    return tuple(i + j for i, j in zip(test_tup1, test_tup2))\n"}
{"task_id": "MBPP/402", "completion": "\n    # Compute n choose r\n    ncr = factorial(n) / (factorial(r) * factorial(n - r))\n    # Compute ncr mod p\n    ncr_modp = ncr % p\n    return ncr_modp\n"}
{"task_id": "MBPP/403", "completion": "\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, str) is not None\n"}
{"task_id": "MBPP/404", "completion": "\n    if a < b:\n        return a\n    else:\n        return b\n"}
{"task_id": "MBPP/405", "completion": "\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/406", "completion": "\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"}
{"task_id": "MBPP/407", "completion": "\n    # Convert the number to a list of digits\n    digits = [int(d) for d in str(n)]\n\n    # Find the first pair of digits that are in descending order\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i+1]:\n        i -= 1\n\n    # If no such pair is found, the number is already the largest\n    if i == -1:\n        return n\n\n    # Find the largest digit in the second half of the number that is larger than the first digit in the pair\n    j = len(digits) - 1\n    while j > i and digits[j] <= digits[i]:\n        j -= 1\n\n    # Swap the first and second digits in the pair\n    digits[i], digits[j] = digits[j], digits[i]\n\n    # Rearrange the rest of the digits in ascending order\n    digits[i+1:] = sorted(digits[i+1:])\n\n    # Return the rearranged number\n    return int(''.join(map(str, digits)))\n"}
{"task_id": "MBPP/408", "completion": "\n    if not nums1 or not nums2 or k == 0:\n        return []\n\n    result = []\n    min_heap = []\n\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (nums1[i] + nums2[j], (nums1[i], nums2[j])))\n            else:\n                if min_heap[0][0] < nums1[i] + nums2[j]:\n                    heapq.heappop(min_heap)\n                    heapq.heappush(min_heap, (nums1[i] + nums2[j], (nums1[i], nums2[j])))\n\n    while min_heap:\n        result.append(heapq.heappop(min_heap)[1])\n\n    return result\n\n"}
{"task_id": "MBPP/409", "completion": "\n    min_tuple = min(list1, key=lambda x: x[1])\n    return min_tuple\n\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8)]"}
{"task_id": "MBPP/410", "completion": "\n    return min(listval)\n"}
{"task_id": "MBPP/411", "completion": "\n    word = re.sub(r\"_([a-zA-Z])\", lambda m: m.group(1).upper(), word)\n    return word.title()\n"}
{"task_id": "MBPP/412", "completion": "\n    return [i for i in l if i % 2 == 0]\n\n"}
{"task_id": "MBPP/413", "completion": "\n    return list1[n]\n"}
{"task_id": "MBPP/414", "completion": "\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"}
{"task_id": "MBPP/415", "completion": "\n    n = len(arr)\n    max_product = [0]*n\n    min_product = [0]*n\n    result = [0]*n\n\n    max_product[0] = arr[0]\n    min_product[0] = arr[0]\n    result[0] = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > 0:\n            max_product[i] = max(arr[i], max_product[i-1]*arr[i])\n            min_product[i] = min(arr[i], min_product[i-1]*arr[i])\n        else:\n            max_product[i] = max(arr[i], min_product[i-1]*arr[i])\n            min_product[i] = min(arr[i], max_product[i-1]*arr[i])\n\n        result[i] = max(result[i-1], max_product[i])\n\n    return result[-1]\n"}
{"task_id": "MBPP/416", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return n + breakSum(n-1)\n"}
{"task_id": "MBPP/417", "completion": "\n    common_tuples = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i] == Input[j]:\n                common_tuples.append(Input[i])\n    return common_tuples\n"}
{"task_id": "MBPP/418", "completion": "\n    max_length = -1\n    max_sublist = []\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n                max_sublist = lst[i:j+1]\n    return max_sublist\n"}
{"task_id": "MBPP/419", "completion": "\n    return sum(round(num) for num in list1)\n\n"}
{"task_id": "MBPP/420", "completion": "\n    sum = 0\n    i = 1\n    while n > 0:\n        if i % 2 == 0:\n            sum += i**3\n        i += 1\n        n -= 1\n    return sum\n"}
{"task_id": "MBPP/421", "completion": "\n    return ''.join(test_tup)\n"}
{"task_id": "MBPP/422", "completion": "\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes / n\n    return average\n\nn = int(input(\"Enter a number: \"))"}
{"task_id": "MBPP/423", "completion": "\n    if m > n:\n        return \"Invalid input\"\n    else:\n        maxgold = [0] * (n - m + 1)\n        for i in range(m, n + 1):\n            maxgold[i - m] = max(maxgold[i - m], gold[i])\n        return maxgold[-1]\n\n\ngold = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, "}
{"task_id": "MBPP/424", "completion": "\n    return [i[-1] for i in test_tuple]\n"}
{"task_id": "MBPP/425", "completion": "\n    count = 0\n    for i in list1:\n        if i == x:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/426", "completion": "\n    return [num for num in nums if num % 2 == 0]\n"}
{"task_id": "MBPP/427", "completion": "\n    if isinstance(dt, str):\n        dt = dt.split('-')\n    if len(dt) == 3:\n        return dt[1] + '-' + dt[2] + '-' + dt[0]\n    else:\n        return \"Invalid date format\"\n"}
{"task_id": "MBPP/428", "completion": "\n    sublist_count = len(my_list) // 2\n    # While there are still sublists to sort\n    while sublist_count > 0:\n        # For every sublist, do the gap-insertion sort\n        for start_position in range(sublist_count):\n            # Use a gap-insertion sort to sort the sublist\n            gap_insertion_sort(my_list, start_position, sublist_count)\n        # Decrease the sublist count\n        sublist_count = sublist_count // 2\n    return my_list\n"}
{"task_id": "MBPP/429", "completion": "\n    tup1_element = test_tup1[0]\n    tup1_tuple = test_tup1[1]\n    tup2_element = test_tup2[0]\n    tup2_tuple = test_tup2[1]\n\n    return tup1_element, tup1_tuple, tup2_element, tup2_tuple\n\n"}
{"task_id": "MBPP/430", "completion": "\n    import math\n    x = (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n    return x\n\n"}
{"task_id": "MBPP/431", "completion": "\n    from collections import Counter\n    c1 = Counter(list1)\n    c2 = Counter(list2)\n    common_elements = list(set(list1) & set(list2))\n    for element in common_elements:\n        if c1[element] > 1 and c2[element] > 1:\n            return True\n    return False\n"}
{"task_id": "MBPP/432", "completion": "\n    # calculate area of trapezium\n    area = (base1 + base2) / 2 * height\n    return area\n"}
{"task_id": "MBPP/433", "completion": "\n    for i in arr:\n        if i > number:\n            return True\n    return False\n\n"}
{"task_id": "MBPP/434", "completion": "\n    pattern = r'b+'\n    if re.search(pattern, text):\n        return True\n    return False\n"}
{"task_id": "MBPP/435", "completion": "\n    return n % 10\n"}
{"task_id": "MBPP/436", "completion": "\n    for i in list1:\n        if i < 0:\n            print(i)\n"}
{"task_id": "MBPP/437", "completion": "\n    return ''.join([i for i in str1 if i.isupper()])\n"}
{"task_id": "MBPP/438", "completion": "\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n\ntest_list = [1, 2, 3, 2, 1, 4, 4, 5, 6, 7, 8, 7, 6, 5, 5]"}
{"task_id": "MBPP/439", "completion": "\n    return int(''.join(map(str, L)))\n"}
{"task_id": "MBPP/440", "completion": "\n    pattern = re.compile(r'\\b(?=\\w+s)\\w+\\b')\n    matches = pattern.findall(text)\n    return matches\n\ntext = \"I am walking to school. I love to play football.\""}
{"task_id": "MBPP/441", "completion": "\n    return 6 * l ** 2\n\n"}
{"task_id": "MBPP/442", "completion": "\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/443", "completion": "\n    largest_neg = list1[0]\n    for num in list1:\n        if num < largest_neg:\n            largest_neg = num\n    return largest_neg\n"}
{"task_id": "MBPP/444", "completion": "\n    for i in test_list:\n        print(i)\n\n"}
{"task_id": "MBPP/445", "completion": "\n    return tuple(a*b for a, b in zip(test_tup1, test_tup2))\n"}
{"task_id": "MBPP/446", "completion": "\n    tup_counter = Counter(tup)\n    lst_counter = Counter(lst)\n    return tup_counter + lst_counter\n"}
{"task_id": "MBPP/447", "completion": "\n    return [lambda x: x**3](nums)\n\nnums = [1, 2, 3, 4, 5]"}
{"task_id": "MBPP/448", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return n + cal_sum(n-1)\n"}
{"task_id": "MBPP/449", "completion": "\n    # calculate the distance between the points\n    def distance(x1, y1, x2, y2):\n        return (x2 - x1) ** 2 + (y2 - y1) ** 2\n\n    # check if the points are valid\n    def is_valid(x1, y1, x2, y2, x3, y3):\n        # calculate the distances\n        d1 = distance(x1, y1, x2, y2)\n        d2 = distance(x1, y1, x3, y3)\n        d3 = distance(x2, y2, x3, y3)\n\n        # check if any two distances are equal and the sum of the other two is greater than the third distance\n        if d1 == d2 or d1 == d3 or d2 == d3:\n            return False\n\n        # check if the sum of the distances is greater than the third distance\n        if d1 + d2 > d3 and d2 + d3 > d1 and d1 + d3 > d2:\n            return True\n\n        return False\n\n    return is_valid(x1, y1, x2, y2, x3, y3)\n"}
{"task_id": "MBPP/450", "completion": "\n    return [s[l:l+5] for s in str]\n\nstr = ['Hello', 'World', 'Python', 'Programming', 'Language']"}
{"task_id": "MBPP/451", "completion": "\n    return re.sub(' ', '', text1)\n"}
{"task_id": "MBPP/452", "completion": "\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return None\n"}
{"task_id": "MBPP/453", "completion": "\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n / i == i:\n                sum = sum + i\n            else:\n                sum = sum + (i + n // i)\n    return sum\n\n"}
{"task_id": "MBPP/454", "completion": "\n    word_list = re.findall(r'\\b\\w+\\b', text)\n    return word_list\n"}
{"task_id": "MBPP/455", "completion": "\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return \"31 days\"\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return \"30 days\"\n    elif monthnum2 == 2:\n        return \"28 or 29 days\"\n    else:\n        return \"Invalid month number\"\n"}
{"task_id": "MBPP/456", "completion": "\n    return stringlist[::-1]\n"}
{"task_id": "MBPP/457", "completion": "\n    return min(lst)\n"}
{"task_id": "MBPP/458", "completion": "\n    return l * b\n"}
{"task_id": "MBPP/459", "completion": "\n    return re.sub('[A-Z]', '', str1)\n"}
{"task_id": "MBPP/460", "completion": "\n    return [i for i in lst if isinstance(i, int)]\n"}
{"task_id": "MBPP/461", "completion": "\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/462", "completion": "\n    if len(list1) == 0:\n        return [[]]\n    else:\n        rest = combinations_list(list1[1:])\n        return rest + [i + [list1[0]] for i in rest]\n\n"}
{"task_id": "MBPP/463", "completion": "\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        product = 1\n        for j in range(i, len(arr)):\n            product *= arr[j]\n            max_product = max(max_product, product)\n    return max_product\n\n"}
{"task_id": "MBPP/464", "completion": "\n    if n in dict.values():\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/465", "completion": "\n    return {k: v for k, v in dict1.items() if v}\n"}
{"task_id": "MBPP/466", "completion": "\n    mid = (low + high) // 2\n\n    if ((mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid])):\n        return mid\n\n    elif (mid > 0 and arr[mid - 1] > arr[mid]):\n        return find_peak_util(arr, low, mid - 1, n)\n\n    else:\n        return find_peak_util(arr, mid + 1, high, n)\n\n"}
{"task_id": "MBPP/467", "completion": "\n    if deciNum == 0:\n        return '0'\n    octNum = \"\"\n    while deciNum != 0:\n        octNum = str(deciNum % 8) + octNum\n        deciNum = deciNum // 8\n    return octNum\n\n"}
{"task_id": "MBPP/468", "completion": "\n    max_product = float('-inf')\n    for i in range(n):\n        for j in range(i, n):\n            sub_arr = arr[i:j+1]\n            product = 1\n            for k in sub_arr:\n                product *= k\n            max_product = max(max_product, product)\n    return max_product\n\n"}
{"task_id": "MBPP/469", "completion": "\n    n = len(price)\n    if n == 0:\n        return 0\n    dp = [[0 for _ in range(n)] for _ in range(k+1)]\n    for i in range(1, k+1):\n        max_so_far = dp[i-1][0] - price[0]\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j-1], max_so_far + price[j])\n            max_so_far = max(max_so_far, dp[i-1][j] - price[j])\n    return dp[k][n-1]\n\n"}
{"task_id": "MBPP/470", "completion": "\n    return tuple(a + b for a, b in test_tup)\n"}
{"task_id": "MBPP/471", "completion": "\n    result = []\n    for i in range(lens):\n        if arr[i] % n == 0:\n            result.append(arr[i])\n    return result\n\n"}
{"task_id": "MBPP/472", "completion": "\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False\n"}
{"task_id": "MBPP/473", "completion": "\n    return [i for i in test_list1 if i in test_list2]\n"}
{"task_id": "MBPP/474", "completion": "\n    return str1.replace(ch, newch)\n"}
{"task_id": "MBPP/475", "completion": "\n    return dict(sorted(dict1.items(), key=lambda item: item[1]))\n\n"}
{"task_id": "MBPP/476", "completion": "\n    return sum(nums)\n\nnums = [1, 2, 3, 4, 5]"}
{"task_id": "MBPP/477", "completion": "\n    return string.lower()\n\n"}
{"task_id": "MBPP/478", "completion": "\n    return re.sub(r'[a-z]', '', str1)\n"}
{"task_id": "MBPP/479", "completion": "\n    while n >= 10:\n        n = n // 10\n    return n\n"}
{"task_id": "MBPP/480", "completion": "\n    count = [0]*256\n    max_count = 0\n    res = ''\n\n    for i in str1:\n        count[ord(i)] += 1\n\n    for i in str1:\n        if (max_count < count[ord(i)]):\n            max_count = count[ord(i)]\n            res = i\n\n    return res\n\nstr1 = \"test\""}
{"task_id": "MBPP/481", "completion": "\n    if sum == 0:\n        return True\n    if n == 0 and sum != 0:\n        return False\n    if set[n-1] > sum:\n        return is_subset_sum(set, n-1, sum)\n    return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])\n\n"}
{"task_id": "MBPP/482", "completion": "\n    pattern = re.compile(r'[A-Z]+')\n    return pattern.findall(text)\n"}
{"task_id": "MBPP/483", "completion": "\n    i = 1\n    while True:\n        if i % x == 0:\n            return i\n        i += 1\n"}
{"task_id": "MBPP/484", "completion": "\n    result = [i for i in test_list1 if i not in test_list2]\n    return result\n"}
{"task_id": "MBPP/485", "completion": "\n    return str(n) == str(n)[::-1]\n\n"}
{"task_id": "MBPP/486", "completion": "\n    if r > n:\n        return 0\n    else:\n        return nCr(n-1, r-1) + nCr(n-1, r)\n\n"}
{"task_id": "MBPP/487", "completion": "\n    return sorted(tup, key=lambda x: x[-1])\n"}
{"task_id": "MBPP/488", "completion": "\n    return (math.sqrt(5*(5+2*math.sqrt(5)))*a**2)/4\n"}
{"task_id": "MBPP/489", "completion": "\n    max_val = max(arr)\n    freq = arr.count(max_val)\n    return freq\n"}
{"task_id": "MBPP/490", "completion": "\n    symmetric_pairs = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                symmetric_pairs.append((test_list[i], test_list[j]))\n    return symmetric_pairs\n"}
{"task_id": "MBPP/491", "completion": "\n    return a * (1 - r**n) / (1 - r)\n"}
{"task_id": "MBPP/492", "completion": "\n    first = 0\n    last = len(item_list) - 1\n    found = False\n\n    while first <= last and not found:\n        mid = (first + last) // 2\n        if item_list[mid] == item:\n            found = True\n        else:\n            if item < item_list[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\n    return found\n"}
{"task_id": "MBPP/493", "completion": "\n    # Calculate the distance between the two points\n    distance = math.sqrt((endx - startx)**2 + (endy - starty)**2)\n\n    # Calculate the number of sides\n    sides = int(distance / (2 * radius))\n\n    # Calculate the angle between the sides\n    angle = (360 / (2 * sides)) * math.pi / 180\n\n    # Calculate the coordinates\n    coordinates = []\n    for i in range(sides):\n        x = startx + radius * math.cos(i * angle)\n        y = starty + radius * math.sin(i * angle)\n        coordinates.append([x, y])\n\n    return coordinates\n"}
{"task_id": "MBPP/494", "completion": "\n    binary_num = ''.join(str(i) for i in test_tup)\n    integer_num = int(binary_num, 2)\n    return integer_num\n\n"}
{"task_id": "MBPP/495", "completion": "\n    return re.sub(r'[a-z]', '', str1)\n"}
{"task_id": "MBPP/496", "completion": "\n    # Using heap queue algorithm\n    heapq.heapify(nums)\n    result = []\n    for _ in range(n):\n        result.append(hq.heappop(nums))\n    return result\n"}
{"task_id": "MBPP/497", "completion": "\n    return math.pi * r * (r + math.sqrt(r**2 + h**2))\n"}
{"task_id": "MBPP/498", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n"}
{"task_id": "MBPP/499", "completion": "\n    return 2 * r\n"}
{"task_id": "MBPP/500", "completion": "\n    return ''.join(list)\n"}
{"task_id": "MBPP/501", "completion": "\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n       \n    for i in range(1, smaller+1):\n        if((x % i == 0) and (y % i == 0)):\n            gcd = i \n             \n    return gcd\n"}
{"task_id": "MBPP/502", "completion": "\n    # Your code here\n    for i in range(n, m+1):\n        if i % 2 == 0:\n            print(i)\n"}
{"task_id": "MBPP/503", "completion": "\n    return sum(nums)\n"}
{"task_id": "MBPP/504", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n\nn = int(input(\"Enter a number: \"))"}
{"task_id": "MBPP/505", "completion": "\n    # Initialize the count of zeroes\n    count_zero = 0\n\n    # Traverse the array\n    for i in range(len(A)):\n        # If the current element is zero, increment the count\n        if A[i] == 0:\n            count_zero += 1\n        # If the current element is not zero, overwrite it with the count of zeroes\n        else:\n            A[i] = count_zero\n\n    return A\n"}
{"task_id": "MBPP/506", "completion": "\n    if k > n:\n        return 0\n    else:\n        return factorial(n) / (factorial(k) * factorial(n - k))\n\n"}
{"task_id": "MBPP/507", "completion": "\n    return [word for word in list1 if word not in removewords]\n"}
{"task_id": "MBPP/508", "completion": "\n    if l1 == l2:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/509", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            sum_odd += i\n            count_odd += 1\n    return sum_odd / count_odd\n\n"}
{"task_id": "MBPP/510", "completion": "\n    n = len(arr)\n    dp = [[0]*(k+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if arr[i-1] > j:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-arr[i-1]]\n    return dp[n][k]\n\n"}
