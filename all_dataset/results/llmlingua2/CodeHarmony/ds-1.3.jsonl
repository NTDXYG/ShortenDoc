{"task_id": "valid/0", "completion": "\n    # Define categories\n    categories = {\n        \"sarcastic\": [\"sarcastic\", \"sarcasticly\", \"sarcastically\"],\n        \"neutral\": [\"neutral\", \"neutrally\", \"neutrally\"],\n        \"happy\": [\"happy\", \"happily\", \"happily\"],\n    }\n\n    # Initialize score\n    score = 0\n\n    # Check each category\n    for category, words in categories.items():\n        for word in words:\n            if word in text.lower():\n                score += 1\n\n    # Classify text based on score\n    if score > 0:\n        if score == len(categories):\n            return \"perfectly balanced\"\n        elif score == len(categories) * 2:\n            return \"sarcastic\"\n        elif score == len(categories) * 3:\n            return \"neutral\"\n        elif score == len(categories) * 4:\n            return \"happy\"\n        else:\n            return \"neutral\"\n    else:\n        return \"neutral\"\n\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n"}
{"task_id": "valid/3", "completion": "\n    return sorted(instruments, reverse=True)\n\n\ninstruments = [\"Guitar\", \"Piano\", \"Flute\", \"Violin\", \"Drums\"]"}
{"task_id": "valid/4", "completion": "\n    try:\n        return json.loads(json_string)\n    except ValueError:\n        raise ValueError(\"Input is not a valid JSON string\")\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n\n    sum_of_digits = sum(int(digit) for digit in str(n))\n\n    return n % 5 == 0 and n % sum_of_digits == 0\n"}
{"task_id": "valid/6", "completion": "\n    if n < base:\n        return \"n should be greater than or equal to base\"\n    if n == base:\n        return 0\n    if n == base * base:\n        return 1\n    if n == base * base * base:\n        return 2\n    if n > base * base * base:\n        return discrete_logarithm(n / base, base) + 1\n    else:\n        return discrete_logarithm(n, base * base)\n\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        json_data = json.loads(json_str)\n        pprint.pprint(json_data)\n    except ValueError:\n        print(\"Provided json_str not a valid JSON string\")\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace(\"{{\" + key + \"}}\", value)\n    return template\n"}
{"task_id": "valid/10", "completion": "\n    return len(string) == len(set(string))\n\n"}
{"task_id": "valid/11", "completion": "\n    date_obj = datetime.strptime(date_string, '%Y-%m-%d')\n    result_date = date_obj + timedelta(days=days)\n    return result_date.strftime('%Y-%m-%d')\n"}
{"task_id": "valid/12", "completion": "\n    # Check if text is not more than 10,000 characters\n    if len(text) > 10000:\n        return \"Error: Text is too long\"\n\n    # Eliminate extra whitespace and leading/trailing whitespace\n    text = text.strip()\n\n    # Split text into words and join them back together with a space in between\n    text = ' '.join(text.split())\n\n    return text\n"}
{"task_id": "valid/13", "completion": "\n    # Convert to lower case\n    text = text.lower()\n\n    # Remove punctuation\n    text = text.translate(str.maketrans('', '', string.punctuation))\n\n    # Remove extra spaces\n    text = ' '.join(text.split())\n\n    return text\n"}
{"task_id": "valid/14", "completion": "\n    return word1 in text or word2 in text\n"}
{"task_id": "valid/15", "completion": "\n    return sum(sum(i) for i in array)\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    lines = comment.split('\\n')\n    for line in lines:\n        if 'tabstop' in line:\n            settings['tabstop'] = int(line.split('=')[1])\n        if 'expandtab' in line:\n            settings['expandtab'] = int(line.split('=')[1])\n        if 'softtabstop' in line:\n            settings['softtabstop'] = int(line.split('=')[1])\n    return settings\n"}
{"task_id": "valid/17", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)\n\n"}
{"task_id": "valid/19", "completion": "\n    # Reverse each list\n    list1.reverse()\n    list2.reverse()\n\n    # Combine the lists\n    combined_list = list1 + list2\n\n    # Sort the combined list\n    combined_list.sort()\n\n    return combined_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n\n"}
{"task_id": "valid/21", "completion": "\n    return z**2\n"}
{"task_id": "valid/22", "completion": "\n    return dictionary.get('name', None)\n"}
{"task_id": "valid/23", "completion": "\n    def convert(item):\n        if isinstance(item, list):\n            return [convert(i) for i in item]\n        elif isinstance(item, tuple):\n            return tuple(convert(i) for i in item)\n        elif isinstance(item, dict):\n            return {convert(k): convert(v) for k, v in item.items()}\n        else:\n            return item\n\n    return convert(struct)\n"}
{"task_id": "valid/24", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def next_palindrome(n):\n        n += 1\n        while not is_palindrome(n):\n            n += 1\n        return n\n\n    def prev_palindrome(n):\n        n -= 1\n        while not is_palindrome(n):\n            n -= 1\n        return n\n\n    if is_palindrome(num):\n        return num\n    else:\n        return next_palindrome(num) if num % 10 != 9 else prev_palindrome(num)\n"}
{"task_id": "valid/25", "completion": "\n    import math\n    print(math.sqrt(num))\n"}
{"task_id": "valid/26", "completion": "\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    sum_of_diagonal_elements = sum(matrix[i][i] for i in range(min(rows, cols)))\n\n    is_square = rows == cols\n\n    return rows, cols, sum_of_diagonal_elements, is_square\n\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode())\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c.lower() for c in s if c.isalpha())\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n"}
{"task_id": "valid/30", "completion": "\n    try:\n        data = json.loads(json_data)\n        if isinstance(data, dict):\n            if key in data:\n                return data[key] == value\n        else:\n            raise ValueError(\"Input is not a valid JSON string or dictionary\")\n    except ValueError as e:\n        print(e)\n        return False\n"}
{"task_id": "valid/31", "completion": "\n    import tkinter as tk\n\n    root = tk.Tk()\n\n    for i in range(len(buttons)):\n        button = tk.Button(root, text=buttons[i], command=lambda i=i: buttons[i]())\n        button.grid(row=i//num_columns, column=i%num_columns)\n\n    root.mainloop()\n"}
{"task_id": "valid/32", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(s) - 1):\n        if s[i] not in alphabet or s[i+1] not in alphabet:\n            return False\n        if alphabet.index(s[i]) + 1 != alphabet.index(s[i+1]):\n            return False\n    return True\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "valid/34", "completion": "\n    numeric_substrings = [s for s in ts.split() if s.isdigit()]\n    return sum(int(s) for s in numeric_substrings)\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() if word[-1].isalpha() else word for word in words]\n"}
{"task_id": "valid/36", "completion": "\n    if not isinstance(arr, list):\n        return \"Error: Input is not a list\"\n    for i in arr:\n        if not isinstance(i, (int, float)):\n            return \"Error: List contains non-numerical value\"\n    return sum(arr)\n"}
{"task_id": "valid/37", "completion": "\n    # load the json data\n    data = json.loads(json_data)\n\n    # extract the neighborhood names\n    neighborhoods = [neighborhood['name'] for neighborhood in data]\n\n    # sort the neighborhoods\n    sorted_neighborhoods = sorted(neighborhoods)\n\n    return sorted_neighborhoods\n"}
{"task_id": "valid/38", "completion": "\n    # Initialize minimum absolute sum\n    min_sum = float('inf')\n\n    # Sort the array\n    arr.sort()\n\n    # Traverse the array\n    for i in range(n - 1):\n        # Update minimum sum\n        min_sum = min(min_sum, abs(arr[i] + arr[i + 1]))\n\n    return min_sum\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for char in p:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/40", "completion": "\n    # Check if votes list is not empty\n    if not votes:\n        return \"Error: No votes provided\"\n\n    # Check if votes list is not empty\n    if len(votes) < 100:\n        return \"Error: Not enough votes\"\n\n    # Create a dictionary to store the votes\n    votes_dict = {}\n\n    # Iterate over the votes list\n    for vote in votes:\n        # Check if vote is a tuple of length 2\n        if len(vote) != 2:\n            return \"Error: Invalid vote format\"\n\n        # Check if candidate name is a string of maximum length 10 characters\n        if not isinstance(vote[0], str) or len(vote[0]) > 10:\n            return \"Error: Invalid candidate name format\"\n\n        # Check if number of votes is a positive integer not exceeding 1000\n        if not isinstance(vote[1], int) or vote[1] <= 0 or vote[1] > 1000:\n            return \"Error: Invalid vote count format\"\n\n        # If the candidate name is not in the dictionary, add it with a vote count of 0\n        if vote[0] not in votes_dict:\n            votes_dict[vote[0]] = 0\n\n        # Add the vote count to the candidate's vote count\n        votes_dict[vote[0]] += vote[1]\n\n    # Calculate the total votes\n    total_votes = sum(votes_dict.values())\n\n    # Calculate the percentage of votes for each candidate\n    for candidate in votes_dict:\n        votes_dict[candidate] = round(votes_dict[candidate] / total_votes * 100, 2)\n\n    # Return the dictionary of votes\n    return votes_dict\n\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        date_object = datetime.strptime(date_string, '%d-%b-%Y')\n        return date_object.strftime('%B %d, %Y')\n    except ValueError:\n        return \"Invalid date format. Please use DD-MMM-YYYY format.\"\n"}
{"task_id": "valid/42", "completion": "\n    allowed_extensions = ['txt', 'docx', 'pdf', 'xlsx']\n    if newname.split('.')[-1] in allowed_extensions:\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/43", "completion": "\n    def is_even(n):\n        return n % 2 == 0\n\n    def is_numeric(n):\n        return isinstance(n, (int, float))\n\n    def is_string_numeric_even(s):\n        return is_numeric(s) and is_even(int(s))\n\n    def is_tuple(n):\n        return isinstance(n, tuple)\n\n    def remove_uneven(lst):\n        return [i for i in lst if is_string_numeric_even(i) or (is_tuple(i) and remove_uneven(i))]\n\n    return remove_uneven(lst)\n\n"}
{"task_id": "valid/44", "completion": "\n    minutes = hours * 60\n    return minutes\n"}
{"task_id": "valid/45", "completion": "\n    count = 0\n    for char in string:\n        if char == specific_character:\n            count += 1\n    return count\n"}
{"task_id": "valid/46", "completion": "\n    # histogram_data = histogram_data.append(pd.Series([accs], index=[generation]), ignore_index=True)\n    # return histogram_data\n    pass\n"}
{"task_id": "valid/47", "completion": "\n    return bool(re.match(r'^[a-zA-Z0-9]{5}$', string))\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        parts = classifier.split(\" :: \")\n        if len(parts) == 2:\n            unique_languages.add(parts[0])\n    return len(unique_languages)\n"}
{"task_id": "valid/49", "completion": "\n    result = {}\n    for sub_arr in arr:\n        for num in sub_arr:\n            if num in result:\n                result[num] += 1\n            else:\n                result[num] = 1\n    return result\n"}
{"task_id": "valid/50", "completion": "\n    from django.urls import path\n    from . import views\n\n    urlpatterns = [\n        path('', views.index, name='index'),\n        path('<int:question_id>/', views.detail, name='detail'),\n    ]\n\n    # regex pattern to match URLs\n    regex = r'^(?:index|detail)/(?P<question_id>[0-9]+)/$'\n\n    # match URLs to view functions\n    urlpatterns += [\n        path(regex, views.match_url_to_view, name='match_url_to_view'),\n    ]\n\n    return urlpatterns\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n"}
{"task_id": "valid/52", "completion": "\n    string = \"Hello\"\n    sentence = \" World\"\n    return string + sentence\n"}
{"task_id": "valid/53", "completion": "\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.add(s[i:j])\n    return substrings\n\n"}
{"task_id": "valid/54", "completion": "\n    total_sum = 0\n    for dictionary in list_of_dicts:\n        for key in dictionary:\n            if key.startswith(\"price\"):\n                total_sum += dictionary[key]\n    return total_sum\n"}
{"task_id": "valid/55", "completion": "\n    return [i for i in list1 if i in list2]\n\n"}
{"task_id": "valid/56", "completion": "\n    def decorator_function(func):\n        def wrapper_function(request, *args, **kwargs):\n            if request_method == 'GET':\n                return func(request, *args, **kwargs)\n            else:\n                return HttpResponse(\"Method not allowed\", status=405)\n        return wrapper_function\n    return decorator_function\n\n\n@route_request('GET')"}
{"task_id": "valid/57", "completion": "\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers\")\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Both inputs must be positive integers\")\n    if a < b:\n        return gcd_recursive(b, a)\n    elif b == 0:\n        return a\n    else:\n        return gcd_recursive(b, a % b)\n\n"}
{"task_id": "valid/58", "completion": "\n    config_files = {}\n    for file_path in file_paths:\n        directory = file_path.split('/')[0]\n        if directory in config_files:\n            config_files[directory].append(file_path)\n        else:\n            config_files[directory] = [file_path]\n    return config_files\n\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n"}
{"task_id": "valid/60", "completion": "\n    if len(my_list) == len(set(my_list)):\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/61", "completion": "\n    # calculate the difference in seconds\n    timeDifference = timeEnd - timeStart\n\n    # convert the difference to hours, minutes and seconds\n    timeDifferenceHours = timeDifference // 3600\n    timeDifferenceMinutes = (timeDifference % 3600) // 60\n    timeDifferenceSeconds = timeDifference % 60\n\n    # return the time difference\n    return timeDifferenceHours, timeDifferenceMinutes, timeDifferenceSeconds\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return False\n    mid = (start + end) // 2\n    if array[mid] == target:\n        return True\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    colors = [\"WHITE\", \"RED\", \"GREEN\", \"BLUE\"]\n    current_index = colors.index(color)\n    if current_index == 3:\n        return colors[0]\n    else:\n        return colors[current_index + 1]\n\n"}
{"task_id": "valid/64", "completion": "\n    for i in range(len(list)):\n        list[i] += 1\n    return list\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end + 1):\n        if i < 0:\n            continue\n        root = i ** 0.5\n        if int(root + 0.5) ** 2 == i:\n            return True\n    return False\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        for char in word:\n            if char == target:\n                return word\n    return None\n"}
{"task_id": "valid/67", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/68", "completion": "\n    print(\"keys in given dictionary are:\")\n    for key in dict.keys():\n        print(key)\n\n"}
{"task_id": "valid/69", "completion": "\n    string1 = \"Hello\"\n    string2 = \"World\"\n    return f\"{string1} {string2}\"\n"}
{"task_id": "valid/70", "completion": "\n    result = []\n    for string in strings:\n        # remove special characters\n        string = re.sub(r'[^A-Za-z0-9 ]+', '', string)\n        # capitalize\n        string = string.title()\n        result.append(string)\n    return result\n"}
{"task_id": "valid/71", "completion": "\n    if char in string:\n        return string.index(char)\n    else:\n        return \"Character not found in the string\"\n"}
{"task_id": "valid/72", "completion": "\n    start_tag = \"<b>\"\n    end_tag = \"</b>\"\n    result = []\n    current_word = \"\"\n    in_bold = False\n\n    for char in html_code:\n        if char == start_tag:\n            in_bold = True\n            current_word = \"\"\n        elif char == end_tag:\n            in_bold = False\n            result.append(current_word)\n        elif in_bold:\n            current_word += char\n\n    return result\n\n"}
{"task_id": "valid/73", "completion": "\n    # set list of items and their prices\n    items = {\n        \"Coke\": 10,\n        \"Sprite\": 15,\n        \"Diet Coke\": 20,\n        \"Water\": 5,\n        \"Coffee\": 25,\n    }\n\n    # set initial stock\n    stock = {\n        \"Coke\": 5,\n        \"Sprite\": 5,\n        \"Diet Coke\": 5,\n        \"Water\": 5,\n        \"Coffee\": 5,\n    }\n\n    # function to calculate change\n    def calculate_change(item_price, money_inserted):\n        return money_inserted - item_price\n\n    # function to purchase item\n    def purchase_item(item, money_inserted):\n        if stock[item] > 0 and money_inserted >= items[item]:\n            change = calculate_change(items[item], money_inserted)\n            stock[item] -= 1\n            return change\n        else:\n            return \"Sorry, we are out of stock or insufficient money\"\n\n    # user input\n    item_selected = input(\"Please select an item (Coke, Sprite, Diet Coke, Water, Coffee): \")\n    money_inserted = int(input(\"Please insert money: \"))\n\n    # purchase item\n    change = purchase_item(item_selected, money_inserted)\n\n    if type(change) == str:\n        print(change)\n    else:\n        print(\"Here is your change: \", change)\n\n    # print remaining stock\n    print(\"Remaining stock: \", stock)\n\nvending_machine(\"Coke\", 30)\nvending_machine(\"Sprite\", 30)\nvending_machine(\"Diet Coke\", 30)\nvending_machine(\"Water\", 30)\nvending_machine(\"Coffee\", 30)\n"}
{"task_id": "valid/74", "completion": "\n    # Merge the two lists\n    merged_list = list1 + list2\n    # Remove duplicates\n    new_list = list(set(merged_list))\n    return new_list\n"}
{"task_id": "valid/75", "completion": "\n    return list.count(target)\n"}
{"task_id": "valid/76", "completion": "\n    return base64.b64encode(string.encode('utf-8'))\n"}
{"task_id": "valid/77", "completion": "\n    non_zero_indices = [i for i, x in enumerate(vector) if x != 0]\n    return non_zero_indices\n"}
{"task_id": "valid/78", "completion": "\n    # Assign value to variable\n    variable = 10\n\n    # Validate the value\n    if variable == 10:\n        print(\"Value is valid\")\n    else:\n        print(\"Value is not valid\")\n\nassign_and_validate()\n"}
{"task_id": "valid/79", "completion": "\n    # Convert the word to list\n    word_list = list(word)\n    # Shuffle the list\n    random.shuffle(word_list)\n    # Convert the list back to string\n    return ''.join(word_list)\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"Integer\"\n    elif isinstance(element, float):\n        return \"Float\"\n    elif isinstance(element, str):\n        return \"String\"\n    elif isinstance(element, bool):\n        return \"Boolean\"\n    elif isinstance(element, list):\n        return \"List\"\n    elif isinstance(element, tuple):\n        return \"Tuple\"\n    elif isinstance(element, dict):\n        return \"Dictionary\"\n    elif isinstance(element, set):\n        return \"Set\"\n    else:\n        return \"Unknown\"\n"}
{"task_id": "valid/81", "completion": "\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] == arr[i + 1]:\n            arr.pop(i)\n        else:\n            i += 1\n    return arr\n"}
{"task_id": "valid/82", "completion": "\n    # Remove punctuation\n    text = re.sub(r'[^\\w\\s]', '', text)\n    # Tokenize the text\n    tokens = text.split()\n    return tokens\n"}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [n for n in numbers if n % 3 == 0 and n % 7 == 0]\n    avg = sum(divisible_numbers) / len(divisible_numbers)\n    max_num = max(divisible_numbers)\n    min_num = min(divisible_numbers)\n    num_counts = {n: divisible_numbers.count(n) for n in set(divisible_numbers)}\n\n    print(f\"Numbers divisible by 3 and 7: {divisible_numbers}\")\n    print(f\"Average: {avg}\")\n    print(f\"Maximum: {max_num}\")\n    print(f\"Minimum: {min_num}\")\n    print(\"Number of occurrences:\")\n    for k, v in num_counts.items():\n        print(f\"{k}: {v}\")\n\n"}
{"task_id": "valid/84", "completion": "\n    # Convert sentence to lower case\n    sentence = sentence.lower()\n\n    # Split sentence into words\n    words = sentence.split()\n\n    # Create a dictionary to store word frequencies\n    word_freq = {}\n\n    # Count word frequencies\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n\n    # Find the word with highest frequency\n    highest_freq_word = max(word_freq, key=word_freq.get)\n\n    return highest_freq_word\n"}
{"task_id": "valid/85", "completion": "\n    euler_number = 2.0\n    for i in range(1, 10000):\n        euler_number += 1.0 / math.factorial(i)\n    return round(euler_number, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    average = sum(numbers) / len(numbers)\n    total = sum(numbers)\n    return average, total\n"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series cannot be empty\")\n    try:\n        min_val = min(time_series)\n        max_val = max(time_series)\n        return min_val, max_val\n    except TypeError:\n        raise ValueError(\"Time series should contain only numerical values\")\n"}
{"task_id": "valid/88", "completion": "\n    # Initialize a dictionary to hold the count of related articles for each entry\n    related_articles_count = {}\n\n    # Iterate over each entry in the encyclopedia\n    for entry in encyclopedia:\n        # Count the number of related articles in the entry\n        related_articles_count[entry] = count_related_articles(entry)\n\n    return related_articles_count\n\n"}
{"task_id": "valid/89", "completion": "\n    max_index = 0\n    for i in range(1, len(lst)):\n        if lst[i] > lst[max_index]:\n            max_index = i\n    return max_index\n"}
{"task_id": "valid/90", "completion": "\n    return len(set(list1) & set(list2)) > 0\n\n"}
{"task_id": "valid/91", "completion": "\n    root = Element('data')\n\n    for key, value in dictionary.items():\n        child = Element(key)\n        child.text = str(value)\n        root.append(child)\n\n    return tostring(root, encoding='utf-8', method='xml')\n"}
{"task_id": "valid/92", "completion": "\n    m = len(matrix)\n    n = len(matrix[0])\n\n    # Initialize start and end pointers\n    start_row, start_col = 0, 0\n    end_row, end_col = m, n\n\n    while start_row < end_row and start_col < end_col:\n        mid_row = start_row + (end_row - start_row) // 2\n        mid_col = start_col + (end_col - start_col) // 2\n\n        if matrix[mid_row][mid_col] == target:\n            return True\n        elif matrix[mid_row][mid_col] < target:\n            start_row, end_row = mid_row + 1, end_row\n            start_col, end_col = mid_col + 1, end_col\n        else:\n            start_row, end_row = start_row, mid_row\n            start_col, end_col = mid_col, end_col - 1\n\n    return False\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in lst:\n        if i % 2 != 0:\n            sum_odd += i\n            count_odd += 1\n    return sum_odd, sum_odd / count_odd\n"}
{"task_id": "valid/94", "completion": "\n    if n > len(lst) or n < 1:\n        return None\n    else:\n        lst.sort(reverse=True)\n        return lst[n-1]\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n"}
{"task_id": "valid/96", "completion": "\n    return set_a ^ set_b\n"}
{"task_id": "valid/97", "completion": "\n    description = f\"A Discord bot that manages play music in server. \\n\\n\"\n    description += \"Features:\\n\"\n    description += \"- Manage playlists: Users can create, delete, and modify playlists.\\n\"\n    description += \"- Play music: Users can play music from their playlists in a voice channel.\\n\"\n    description += \"- Settings: Users can change server settings like volume, DJ mode, etc.\\n\"\n    description += \"- Help: Provide help information for each command.\\n\"\n    description += \"- Information: Provide information about the web app for managing personal playlists server settings.\\n\"\n    return description\n"}
{"task_id": "valid/98", "completion": "\n    if n < 0:\n        return abs(dec_to_ternary(n))\n    if n == 0:\n        return '0'\n    ternary = ''\n    while n:\n        n, r = divmod(n, 3)\n        ternary = str(r) + ternary\n    return ternary\n\n"}
{"task_id": "valid/99", "completion": "\n    extensions = []\n    for file_name in file_names:\n        name, extension = os.path.splitext(file_name)\n        extensions.append(extension[1:])\n    return tuple(extensions)\n\n"}
{"task_id": "valid/100", "completion": "\n    if age < 13:\n        return \"Child\"\n    elif 13 <= age < 18:\n        return \"Teenager\"\n    elif 18 <= age < 60:\n        return \"Adult\"\n    else:\n        return \"Senior\"\n"}
{"task_id": "valid/101", "completion": "\n    if numerical_grade >= 90:\n        letter_grade = 'A'\n        gpa = 4.0\n    elif numerical_grade >= 80:\n        letter_grade = 'B'\n        gpa = 3.0\n    elif numerical_grade >= 70:\n        letter_grade = 'C'\n        gpa = 2.0\n    elif numerical_grade >= 60:\n        letter_grade = 'D'\n        gpa = 1.0\n    else:\n        letter_grade = 'F'\n        gpa = 0.0\n\n    return letter_grade, gpa\n\n"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item['price']\n    return total\n"}
{"task_id": "valid/103", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result_dict = {}\n    for palindrome in palindrome_tuples:\n        count = 0\n        for char in palindrome:\n            if char.lower() in vowels:\n                count += 1\n        result_dict[palindrome] = count\n    return result_dict\n\n"}
{"task_id": "valid/104", "completion": "\n    if not isinstance(s, str):\n        raise TypeError(\"Input should be a string\")\n\n    if len(s) == 0:\n        return s\n\n    result = s[0]\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            result += s[i]\n        else:\n            result += s[i] + \"*\"\n    return result\n\n"}
{"task_id": "valid/105", "completion": "\n    if len(arr) <= 1:\n        return False\n\n    num_set = set()\n\n    for num in arr:\n        if -num in num_set:\n            return True\n        num_set.add(num)\n\n    return False\n"}
{"task_id": "valid/106", "completion": "\n    def get_latest_version(dependency):\n        package_name, version_number = dependency\n        version_number_list = version_number.split('_')\n        version_number_list.pop(0)\n        version_number_list.pop(0)\n        return '_'.join(version_number_list)\n\n    return [get_latest_version(dependency) for dependency in dependencies]\n\n"}
{"task_id": "valid/107", "completion": "\n    # defining categories\n    categories = {\n        \"injury\": [],\n        \"death\": [],\n        \"life_threatening\": [],\n        \"other\": []\n    }\n\n    # iterating over causes\n    for cause in causes:\n        action, result = cause.split(\" \")\n\n        if result == \"died\":\n            categories[\"death\"].append(cause)\n        elif result == \"injured\" or result == \"injured and\" or result == \"injured, and\":\n            categories[\"injury\"].append(cause)\n        elif result == \"got hit\" or result == \"got hit and\" or result == \"got hit, and\":\n            categories[\"life_threatening\"].append(cause)\n        else:\n            categories[\"other\"].append(cause)\n\n    return categories\n\n"}
{"task_id": "valid/108", "completion": "\n    # replace spaces in name with hyphens and convert to lowercase\n    code_name = name.replace(\" \", \"-\").lower()\n    return code_name\n"}
{"task_id": "valid/109", "completion": "\n    return [char for char in text if ord(char) > 127]\n"}
{"task_id": "valid/110", "completion": "\n    import string\n    translator = str.maketrans('', '', string.punctuation)\n    return string.translate(string, translator)\n\n"}
{"task_id": "valid/111", "completion": "\n    result = []\n    for num in num_list:\n        result.append(num ** exp)\n    return result\n\n"}
{"task_id": "valid/112", "completion": "\n    for row in grid:\n        print(min(row))\n\n"}
{"task_id": "valid/113", "completion": "\n    if not isinstance(n, int) or n <= 0:\n        print(\"Please enter a positive integer.\")\n        return\n\n    if current_num > n:\n        return\n\n    if current_num % 2 == 0:\n        print(\"Thank you\")\n\n    print_thank_you(n, current_num + 1)\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    for i in range(len(lst) - 1):\n        if lst[i] == element and lst[i + 1] == element:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/115", "completion": "\n    num_str = str(num)\n    return all(digit == num_str[0] for digit in num_str)\n\n"}
{"task_id": "valid/116", "completion": "\n    if not s:\n        return s\n    else:\n        first_char = s[0]\n        if first_char.lower() in 'aeiou':\n            return remove_vowels_recursive(s[1:])\n        else:\n            return first_char + remove_vowels_recursive(s[1:])\n\n"}
{"task_id": "valid/117", "completion": "\n    def format_option(option):\n        return f\"  -{option[0]} --{option[0].replace('_', '-')} {option[1]}\"\n\n    def format_help(options):\n        return \"\\n\".join(format_option(option) for option in options)\n\n    return format_help(options)\n\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n"}
{"task_id": "valid/119", "completion": "\n    count_dict = {}\n    for i in Val:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    return count_dict\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset & 0xFF\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = set(\"aeiou\")\n    return set(s.lower()) >= vowels\n\n"}
{"task_id": "valid/122", "completion": "\n    count = sequence.count(subsequence)\n    return count\n\nsequence_of_characters = \"Please find number of occurrences of string\"\nspecific_subsequence = \"string\"\n"}
{"task_id": "valid/123", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "valid/124", "completion": "\n    return sum(i for i in input_list if i % 2 != 0)\n\n"}
{"task_id": "valid/125", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    return sum(1 for char in string if char in consonants)\n\n"}
{"task_id": "valid/126", "completion": "\n    # calculate number of electrons based on certain energy values\n    electrons = calculate_electrons(grid_energies, ados, dope, dos_grid_size)\n\n    # adjust number of electrons based on doping levels\n    electrons = adjust_electrons(electrons, dos_grid_size)\n\n    return electrons\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    max_diff = arr[-1] - arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i-1] > max_diff:\n            max_diff = arr[i] - arr[i-1]\n    return arr\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    mapping = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n\n    for char in string:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []\n\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for i in lst:\n        if i not in unique_elements:\n            unique_elements.append(i)\n        if len(unique_elements) == 3:\n            break\n    return unique_elements\n"}
{"task_id": "valid/132", "completion": "\n    fruit_list.sort()\n    return ', '.join(fruit_list)\n"}
{"task_id": "valid/133", "completion": "\n    if not lst:\n        return [[]]\n    else:\n        sublists = generate_sublists(lst[1:])\n        return sublists + [lst[:1] + sublist for sublist in sublists]\n\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r\"\\d+\\.\\d+\"\n    if re.search(pattern, string):\n        return True\n    return False\n"}
{"task_id": "valid/135", "completion": "\n\n    from django.db import migrations, models\n\n    def forward(apps, schema_editor):\n        CommitteeMember = apps.get_model('{app_name}', '{model_name}')\n        CommitteeMember.add_to_class('{field_name}', models.CharField(max_length=255, null=True, blank=True))\n\n    def backward(apps, schema_editor):\n        CommitteeMember = apps.get_model('{app_name}', '{model_name}')\n        CommitteeMember.add_to_class('{field_name}', models.CharField(max_length=255, null=True, blank=True))\n\n    class Migration(migrations.Migration):\n        dependencies = [\n            ('{app_name}', '0001_initial'),\n        ]\n\n        operations = [\n            migrations.RunPython(forward, backward),\n        ]\n    \"\"\"\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = [value for value in list1 if value in list2]\n    return sum(common_elements)\n\n"}
{"task_id": "valid/137", "completion": "\n    forecast_period = math.ceil(len(df) * 0.01)\n    return forecast_period\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n\n"}
{"task_id": "valid/139", "completion": "\n    # calculate the start and end index for the current page\n    start_index = (page_number - 1) * items_per_page\n    end_index = start_index + items_per_page\n\n    # return the items for the current page\n    return items[start_index:end_index]\n"}
{"task_id": "valid/140", "completion": "\n    if n_str == '0':\n        return '0'\n\n    sign = -1 if n_str[0] == '-' else 1\n    n_str = n_str[1:] if n_str[0] == '-' else n_str\n\n    n_len = len(n_str)\n    result = [0] * (2 * n_len)\n    carry = 0\n\n    for i in range(n_len):\n        temp = int(n_str[n_len - i - 1]) * 2 + carry\n        result[2 * i] = temp % 10\n        result[2 * i + 1] = temp // 10\n        carry = temp // 10\n\n    if carry != 0:\n        result[2 * n_len] = carry\n\n    res_str = ''.join(map(str, result))\n    if sign == -1:\n        res_str = '-' + res_str\n    return res_str\n\n"}
{"task_id": "valid/141", "completion": "\n    # Initialize the ROS node\n    rospy.init_node('reflex_control')\n\n    # Create a publisher to control the robotic arm\n    pub = rospy.Publisher('/arm_controller/command', String, queue_size=10)\n\n    # Preset positions\n    presets = {\n        'preset1': (1.0, 1.0, 1.0),\n        'preset2': (2.0, 2.0, 2.0),\n        'preset3': (3.0, 3.0, 3.0)\n    }\n\n    # Get the preset name from the command line arguments\n    preset_name = sys.argv[1]\n\n    # Get the preset position\n    preset_position = presets.get(preset_name)\n\n    if preset_position is not None:\n        # Create a message to control the robotic arm\n        msg = 'move_to_position: ' + str(preset_position[0]) + ', ' + str(preset_position[1]) + ', ' + str(preset_position[2])\n\n        # Publish the message\n        pub.publish(msg)\n    else:\n        print(\"Invalid preset name\")\n\n    # Keep the node alive\n    rospy.spin()\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = [value for value in list1 if value in list2]\n    product = 1\n    for value in common_elements:\n        product *= value\n    return product\n"}
{"task_id": "valid/143", "completion": "\n    if allow_multiple_answer == True:\n        print(\"Allowing multiple answer for each question\")\n    else:\n        print(\"Not allowing multiple answer for each question\")\n\n    if zoom_level == 0:\n        print(\"Zoom level is at maximum\")\n    elif zoom_level == 1:\n        print(\"Zoom level is at medium\")\n    else:\n        print(\"Zoom level is at minimum\")\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n"}
{"task_id": "valid/145", "completion": "\n    vowels = 'aeiouAEIOU'\n    no_vowels_sentence = ''\n    for char in sentence:\n        if char not in vowels:\n            no_vowels_sentence += char\n    return no_vowels_sentence\n"}
{"task_id": "valid/146", "completion": "\n    def merge_dict(a, b):\n        for key in b:\n            if key in a:\n                if isinstance(a[key], dict) and isinstance(b[key], dict):\n                    merge_dict(a[key], b[key])\n                else:\n                    a[key] = b[key]\n            else:\n                a[key] = b[key]\n        return a\n\n    def sort_dict(d):\n        keys = list(d.keys())\n        keys.sort()\n        return {key: d[key] for key in keys}\n\n    merged = merge_dict(a, b)\n    return sort_dict(merged)\n\n\na = {'a': 1, 'b': 2, 'nested': {'x': 5, 'y': 6}}\nb = {'c': 3, 'd': 4, 'nested': {'y': 7, 'z': 8}}\n"}
{"task_id": "valid/147", "completion": "\n    try:\n        return max(d, key=lambda k: d[k])\n    except ValueError:\n        print(\"The dictionary is empty.\")\n    except TypeError:\n        print(\"The input is not a dictionary.\")\n"}
{"task_id": "valid/148", "completion": "\n    # Your code here\n    pass\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None:\n        return None\n    else:\n        return string.replace('e', '*')\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n"}
{"task_id": "valid/151", "completion": "\n    if x < 0:\n        return False\n    if x == 0:\n        return True\n    if x % 2 == 0:\n        return False\n\n    sqrt_x = int(sqrt(x))\n    for i in range(3, sqrt_x + 1, 2):\n        if x % i == 0:\n            return False\n    return True\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n"}
