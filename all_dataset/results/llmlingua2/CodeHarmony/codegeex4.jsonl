{"task_id": "valid/0", "completion": "\n    # Define categories\n    categories = {\n        'politics': ['politics', 'government', 'election', 'policy', 'law', 'congress', 'president', 'senate', 'house', 'governor', 'campaign', 'candidate', 'voter', 'ballot', 'vote', 'referendum', 'legislative', 'regulation', 'government spending', 'government budget', 'government debt', 'government deficit', 'government surplus', 'government revenue', 'government spending cuts', 'government spending increases', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending freeze', 'government spending"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2"}
{"task_id": "valid/3", "completion": "\n    return sorted(instruments, key=lambda x: x.lower())\n"}
{"task_id": "valid/4", "completion": "\n    try:\n        data = json.loads(json_string)\n        if isinstance(data, list):\n            return data\n        else:\n            raise ValueError(\"Input is not a valid JSON string.\")\n    except json.JSONDecodeError:\n        raise ValueError(\"Input is not a valid JSON string.\")\n\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n    if n % 5 == 0:\n        sum_of_digits = sum(int(digit) for digit in str(n))\n        if sum_of_digits % 3 == 0:\n            return True\n    return False\n"}
{"task_id": "valid/6", "completion": "\n    return pow(base, n, 26)\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        json_data = json.loads(json_str)\n        pprint.pprint(json_data)\n    except json.JSONDecodeError:\n        raise ValueError(\"Invalid JSON string\")\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace(f\"{{{{{key}}}}}\", str(value))\n    return template\n\n"}
{"task_id": "valid/10", "completion": "\n    # Create a set to store unique characters\n    unique_chars = set()\n\n    # Iterate over each character in the string\n    for char in string:\n        # If the character is already in the set, return False\n        if char in unique_chars:\n            return False\n        # Otherwise, add the character to the set\n        unique_chars.add(char)\n\n    # If we reach this point, all characters are unique\n    return True\n"}
{"task_id": "valid/11", "completion": "\n    date = datetime.strptime(date_string, '%Y-%m-%d')\n    new_date = date + timedelta(days=days)\n    return new_date.strftime('%Y-%m-%d')\n\n"}
{"task_id": "valid/12", "completion": "\n    if len(text) > 10000:\n        raise ValueError(\"Text length exceeds 10,000 characters\")\n    return text.strip().replace(\"  \", \" \")\n"}
{"task_id": "valid/13", "completion": "\n    # Convert text to lowercase\n    text = text.lower()\n    \n    # Remove punctuation\n    text = text.translate(str.maketrans('', '', string.punctuation))\n    \n    # Remove digits\n    text = text.translate(str.maketrans('', '', string.digits))\n    \n    # Remove extra spaces\n    text = ' '.join(text.split())\n    \n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    pattern = r'\\b{}\\b.*\\b{}\\b|\\b{}\\b.*\\b{}\\b'.format(word1, word2, word2, word1)\n    return bool(re.search(pattern, text))\n\n"}
{"task_id": "valid/15", "completion": "\n    return [sum(x) for x in array]\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    for line in comment.split('\\n'):\n        line = line.strip()\n        if line.startswith('tabstop'):\n            settings['tabstop'] = int(line.split('=')[1])\n        elif line.startswith('expandtab'):\n            settings['expandtab'] = line.split('=')[1] == 'true'\n        elif line.startswith('shiftwidth'):\n            settings['shiftwidth'] = int(line.split('=')[1])\n        elif line.startswith('softtabstop'):\n            settings['softtabstop'] = int(line.split('=')[1])\n    return settings\n\n"}
{"task_id": "valid/17", "completion": "\n    # Tokenize the sentence into words\n    words = sentence.split()\n\n    # Disassemble the sentence into a collection of lexical items\n    lexical_items = []\n    for word in words:\n        # Check if the word is a noun\n        if word in nouns:\n            lexical_items.append(word)\n        # Check if the word is a verb\n        elif word in verbs:\n            lexical_items.append(word)\n        # Check if the word is an adjective\n        elif word in adjectives:\n            lexical_items.append(word)\n        # Check if the word is an adverb\n        elif word in adverbs:\n            lexical_items.append(word)\n        # If the word is not a recognized lexical item, add it as a separate item\n        else:\n            lexical_items.append(word)\n\n    return lexical_items\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)\n\n"}
{"task_id": "valid/19", "completion": "\n    list1.reverse()\n    list2.reverse()\n    list3 = list1 + list2\n    list3.sort()\n    return list3\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n\n"}
{"task_id": "valid/21", "completion": "\n    return z**2\n"}
{"task_id": "valid/22", "completion": "\n    if \"name\" in dictionary:\n        return dictionary[\"name\"]\n    for value in dictionary.values():\n        if isinstance(value, dict):\n            return get_nested_dictionary_value(value)\n    return None\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {k: struct_to_dict(v) for k, v in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(i) for i in struct]\n    else:\n        return struct\n"}
{"task_id": "valid/24", "completion": "\n    num = str(num)\n    if num == num[::-1]:\n        return int(num)\n    else:\n        left = int(num[:-1])\n        right = int(num[1:])\n        left_palindrome = str(left)[::-1]\n        right_palindrome = str(right)[::-1]\n        if abs(int(left_palindrome) - int(num)) <= abs(int(right_palindrome) - int(num)):\n            return int(left_palindrome)\n        else:\n            return int(right_palindrome)\n"}
{"task_id": "valid/25", "completion": "\n    return f\"import math\\nprint(math.sqrt({num}))\"\n\n"}
{"task_id": "valid/26", "completion": "\n    if len(matrix) == 0:\n        return 0, 0, 0, False\n    if len(matrix) != len(matrix[0]):\n        return len(matrix), len(matrix[0]), 0, False\n    else:\n        return len(matrix), len(matrix[0]), sum(matrix[i][i] for i in range(len(matrix))), True\n\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c for c in s.lower() if c.isalpha())\n\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        try:\n            json_data = json.loads(json_data)\n        except json.JSONDecodeError:\n            return False\n    if isinstance(json_data, dict):\n        if key in json_data and json_data[key] == value:\n            return True\n    return False\n\n"}
{"task_id": "valid/31", "completion": "\n    table = []\n    for i in range(0, len(buttons), num_columns):\n        row = []\n        for j in range(num_columns):\n            if i + j < len(buttons):\n                row.append(buttons[i + j])\n        table.append(row)\n    return table\n\n"}
{"task_id": "valid/32", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(alphabet) - 1):\n        if alphabet[i] not in s or alphabet[i + 1] not in s:\n            return False\n    return True\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "valid/34", "completion": "\n    return sum(int(num) for num in re.findall(r'\\d+', ts))\n\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n"}
{"task_id": "valid/36", "completion": "\n    # Check if the array is empty\n    if not arr:\n        return \"Array is empty\"\n\n    # Check if all elements in the array are numerical\n    if not all(isinstance(x, (int, float)) for x in arr):\n        return \"Array contains non-numerical values\"\n\n    # Compute the sum of all elements in the array\n    return sum(arr)\n\n"}
{"task_id": "valid/37", "completion": "\n    neighborhoods = []\n    for neighborhood in json_data:\n        neighborhoods.append(neighborhood[\"name\"])\n    neighborhoods.sort()\n    return neighborhoods\n\n"}
{"task_id": "valid/38", "completion": "\n    # Sort the array\n    arr.sort()\n\n    # Initialize sum and min_sum\n    sum = 0\n    min_sum = float('inf')\n\n    # Initialize left and right pointers\n    left = 0\n    right = n - 1\n\n    # Iterate until left pointer is less than right pointer\n    while left < right:\n        # Calculate sum of current pair\n        sum = abs(arr[left] + arr[right])\n\n        # Update min_sum if current sum is smaller\n        min_sum = min(min_sum, sum)\n\n        # Move left pointer if sum is negative\n        if arr[left] + arr[right] < 0:\n            left += 1\n        # Move right pointer if sum is positive\n        elif arr[left] + arr[right] > 0:\n            right -= 1\n        # Break the loop if sum is zero\n        else:\n            break\n\n    return min_sum\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for char in p:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "valid/40", "completion": "\n    # Check if the input is a list of tuples\n    if not isinstance(votes, list) or not all(isinstance(vote, tuple) for vote in votes):\n        raise ValueError(\"Input must be a list of tuples\")\n\n    # Check if each tuple has exactly two elements\n    if not all(len(vote) == 2 for vote in votes):\n        raise ValueError(\"Each vote must be a tuple with two elements\")\n\n    # Check if each candidate's name is a string of uppercase letters and maximum length 10 characters\n    if not all(isinstance(candidate, str) and candidate.isupper() and len(candidate) <= 10 for candidate, _ in votes):\n        raise ValueError(\"Candidate's name must be a string of uppercase letters and maximum length 10 characters\")\n\n    # Check if each number of votes is a positive integer not exceeding 1000\n    if not all(isinstance(votes, int) and 0 < votes <= 1000 for _, votes in votes):\n        raise ValueError(\"Number of votes must be a positive integer not exceeding 1000\")\n\n    # Check if the total number of votes is at least 100\n    if sum(votes) < 100:\n        raise ValueError(\"Total number of votes must be at least 100\")\n\n    # Calculate the total number of votes\n    total_votes = sum(votes)\n\n    # Calculate the percentage of votes for each candidate\n    percentages = {candidate: round(votes / total_votes * 100, 2) for candidate, votes in votes}\n\n    # Return the results as a dictionary\n    return percentages\n\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        date_object = datetime.strptime(date_string, \"%d-%m-%Y\")\n        return date_object.strftime(\"%B %d, %Y\")\n    except ValueError:\n        try:\n            date_object = datetime.strptime(date_string, \"%d-%b-%Y\")\n            return date_object.strftime(\"%B %d, %Y\")\n        except ValueError:\n            raise ValueError(\"Invalid date format. Please use DD-MM-YYYY or DD-MMM-YYYY format.\")\n\n"}
{"task_id": "valid/42", "completion": "\n    # check if new file name has valid extension\n    if not newname.endswith(allowed_type):\n        return False\n    # check if new file name already exists\n    if os.path.exists(newname):\n        return False\n    # check if old file name exists\n    if not os.path.exists(oldname):\n        return False\n    # check if old file name has valid extension\n    if not oldname.endswith(allowed_type):\n        return False\n    # check if old file name and new file name are the same\n    if oldname == newname:\n        return False\n    # check if old file name and new file name are in the same directory\n    if os.path.dirname(oldname) != os.path.dirname(newname):\n        return False\n    # check if old file name and new file name are in the same file system\n    if os.path.samefile(oldname, newname):\n        return False\n    # check if old file name and new file name are in the same file system\n    if os.path.samefile(os.path.dirname(oldname), os.path.dirname(newname)):\n        return False\n    # check if old file name and new file name are in the same file system\n    if os.path.samefile(os.path.dirname(oldname), newname):\n        return False\n    # check if old file name and new file name are in the same file system\n    if os.path.samefile(oldname, os.path.dirname(newname)):\n        return False\n    # check if old file name and new file name are in the same file system\n    if os.path.samefile(os.path.dirname(oldname), os.path.dirname(newname)):\n        return False\n    # check if old file name and new file name are in the same file system\n    if os.path.samefile(os.path.dirname(oldname), os.path.dirname(newname)):\n        return False\n    # check if old file name and new file name are in the same file system\n    if os.path.samefile(os.path.dirname(oldname), os.path.dirname(newname)):\n        return False\n    # check if old file name and new file name are in the same file system\n    if os.path.samefile(os.path.dirname(oldname), os.path.dirname(newname)):\n        return False\n    # check if old file name and new file name are in the same file system\n    if os.path.samefile(os.path.dirname(oldname), os.path.dirname(newname)):\n        return False\n    # check if old file name"}
{"task_id": "valid/43", "completion": "\n    result = []\n    for item in lst:\n        if isinstance(item, tuple):\n            result.append(remove_uneven(item))\n        elif isinstance(item, int) or isinstance(item, float):\n            if item % 2 == 0:\n                result.append(item)\n        elif isinstance(item, str):\n            if item.isdigit() and int(item) % 2 == 0:\n                result.append(item)\n    return tuple(result)\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n\n"}
{"task_id": "valid/45", "completion": "\n    count = 0\n    for char in string:\n        if char == specific_character:\n            count += 1\n    return count\n"}
{"task_id": "valid/46", "completion": "\n    # histogram_data[generation] = accs\n    return histogram_data[generation] = accs\n\n"}
{"task_id": "valid/47", "completion": "\n    pattern = re.compile(r'^[a-zA-Z0-9]{5}$')\n    return bool(pattern.match(string))\n\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        if classifier.startswith(\"Programming Language :: \"):\n            language = classifier.split(\" :: \")[2]\n            unique_languages.add(language)\n    return len(unique_languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    # Create empty dictionary to store count of each number\n    count_dict = {}\n\n    # Iterate through each element in the array\n    for num in arr:\n        # If the number is already in the dictionary, increment its count\n        if num in count_dict:\n            count_dict[num] += 1\n        # If the number is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[num] = 1\n\n    # Create an empty list to store the counts\n    counts = []\n\n    # Iterate through the dictionary and add each count to the list\n    for num, count in count_dict.items():\n        counts.append(count)\n\n    # Return the list of counts\n    return counts\n"}
{"task_id": "valid/50", "completion": "\n    # Define the URL patterns\n    urlpatterns = [\n        path('home/', views.home_view, name='home'),\n        path('competition/<int:competition_id>/', views.competition_view, name='competition'),\n    ]\n\n    # Iterate over the URL patterns\n    for pattern in urlpatterns:\n        # Check if the URL matches the pattern\n        if re.match(pattern.regex.pattern, url):\n            # Return the name of the view function associated with the pattern\n            return pattern.name\n\n    # If no pattern matches the URL, return None\n    return None\n\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n\n"}
{"task_id": "valid/52", "completion": "\n    string = \"Hello\"\n    sentence = \"World\"\n    concatenated = string + \" \" + sentence\n    return concatenated\n"}
{"task_id": "valid/53", "completion": "\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings.append(s[i:j])\n    return substrings\n"}
{"task_id": "valid/54", "completion": "\n    price_sum = 0\n    for dictionary in list_of_dicts:\n        for key in dictionary.keys():\n            if key.startswith(\"price_\"):\n                price_sum += dictionary[key]\n            elif key == \"price\":\n                price_sum += dictionary[key]\n    return price_sum\n"}
{"task_id": "valid/55", "completion": "\n    return list(set(list1) & set(list2))\n"}
{"task_id": "valid/56", "completion": "\n    if request_method == \"GET\":\n        return api_advisor_view\n    elif request_method == \"POST\":\n        return api_view_post\n    else:\n        return None\n"}
{"task_id": "valid/57", "completion": "\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers\")\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Both a and b must be positive integers\")\n    if b == 0:\n        return a\n    else:\n        return gcd_recursive(b, a % b)"}
{"task_id": "valid/58", "completion": "\n    categorized_files = {\n        'global': [],\n        'environment': [],\n        'service': [],\n        'application': []\n    }\n\n    for file_path in file_paths:\n        # Extract the directory path and file name from the file path\n        directory, file_name = os.path.split(file_path)\n\n        # Determine the category based on the directory path\n        if 'global' in directory:\n            categorized_files['global'].append(file_path)\n        elif 'environment' in directory:\n            categorized_files['environment'].append(file_path)\n        elif 'service' in directory:\n            categorized_files['service'].append(file_path)\n        elif 'application' in directory:\n            categorized_files['application'].append(file_path)\n\n    return categorized_files\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n\n"}
{"task_id": "valid/61", "completion": "\n    # calculate time difference\n    timeDifference = timeEnd - timeStart\n\n    return timeDifference\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return -1\n\n    mid = (start + end) // 2\n\n    if array[mid] == target:\n        return mid\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    if color == \"WHITE\":\n        return \"RED\"\n    elif color == \"RED\":\n        return \"GREEN\"\n    elif color == \"GREEN\":\n        return \"BLUE\"\n    elif color == \"BLUE\":\n        return \"WHITE\"\n    else:\n        return \"Invalid color\"\n"}
{"task_id": "valid/64", "completion": "\n    for i in range(len(list)):\n        list[i] += 1\n    return list\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end + 1):\n        if is_perfect_square(i):\n            return True\n    return False\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        if word == target:\n            return True\n    return False\n"}
{"task_id": "valid/67", "completion": "\n    return sentence.split()\n\n"}
{"task_id": "valid/68", "completion": "\n    print(\"keys in given dictionary are:\")\n    for key in dict:\n        print(key)\n\n"}
{"task_id": "valid/69", "completion": "\n    phrase = \"Hello, World!\"\n    return f\"{phrase} This is a concatenated string using f-strings.\"\n"}
{"task_id": "valid/70", "completion": "\n    result = []\n    for string in strings:\n        if re.match(\"^[a-zA-Z0-9 ]*$\", string):\n            result.append(string.capitalize())\n    return result\n\n"}
{"task_id": "valid/71", "completion": "\n    return string.index(char)\n"}
{"task_id": "valid/72", "completion": "\n    bold_tags = []\n    start_tag = \"<b>\"\n    end_tag = \"</b>\"\n    start_index = 0\n    while True:\n        start_index = html_code.find(start_tag, start_index)\n        if start_index == -1:\n            break\n        end_index = html_code.find(end_tag, start_index)\n        if end_index == -1:\n            break\n        bold_tags.append(html_code[start_index:end_index + len(end_tag)])\n        start_index = end_index + len(end_tag)\n    return bold_tags"}
{"task_id": "valid/73", "completion": "\n    # Define the items and their prices\n    items = {\n        \"Coke\": 1.00,\n        \"Pepsi\": 1.50,\n        \"Sprite\": 1.25,\n        \"Water\": 0.75\n    }\n\n    # Check if the item is available\n    if item not in items:\n        return \"Item not available\"\n\n    # Check if the user has inserted enough money\n    if money_inserted < items[item]:\n        return \"Not enough money inserted\"\n\n    # Calculate the change to return\n    change = money_inserted - items[item]\n\n    # Update the stock of the item\n    items[item] -= 1\n\n    return f\"Here is your {item}. Your change is ${change:.2f}\"\n"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    return list(set(merged_list))\n"}
{"task_id": "valid/75", "completion": "\n    count = 0\n    for element in list:\n        if element == target:\n            count += 1\n    return count\n"}
{"task_id": "valid/76", "completion": "\n    return base64.b64encode(string.encode('utf-8')).decode('utf-8')\n\n"}
{"task_id": "valid/77", "completion": "\n    import matplotlib.pyplot as plt\n    x = [1, 2, 3, 0, 4, 0, 5]\n    plt.stem(x)\n    plt.show()\n    return [i for i, value in enumerate(x) if value != 0]\n"}
{"task_id": "valid/78", "completion": "\n    # Assigning value to variable\n    my_variable = 10\n\n    # Validating value\n    if my_variable == 10:\n        print(\"Value is valid\")\n    else:\n        print(\"Value is not valid\")\n\n"}
{"task_id": "valid/79", "completion": "\n    word_list = list(word)\n    random.shuffle(word_list)\n    return ''.join(word_list)\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, str):\n        return \"string\"\n    elif isinstance(element, int):\n        return \"integer\"\n    elif isinstance(element, float):\n        return \"float\"\n    elif isinstance(element, bool):\n        return \"boolean\"\n    elif isinstance(element, list):\n        return \"list\"\n    elif isinstance(element, dict):\n        return \"dictionary\"\n    elif isinstance(element, tuple):\n        return \"tuple\"\n    elif isinstance(element, set):\n        return \"set\"\n    elif isinstance(element, frozenset):\n        return \"frozenset\"\n    elif isinstance(element, type(None)):\n        return \"NoneType\"\n    else:\n        return \"unknown\"\n"}
{"task_id": "valid/81", "completion": "\n    if not arr:\n        return []\n    result = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i-1]:\n            result.append(arr[i])\n    return result\n"}
{"task_id": "valid/82", "completion": "\n\n        # Match words\n        (?:(?<=\\s)|(?<=^))\\w+(?=\\s|$)\n        |\n        # Match punctuation\n        (?<=[\\w\\s])[\\.,;:!?\\-]+(?=[\\s\\w])\n        |\n        # Match numbers\n        (?:(?<=\\s)|(?<=^))\\d+(?=\\s|$)\n        |\n        # Match whitespace\n        (?<=\\s)\\s+(?=\\s|$)\n    \"\"\"\n    # Compile the regular expression\n    pattern = re.compile(regex, re.VERBOSE)\n    # Tokenize the text\n    tokens = pattern.findall(text)\n    # Return the tokens\n    return tokens\n\n"}
{"task_id": "valid/83", "completion": "\n    divisible_by_3_and_7 = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    average = sum(divisible_by_3_and_7) / len(divisible_by_3_and_7) if divisible_by_3_and_7 else 0\n    maximum = max(divisible_by_3_and_7) if divisible_by_3_and_7 else 0\n    minimum = min(divisible_by_3_and_7) if divisible_by_3_and_7 else 0\n    occurrences = {num: divisible_by_3_and_7.count(num) for num in set(divisible_by_3_and_7)}\n    return divisible_by_3_and_7, average, maximum, minimum, occurrences\nnumbers = [21, 42, 63, 84, 105, 126, 147, 168, 189, 210]\ndivisible_by_3_and_7, average, maximum, minimum, occurrences = find_divisible_numbers(numbers)"}
{"task_id": "valid/84", "completion": "\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Create a dictionary to store word frequencies\n    word_freq = {}\n\n    # Count the frequency of each word\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n\n    # Find the word with the highest frequency\n    highest_freq = 0\n    highest_freq_word = \"\"\n    for word, freq in word_freq.items():\n        if freq > highest_freq:\n            highest_freq = freq\n            highest_freq_word = word\n\n    return highest_freq_word\n\n"}
{"task_id": "valid/85", "completion": "\n    e = 1\n    for i in range(1, decimal_places + 1):\n        e += 1 / math.factorial(i)\n    return round(e, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    sum = 0\n    for num in numbers:\n        sum += num\n    average = sum / len(numbers)\n    return average, sum\n\nnumbers = [1, 2, 3, 4, 5]\naverage, sum = getAverageAndSum(numbers)"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series is empty\")\n    if not all(isinstance(x, (int, float)) for x in time_series):\n        raise ValueError(\"Time series contains non-numerical values\")\n    return min(time_series), max(time_series)\n"}
{"task_id": "valid/88", "completion": "\n    relatedArticles = {}\n    for entry in encyclopedia:\n        relatedArticles[entry] = len(encyclopedia[entry])\n    return relatedArticles\n"}
{"task_id": "valid/89", "completion": "\n    max_value = max(lst)\n    return lst.index(max_value)\n"}
{"task_id": "valid/90", "completion": "\n    for i in list1:\n        if i in list2:\n            return True\n    return False"}
{"task_id": "valid/91", "completion": "\n    root = Element('data')\n    for key, value in dictionary.items():\n        child = Element(key)\n        child.text = str(value)\n        root.append(child)\n    return tostring(root, encoding='utf-8').decode('utf-8')\n\n"}
{"task_id": "valid/92", "completion": "\n    if not matrix or not matrix[0]:\n        return False\n\n    m, n = len(matrix), len(matrix[0])\n    left, right = 0, m * n - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        mid_value = matrix[mid // n][mid % n]\n\n        if mid_value == target:\n            return True\n        elif mid_value < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in lst:\n        if i & 1:\n            sum_odd += i\n            count_odd += 1\n    if count_odd == 0:\n        return 0\n    return sum_odd / count_odd\n"}
{"task_id": "valid/94", "completion": "\n    if n > len(lst):\n        return None\n    else:\n        lst.sort(reverse=True)\n        return lst[n-1]\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "valid/96", "completion": "\n    return set_a ^ set_b\n\n"}
{"task_id": "valid/97", "completion": "\n\n    Manage play music in server.\n    Bot has ability to provide information about features web app for managing personal playlists server settings.\n    Additionally bot has ability to categorize commands provide help information for each command.\n    Commands:\n    \"\"\"\n    for category, commands in mapping.items():\n        description += f\"\\n**{category}**:\\n\"\n        for command in commands:\n            description += f\"- {command['name']}: {command['description']}\\n\"\n    return description\n\n"}
{"task_id": "valid/98", "completion": "\n    if n < 0:\n        return '-' + dec_to_ternary(-n)\n    if n == 0:\n        return '0'\n    ternary = ''\n    while n > 0:\n        ternary = str(n % 3) + ternary\n        n = n // 3\n    return ternary"}
{"task_id": "valid/99", "completion": "\n    return tuple(os.path.splitext(file_name)[1] for file_name in file_names)\n\n"}
{"task_id": "valid/100", "completion": "\n    if age < 0:\n        return \"Invalid age\"\n    elif age < 13:\n        return \"Child\"\n    elif age < 20:\n        return \"Teenager\"\n    elif age < 40:\n        return \"Young Adult\"\n    elif age < 65:\n        return \"Adult\"\n    else:\n        return \"Senior\""}
{"task_id": "valid/101", "completion": "\n    if numerical_grade >= 90:\n        letter_grade = \"A\"\n        gpa = 4.0\n    elif numerical_grade >= 80:\n        letter_grade = \"B\"\n        gpa = 3.0\n    elif numerical_grade >= 70:\n        letter_grade = \"C\"\n        gpa = 2.0\n    elif numerical_grade >= 60:\n        letter_grade = \"D\"\n        gpa = 1.0\n    else:\n        letter_grade = \"F\"\n        gpa = 0.0\n    return letter_grade, gpa\n\n"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item[1]\n    return total\n\n"}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    palindrome_dict = {}\n    for palindrome in palindrome_tuples:\n        count = 0\n        for char in palindrome:\n            if char in vowels:\n                count += 1\n        palindrome_dict[palindrome] = count\n    return palindrome_dict\n"}
{"task_id": "valid/104", "completion": "\n    # convert string to list\n    s_list = list(s)\n    # reverse the list\n    s_list.reverse()\n    # join the list into a string\n    s = ''.join(s_list)\n    # return the modified string\n    return s\n\n"}
{"task_id": "valid/105", "completion": "\n    # Create a set to store the elements we've seen so far\n    seen = set()\n\n    # Iterate through the array\n    for num in arr:\n        # Check if the negative of the current number is in the set\n        if -num in seen:\n            # If it is, we've found a pair that sums to 0\n            return True\n        # Add the current number to the set\n        seen.add(num)\n\n    # If we've gone through the entire array without finding a pair that sums to 0, return False\n    return False\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n    for dependency in dependencies:\n        package_name, version_number = dependency\n        version_number = version_number.split('_')[1]  # Extract the date and time part of the version number\n        if package_name not in latest_versions or version_number > latest_versions[package_name]:\n            latest_versions[package_name] = version_number\n    return latest_versions\n"}
{"task_id": "valid/107", "completion": "\n    categorized_causes = {}\n    for cause in causes:\n        action, result = cause.split(' ')\n        if action in categorized_causes:\n            categorized_causes[action].append(result)\n        else:\n            categorized_causes[action] = [result]\n    return categorized_causes\n"}
{"task_id": "valid/108", "completion": "\n    code_name = name.replace(\" \", \"-\").lower()\n    return code_name\n\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(char) > 127 for char in text)\n"}
{"task_id": "valid/110", "completion": "\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    no_punct = \"\"\n    for char in string:\n        if char not in punctuations:\n            no_punct = no_punct + char\n    return no_punct\n"}
{"task_id": "valid/111", "completion": "\n    try:\n        return [num ** exp for num in num_list]\n    except TypeError:\n        print(\"Invalid input. Please provide a list of numbers and a valid exponent.\")\n        return None\n"}
{"task_id": "valid/112", "completion": "\n    min_values = [min(row) for row in grid]\n    for value in min_values:\n        print(value)\n\n"}
{"task_id": "valid/113", "completion": "\n    if n < 0:\n        raise ValueError(\"n must be a positive integer\")\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if current_num % 2 != 0:\n        current_num += 1\n    if n == 0:\n        return\n    print(\"Thank you\")\n    print_thank_you(n - 1, current_num + 2)\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    for i in range(len(lst) - 1):\n        if lst[i] == element and lst[i + 1] == element:\n            count += 1\n    return count\n"}
{"task_id": "valid/115", "completion": "\n    num_str = str(num)\n    return all(digit == num_str[0] for digit in num_str)\n\n"}
{"task_id": "valid/116", "completion": "\n    vowels = \"aeiouAEIOU\"\n    if not s:\n        return s\n    if s[0] in vowels:\n        return remove_vowels_recursive(s[1:])\n    else:\n        return s[0] + remove_vowels_recursive(s[1:])\n"}
{"task_id": "valid/117", "completion": "\n    help_message = \"Usage: python app.py [options]\\n\\nOptions:\\n\"\n    for option in options:\n        help_message += f\"  -{option[0]}, --{option[0]}={option[2]}  {option[1]}\\n\"\n    return help_message\n\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n\n"}
{"task_id": "valid/119", "completion": "\n    return [Val.count(i) for i in range(Val[0])]\n\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = 'aeiou'\n    return all(char in vowels for char in s.lower())\n"}
{"task_id": "valid/122", "completion": "\n    count = 0\n    start = 0\n    while True:\n        start = sequence.find(subsequence, start)\n        if start == -1: \n            break\n        count += 1\n        start += 1\n    return count\n"}
{"task_id": "valid/123", "completion": "\n    if t == 0:\n        raise ValueError(\"Divisor cannot be zero\")\n    if h < 0:\n        h = -h\n        t = -t\n    q = 0\n    while h >= t:\n        h -= t\n        q += 1\n    return q"}
{"task_id": "valid/124", "completion": "\n"}
{"task_id": "valid/125", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    return sum(1 for c in string if c in consonants)\n\n"}
{"task_id": "valid/126", "completion": "\n    # calculate number of electrons based on energy values\n    num_electrons = 0\n    for energy in grid_energies:\n        num_electrons += ados[energy] * (2 * (1 + np.sign(energy)))\n\n    # adjust number of electrons based on doping levels\n    num_electrons += dope * dos_grid_size\n\n    return num_electrons\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    n = len(arr)\n    mid = n // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    left.reverse()\n    right.reverse()\n    return left + right\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for element in lst:\n        if element not in unique_elements:\n            unique_elements.append(element)\n            if len(unique_elements) == 3:\n                break\n    return unique_elements\n"}
{"task_id": "valid/132", "completion": "\n    # Sort the fruit list in lexicographical order\n    sorted_fruit_list = sorted(fruit_list)\n\n    # Join the sorted list into a single string with each fruit name separated by a comma and a space\n    result = ', '.join(sorted_fruit_list)\n\n    return result\n"}
{"task_id": "valid/133", "completion": "\n    sublists = []\n    for i in range(len(lst) + 1):\n        for j in range(i + 1, len(lst) + 1):\n            sublists.append(lst[i:j])\n    return sublists\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d+\\.\\d+'\n    if re.search(pattern, string):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "valid/135", "completion": "\n\n    The function takes three arguments: `app_name`, `model_name`, and `field_name`.\n    It imports the necessary modules from Django and defines a new migration class.\n    The `dependencies` attribute specifies the dependencies for the migration,\n    which in this case is the initial migration for the `history` app.\n    The `operations` attribute is a list of migration operations to be performed.\n    In this case, it adds a new field named `field_name` to the `CommitteeMember` model.\n    The `max_length` argument specifies the maximum length of the field.\n    The `preserve_default=False` argument ensures that the default value is not preserved.\n    The function returns the generated migration operation.\n    \"\"\"\n    return Migration\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = set(list1) & set(list2)\n    return sum(common_elements)\n"}
{"task_id": "valid/137", "completion": "\n    forecast_period = math.ceil(len(df) * 0.01)\n    return forecast_period\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n"}
{"task_id": "valid/139", "completion": "\n    start = (page_number - 1) * items_per_page\n    end = start + items_per_page\n    return items[start:end]\n\n"}
{"task_id": "valid/140", "completion": "\n    n = list(n_str)\n    carry = 0\n    for i in range(len(n)-1, -1, -1):\n        n[i] = int(n[i])\n        n[i] *= 2\n        n[i] += carry\n        carry = n[i] // 10\n        n[i] %= 10\n    if carry:\n        n.insert(0, carry)\n    return ''.join(map(str, n))\n\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        \"home\": (0.0, 0.0, 0.0),\n        \"point\": (0.1, 0.1, 0.1),\n        \"wave\": (0.2, 0.2, 0.2),\n    }\n\n    # main function initializes ROS node for reflex control.\n    def main():\n        rospy.init_node(\"reflex_control\")\n        reflex = Reflex()\n        while not rospy.is_shutdown():\n            for name, coords in presets.items():\n                print(f\"Moving to {name} preset\")\n                reflex.move_to(coords)\n                rospy.sleep(1.0)\n\n    if __name__ == \"__main__\":\n        main()\n\nThe `get_preset_coordinates` function is not defined in the provided code snippet. The code snippet you provided is a ROS (Robot Operating System) node for controlling a robotic arm using the Reflex library. The `presets` dictionary contains preset positions for the robotic arm, but there is no function defined to get these preset coordinates.\n\nIf you want to get the preset coordinates from the `presets` dictionary, you can define a function like this:\n\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = set(list1) & set(list2)\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]"}
{"task_id": "valid/143", "completion": "\n    if allow_multiple_answer:\n        print(\"Multiple answer is allowed\")\n    else:\n        print(\"Multiple answer is not allowed\")\n    if zoom_level == 1:\n        print(\"Zoom level is 1\")\n    elif zoom_level == 2:\n        print(\"Zoom level is 2\")\n    else:\n        print(\"Zoom level is not defined\")\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in sentence if char not in vowels])\n"}
{"task_id": "valid/146", "completion": "\n    def merge(a, b):\n        for key in b:\n            if key in a:\n                if isinstance(a[key], dict) and isinstance(b[key], dict):\n                    merge(a[key], b[key])\n                else:\n                    a[key] = b[key]\n            else:\n                a[key] = b[key]\n        return a\n\n    def sort_dict(d):\n        return {k: d[k] for k in sorted(d)}\n\n    def filter_dict(d):\n        return {k: v for k, v in d.items() if k.isalpha()}\n\n    merged = merge(a, b)\n    merged = sort_dict(merged)\n    merged = filter_dict(merged)\n    return merged\n\na = {'a': 1, 'b': 2, 'nested': {'x': 5, 'y': 6}}\nb = {'c': 3, 'd': 4, 'nested': {'y': 7, 'z': 8}}"}
{"task_id": "valid/147", "completion": "\n    try:\n        max_value = max(d.values())\n        return max_value\n    except ValueError:\n        return \"Empty dictionary\"\n    except TypeError:\n        return \"Dictionary contains non-numeric values\"\n"}
{"task_id": "valid/148", "completion": "\n    return sum(dict[key]) / len(dict[key])\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None:\n        return None\n    else:\n        return string.replace('e', '*')\n"}
{"task_id": "valid/150", "completion": "\n    smallest = heapq.nsmallest(n, lst)\n    return smallest\n\n"}
{"task_id": "valid/151", "completion": "\n    return x == 0 or x == 1 or x == 2 or x == 3 or x == 4 or x == 5 or x == 6 or x == 7 or x == 8 or x == 9 or x == 10 or x == 11 or x == 12 or x == 13 or x == 14 or x == 15 or x == 16 or x == 17 or x == 18 or x == 19 or x == 20 or x == 21 or x == 22 or x == 23 or x == 24 or x == 25 or x == 26 or x == 27 or x == 28 or x == 29 or x == 30 or x == 31 or x == 32 or x == 33 or x == 34 or x == 35 or x == 36 or x == 37 or x == 38 or x == 39 or x == 40 or x == 41 or x == 42 or x == 43 or x == 44 or x == 45 or x == 46 or x == 47 or x == 48 or x == 49 or x == 50 or x == 51 or x == 52 or x == 53 or x == 54 or x == 55 or x == 56 or x == 57 or x == 58 or x == 59 or x == 60 or x == 61 or x == 62 or x == 63 or x == 64 or x == 65 or x == 66 or x == 67 or x == 68 or x == 69 or x == 70 or x == 71 or x == 72 or x == 73 or x == 74 or x == 75 or x == 76 or x == 77 or x == 78 or x == 79 or x == 80 or x == 81 or x == 82 or x == 83 or x == 84 or x == 85 or x == 86 or x == 87 or x == 88 or x == 89 or x == 90 or x == 91 or x == 92 or x == 93 or x == 94 or x == 95 or x == 96 or x == 97 or x == 98 or x == 99 or x == 100 or x == 101 or"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n\n"}
