{"task_id": "EvoEval/0", "completion": "\n    # Initialize total cost to 0\n    total_cost = 0.0\n    \n    # Define location factors\n    location_factors = {\n        \"Local\": 1.0,\n        \"National\": 1.5,\n        \"International\": 2.5\n    }\n    \n    # Get location factor\n    factor = location_factors.get(location, 1.0)\n    \n    # Iterate over items\n    for item in items:\n        # Check if item is a string\n        if isinstance(item, str):\n            # If item is a string, consider it as 1kg\n            weight = 1.0\n        else:\n            # If item is not a string, consider it as its weight\n            weight = item\n        \n        # Check if weight is more than 5kg\n        if weight > 5.0:\n            # If weight is more than 5kg, add additional charge\n            total_cost += 10.0\n        \n        # Add base shipping cost\n        total_cost += 5.0\n        \n        # Multiply total cost by factor\n        total_cost *= factor\n    \n    # Return total shipping cost rounded to two decimal places as string\n    return \"{:.2f}\".format(total_cost)  # <--- changed here\n"}
{"task_id": "EvoEval/1", "completion": "\n    # Initialize total cost to 0\n    total_cost = 0.0\n    \n    # Define location factors\n    location_factors = {\n        \"Local\": 1.0,\n        \"National\": 1.5,\n        \"International\": 2.5\n    }\n    \n    # Get the location factor\n    factor = location_factors.get(location, 1.0)\n    \n    # Iterate over each item in the list\n    for item in items:\n        # If the item is a string, consider it as 1kg\n        if isinstance(item, str):\n            weight = 1.0\n        # If the item is a float, consider it as the weight\n        elif isinstance(item, float):\n            weight = item\n        # If the item is neither a string nor a float, skip it\n        else:\n            continue\n        \n        # Calculate the base cost\n        base_cost = 5.0\n        \n        # If the weight is more than 5kg, add an additional charge\n        if weight > 5.0:\n            base_cost += 10.0\n        \n        # Add the base cost to the total cost\n        total_cost += base_cost\n        \n    # Multiply the total cost by the location factor\n    total_cost *= factor\n    \n    # Return the total cost rounded to two decimal places\n    return round(total_cost, 2)  # Changed here\n"}
{"task_id": "EvoEval/2", "completion": "\n    encrypted_words = []\n    if isinstance(key, str):\n        key = sum(ord(char) for char in key)\n    for word in words:\n        encrypted_word = \"\"\n        for char in word:\n            if char.isalpha():\n                ascii_offset = 97 if char.islower() else 65\n                encrypted_char = chr((ord(char) - ascii_offset + key) % 26 + ascii_offset)\n                encrypted_word += encrypted_char\n            else:\n                encrypted_word += char\n        encrypted_words.append(encrypted_word)\n    return encrypted_words\n"}
{"task_id": "EvoEval/3", "completion": "\n    # Convert the input string to a list of integers\n    input_list = [int(i) for i in input_string]\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Define a helper function to generate all possible combinations\n    def generate_combinations(current_combination, start_index):\n        # If the current combination is complete, add it to the result list\n        if len(current_combination) == len(input_list):\n            result.append(''.join(chr(i + 96) for i in current_combination))\n            return\n        \n        # Try each possible digit\n        for i in range(start_index, len(input_list)):\n            # Add the current digit to the current combination\n            current_combination.append(input_list[i])\n            \n            # Recursively generate combinations with the updated current combination\n            generate_combinations(current_combination, i + 1)\n            \n            # Remove the last digit from the current combination (backtracking)\n            current_combination.pop()\n    \n    # Generate all possible combinations\n    generate_combinations([], 0)\n    \n    # Return the result list\n    return result\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    max_height = candles[0]\n    count = 1\n    for height in candles[1:]:\n        if height > max_height:\n            max_height = height\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not matrix:\n        return []\n    result = []\n    left, right = 0, len(matrix[0]) - 1\n    for row in matrix:\n        if left > right:\n            break\n        # traverse from left to right\n        for i in range(left, right + 1):\n            result.append(row[i])\n        left += 1\n        right -= 1\n        # traverse from right to left\n        for i in range(right, left - 1, -1):\n            result.append(row[i])\n        left += 1\n        right -= 1\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]):\n        return grid\n    if grid[x][y] == 1:\n        return grid\n    if grid[x][y] == 0:\n        return grid\n    grid[x][y] = 0\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if 0 <= x + i < len(grid) and 0 <= y + j < len(grid[0]):\n                if grid[x + i][y + j] == -1:\n                    grid[x + i][y + j] = 0\n    return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    # Initialize current position at (0,0)\n    current_position = [0, 0]\r\n    # Iterate over each direction in the code sequence\n    for direction in code_sequence:\r\n        # Update current position based on the direction\r\n        if direction == 0:\r\n            current_position[0] += 1\r\n        elif direction == 1:\r\n            current_position[1] += 1\r\n        elif direction == 2:\r\n            current_position[0] -= 1\r\n        elif direction == 3:\r\n            current_position[1] -= 1\r\n        # Check if current position is back at the starting point\r\n        if current_position == [0, 0]:\r\n            # If so, return 'Shangri-La found'\r\n            return 'Shangri-La found'\r\n    # If the loop completes without finding the starting point, return 'Shangri-La not found'\r\n    return 'Shangri-La not found'\r\n"}
{"task_id": "EvoEval/8", "completion": "\n    # Split the canvas into a list of characters\n    canvas = list(canvas)\n    # Find the position of the painter\n    painter_pos = [i for i, x in enumerate(canvas) if x == 'P']\n    # If there is no painter or more than one painter, return the canvas as it is\n    if len(painter_pos) != 1:\n        return ''.join(canvas)\n    # Get the position of the painter\n    painter = painter_pos[0]\n    # Initialize the number of painted spaces\n    painted = 0\n    # Initialize the current position\n    current = painter\n    # While the current position is not a wall and is not out of the canvas\n    while current < len(canvas) and canvas[current] != '#':\n        # If the current position is empty, paint it and increment the number of painted spaces\n        if canvas[current] == '-':\n            canvas[current] = '*'\n            painted += 1\n        # Move to the next position\n        current += 1\n    # If the number of painted spaces divides the empty spaces evenly, return 'Invalid canvas'\n    if painted % (len(canvas) - painter - 1) != 0:\n        return 'Invalid canvas'\n    # Return the updated canvas\n    return ''.join(canvas)  # <--- changed here\n"}
{"task_id": "EvoEval/9", "completion": "\n    # Convert string to lower case\n    string = string.lower()\n    # Remove punctuation\n    string = ''.join(e for e in string if e.isalnum() or e.isspace())\n    # Split string into words\n    words = string.split()\n    # Create dictionary to store word frequencies\n    frequency = {}\n    # Iterate over each word\n    for word in words:\n        # If word is already in dictionary, increment its frequency\n        if word in frequency:\n            frequency[word] += 1\n        # If word is not in dictionary, add it with a frequency of 1\n        else:\n            frequency[word] = 1\n    # Return dictionary of word frequencies\n    return frequency\n"}
{"task_id": "EvoEval/10", "completion": "\n    animal_sounds = {'C': 'meow', 'D': 'woof', 'B': 'chirp'}\r\n    animal_counts = {}\r\n    result = []\r\n    animal_string = animal_string.replace(' ', '|')\r\n\r\n    for animal in animal_string.split('|'):\r\n        if animal in animal_sounds:\r\n            if animal not in animal_counts:\r\n                animal_counts[animal] = 0\r\n            animal_counts[animal] += 1\r\n            if animal_counts[animal] <= 5:\r\n                result.append(animal_counts[animal])\r\n        elif animal == '':\r\n            continue\r\n        else:\r\n            if animal_counts:\r\n                animal_counts.clear()\r\n    return result\r\n\r"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh are {fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"are {', '.join(fruits[:-1])} {fruits[-1]} from {location}? Marvelous!\"\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    # Count the occurrence of each element in the list\n    count_dict = {}\n    for num in flux_values:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Find the element with the maximum occurrence, if multiple select the smallest one\n    max_count = max(count_dict.values())\n    most_occurred_num = min([num for num, count in count_dict.items() if count == max_count])\n\n    # Find the sum of all elements in the array\n    total_sum = sum(flux_values)\n\n    # Multiply the sum of elements with the most occurred number\n    result = total_sum * most_occurred_num\n\n    return result\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    count_dict = {}\n    for elem in elems:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    min_count = min(count_dict.values())\n    rarest_elements = [elem for elem, count in count_dict.items() if count == min_count]\n    return rarest_elements[0]  # return first rarest element\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                alias += vowels[(index + 1) % len(vowels)]\n            else:\n                index = consonants.index(char.lower())\n                alias += consonants[(index + 1) % len(consonants)]\n        else:\n            alias += char\n    return alias\n"}
{"task_id": "EvoEval/15", "completion": "\n    # create dictionary to map card values\n    card_values = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 1}\n    # create dictionary to map card values to their counts\n    card_counts = {}\n    # iterate over each card in hand\n    for card in hand:\n        # extract value from card\n        value = card[0]\n        # increment count for value in card_counts\n        card_counts[value] = card_counts.get(value, 0) + 1\n    # initialize score to 0\n    score = 0\n    # check for pairs\n    pairs = [value for value, count in card_counts.items() if count == 2]\n    # check for triples\n    triples = [value for value, count in card_counts.items() if count == 3]\n    # check for fours\n    fours = [value for value, count in card_counts.items() if count == 4]\n    # check for fives\n    fives = [value for value, count in card_counts.items() if count == 5]\n    # if there are pairs, add value of pairs to score\n    if pairs:\n        score += sum(card_values[value] for value in pairs)\n    # if there are triples, add double value of triples to score\n    if triples:\n        score += sum(card_values[value] * 2 for value in triples)\n    # if there are fours, add triple value of fours to score\n    if fours:\n        score += sum(card_values[value] * 3 for value in fours)\n    # if there are fives, add quadruple value of fives to score\n    if fives:\n        score += sum(card_values[value] * 4 for value in fives)\n    # return score\n    return score\n"}
{"task_id": "EvoEval/16", "completion": "\n    a, b = 0, 1\n    total = 0\n    for _ in range(n):\n        total += a\n        a, b = b, a + b\n    return total\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard_name, magic_power in wizards:\n        dragon_hp -= magic_power\n        if dragon_hp <= 0:\n            return wizard_name\n    return 'The dragon won!'\n"}
{"task_id": "EvoEval/18", "completion": "\n    return 7 * (10 ** (n - 1)) + 6 * (10 ** (n - 2)) + 5 * (10 ** (n - 3)) + 4 * (10 ** (n - 4)) + 3 * (10 ** (n - 5)) + 2 * (10 ** (n - 6)) + 1 * (10 ** (n - 7))  # 7 * (10 ** (n - 1)) + 6 * (10 ** (n - 2)) + 5 * (10 ** (n - 3)) + 4 * (10 ** (n - 4)) + 3 * (10 ** (n - 5)) + 2 * (10 ** (n - 6)) + 1 * (10 ** (n - 7))  # 7 * (10 ** (n - 1)) + 6 * (10 ** (n - 2)) + 5 * (10 ** (n - 3)) + 4 * (10 ** (n - 4)) + 3 * (10 ** (n - 5)) + 2 * (10 ** (n - 6)) + 1 * (10 ** (n - 7))  # 7 * (10 ** (n - 1)) + 6 * (10 ** (n - 2)) + 5 * (10 ** (n - 3)) + 4 * (10 ** (n - 4)) + 3 * (10 ** (n - 5)) + 2 * (10 ** (n - 6)) + 1 * (10 ** (n - 7))  # 7 * (10 ** (n - 1)) + 6 * (10 ** (n - 2)) + 5 * (10 ** (n - 3)) + 4 * (10 ** (n - 4)) + 3 * (10 ** (n - 5)) + 2 * (10 ** (n - 6)) + 1 * (10 ** (n - 7))  # 7 * (10 ** (n - 1)) + 6 * (10 ** (n - 2)) + 5 * (10 ** (n - 3)) + 4 * (10 ** (n - 4"}
{"task_id": "EvoEval/19", "completion": "\n    if not m:\n        return 0\n    rows = len(m)\n    cols = len(m[0])\n    danger = 0\n    for i in range(rows):\n        for j in range(cols):\n            if m[i][j] == 2:\n                for k in range(rows):\n                    if m[k][j] == 1:\n                        danger += 1\n                for k in range(cols):\n                    if m[i][k] == 1:\n                        danger += 1\n                m[i][j] = 0\n    return danger\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    pattern = []\n    for i in range(1, n + 1):\n        pattern.append(','.join(map(str, range(1, i + 1))))\n    for i in range(n - 1, 0, -1):\n        pattern.append(','.join(map(str, range(i, 0, -1))))\n    return pattern\n"}
{"task_id": "EvoEval/21", "completion": "\n    # Check if grid is square\n    if len(grid) != len(grid[0]):\n        return False\n\n    # Check if all words are lowercase\n    for word in words:\n        if not word.islower():\n            return False\n\n    # Check if all words are in the grid\n    for word in words:\n        found = False\n        # Check horizontally\n        for row in grid:\n            for i in range(len(row)):\n                if row[i] == word[0]:\n                    if len(word) <= len(row) - i:\n                        if row[i:i+len(word)] == list(word):\n                            found = True\n                            break\n        if not found:\n            # Check vertically\n            for col in range(len(grid[0])):\n                for i in range(len(grid)):\n                    if grid[i][col] == word[0]:\n                        if len(word) <= len(grid) - i:\n                            if [grid[j][col] for j in range(i, i+len(word))] == list(word):\n                                found = True\n                                break\n        if not found:\n            return False\n    return True\n"}
{"task_id": "EvoEval/22", "completion": "\n    return (v * t) / (9.461 * (10 ** 12))\n"}
{"task_id": "EvoEval/23", "completion": "\n    # Create a list of prime numbers up to 26\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]\n    # Initialize an empty string to store the result\n    result = \"\"\n    # Iterate over each character in the input string\n    for char in s:\n        # Check if the character is a lowercase letter\n        if char.islower():\n            # Find the position of the character in the alphabet (a=1, b=2, ..., z=26)\n            position = ord(char) - ord('a') + 1\n            # Append the corresponding prime number to the result string\n            result += str(primes[position - 1])\n        else:\n            # If the character is not a lowercase letter, append it to the result string as is\n            result += char\n    # Return the resulting string\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {\n        'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!', 'h': '#', 'i': '$',\n        'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=', 'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~',\n        't': '>', 'u': '<', 'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'\n    }\n    alien_word = ''\n    for char in english_word:\n        alien_word += alien_dict.get(char.lower(), char)\n    return alien_word\n"}
{"task_id": "EvoEval/25", "completion": "\n    # Split text into sentences\n    sentences = text.split(\". \")\n    # Initialize dictionary to store word frequency\n    word_freq = {}\r\n    # Initialize variable to store sentence with max frequency word\r\n    max_freq_sentence = \"\"\r\n    # Initialize variable to store max frequency\r\n    max_freq = 0\r\n    # Iterate over each sentence\r\n    for sentence in sentences:\r\n        # Split sentence into words\r\n        words = sentence.split()\r\n        # Iterate over each word in sentence\r\n        for word_in_sentence in words:\r\n            # If word is in word frequency dictionary, increment its frequency\r\n            if word_in_sentence in word_freq:\r\n                word_freq[word_in_sentence] += 1\r\n            # If word is not in word frequency dictionary, add it with frequency 1\r\n            else:\r\n                word_freq[word_in_sentence] = 1\r\n            # If frequency of word in sentence is greater than max frequency, update max frequency and sentence with max frequency word\r\n            if word_freq[word_in_sentence] > max_freq:\r\n                max_freq = word_freq[word_in_sentence]\r\n                max_freq_sentence = sentence\r\n    # Return frequency of word and sentence with max frequency word\r\n    return (word_freq.get(word, 0), max_freq_sentence) if max_freq_sentence else (0, \"\")\r\n\r"}
{"task_id": "EvoEval/26", "completion": "\n    # Check if start and end are the same\n    if start == end:\n        return []\n\n    # Define the possible movements (up, down, left, right)\n    movements = [(0, 1, 'right'), (0, -1, 'left'), (1, 0, 'down'), (-1, 0, 'up')]\n\n    # Create a queue for BFS, contains cells in the form (row, col, path)\n    queue = [(start, [])]\n\n    # Create a set to store visited cells\n    visited = set([start])\n\n    while queue:\n        # Dequeue the next cell\n        (row, col), path = queue.pop(0)\n\n        # If this is the destination cell, return the path\n        if (row, col) == end:\n            return path\n\n        # For each possible movement\n        for dr, dc, direction in movements:\n            r, c = row + dr, col + dc\n\n            # If the new cell is inside the maze and is not a wall and has not been visited\n            if (0 <= r < len(maze)) and (0 <= c < len(maze[0])) and (maze[r][c] == 0) and ((r, c) not in visited):\n                # Mark the new cell as visited\n                visited.add((r, c))\n\n                # Add the new cell to the queue\n                queue.append(((r, c), path + [direction]))\n\n    # If there is no path to the destination\n    return []  # Return an empty list\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    # Calculate taxable income\n    taxable_income = income - deductions\n\n    # Calculate tax for each income bracket\n    tax_free = min(taxable_income, 10000)\n    taxable_income -= tax_free\n    tax_15_percent = min(taxable_income, 25000) * 0.15\n    taxable_income -= tax_15_percent\n    tax_25_percent = min(taxable_income, 45000) * 0.25\n    taxable_income -= tax_25_percent\n    tax_30_percent = min(taxable_income, 30000) * 0.30\n    taxable_income -= tax_30_percent\n\n    # Calculate tax for income over $130,000\n    tax_over_130k = taxable_income * 0.30\n\n    # Calculate total tax\n    total_tax = tax_free + tax_15_percent + tax_25_percent + tax_30_percent + tax_over_130k\n\n    return total_tax\n"}
{"task_id": "EvoEval/29", "completion": "\n    substrings = set()\n    for length in range(1, len(s) + 1):\n        for i in range(len(s) - length + 1):\n            substring = s[i:i + length]\n            if substring == substring[::-1]:\n                substrings.add(substring)\n    return sorted(list(substrings))  # sorted list of unique substrings\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    # Define the possible movements (up, down, left, right)\n    movements = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    # Create a queue for BFS, enqueue the start point\n    queue = [(start, [start])]\n    \n    # Create a set to store the visited points\n    visited = set([start])\n    \n    while queue:\n        # Dequeue the first point in the queue\n        (x, y), path = queue.pop(0)\n        \n        # If this is the destination point, return the path\n        if (x, y) == end:\n            return path\n        \n        # For each possible movement\n        for dx, dy in movements:\n            nx, ny = x + dx, y + dy\n            \n            # If the new point is within the maze boundaries and is not a wall and has not been visited\n            if (0 <= nx < len(maze)) and (0 <= ny < len(maze[0])) and (maze[nx][ny] == 1) and ((nx, ny) not in visited):\n                # Mark the new point as visited\n                visited.add((nx, ny))\n                \n                # Enqueue the new point with the updated path\n                queue.append(((nx, ny), path + [(nx, ny)]))\n    \n    # If there is no path to the destination, return an empty list\n    return []\n\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    # Create a 2D array to store the number of unique paths to each cell\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    # There is only one way to reach any cell in the first row or column\n    for i in range(m + 1):\n        dp[i][0] = 1\n    for j in range(n + 1):\n        dp[0][j] = 1\n    # For each cell, the number of unique paths is the sum of the number of\n    # unique paths to the cell above it and the cell to its left\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    # The number of unique paths to the bottom-right corner is stored in the\n    # bottom-right cell of the 2D array\n    return dp[m][n]\n"}
{"task_id": "EvoEval/32", "completion": "\n    # Create a copy of the original playlist to avoid modifying it\n    playlist_copy = playlist.copy()\n    # Initialize the seed\n    seed = seed\n    # Iterate over the indices of the playlist\n    for i in range(len(playlist_copy)):\n        # Calculate the index to swap with\n        swap_index = (seed % len(playlist_copy))\n        # Check if the song title at the swap index contains the word \"Rock\"\n        if \"Rock\" in playlist_copy[swap_index]:\n            # If it does, skip the swap operation\n            pass\n        else:\n            # If it doesn't, swap the elements at the current index and the swap index\n            playlist_copy[i], playlist_copy[swap_index] = playlist_copy[swap_index], playlist_copy[i]\n        # Update the seed for the next iteration\n        seed = (seed * 16807) % 2147483647\n    # Return the shuffled playlist\n    return playlist_copy\n"}
{"task_id": "EvoEval/33", "completion": "\n    # Create a list to store the number of ways to reach each step\n    ways = [0] * (n + 1)\r\n    ways[0] = 1  # There is one way to reach the first step (i.e., don't move)\r\n    for i in range(1, n + 1):\r\n        for power in magic_stones:\r\n            if i >= power:\r\n                ways[i] += ways[i - power]\r\n    return ways[n]  # Return the number of ways to reach the top of the staircase\r\n\r"}
{"task_id": "EvoEval/34", "completion": "\n    # Initialize the list to store transformation percentages\n    transformation_percentages = []\n    # Initialize the current transformation percentage\n    current_transformation_percentage = 0\n    # Loop through each day in the cycle\n    for day in range(1, n + 1):\n        # If it's the most intense day, double the current transformation percentage\n        if day == m:\n            current_transformation_percentage = min(current_transformation_percentage * 2, 100)\n            transformation_percentages.append(int(current_transformation_percentage))\n        # If it's not the most intense day, increase or decrease the current transformation percentage by 10%\n        else:\n            if day < m:\n                current_transformation_percentage = min(current_transformation_percentage + 10, 100)\n            else:\n                current_transformation_percentage = max(current_transformation_percentage - 10, 0)\n            transformation_percentages.append(int(current_transformation_percentage))\n    return transformation_percentages\n"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email:\r\n        return False\r\n    if email[0] == \"@\" or email[-1] == \"@\":\r\n        return False\r\n    if email.count(\"@\") > 1:\r\n        return False\r\n    if \"@\" in email[:-1]:\r\n        return False\r\n    return True\r\n\r"}
{"task_id": "EvoEval/36", "completion": "\n    integral_coefficients = [0]\n    for i in range(len(xs)):\n        integral_coefficients.append(xs[i] / (i + 1))\n    return integral_coefficients\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for char in s:\n        if char in vowels:\n            idx = vowels.index(char)\n            if idx == len(vowels) - 1:\n                result.append(vowels[0])\n            else:\n                result.append(vowels[idx + 1])\n        elif char in consonants:\n            idx = consonants.index(char)\n            if idx == len(consonants) - 1:\n                result.append(consonants[0])\n            else:\n                result.append(consonants[idx + 1])\n        else:\n            result.append(char)\n    return ''.join(result)  # join the list of characters into a string\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\": \"\ud83d\ude09\",\n        \":P\": \"\ud83d\ude1c\",\n        \":O\": \"\ud83d\ude2e\",\n        \":|\": \"\ud83d\ude10\",\n        \":/\": \"\ud83d\ude15\",\n        \";-(\": \"\ud83d\ude14\",\n        \":-(\": \"\ud83d\ude14\",\n        \":-)\": \"\ud83d\ude0a\",\n        \":-D\": \"\ud83d\ude00\",\n        \":-P\": \"\ud83d\ude1c\",\n        \":-O\": \"\ud83d\ude2e\",\n        \":-|\": \"\ud83d\ude10\",\n        \":-/\": \"\ud83d\ude15\",\n        \";-)\": \"\ud83d\ude09\",\n        \":-(\": \"\ud83d\ude14\",\n        \":-)\": \"\ud83d\ude0a\",\n        \":-D\": \"\ud83d\ude00\",\n        \":-P\": \"\ud83d\ude1c\",\n        \":-O\": \"\ud83d\ude2e\",\n        \":-|\": \"\ud83d\ude10\",\n        \":-/\": \"\ud83d\ude15\",\n        \";-(\": \"\ud83d\ude14\",\n        \":-(\": \"\ud83d\ude14\",\n        \":-)\": \"\ud83d\ude0a\",\n        \":-D\": \"\ud83d\ude00\",\n        \":-P\": \"\ud83d\ude1c\",\n        \":-O\": \"\ud83d\ude2e\",\n        \":-|\": \"\ud83d\ude10\",\n        \":-/\": \"\ud83d\ude15\",\n        \";-)\": \"\ud83d\ude09\",\n        \":-(\": \"\ud83d\ude14\",\n        \":-)\": \"\ud83d\ude0a\",\n        \":-D\": \"\ud83d\ude00\",\n        \":-P\": \"\ud83d\ude1c\",\n        \":-O\": \"\ud83d\ude2e\",\n        \":-|\": \"\ud83d\ude10\",\n        \":-/\": \"\ud83d\ude15\",\n        \";-(\": \"\ud83d\ude14\",\n        \":-(\": \"\ud83d\ude14\",\n        \":-)\": \"\ud83d\ude0a\",\n        \":-D\": \"\ud83d\ude00\",\n        \":-P\": \"\ud83d\ude1c\",\n        \":-O\": \"\ud83d\ude2e\",\n        \":-|\": \"\ud83d\ude10\",\n        \":-/\": \"\ud83d\ude15\",\n        \";-)\": \"\ud83d\ude09\",\n        \":-(\": \"\ud83d\ude14\",\n        \":-)\": \"\ud83d\ude0a\",\n        \":-D\": \"\ud83d\ude00\",\n        \":-P\": \"\ud83d\ude1c\",\n        \":-O\": \"\ud83d\ude2e\",\n        \":-|\": \"\ud83d\ude10\",\n        \":-/\": \"\ud83d\ude15\",\n        \";-(\": \"\ud83d\ude14\",\n        \":-(\": \"\ud83d\ude14\",\n        \":-)\": \"\ud83d\ude0a\",\n        \":-D\": \""}
{"task_id": "EvoEval/39", "completion": "\n    # Create the top and bottom frames\n    frame = \"*\" * (n * len(s) + 3)\n    # Create the middle part of the ASCII art\n    middle = \"*\" + s * n + \"*\" * (n - 1)\n    # Create the ASCII art\n    ascii_art = [frame] + [middle] * n + [frame]\n    return \"\\n\".join(ascii_art)  # Join the list of strings with newline characters\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    def dfs(potions, target, current, current_potions, memo):\n        if target == 0:\n            return current_potions\n        if target < 0:\n            return None\n        if (target, tuple(current_potions)) in memo:\n            return memo[(target, tuple(current_potions))]\n        best = None\n        for i, potion in enumerate(potions):\n            name, power = potion.split()\n            power = int(power)\n            new_potions = current_potions + [potion]\n            new_target = target - power\n            result = dfs(potions[:i] + potions[i+1:], new_target, current + 1, new_potions, memo)\n            if result is not None and (best is None or len(result) < len(best) or (len(result) == len(best) and ''.join([potion.split()[0] for potion in result]) < ''.join([potion.split()[0] for potion in best]))):\n                best = result\n        memo[(target, tuple(current_potions))] = best\n        return best\n\n    return dfs(potions, target, 0, [], {}) if target > 0 else []\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    rows = len(arr)\n    cols = len(arr[0])\n    # create a 2D array to store minimum energy required to reach each cell\n    energy = [[0] * cols for _ in range(rows)]\n    # initialize energy for first cell\n    energy[0][0] = arr[0][0]\n    # initialize first row\n    for j in range(1, cols):\n        energy[0][j] = energy[0][j - 1] + arr[0][j]\n    # initialize first column\n    for i in range(1, rows):\n        energy[i][0] = energy[i - 1][0] + arr[i][0]\n    # fill in the rest of the energy array\n    for i in range(1, rows):\n        for j in range(1, cols):\n            energy[i][j] = min(energy[i - 1][j], energy[i][j - 1]) + arr[i][j]\n    # find the safe cell\n    for i in range(rows):\n        for j in range(cols):\n            if arr[i][j] == 0:\n                return energy[i][j]\n    return -1  # should not reach here\n"}
{"task_id": "EvoEval/42", "completion": "\n    # Check if player acquired legendary item\n    if 5 in player_input:\r\n        # If player acquired legendary item, find second most valuable item\r\n        # First, remove legendary item from the list\r\n        player_input.remove(5)\r\n        # If player only acquired legendary item, return -1\r\n        if not player_input:\r\n            return (True, -1)\r\n        # Otherwise, return rarity of second most valuable item\r\n        else:\r\n            return (True, max(player_input))\r\n    # If player did not acquire legendary item, return False and None\r\n    else:\r\n        return (False, None)\r\n"}
{"task_id": "EvoEval/43", "completion": "\n    # Calculate the duration of the trip\n    trip_duration = distance / speed\n    \n    # Calculate the fuel consumption for the trip\n    fuel_consumption = spaceship_weight * planet_gravity * 0.1 * trip_duration\n    \n    # Check if the spaceship has enough fuel to reach the planet\n    if fuel >= fuel_consumption:\n        # Calculate the remaining fuel\n        remaining_fuel = fuel - fuel_consumption\n        # Return the remaining fuel rounded to 2 decimal points\n        return round(remaining_fuel, 2)\n    else:\n        # Return 'Insufficient fuel' if the spaceship cannot reach the planet\n        return 'Insufficient fuel'\n"}
{"task_id": "EvoEval/44", "completion": "\n    # Calculate the total weight that can be carried by unicorns\n    unicorn_weight = w * len(q)\r\n    \r\n    # Calculate the total weight that can be carried by dragons and griffins\r\n    dragon_griffin_weight = e * 2 * len(q)\r\n    \r\n    # Calculate the total weight of all items\r\n    total_weight = sum(q)\r\n    \r\n    # Check if the combined strength of magical creatures can carry all items\r\n    return unicorn_weight + dragon_griffin_weight >= total_weight\r\n\r"}
{"task_id": "EvoEval/45", "completion": "\n    if not arr:\n        return 0\n    max_view = 0\n    for i in range(len(arr)):\n        left_view = 0\n        right_view = 0\n        for j in range(i-1, -1, -1):\n            if arr[j] < arr[i]:\n                break\n            left_view += 1\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[i]:\n                break\n            right_view += 1\n        max_view = max(max_view, left_view + right_view + 1)\n    return max_view\n"}
{"task_id": "EvoEval/46", "completion": "\n    secret_messages = []\n    for test_case in test_cases:\n        secret_message = ''\n        for word in test_case:\n            word = ''.join(e for e in word if e.isalnum())\n            if word:\n                secret_message += word[0].lower()\n        if 'cannoli' in secret_message.lower():\n            secret_message = 'Take the cannoli.'\n        secret_messages.append(secret_message)\n    return secret_messages\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n"}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n    return {item: quantity for item, quantity in inventory.items() if quantity > 0}  # Filter out items with quantity 0 or less\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code = {\n        'A': '01', 'B': '1000', 'C': '1010', 'D': '100', 'E': '0',\n        'F': '0010', 'G': '110', 'H': '0000', 'I': '00', 'J': '0111',\n        'K': '101', 'L': '0100', 'M': '11', 'N': '10', 'O': '111',\n        'P': '0110', 'Q': '1101', 'R': '010', 'S': '000', 'T': '1',\n        'U': '001', 'V': '0001', 'W': '011', 'X': '1001', 'Y': '1011',\n        'Z': '1100', '1': '01111', '2': '00111', '3': '00011', '4': '00001',\n        '5': '00000', '6': '10000', '7': '11000', '8': '11100', '9': '11110',\n        '0': '11111'\n    }\n    words = msg.split('/')\n    decoded_words = []\n    for word in words:\n        decoded_word = ''\n        for char in word.split():\n            if char in morse_code:\n                decoded_word += morse_code[char]\n        decoded_word = ''.join([morse_code[c] for c in decoded_word])\n        decoded_words.append(decoded_word)\n    return ' '.join(decoded_words)\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.', '0': '-----', ', ': '--..--', '.': '.-.-.-', '?': '..--..', '/': '-..-.', '-': '-....-', '(': '-.--.', ')': '-.--.-'}\n    morse_code = ''\n    for char in text.upper():\n        if char == ' ':\n            morse_code += '   '\n        else:\n            morse_code += morse_code_dict[char] + ' '\n    return morse_code\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not list_of_alphabets:\n        return string\n    if not string:\n        return ''\n    result = ''\n    for i, char in enumerate(string):\n        result += list_of_alphabets[i % len(list_of_alphabets)]\n    return result\n"}
{"task_id": "EvoEval/52", "completion": "\n    orders.sort()\n    max_orders = 0\n    current_batch = 0\n    current_cookies = 0\n    for order in orders:\n        if current_cookies + order > n:\n            current_batch += 1\n            current_cookies = 0\n            if current_batch > m:\n                break\n        current_cookies += order\n        max_orders += 1\n    return max_orders  # return the maximum number of orders that can be fulfilled in a day\n    # return the maximum number of orders that can be fulfilled in a day\n    # return the maximum number of orders that can be fulfilled in a day\n    # return the maximum number of orders that can be fulfilled in a day\n    # return the maximum number of orders that can be fulfilled in a day\n    # return the maximum number of orders that can be fulfilled in a day\n    # return the maximum number of orders that can be fulfilled in a day\n    # return the maximum number of orders that can be fulfilled in a day\n    # return the maximum number of orders that can be fulfilled in a day\n    # return the maximum number of orders that can be fulfilled in a day\n    # return the maximum number of orders that can be fulfilled in a day\n    # return the maximum number of orders that can be fulfilled in a day\n    # return the maximum number of orders that can be fulfilled in a day\n    # return the maximum number of orders that can be fulfilled in a day\n    # return the maximum number of orders that can be fulfilled in a day\n    # return the maximum number of orders that can be fulfilled in a day\n    # return the maximum number of orders that can be fulfilled in a day\n    # return the maximum number of orders that can be fulfilled in a day\n    # return the maximum number of orders that can be fulfilled in a day\n    # return the maximum number of orders that can be fulfilled in a day\n    # return the maximum number of orders that can be fulfilled in a day\n    # return the maximum number of orders that can be fulfilled in a day\n    # return the maximum number of orders that can be fulfilled in a day\n    # return the maximum number of orders that can be fulfilled in a day\n    # return the maximum number of orders that can be fulfilled in a day\n    # return the maximum number of orders that can be fulfilled in a day\n    # return the maximum number of orders that can be fulfilled in a day"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for i, c in enumerate(s):\n        if c in vowels:\n            idx = vowels.index(c)\n            if idx == 4:\n                idx = 0\n            else:\n                idx += 1\n            result.append(vowels[idx])\n        elif c in consonants:\n            idx = consonants.index(c)\n            if idx == 21:\n                idx = 1\n            else:\n                idx += 1\n            result.append(consonants[idx])\n        elif c == '?':\n            if i % 2 == 0:\n                result.append('!')\n            else:\n                result.append('?')\n        else:\n            result.append(c)\n    return ''.join(result)  # join the list of characters into a string\n"}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                result.append((i, j))\n    return result\n"}
{"task_id": "EvoEval/55", "completion": "\n    result = \"\"\n    shift_counter = shift\n    for char in message:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            result += chr((ord(char) - ascii_offset + shift_counter) % 26 + ascii_offset)\n            shift_counter += 1\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....',\n        'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-',\n        'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..'\n    }\n    morse_code = ''\n    for char in s:\n        if char == ' ':\n            morse_code += ' / '\n        else:\n            morse_code += morse_code_dict[char] + ' '\n    return morse_code.strip()\n"}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        transformed_dish = ''\n        for i, letter in enumerate(dish):\n            transformed_dish += magic_spell[i % len(magic_spell)]\n        new_menu[transformed_dish] = price\n    return new_menu\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for char in earth_phrase:\n        if char in vowels:\n            idx = vowels.index(char)\n            result += vowels[(idx + 1) % len(vowels)]\n        elif char in consonants:\n            idx = consonants.index(char)\n            result += consonants[(idx + 1) % len(consonants)]\n        elif char == 'z':\n            result += 'b'\n        elif char == ' ':\n            result += '@'\n    words = result.split('@')\n    for i, word in enumerate(words):\n        if i == 0:\n            result = word.capitalize()\n        else:\n            result += word.capitalize()\n        if word[0] in vowels:\n            result += 'xy'\n        else:\n            result += 'yz'\n    return result\n"}
{"task_id": "EvoEval/59", "completion": "\n    # Check if the dictionary is empty\n    if not ingredient_dict:\n        return []\n\n    # Sort the dictionary items based on the number of recipes in descending order and then by ingredient name in ascending order\n    sorted_items = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n\n    # Return a list of tuples with the ingredient and the number of recipes\n    return [(ingredient, recipes) for ingredient, recipes in sorted_items]  # Corrected the return statement to use the sorted_items list\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    # Create a list to store the sugar locations\n    sugar_locations = sugar_locations.copy()\n    \n    # Create a list to store the ant positions and directions\n    ant_positions = ant_positions.copy()\n    \n    # Initialize a counter for happy ants\n    happy_ants_count = 0\n    \n    # Iterate over the ant positions and directions\n    for position, direction in ant_positions:\n        # Check if the ant's position is a sugar location\n        if position in sugar_locations:\n            # If it is, remove the sugar location from the list\n            sugar_locations.remove(position)\n            # Increment the happy ants count\n            happy_ants_count += 1\n    \n    # Return the count of happy ants\n    return happy_ants_count\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    result = []\n    for i, c in enumerate(s):\n        if c.isalpha():\n            if i % 2 == 1:\n                c = c.swapcase()\n            if c.lower() in vowels:\n                idx = vowels.index(c.lower())\n                c = vowels[(idx + 1) % len(vowels)]\n            else:\n                idx = ord(c.lower()) - ord('b')\n                c = chr(ord('z') - idx)\n        result.append(c)\n    return ''.join(result)  # return the transformed string\n"}
{"task_id": "EvoEval/62", "completion": "\n    new_recipe = {}\n    for ingredient, quantity in recipe.items():\n        new_recipe[ingredient] = quantity * conversion_factor\n    return new_recipe\n"}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = []\r\n    while p > 0:\r\n        pyramid.append(p)\r\n        if p % 2 == 0:\r\n            p -= 2\r\n        else:\r\n            p -= 3\r\n        if p <= 0:\r\n            break\r\n    return pyramid[::-1]  # return the list in reverse order\r\n\r"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in range(start, end + 1):\n        if num % divisor == 0 and is_prime(num):\n            result.append(num)\n    return result\n"}
{"task_id": "EvoEval/65", "completion": "\n    final_order = menu.copy()\n    for food, ingredients in order.items():\n        if ingredients:\n            if \"remove\" in ingredients:\n                for ingredient in ingredients[\"remove\"]:\n                    if ingredient in final_order[food]:\n                        final_order[food].remove(ingredient)\n            if \"add\" in ingredients:\n                for ingredient in ingredients[\"add\"]:\n                    if ingredient not in final_order[food]:\n                        final_order[food].append(ingredient)\n    return final_order\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_anagram(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    prime_numbers = [i for i in range(2, n) if is_prime(i)]\n    prime_anagrams = []\n    for i in range(len(prime_numbers)):\n        for j in range(i + 1, len(prime_numbers)):\n            if is_anagram(prime_numbers[i], prime_numbers[j]):\n                prime_anagrams.append((prime_numbers[i], prime_numbers[j]))\n    return sorted(prime_anagrams, key=lambda x: (x[0], x[1]))\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        if customer in meals:\n            result[customer] = sum(meal['calories'] for meal in meals[customer])\n        else:\n            result[customer] = 0\n    return result\n"}
{"task_id": "EvoEval/68", "completion": "\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        return arr[0] <= arr[1]\n    if arr[0] > arr[1]:\n        return False\n    if arr[-1] < arr[-2]:\n        return False\n    for i in range(1, len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i + 1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"  # if no pair found return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \"No magic today\"  # return \""}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\r\n        return False\r\n    current_planet = path[0]\r\n    for planet in path[1:]:\r\n        if planet not in planets or current_planet not in planets[planet]:\r\n            return False\r\n        current_planet = planet\r\n    return True\r\n\r"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    result = ''\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            result += chr((ord(char) - ascii_offset + n) % 26 + ascii_offset)\n        else:\n            result += char\n    return result, sum(1 for char in result if char.lower() in vowels)  # count vowels in result string\n"}
{"task_id": "EvoEval/72", "completion": "\n    fairy_tales = []\n    for i, string in enumerate(lst, start=1):\n        count = sum(c.isdigit() for c in string)\n        fairy_tales.append(f\"Once upon a time, in kingdom far away, lived a magical creature name '{string}' known for telling {count} tales a day\")\n    return fairy_tales\n"}
{"task_id": "EvoEval/73", "completion": "\n    # calculate total number of treasures\n    total_treasures = sum(sum(row) for row in grid)\r\n    # calculate number of trips needed to collect all treasures\r\n    # number of trips is equal to total number of treasures divided by bag capacity\r\n    # plus one if total number of treasures is not divisible by bag capacity\r\n    trips = math.ceil(total_treasures / bag_capacity)\r\n    return trips\r\n\r"}
{"task_id": "EvoEval/74", "completion": "\n    new_string = \"\"\n    for char in s:\n        if char in cipher:\n            new_string += cipher[char]\n        else:\n            new_string += char\n    return new_string\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    digits = '0123456789'\n    punctuation = \"!\\\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\"\n    result = []\n    for i, char in enumerate(input_str):\n        if char in vowels:\n            idx = (vowels.index(char) + 1) % len(vowels)\n            result.append(vowels[idx])\n        elif char in consonants:\n            idx = (consonants.index(char) + 1) % len(consonants)\n            result.append(consonants[idx])\n        elif char in digits:\n            idx = (int(char) + 1) % 10\n            result.append(str(idx))\n        elif char in punctuation:\n            if i % 2 == 0:\n                if char == '?':\n                    result.append('!')\n                else:\n                    result.append(char)\n            else:\n                if char == '!':\n                    result.append('?')\n                else:\n                    result.append(char)\n        else:\n            result.append(char)\n    return ''.join(result)  # return the transformed string\n"}
{"task_id": "EvoEval/76", "completion": "\n    pyramid = []\n    for i, num in enumerate(lst):\n        level = '#' * num\n        pyramid.append(level)\n    return pyramid[::-1]  # reverse the list to get the pyramid in the correct order\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    return sorted([sum(i // k for i in range(1, n + 1)) for n in sequence], reverse=True)  # noqa: E501\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    if n % 2 == 0:\n        return []\n    result = []\n    for i in range(n):\n        for j in range(n):\n            if (i + j) % 2 == 0:\n                result.append(mat[i][j])\n    return result\n"}
{"task_id": "EvoEval/79", "completion": "\n    if days == 1:\r\n        return 0\r\n    min_price = prices[0]\r\n    max_profit = 0\r\n    for i in range(1, days):\r\n        if prices[i] < min_price:\r\n            min_price = prices[i]\r\n        else:\r\n            max_profit = max(max_profit, prices[i] - min_price)\r\n    return max_profit if max_profit > 0 else 0\r\n\r"}
{"task_id": "EvoEval/80", "completion": "\n    # Initialize player's position\n    player_row, player_col = 0, 0\n    # Initialize player's path\n    player_path = [(0, 0)]\n    # Iterate over each instruction\n    for instruction in instructions:\n        # Get the current player's position\n        current_row, current_col = player_path[-1]\n        # Move the player based on the instruction\n        if instruction == 'up' and current_row > 0 and map[current_row - 1][current_col] != 'X':\n            player_row -= 1\n        elif instruction == 'down' and current_row < len(map) - 1 and map[current_row + 1][current_col] != 'X':\n            player_row += 1\n        elif instruction == 'left' and current_col > 0 and map[current_row][current_col - 1] != 'X':\n            player_col -= 1\n        elif instruction == 'right' and current_col < len(map[0]) - 1 and map[current_row][current_col + 1] != 'X':\n            player_col += 1\n        # Add the new player's position to the path\n        player_path.append((player_row, player_col))\n        # Check if the player has reached the end\n        if map[player_row][player_col] == 'E':\n            break\n    # Return the player's path\n    return player_path\n"}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    alien_dict = sorted(alien_dictionary)\n    for i in range(len(word_list) - 1):\n        if alien_dict.index(word_list[i][-1]) > alien_dict.index(word_list[i + 1][-1]):\n            return \"INCORRECT\"\n    return \"CORRECT\"  # return \"CORRECT\" if list is sorted correctly\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    zodiac_signs = {\n        \"Aries\": \"Fire\",\n        \"Taurus\": \"Earth\",\n        \"Gemini\": \"Air\",\n        \"Cancer\": \"Water\",\n        \"Leo\": \"Fire\",\n        \"Virgo\": \"Earth\",\n        \"Libra\": \"Air\",\n        \"Scorpio\": \"Water\",\n        \"Sagittarius\": \"Fire\",\n        \"Capricorn\": \"Earth\",\n        \"Aquarius\": \"Air\",\n        \"Pisces\": \"Water\"\n    }\n    elements = {\"Fire\": 0, \"Earth\": 0, \"Air\": 0, \"Water\": 0}\n    for birthday in birthdays:\n        month, day = birthday.split(\"-\")\n        month = int(month)\n        day = int(day)\n        if (month == 3 and 21 <= day <= 31) or (month == 4 and 1 <= day <= 19):\n            elements[\"Fire\"] += 1\n        elif (month == 4 and 20 <= day <= 30) or (month == 5 and 1 <= day <= 20):\n            elements[\"Earth\"] += 1\n        elif (month == 5 and 21 <= day <= 31) or (month == 6 and 1 <= day <= 20):\n            elements[\"Air\"] += 1\n        elif (month == 6 and 21 <= day <= 30) or (month == 7 and 1 <= day <= 22):\n            elements[\"Water\"] += 1\n        elif (month == 7 and 23 <= day <= 31) or (month == 8 and 1 <= day <= 22):\n            elements[\"Fire\"] += 1\n        elif (month == 8 and 23 <= day <= 31) or (month == 9 and 1 <= day <= 22):\n            elements[\"Earth\"] += 1\n        elif (month == 9 and 23 <= day <= 30) or (month == 10 and 1 <= day <= 22):\n            elements[\"Air\"] += 1\n        elif (month == 10 and 23 <= day <= 31) or (month == 11 and 1 <= day <= 21):\n            elements[\"Water\"] += 1\n        elif (month == 11 and 22 <= day <= 30) or (month == 12 and 1 <= day <= "}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n        else:\n            s[left], s[right] = s[right], s[left]\n            left, right = left + 1, right - 1\n    return ''.join(s)  # return string from list of characters\n"}
{"task_id": "EvoEval/84", "completion": "\n    def dfs(node, path):\n        if not node:\n            return []\n        if not node:\n            return [path]\n        paths = []\n        for child in node.values():\n            paths.extend(dfs(child, path + [next(iter(child))]))\n        return paths\n    return dfs(tree, [next(iter(tree))])  # return all possible paths from root to leaves\n\ntree = {1: {2: {4: {}, 5: {}}, 3: {6: {}, 7: {}}}}"}
{"task_id": "EvoEval/85", "completion": "\n    # Get the number of rows and columns in the grid\n    rows, cols = len(grid), len(grid[0])\n    \n    # Create a visited set to keep track of visited cells\n    visited = set()\n    \n    # Define the possible moves (right and down)\n    moves = [(0, 1), (1, 0)]\n    \n    # Define the heuristic function (Manhattan distance)\n    def heuristic(row, col):\n        return abs(row - coord[0]) + abs(col - coord[1])\n    \n    # Define the A* search function\n    def a_star_search(row, col, dist):\n        # If the current cell is the princess's cell, return the distance\n        if (row, col) == coord:\n            return dist\n        \n        # Mark the current cell as visited\n        visited.add((row, col))\n        \n        # Initialize the minimum distance to infinity\n        min_dist = float('inf')\n        \n        # Explore the neighbors\n        for dr, dc in moves:\n            nr, nc = row + dr, col + dc\n            \n            # If the neighbor is within the grid and not visited and not a monster\n            if (0 <= nr < rows) and (0 <= nc < cols) and (nr, nc) not in visited and grid[nr][nc] == 0:\n                # Calculate the new distance\n                new_dist = dist + 1\n                \n                # If the neighbor is the princess's cell, return the new distance\n                if (nr, nc) == coord:\n                    return new_dist\n                \n                # Recursively explore the neighbor\n                new_dist = a_star_search(nr, nc, new_dist)\n                \n                # Update the minimum distance\n                min_dist = min(min_dist, new_dist)\n        \n        # If no path to the princess is found, return -1\n        return -1\n    \n    # Start the A* search from the top-left corner\n    return a_star_search(0, 0, 0)  # Start with distance 0\n"}
{"task_id": "EvoEval/86", "completion": "\n    # First, we sort the movies based on their ratings in descending order\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n    # Then, we extract the movie names from the sorted list of tuples\n    sorted_movie_names = [movie[0] for movie in sorted_movies]\n    # Finally, we return the sorted list of movie names\n    return sorted_movie_names\n"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    result = ''\n    top, bottom, left, right = 0, len(arr) - 1, 0, len(arr[0]) - 1\n    while top <= bottom and left <= right:\n        for i in range(left, right + 1):\n            result += arr[top][i]\n        top += 1\n        for i in range(top, bottom + 1):\n            result += arr[i][right]\n        right -= 1\n        if top <= bottom:\n            for i in range(right, left - 1, -1):\n                result += arr[bottom][i]\n            bottom -= 1\n        if left <= right:\n            for i in range(bottom, top - 1, -1):\n                result += arr[i][left]\n            left += 1\n    return result\n"}
{"task_id": "EvoEval/88", "completion": "\n    result = {}\n    for planet, features in dict_of_planets.items():\n        if features[0] is not None and features[1] is not None:\n            population = features[0]\n            size = features[1]\n            if population > 0 and size > 0:\n                population_density = round(population / size, 2)\n                result[planet] = population_density\n    return result\n"}
{"task_id": "EvoEval/89", "completion": "\n    aliens = [alien for alien in aliens if alien % 2 == 0 or alien == ray]\n    aliens = [alien for alien in aliens if alien != ray - 1 and alien != ray + 1]\n    return aliens\n"}
{"task_id": "EvoEval/90", "completion": "\n    def get_combinations(s):\n        if len(s) == 1:\n            return [int(s)]\n        combinations = []\n        for i in range(len(s)):\n            first = s[:i] + s[i+1:]\n            for c in get_combinations(first):\n                combinations.append(int(s[i]) + c)\n        return combinations\n\n    s1 = get_combinations(s1)\n    s2 = get_combinations(s2)\n    return sum(s1[i] * s2[i] for i in range(min(len(s1), len(s2))))  # sum of products of corresponding combinations\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceshi_data:\n        if status == 'On Ground':\n            if action == 'Launch':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif status == 'In Space':\n            if action == 'Move':\n                pass\n            elif action == 'Land':\n                status = 'On Ground'\n            else:\n                return 'Invalid Action Sequence'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    result = ''\n    for i in range(1, n + 1):\n        layer = ''\n        for j in range(1, 2 * i):\n            if j == i or j == 2 * i - i:\n                layer += chr(64 + i)\n            else:\n                layer += chr(64 + (i - 1) % 26 + 1)\n        result += ' ' * (2 * i - len(layer) - 1) + layer + '\\n'\n    return result[:-1]  # remove the last newline character\n"}
{"task_id": "EvoEval/93", "completion": "\n    result = \"\"\n    n_index = 0\n    for char in message:\n        if char.isalpha():\n            shift = n_values[n_index % len(n_values)]\n            if char.isupper():\n                result += chr((ord(char) - 65 + shift) % 26 + 65)\n            else:\n                result += chr((ord(char) - 97 + shift) % 26 + 97)\n            n_index += 1\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/94", "completion": "\n    return [' '.join(sorted(word.split(), key=len, reverse=False)) for word in strings]  # <--- your code here\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    first_diagonal = 0\n    second_diagonal = 0\n    for i in range(len(m)):\n        first_diagonal += m[i][i]\n        second_diagonal += m[i][len(m) - i - 1]\n    return abs(first_diagonal - second_diagonal)  # return absolute difference between sums of diagonals"}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        # check if value is multiple of index\n        if lst[i] % (i + 1) == 0:\n            # convert value to string to calculate product of digits\n            str_val = str(abs(lst[i]))\n            product = 1\n            for digit in str_val:\n                product *= int(digit)\n            # check if product of digits equals index\n            if product == i + 1:\n                magic_indices.append(i)\n    return sorted(magic_indices)  # return sorted list of magic indices\n"}
{"task_id": "EvoEval/97", "completion": "\n    # Check if alien name is valid\n    if not isinstance(alien, str) or len(alien) == 0:\n        return []\n\n    # Check if humans dictionary is valid\n    if not isinstance(humans, dict) or len(humans) == 0:\n        return []\n\n    # Define the order of continents\n    continents = [\"Asia\", \"Africa\", \"Europe\", \"North America\", \"South America\"]\n\n    # Initialize an empty list to store the humans who encounter the alien\n    encounter_list = []\n\n    # Iterate over the continents in the order of invasion\n    for continent in continents:\n        # Check if the alien starts invasion from this continent\n        if continent == alien_invasion.alien_continent:\n            # Iterate over the humans who live in this continent\n            for human, location in humans.items():\n                # Check if the human lives in this continent\n                if location == continent:\n                    # Add the human to the encounter list\n                    encounter_list.append(human)\n\n    # Return the list of humans who encounter the alien\n    return encounter_list\n"}
{"task_id": "EvoEval/98", "completion": "\n    sequence = [a, b]\n    for i in range(2, n):\n        next_number = sequence[-1] + sequence[-2] + i\n        sequence.append(next_number)\n    for i in range(len(sequence)):\n        if sequence[i] > 1:\n            is_prime = True\n            for j in range(2, int(sequence[i] ** 0.5) + 1):\n                if sequence[i] % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                sequence[i] = 'prime'\n    return sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    position = 0\n    for round in rounds:\n        for _ in range(round):\n            position = (position + music) % n\n            if position == 0:\n                position = n\n        players.pop(position - 1)\n    return players\n"}
