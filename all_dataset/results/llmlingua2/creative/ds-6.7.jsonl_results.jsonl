{"task_id": "EvoEval/0", "completion": "\n    base_cost = 5.0\n    location_factor = {\"Local\": 1, \"National\": 1.5, \"International\": 2.5}\n    total_cost = 0\n    for item in items:\n        if isinstance(item, str):\n            item = 1.0\n        weight = float(item)\n        if weight > 5.0:\n            base_cost += 10.0\n        total_cost += base_cost * weight\n        base_cost = 5.0\n    total_cost *= location_factor.get(location, 1)\n    return \"{:.2f}\".format(total_cost)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/1", "completion": "\n    # base shipping cost\n    base_cost = 5.0\n    # location multiplier\n    location_multiplier = {\"Local\": 1, \"National\": 1.5, \"International\": 2.5}\n    # total cost\n    total_cost = 0\n    for item in items:\n        # if item is string convert to float\n        if isinstance(item, str):\n            item = 1\n        # calculate cost\n        cost = base_cost * item\n        # if item weight more than 5kg add additional charge\n        if item > 5:\n            cost += 10.0\n        # add cost to total cost\n        total_cost += cost\n    # multiply total cost by location multiplier\n    total_cost *= location_multiplier.get(location, 1)\n    # return total cost rounded to two decimal places\n    return round(total_cost, 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 159, in <module>\n  File \"<string>\", line 157, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/2", "completion": "\n    encrypted_words = []\n    for word in words:\n        encrypted_word = \"\"\n        for char in word:\n            if char.isalpha():\n                ascii_offset = 65 if char.isupper() else 97\n                encrypted_word += chr((ord(char) - ascii_offset + key) % 26 + ascii_offset)\n            else:\n                encrypted_word += char\n        encrypted_words.append(encrypted_word)\n    return encrypted_words\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 145, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 29, in encrypt_message\n                encrypted_word += chr((ord(char) - ascii_offset + key) % 26 + ascii_offset)\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n", "passed": false}
{"task_id": "EvoEval/3", "completion": "\n    def helper(s: str, index: int) -> List[str]:\n        if index == len(s):\n            return ['']\n        res = []\n        for next_string in helper(s, index + 1):\n            for c in 'abcdefghijklmnopqrstuvwxyz':\n                if int(s[index]) == (ord(c) - ord('a') + 1):\n                    res.append(c + next_string)\n        return res\n\n    return helper(input_string, 0)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    max_height = candles[0]\n    lit_candles = 1\n    for candle in candles[1:]:\n        if candle > max_height:\n            max_height = candle\n            lit_candles += 1\n    return lit_candles\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = len(matrix), len(matrix[0])\n    row_index = col_index = 0\n    right_to_left = False\n\n    while len(result) < row * col:\n        result.append(matrix[row_index][col_index])\n        if right_to_left:\n            if col_index == 0 or row_index == row - 1:\n                right_to_left = False\n                if col_index == 0:\n                    row_index += 1\n                else:\n                    col_index -= 1\n            else:\n                col_index -= 1\n                row_index += 1\n        else:\n            if col_index == col - 1 or row_index == row - 1:\n                right_to_left = True\n                if col_index == col - 1:\n                    row_index += 1\n                else:\n                    col_index += 1\n            else:\n                col_index += 1\n                row_index += 1\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 149, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 16, in zigzag_traversal\n        result.append(matrix[row_index][col_index])\nIndexError: list index out of range\n", "passed": false}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    rows, cols = len(grid), len(grid[0])\n    if x < 0 or y < 0 or x >= rows or y >= cols:\n        return grid\n    if grid[x][y] == 1:\n        return grid\n    if grid[x][y] == 0:\n        grid[x][y] = -1\n        for dx in range(-1, 2):\n            for dy in range(-1, 2):\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] != 1:\n                    grid = minesweeper_clicked(grid, (nx, ny))\n    return grid\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 161, in <module>\n  File \"<string>\", line 159, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\n    for direction in code_sequence:\n        if direction == 0:\n            y += 1\n        elif direction == 1:\n            x += 1\n        elif direction == 2:\n            y -= 1\n        elif direction == 3:\n            x -= 1\n    if x == 0 and y == 0:\n        return 'Shangri-La found'\n    else:\n        return 'Shangri-La not found'\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/8", "completion": "\n    # your code here\n    canvas_list = list(canvas)\n    painter_pos = canvas.find('P')\n    if painter_pos == -1:\n        return canvas\n    if canvas.count('P') > 1:\n        return 'Invalid canvas'\n    canvas_list[painter_pos] = '*'\n    for i in range(painter_pos + 1, len(canvas_list)):\n        if canvas_list[i] == '-':\n            canvas_list[i] = '*'\n        elif canvas_list[i] == '#':\n            break\n    for i in range(painter_pos - 1, -1, -1):\n        if canvas_list[i] == '-':\n            canvas_list[i] = '*'\n        elif canvas_list[i] == '#':\n            break\n    return ''.join(canvas_list)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 159, in <module>\n  File \"<string>\", line 157, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/9", "completion": "\n    import string as st\n    string = string.translate(str.maketrans('', '', st.punctuation)).lower()\n    words = string.split()\n    return {word: words.count(word) for word in words}\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 132, in <module>\n  File \"<string>\", line 130, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/10", "completion": "\n    animal_sounds = animal_string.split()\n    animal_counts = []\n    cat_count = 0\n    dog_count = 0\n    bird_count = 0\n\n    for sound in animal_sounds:\n        if sound == 'C|||' and cat_count < 2:\n            cat_count = len(sound.split('|')) - 1\n            animal_counts.append(cat_count)\n        elif sound == 'D|||' and dog_count < 2:\n            dog_count = len(sound.split('|')) - 1\n            animal_counts.append(dog_count)\n        elif sound == 'B|' and bird_count < 2:\n            bird_count = len(sound.split('|')) - 1\n            animal_counts.append(bird_count)\n\n        if len(animal_counts) == 5:\n            break\n\n    return animal_counts\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 158, in <module>\n  File \"<string>\", line 156, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh are {fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"Oh {', '.join(fruits[:-1])} and {fruits[-1]} from {location}? Marvelous!\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    counter = Counter(flux_values)\n    most_common = counter.most_common(1)[0][0]\n    return sum(flux_values) * most_common\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    count_dict = {}\n    for elem in elems:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    min_count = min(count_dict.values())\n    rarest_elems = [k for k, v in count_dict.items() if v == min_count]\n    return rarest_elems[0]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    name = name.lower()\n    new_name = ''\n    for char in name:\n        if char in vowels:\n            new_name += vowels[(vowels.index(char) + 1) % len(vowels)]\n        elif char in consonants:\n            new_name += consonants[(consonants.index(char) + 1) % len(consonants)]\n        else:\n            new_name += char\n    return new_name.title()\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/15", "completion": "\n    from collections import Counter\n    values = [card[0] for card in hand]\n    value_counts = Counter(values)\n    score = 0\n    pair_count = 0\n    triple_count = 0\n    four_count = 0\n    for value, count in value_counts.items():\n        if count == 2:\n            score += int(value)\n            pair_count += 1\n        elif count == 3:\n            score += int(value) * 2\n            triple_count += 1\n        elif count == 4:\n            score += int(value) * 3\n            four_count += 1\n        elif count == 5:\n            score += int(value) * 4\n    if pair_count == 1 and triple_count == 1:\n        score *= 2\n    return score\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 162, in <module>\n  File \"<string>\", line 160, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/16", "completion": "\n    fib_nums = [0, 1]\n    for i in range(2, n):\n        fib_nums.append(fib_nums[i-1] + fib_nums[i-2])\n    return sum(fib_nums)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        dragon_hp -= wizard[1]\n        if dragon_hp <= 0:\n            return wizard[0]\n    return 'The dragon won!'\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/18", "completion": "\n    if n == 1:\n        return 7\n    else:\n        return int('7' + '0' * (n - 1))\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 132, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/19", "completion": "\n    vampires = []\n    humans = []\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 2:\n                vampires.append((i, j))\n            elif m[i][j] == 1:\n                humans.append((i, j))\n\n    count = 0\n    for human in humans:\n        for vampire in vampires:\n            if human[0] == vampire[0] or human[1] == vampire[1]:\n                count += 1\n                break\n    return count\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    else:\n        result = []\n        for i in range(1, n + 1):\n            result.append(\",\".join(str(j) for j in range(1, i + 1)))\n            result.append(\",\".join(str(j) for j in range(i, 0, -1)))\n        return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/21", "completion": "\n    def check_word(word, row, col, direction):\n        for i in range(len(word)):\n            if row < 0 or col < 0 or row >= len(grid) or col >= len(grid[0]):\n                return False\n            if grid[row][col] != word[i]:\n                return False\n            row, col = row + direction[0], col + direction[1]\n        return True\n\n    def check_directions(word):\n        for row in range(len(grid)):\n            for col in range(len(grid[0])):\n                for direction in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                    if check_word(word, row, col, direction):\n                        return True\n        return False\n\n    for word in words:\n        if not check_directions(word):\n            return False\n    return True\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/22", "completion": "\n    distance = 9.461 * 10**12\n    time_in_seconds = t * 365 * 24 * 60 * 60\n    return (distance / v) / time_in_seconds\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 125, in <module>\n  File \"<string>\", line 123, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/23", "completion": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return ''.join(str(primes[ord(c) - ord('a')]) if 'a' <= c <= 'z' else c for c in s)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 137, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 25, in prime_cipher\n    return ''.join(str(primes[ord(c) - ord('a')]) if 'a' <= c <= 'z' else c for c in s)\n  File \"<string>\", line 25, in <genexpr>\n    return ''.join(str(primes[ord(c) - ord('a')]) if 'a' <= c <= 'z' else c for c in s)\nIndexError: list index out of range\n", "passed": false}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {\n        'a': '+',\n        'b': '-',\n        'c': '*',\n        'd': '/',\n        'e': '%',\n        'f': '@',\n        'g': '&',\n        'h': '#',\n        'i': '$',\n        'j': '^',\n        'k': '&',\n        'l': '(',\n        'm': ')',\n        'n': '=',\n        'o': '?',\n        'p': ':',\n        'q': ';',\n        'r': '`',\n        's': '~',\n        't': '>',\n        'u': '<',\n        'v': '{',\n        'w': '}',\n        'x': '[',\n        'y': ']',\n        'z': '|'\n    }\n    alien_word = ''\n    for letter in english_word:\n        alien_word += alien_dict[letter]\n    return alien_word\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 161, in <module>\n  File \"<string>\", line 159, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/25", "completion": "\n    # split the text into sentences\n    sentences = text.split('. ')\n    max_freq = 0\n    max_sentence = \"\"\n    for sentence in sentences:\n        # count the frequency of word in sentence\n        freq = sentence.split().count(word)\n        if freq > max_freq:\n            max_freq = freq\n            max_sentence = sentence\n    if max_freq == 0:\n        return (0, \"\")\n    else:\n        return (max_freq, max_sentence)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/26", "completion": "\n    pass\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 52, in <module>\n  File \"<string>\", line 50, in check\n        _check_maze(*inp, candidate(*inp), exp)\n  File \"<string>\", line 40, in _check_maze\n        for move in solution_path:\nTypeError: 'NoneType' object is not iterable\n", "passed": false}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    if taxable_income <= 0:\n        return 0\n    elif taxable_income <= 10000:\n        return 0\n    elif taxable_income <= 125000:\n        return (taxable_income - 10000) * 0.15\n    elif taxable_income <= 170000:\n        return (taxable_income - 125000) * 0.25 + 2250\n    else:\n        return (taxable_income - 170000) * 0.30 + 7000 + 6250\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(s: str):\n        return s == s[::-1]\n\n    result = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if is_palindrome(s[i:j]):\n                result.add(s[i:j])\n    return sorted(list(result))\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/30", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 54, in <module>\n  File \"<string>\", line 52, in check\n        _check_path(*inp, candidate(*inp), exp)\n  File \"<string>\", line 39, in _check_path\n        assert solution_path[0] == start\nTypeError: 'NoneType' object is not subscriptable\n", "passed": false}
{"task_id": "EvoEval/31", "completion": "\n    # create a 2D array to store the number of paths to each cell\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n\n    # initialize the first row and first column to 1\n    for i in range(m+1):\n        dp[i][0] = 1\n    for j in range(n+1):\n        dp[0][j] = 1\n\n    # fill in the rest of the dp array\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n\n    return dp[m][n]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/32", "completion": "\n    import random\n    random.seed(seed)\n    playlist_len = len(playlist)\n    new_playlist = playlist[:]\n    index = 0\n    while index < playlist_len:\n        if \"Rock\" not in new_playlist[index]:\n            swap_index = index + seed % playlist_len\n            if swap_index >= playlist_len:\n                swap_index -= playlist_len\n            new_playlist[index], new_playlist[swap_index] = new_playlist[swap_index], new_playlist[index]\n            seed = (seed * 16807) % 2147483647\n        index += 1\n    return new_playlist\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/33", "completion": "\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for stone in magic_stones:\n            if i - stone >= 0:\n                dp[i] += dp[i - stone]\n    return dp[n]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/34", "completion": "\n    transformation_percentages = [0] * n\n    if m > 1:\n        for i in range(1, m):\n            transformation_percentages[i] = transformation_percentages[i - 1] + 10\n        for i in range(m, n):\n            transformation_percentages[i] = transformation_percentages[i - 1] - 10\n    transformation_percentages[m - 1] = 20\n    if m < n:\n        for i in range(m, n - 1):\n            transformation_percentages[i + 1] = transformation_percentages[i] - 10\n    for i in range(n):\n        if transformation_percentages[i] > 100:\n            transformation_percentages[i] = 100\n        if transformation_percentages[i] < 0:\n            transformation_percentages[i] = 0\n    return transformation_percentages\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 160, in <module>\n  File \"<string>\", line 158, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/35", "completion": "\n    if email.count(\"@\") != 1 or email.count(\".\") != 1:\n        return False\n    if email.index(\"@\") == 0 or email.index(\".\") == len(email) - 1 or email.index(\"@\") == email.index(\".\") - 1:\n        return False\n    return True\r\n\r\n\r", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/36", "completion": "\n    integral_coefficients = [0] * (len(xs) + 1)\n    for i in range(1, len(xs) + 1):\n        integral_coefficients[i] = xs[i - 1] / i\n    return integral_coefficients\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/37", "completion": "\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    upper_vowels = vowels.upper()\n    upper_consonants = consonants.upper()\n    transformed_string = \"\"\n    for char in s:\n        if char in vowels:\n            index = vowels.index(char)\n            transformed_string += vowels[(index+1)%5]\n        elif char in upper_vowels:\n            index = upper_vowels.index(char)\n            transformed_string += upper_vowels[(index+1)%5]\n        elif char in consonants:\n            index = consonants.index(char)\n            transformed_string += consonants[(index+1)%21]\n        elif char in upper_consonants:\n            index = upper_consonants.index(char)\n            transformed_string += upper_consonants[(index+1)%21]\n        else:\n            transformed_string += char\n    return transformed_string\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/38", "completion": "\n    emoticons_dict = {\":)\": \"\ud83d\ude0a\", \":(\": \"\u2639\ufe0f\", \":D\": \"\ud83d\ude00\", \";)\": \"\ud83d\ude09\"}\n    words = sentence.split()\n    new_words = []\n    for word in words:\n        if word in emoticons_dict:\n            new_words.append(emoticons_dict[word])\n        else:\n            new_words.append(word)\n    return \" \".join(new_words)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/39", "completion": "\n    s = \"*\" + s + \"*\"\n    n = \"*\" * len(s)\n    return \"\\n\".join([n, s, n])\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/40", "completion": "\n    potions = [(potion.split()[0], int(potion.split()[1])) for potion in potions]\n    potions.sort(key=lambda x: (x[1], x[0]))\n    result = []\n    for i in range(len(potions)):\n        if potions[i][1] > target:\n            continue\n        target -= potions[i][1]\n        result.append(potions[i][0])\n        if target == 0:\n            return result\n    return []\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 143, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 21, in potion_mixing\n    potions = [(potion.split()[0], int(potion.split()[1])) for potion in potions]\n  File \"<string>\", line 21, in <listcomp>\n    potions = [(potion.split()[0], int(potion.split()[1])) for potion in potions]\nValueError: invalid literal for int() with base 10: 'Potion'\n", "passed": false}
{"task_id": "EvoEval/41", "completion": "\n    # Dynamic Programming\n    # Time Complexity: O(n*m)\n    # Space Complexity: O(n*m)\n    n, m = len(arr), len(arr[0])\n    dp = [[0]*m for _ in range(n)]\n    dp[0][0] = arr[0][0]\n    for i in range(1, m):\n        dp[0][i] = dp[0][i-1] + arr[0][i]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + arr[i][0]\n    for i in range(1, n):\n        for j in range(1, m):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + arr[i][j]\n    return dp[-1][-1]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 162, in <module>\n  File \"<string>\", line 160, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/42", "completion": "\n    legendary_items = [item for item in player_input if item == 5]\n    common_items = [item for item in player_input if item < 5]\n    if legendary_items:\n        return (True, max(common_items) if common_items else -1)\n    else:\n        return (False, None)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/43", "completion": "\n    # calculate the duration of the trip\n    duration = distance / speed\n\n    # calculate the total fuel consumption\n    total_fuel_consumption = duration * (spaceship_weight * planet_gravity * 0.1)\n\n    # check if there is enough fuel for the trip\n    if total_fuel_consumption > fuel:\n        return 'Insufficient fuel'\n    else:\n        # calculate the remaining fuel\n        remaining_fuel = fuel - total_fuel_consumption\n        return round(remaining_fuel, 2)\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/44", "completion": "\n    total_weight = sum(q)\n    total_capacity = w + e + e\n    return total_weight <= total_capacity\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 132, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/45", "completion": "\n    n = len(arr)\n    left_max = [0]*n\n    right_max = [0]*n\n    left_max[0] = arr[0]\n    for i in range(1, n):\n        left_max[i] = max(left_max[i-1], arr[i])\n    right_max[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        right_max[i] = max(right_max[i+1], arr[i])\n    res = 0\n    for i in range(1, n-1):\n        res = max(res, min(left_max[i], right_max[i])-arr[i])\n    return res+1\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/46", "completion": "\n    result = []\n    for test in test_cases:\n        message = \"\"\n        for word in test:\n            for char in word:\n                if char.isalpha():\n                    message += char.lower()\n                    break\n        if message == \"\":\n            message = \"Take the cannoli.\"\n        result.append(message)\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n        if inventory[item] <= 0:\n            del inventory[item]\n    return inventory\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/49", "completion": "\n    morse_code = {\n        \"01\": \"A\", \"1000\": \"B\", \"1010\": \"C\", \"100\": \"D\", \"0\": \"E\",\n        \"0010\": \"F\", \"110\": \"G\", \"0000\": \"H\", \"00\": \"I\", \"0111\": \"J\",\n        \"101\": \"K\", \"0100\": \"L\", \"11\": \"M\", \"10\": \"N\", \"111\": \"O\",\n        \"0110\": \"P\", \"1101\": \"Q\", \"010\": \"R\", \"000\": \"S\", \"1\": \"T\",\n        \"001\": \"U\", \"0001\": \"V\", \"011\": \"W\", \"1001\": \"X\", \"1011\": \"Y\",\n        \"1100\": \"Z\", \"01111\": \"1\", \"00111\": \"2\", \"00011\": \"3\",\n        \"00001\": \"4\", \"00000\": \"5\", \"10000\": \"6\", \"11000\": \"7\",\n        \"11100\": \"8\", \"11110\": \"9\", \"11111\": \"0\"\n    }\n\n    words = msg.split(\" / \")\n    decoded_msg = \"\"\n\n    for word in words:\n        letters = word.split()\n        for letter in letters:\n            decoded_msg += morse_code[letter]\n        decoded_msg += \" \"\n\n    return decoded_msg.strip()\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 167, in <module>\n  File \"<string>\", line 164, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 49, in morse_decoder\n            decoded_msg += morse_code[letter]\nKeyError: '010101/01'\n", "passed": false}
{"task_id": "EvoEval/50", "completion": "\n    morse_code = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',\n        'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',\n        'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',\n        'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',\n        'Y': '-.--', 'Z': '--..', ' ': ' '\n    }\n    return ' '.join(morse_code[i.upper()] for i in text)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/51", "completion": "\n    if not list_of_alphabets:\n        return string\n    result = \"\"\n    for i in range(len(string)):\n        result += list_of_alphabets[i % len(list_of_alphabets)]\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/52", "completion": "\n    orders.sort()\n    count = 0\n    for order in orders:\n        if order <= n:\n            count += 1\n            n -= order\n        else:\n            break\n    return count\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 150, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed_s = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.islower():\n                transformed_s += vowels[(vowels.index(char) + 1) % 5]\n            else:\n                transformed_s += vowels[(vowels.index(char.lower()) + 1) % 5].upper()\n        elif char.lower() in consonants:\n            if char.islower():\n                transformed_s += consonants[(consonants.index(char) + 1) % 21]\n            else:\n                transformed_s += consonants[(consonants.index(char.lower()) + 1) % 21].upper()\n        elif char == 'y':\n            transformed_s += 'b'\n        elif char == 'z':\n            transformed_s += 'B'\n        elif char == '?':\n            if i % 2 == 0:\n                transformed_s += '!'\n            else:\n                transformed_s += '?'\n        else:\n            transformed_s += char\n    return transformed_s\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 160, in <module>\n  File \"<string>\", line 158, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/54", "completion": "\n    star_map = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                star_map.append((i, j))\n    return star_map\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/55", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    ALPHABET = alphabet.upper()\n    result = ''\n    shift_count = shift\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                result += ALPHABET[(ALPHABET.index(char) + shift_count) % 26]\n            else:\n                result += alphabet[(alphabet.index(char) + shift_count) % 26]\n        else:\n            result += char\n        shift_count = (shift_count + 1) % 26\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.',\n        'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..',\n        'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.',\n        's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-',\n        'y': '-.--', 'z': '--..', ' ': '/'\n    }\n    morse_code = \"\"\n    for char in s:\n        morse_code += morse_code_dict[char] + \" \"\n    return morse_code.strip()\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_dish = \"\"\n        spell_index = 0\n        for letter in dish:\n            new_dish += magic_spell[spell_index]\n            spell_index = (spell_index + 1) % len(magic_spell)\n        new_menu[new_dish] = price\n    return new_menu\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    earth_phrase = earth_phrase.split(' ')\n    alien_phrase = []\n    for word in earth_phrase:\n        new_word = ''\n        for char in word:\n            if char in vowels:\n                new_word += vowels[(vowels.index(char)+1)%5]\n            else:\n                new_word += consonants[(consonants.index(char)+1)%26]\n        new_word = new_word.capitalize()\n        if word[0] in vowels:\n            new_word += 'xy'\n        else:\n            new_word += 'yz'\n        alien_phrase.append(new_word)\n    return '@'.join(alien_phrase)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 156, in <module>\n  File \"<string>\", line 153, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 35, in interstellar_translator\n                new_word += consonants[(consonants.index(char)+1)%26]\nIndexError: string index out of range\n", "passed": false}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    else:\n        return sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/60", "completion": "\n    # Initialize variables\n    happy_ants = 0\n    sugar_locations = set(sugar_locations)\n\n    # Loop through each ant\n    for ant_position, direction in ant_positions:\n        # If the ant is moving right\n        if direction == \"right\":\n            # Loop from the ant's position to the end of the path\n            for i in range(ant_position, path_length):\n                # If the ant lands on a sugar location, increment the happy ants count and break the loop\n                if i in sugar_locations:\n                    happy_ants += 1\n                    break\n        # If the ant is moving left\n        else:\n            # Loop from the ant's position to the start of the path\n            for i in range(ant_position, -1, -1):\n                # If the ant lands on a sugar location, increment the happy ants count and break the loop\n                if i in sugar_locations:\n                    happy_ants += 1\n                    break\n\n    # Return the number of happy ants\n    return happy_ants\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed_string = ''\n    for i, char in enumerate(s):\n        if char == ' ':\n            transformed_string += ' '\n        elif i % 2 == 0:\n            transformed_string += char.swapcase()\n        else:\n            if char.lower() in vowels:\n                transformed_string += vowels[(vowels.index(char.lower()) + 1) % 5]\n            else:\n                transformed_string += consonants[(consonants.index(char.lower()) - 1) % 21]\n    return transformed_string\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/62", "completion": "\n    new_recipe = {}\n    for ingredient, quantity in recipe.items():\n        new_recirecipepe = quantity * conversion_factor\n        new_recipe[ingredient] = new_recipe_recipe\n    return new_recipe\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 138, in <module>\n  File \"<string>\", line 135, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 22, in recipe_converter\n        new_recipe[ingredient] = new_recipe_recipe\nNameError: name 'new_recipe_recipe' is not defined\n", "passed": false}
{"task_id": "EvoEval/63", "completion": "\n    layers = []\n    while p > 0:\n        layers.append(p)\n        if p % 2 == 0:\n            p -= 2\n        else:\n            p -= 3\n    return layers[::-1]\r\n\r\n\r", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_divisible(n, divisor):\n        return n % divisor == 0\n\n    return [i for i in range(start, end + 1) if is_prime(i) and is_divisible(i, divisor)]\n\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/65", "completion": "\n    # your code here\n    if not order:\n        return menu\n\n    for food in order:\n        if \"remove\" in order[food]:\n            for ingredient in order[food][\"remove\"]:\n                if ingredient in menu[food]:\n                    menu[food].remove(ingredient)\n\n        if \"add\" in order[food]:\n            for ingredient in order[food][\"add\"]:\n                if ingredient not in menu[food]:\n                    menu[food].append(ingredient)\n\n    return menu\n\n\nmenu = {\"Burger\": [\"Bun\", \"Meat\", \"Cheese\"], \"Pizza\": [\"Dough\", \"Tomato Sauce\", \"Cheese\"]}\norder = {\"Burger\": {\"remove\": [\"Cheese\"], \"add\": [\"Mushrooms\"]}, \"Pizza\": {\"add\": [\"Pepperoni\"]}}", "result": "passed", "passed": true}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def anagram_pairs(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    pairs = []\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if anagram_pairs(primes[i], primes[j]):\n                pairs.append((primes[i], primes[j]))\n    return pairs\n\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        if customer in meals:\n            result[customer] = sum(meal.get('calories', 0) for meal in meals[customer])\n        else:\n            result[customer] = 0\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/68", "completion": "\n    # your code goes here\n    n = len(arr)\n    if n == 0:\n        return True\n    for i in range(n):\n        if arr[i] > arr[(i+1)%n]:\n            return (arr[i:]+arr[:i]) == sorted(arr)\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for i in range(len(path) - 1):\n        if path[i + 1] not in planets[path[i]]:\n            return False\n    return True\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    encrypted_string = ''\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted_char = chr((ord(char) - ascii_offset + n) % 26 + ascii_offset)\n            encrypted_string += encrypted_char\n            if encrypted_char.lower() in vowels:\n                vowel_count += 1\n        else:\n            encrypted_string += char\n    return (encrypted_string, vowel_count)\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for i, s in enumerate(lst, 1):\n        count = sum(c.isdigit() for c in s)\n        result.append(f\"Once upon a time, in kingdom far away, lived a magical creature named '{s}' known for telling {count} tales a day\")\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 133, in <module>\n  File \"<string>\", line 131, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/73", "completion": "\n    # Initialize variables\n    trips = 0\n    chests = 0\n    rows = len(grid)\n    cols = len(grid[0])\n\n    # Loop through the grid\n    for i in range(rows):\n        for j in range(cols):\n            # If there is a chest\n            if grid[i][j] == 1:\n                # Calculate the number of trips needed to carry the chest\n                trips += math.ceil(chests / bag_capacity)\n                # Reset the number of chests\n                chests = 0\n\n    # Calculate the number of trips needed to carry the remaining chests\n    trips += math.ceil(chests / bag_capacity)\n\n    return trips\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 167, in <module>\n  File \"<string>\", line 165, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/74", "completion": "\n    result = \"\"\n    for char in s:\n        if char in cipher:\n            result += cipher[char]\n        else:\n            result += char\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/75", "completion": "\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    transformed_str = \"\"\n    for i, char in enumerate(input_str):\n        if char in vowels:\n            transformed_str += vowels[(vowels.index(char) + 1) % 5]\n        elif char in consonants:\n            transformed_str += consonants[(consonants.index(char) + 1) % 21]\n        elif char.isdigit():\n            transformed_str += str((int(char) + 1) % 10)\n        elif char == \"?\":\n            transformed_str += \"!\" if i % 2 == 0 else \"?\"\n        elif char == \"!\":\n            transformed_str += \"?\" if i % 2 == 0 else \"!\"\n        else:\n            transformed_str += char\n    return transformed_str\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 151, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    pyramid = []\n    for i in lst:\n        pyramid.append(i * '#')\n    return pyramid[::-1]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/77", "completion": "\n    points = [0] * len(sequence)\n    for i in range(len(sequence)):\n        while sequence[i] > 1:\n            sequence[i] /= k\n            points[i] += sequence[i]\n    points.sort(reverse=True)\n    return points\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    pattern = []\n    for i in range(n):\n        pattern.append(mat[i][i])\n        pattern.append(mat[i][n-i-1])\n    if n % 2 == 1:\n        pattern.append(mat[n//2][n//2])\n    return pattern\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 138, in <module>\n  File \"<string>\", line 136, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/79", "completion": "\n    if days == 0 or len(prices) == 0:\n        return 0\n\n    min_price = prices[0]\n    max_profit = 0\n\n    for i in range(1, days):\n        if prices[i] < min_price:\n            min_price = prices[i]\n        elif prices[i] - min_price > max_profit:\n            max_profit = prices[i] - min_price\n\n    return max_profit\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/80", "completion": "\n    # define the directions\n    directions = {'up': (-1, 0), 'down': (1, 0), 'left': (0, -1), 'right': (0, 1)}\n    # find the start position\n    for i in range(len(map)):\n        for j in range(len(map[i])):\n            if map[i][j] == 'S':\n                start = (i, j)\n                break\n    # initialize the player's position and path\n    position = start\n    path = [position]\n    # process the instructions\n    for instruction in instructions:\n        # calculate the new position\n        new_position = (position[0] + directions[instruction][0], position[1] + directions[instruction][1])\n        # check if the new position is valid\n        if (0 <= new_position[0] < len(map) and 0 <= new_position[1] < len(map[0]) and map[new_position[0]][\n            new_position[1]] != 'X'):\n            # update the player's position and path\n            position = new_position\n            path.append(position)\n            # check if the player has found the end\n            if map[position[0]][position[1]] == 'E':\n                return path\n    return path\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 171, in <module>\n  File \"<string>\", line 169, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/81", "completion": "\n    alien_dict = {alien_dictionary[i]: chr(97 + i) for i in range(26)}\n    for word in word_list:\n        translated_word = \"\".join([alien_dict[letter] for letter in word])\n        if translated_word < word:\n            return \"INCORRECT\"\n    return \"CORRECT\"\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_dict = {\n        \"Aries\": \"Fire\",\n        \"Taurus\": \"Earth\",\n        \"Gemini\": \"Air\",\n        \"Cancer\": \"Water\",\n        \"Leo\": \"Fire\",\n        \"Virgo\": \"Earth\",\n        \"Libra\": \"Air\",\n        \"Scorpio\": \"Water\",\n        \"Sagittarius\": \"Fire\",\n        \"Capricorn\": \"Earth\",\n        \"Aquarius\": \"Air\",\n        \"Pisces\": \"Water\"\n    }\n    elements_dict = {\"Fire\": 0, \"Earth\": 0, \"Air\": 0, \"Water\": 0}\n    for birthday in birthdays:\n        month = int(birthday[5:7])\n        day = int(birthday[8:10])\n        if (month == 3 and day >= 21 and day <= 31) or (month == 4 and day <= 19):\n            elements_dict[zodiac_dict[\"Aries\"]] += 1\n        elif (month == 4 and day >= 20 and day <= 30) or (month == 5 and day <= 20):\n            elements_dict[zodiac_dict[\"Taurus\"]] += 1\n        elif (month == 5 and day >= 21 and day <= 31) or (month == 6 and day <= 20):\n            elements_dict[zodiac_dict[\"Gemini\"]] += 1\n        elif (month == 6 and day >= 21 and day <= 30) or (month == 7 and day <= 22):\n            elements_dict[zodiac_dict[\"Cancer\"]] += 1\n        elif (month == 7 and day >= 23 and day <= 31) or (month == 8 and day <= 22):\n            elements_dict[zodiac_dict[\"Leo\"]] += 1\n        elif (month == 8 and day >= 23 and day <= 31) or (month == 9 and day <= 22):\n            elements_dict[zodiac_dict[\"Virgo\"]] += 1\n        elif (month == 9 and day >= 23 and day <= 30", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 65\n        elif (month == 9 and day >= 23 and day <= 30\n    elif (month == 9 and day >= 23 and day <= 30\n         ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i, j = i + 1, j - 1\n    return ''.join(s)\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/84", "completion": "\n    def dfs(node, path):\n        if not node:\n            return []\n        if not node.keys():\n            return [path + [node[key]] for key in node]\n        return sum([dfs(node[key], path + [node[key]]) for key in node], [])\n    return dfs(tree, [])\n\n\ntree = {1: {2: {4: {}, 5: {}}, 3: {6: {}, 7: {}}}}", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/85", "completion": "\n    # Initialize variables\n    rows = len(grid)\n    cols = len(grid[0])\n    princess = coord\n    warrior = (0, 0)\n    moves = 0\n    visited = [[0]*cols for _ in range(rows)]\n    queue = [(warrior[0], warrior[1], 0)]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # right, down, left, up\n\n    # BFS\n    while queue:\n        x, y, moves = queue.pop(0)\n        if (x, y) == princess:\n            return moves\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 0 and visited[nx][ny] == 0:\n                visited[nx][ny] = 1\n                queue.append((nx, ny, moves + 1))\n\n    # If princess can't be reached\n    return -1\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/86", "completion": "\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], x[1][1]))\n    return [movie[0] for movie in sorted_movies]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/87", "completion": "\n    result = ''\n    while arr:\n        result += ''.join(arr.pop(0))\n        arr = list(zip(*arr))[::-1]\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 130, in <module>\n  File \"<string>\", line 128, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/88", "completion": "\n    new_dict = {}\n    for planet, features in dict_of_planets.items():\n        if features[0] is not None and features[1] is not None and features[0] > 0 and features[1] > 0:\n            new_dict[planet] = round(features[0] / features[1], 2)\n    return new_dict\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/89", "completion": "\n    aliens = [i for i in aliens if i != ray]\n    aliens = [i for i in aliens if i - 1 != ray and i + 1 != ray]\n    return aliens\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/90", "completion": "\n    # convert strings to integers\n    num1 = int(s1)\n    num2 = int(s2)\n\n    # initialize variables\n    sum1 = 0\n    sum2 = 0\n    sum3 = 0\n    sum4 = 0\n\n    # calculate sum of unique combinations of digits\n    for i in range(len(s1)):\n        for j in range(len(s2)):\n            sum1 += int(s1[i]) * int(s2[j])\n            sum2 += int(s1[i]) * int(s2[j]) if i != j else 0\n            sum3 += int(s1[i]) * int(s2[j]) if i < j else 0\n            sum4 += int(s1[i]) * int(s2[j]) if i > j else 0\n\n    # return product according to laws of land of Pyth\n    return sum1 - sum2 - sum3 - sum4\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action in spaceship_data:\n        if action[0] == 'Launch' and status == 'On Ground':\n            status = 'In Space'\n        elif action[0] == 'Move' and status == 'In Space':\n            pass\n        elif action[0] == 'Land' and status == 'In Space':\n            status = 'On Ground'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    fountain = []\n    for i in range(n):\n        layer = []\n        for j in range(2*i+1):\n            if j == 0 or j == 2*i:\n                layer.append(alphabet[i%26])\n            else:\n                layer.append(' ')\n        fountain.append(''.join(layer))\n    for i in range(n):\n        fountain[i] = fountain[i].center(2*n-1)\n    return '\\n'.join(fountain[::-1])\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 151, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/93", "completion": "\n    # define the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    # create a variable to store the encoded message\n    encoded_message = ''\n    # iterate over the message\n    for i in range(len(message)):\n        # if the character is a space or punctuation, add it to the encoded message as is\n        if message[i] not in alphabet:\n            encoded_message += message[i]\n        # if the character is a letter, encode it\n        else:\n            # find the position of the character in the alphabet\n            position = alphabet.index(message[i])\n            # find the new position by adding the n value to the current position\n            new_position = (position + n_values[i % len(n_values)]) % 26\n            # add the new character to the encoded message\n            encoded_message += alphabet[new_position]\n    # return the encoded message\n    return encoded_message\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 157, in <module>\n  File \"<string>\", line 155, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/94", "completion": "\n    result = []\n    for spell in strings:\n        words = spell.split(' ')\n        words.sort(key=len)\n        result.append(' '.join(words))\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/95", "completion": "\n    # Check if matrix is square\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n\n    # Calculate sum of diagonals\n    sum_first_diagonal = sum(m[i][i] for i in range(len(m)))\n    sum_second_diagonal = sum(m[i][len(m)-i-1] for i in range(len(m)))\n\n    # Return absolute difference\n    return abs(sum_first_diagonal - sum_second_diagonal)\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/96", "completion": "\n    def get_digits(n):\n        n = abs(n)\n        digits = []\n        while n:\n            digits.append(n % 10)\n            n //= 10\n        return digits\n\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0:\n            product = 1\n            for digit in get_digits(lst[i]):\n                product *= digit\n            if product == i:\n                magic_indices.append(i)\n    return magic_indices\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 149, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 31, in get_magic_indices\n        if lst[i] % i == 0:\nZeroDivisionError: integer modulo by zero\n", "passed": false}
{"task_id": "EvoEval/97", "completion": "\n    if alien not in [\"Xenomorph\", \"Predator\", \"Klingon\"] or not isinstance(humans, dict):\n        return []\n    alien_order = {\"Xenomorph\": [\"Asia\", \"Africa\", \"North America\", \"South America\", \"Europe\"],\n                   \"Predator\": [\"Africa\", \"Europe\", \"North America\", \"South America\"],\n                   \"Klingon\": [\"Asia\", \"Europe\", \"North America\", \"South America\"]}\n    encounter = []\n    for human, place in humans.items():\n        if place in alien_order[alien]:\n            encounter.append(human)\n    return encounter\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2] + i)\n\n    for i in range(len(sequence)):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n\n    return sequence\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 157, in <module>\n  File \"<string>\", line 155, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    current_position = 0\n    for round in rounds:\n        current_position = (current_position + music * round) % len(players)\n        players.pop(current_position)\n        if current_position == len(players):\n            current_position = 0\n    return players\n\n", "result": "passed", "passed": true}
