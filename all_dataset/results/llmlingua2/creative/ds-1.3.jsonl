{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            try:\n                weight = float(item)\n                if weight > 5:\n                    total_cost += 10.0\n                total_cost += weight * 5.0\n            except ValueError:\n                return \"Invalid input\"\n        else:\n            total_cost += item * 5.0\n\n    if location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/1", "completion": "\n    base_shipping_cost = 5.0\n    additional_weight_cost = 10.0\n    local_factor = 1.0\n    national_factor = 1.5\n    international_factor = 2.5\n\n    total_cost = 0.0\n\n    for item in items:\n        if isinstance(item, str):\n            item = float(item)\n        total_cost += base_shipping_cost\n        if item > 5.0:\n            total_cost += additional_weight_cost\n        if location == 'Local':\n            total_cost *= local_factor\n        elif location == 'National':\n            total_cost *= national_factor\n        elif location == 'International':\n            total_cost *= international_factor\n\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    def char_to_int(char: str) -> int:\n        return ord(char)\n\n    def int_to_char(num: int) -> str:\n        return chr(num)\n\n    def shift_char(char: str, key: int) -> str:\n        num = char_to_int(char)\n        num += key\n        if num > char_to_int('z'):\n            num -= 26\n        return int_to_char(num)\n\n    def shift_word(word: str, key: int) -> str:\n        return ''.join(shift_char(char, key) for char in word)\n\n    if isinstance(key, str):\n        key = sum(char_to_int(char) for char in key)\n\n    return [shift_word(word, key) for word in words]\n"}
{"task_id": "EvoEval/3", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    max_candle = max(candles)\n    return sum(1 for c in candles if c == max_candle)\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = 0, 0\n    rows, cols = len(matrix), len(matrix[0])\n\n    for _ in range(rows * cols):\n        result.append(matrix[row][col])\n        if (row + col) % 2 == 0:\n            if col == cols - 1:\n                row += 1\n            elif row == 0:\n                col += 1\n            else:\n                row += 1\n                col += 1\n        else:\n            if row == rows - 1:\n                col += 1\n            elif col == 0:\n                row += 1\n            else:\n                col += 1\n                row += 1\n\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if grid[x][y] == 1:\n        return grid\n    elif grid[x][y] == 0:\n        grid[x][y] = 1\n        if x > 0:\n            grid[x-1][y] += 1\n        if x < len(grid)-1:\n            grid[x+1][y] += 1\n        if y > 0:\n            grid[x][y-1] += 1\n        if y < len(grid[0])-1:\n            grid[x][y+1] += 1\n        return grid\n    elif grid[x][y] == -1:\n        return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    # Define starting point\n    x, y = 0, 0\n\n    # Define direction\n    directions = {0: (0, 1), 1: (1, 0), 2: (0, -1), 3: (-1, 0)}\n\n    # Define sequence\n    sequence = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    # Check each move in sequence\n    for i in code_sequence:\n        dx, dy = directions[i]\n        x, y = x + dx, y + dy\n\n        # If we reach the starting point, return 'Shangri-La found'\n        if (x, y) == (0, 0):\n            return 'Shangri-La found'\n\n    # If we don't reach the starting point, return 'Shangri-La not found'\n    return 'Shangri-La not found'\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    def is_valid_canvas(canvas: str) -> bool:\n        if 'P' not in canvas:\n            return False\n        if canvas.count('-') % 2 != 0:\n            return False\n        if '-' in set(canvas) - {'P', '#', '-'}:\n            return False\n        return True\n\n    def paint_spaces(canvas: str, start: int) -> str:\n        for i in range(start, len(canvas), 2):\n            if canvas[i] == '-':\n                canvas = canvas[:i] + '*' + canvas[i+1:]\n        return canvas\n\n    if not is_valid_canvas(canvas):\n        return 'Invalid canvas'\n\n    return paint_spaces(canvas, 0)\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    import string\n    string = string.punctuation.replace(' ', '')\n    string = string.lower()\n    words = string.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    return frequency\n"}
{"task_id": "EvoEval/10", "completion": "\n    animal_dict = {'C': 0, 'D': 0, 'B': 0}\n    animal_list = animal_string.split()\n    for animal in animal_list:\n        if animal[0] in animal_dict:\n            animal_dict[animal[0]] += 1\n    result_list = [animal_dict[key] for key in animal_dict if animal_dict[key] < 5]\n    return result_list\n"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh are {fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"Oh are {', '.join(fruits[:-1])} and {fruits[-1]} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    count = Counter(flux_values)\n    max_occurrence = max(count.values())\n    sum_of_elements = sum(flux_values)\n    return sum_of_elements * max_occurrence\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n\n    counts = {}\n    for elem in elems:\n        if elem in counts:\n            counts[elem] += 1\n        else:\n            counts[elem] = 1\n\n    rarest_count = min(counts.values())\n    rarest_elems = [k for k, v in counts.items() if v == rarest_count]\n\n    return rarest_elems[0]\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    vowel_to_next_vowel = {v: consonants[vowels.find(v) + 1] for v in vowels}\n    consonant_to_next_consonant = {c: consonants[(consonants.find(c) + 1) % len(consonants)] for c in consonants}\n    alias = ''\n    for char in name:\n        if char.lower() in vowels:\n            alias += vowel_to_next_vowel[char.lower()]\n        elif char.lower() in consonants:\n            alias += consonant_to_next_consonant[char.lower()]\n        else:\n            alias += char\n    return alias\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    def count_cards(hand: list):\n        counts = [0]*13\n        for card in hand:\n            value = int(card[0])\n            if value == 1:\n                counts[0] += 1\n            elif value == 11:\n                counts[1] += 1\n            elif value == 12:\n                counts[2] += 1\n            elif value == 13:\n                counts[3] += 1\n            else:\n                counts[value-2] += 1\n        return counts\n\n    def evaluate(counts: list):\n        counts.sort()\n        if counts[3] == 1 and counts[4] == 0:\n            return 50 + counts[2]\n        if counts[3] == 2:\n            return 40 + counts[2]\n        if counts[3] == 3:\n            return 30 + counts[2]\n        if counts[3] == 4:\n            return 20 + counts[2]\n        return 0\n\n    counts = count_cards(hand)\n    return evaluate(counts)\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib_list = [0, 1]\n        for i in range(2, n):\n            fib_list.append(fib_list[i-1] + fib_list[i-2])\n        return sum(fib_list)\n"}
{"task_id": "EvoEval/17", "completion": "\n    wizards.sort(key=lambda x: x[1], reverse=True)\n    while dragon_hp > 0:\n        wizard_name, magic_power = wizards.pop(0)\n        dragon_hp -= magic_power\n        if dragon_hp <= 0:\n            return wizard_name\n        wizards.sort(key=lambda x: x[1], reverse=True)\n    return 'The dragon won!'\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    if n == 1:\n        return 7\n    else:\n        return int(str(7) * n)\n"}
{"task_id": "EvoEval/19", "completion": "\n    def is_vampire(matrix, i, j, n, m):\n        for x in range(n):\n            for y in range(m):\n                if matrix[x][y] == 2:\n                    if (x == i or y == j):\n                        return True\n        return False\n\n    def count_vampires(matrix, n, m):\n        vampire_count = 0\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] == 1:\n                    if is_vampire(matrix, i, j, n, m):\n                        vampire_count += 1\n        return vampire_count\n\n    return count_vampires(m, len(m), len(m[0]))\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n < 1:\n        return []\n    result = []\n    for i in range(n, 0, -1):\n        result.append(','.join(str(j) for j in range(i, 0, -1)))\n    return result\n"}
{"task_id": "EvoEval/21", "completion": "\n    def is_word_in_row(grid, word):\n        for i in range(len(grid)):\n            if word in ''.join(grid[i]):\n                return True\n        return False\n\n    def is_word_in_col(grid, word):\n        transposed = zip(*grid)\n        for i in range(len(transposed)):\n            if word in ''.join(transposed[i]):\n                return True\n        return False\n\n    for word in words:\n        if not (is_word_in_row(grid, word) or is_word_in_col(grid, word)):\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    light_years_per_year = 9.461 * 10**12\n    distance = t * v * light_years_per_year\n    return distance\n"}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_prime(n):\n        count = 0\n        num = 2\n        while count < n:\n            if is_prime(num):\n                count += 1\n            num += 1\n        return num - 1\n\n    result = \"\"\n    for char in s:\n        if 'a' <= char <= 'z':\n            prime_num = get_prime(ord(char) - ord('a') + 1)\n            result += str(prime_num)\n        else:\n            result += char\n    return result\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    pass\n"}
{"task_id": "EvoEval/25", "completion": "\n    import re\n    words = re.findall(r'\\b\\w+\\b', text)\n    word_count = words.count(word)\n    if word_count == 0:\n        return (0, \"\")\n    else:\n        sentences = re.split(r'[.!]', text)\n        max_sentence = max(sentences, key=lambda s: s.count(word))\n        return (word_count, max_sentence)\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    if start == end:\n        return []\n    if maze[start[0]][start[1]] == 1:\n        return []\n    directions = []\n    while start != end:\n        if start[0] < end[0]:\n            start = (start[0] + 1, start[1])\n            directions.append('down')\n        elif start[1] < end[1]:\n            start = (start[0], start[1] + 1)\n            directions.append('right')\n        else:\n            if start[0] < end[0]:\n                start = (start[0] + 1, start[1])\n                directions.append('down')\n            else:\n                start = (start[0], start[1] + 1)\n                directions.append('right')\n    return directions\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    if income <= 10000:\n        return 0\n    elif income <= 25000:\n        return (income - 10000) * 0.15\n    elif income <= 45000:\n        return (income - 25000) * 0.25 + 750\n    else:\n        return (income - 45000) * 0.30 + 1750\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.add(s[i:j])\n\n    return [s for s in substrings if is_palindrome(s)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    def dfs(maze, start, end, path=[]):\n        path = path + [start]\n        if start == end:\n            return path\n        unvisited = [(x, y) for x in range(len(maze)) for y in range(len(maze[0])) if maze[x][y] == 1]\n        next_coord = min(unvisited, key=lambda c: abs(c[0] - start[0]) + abs(c[1] - start[1]))\n        return dfs(maze, next_coord, end, path)\n\n    return dfs(maze, start, end)\n"}
{"task_id": "EvoEval/31", "completion": "\n    if m == 1 or n == 1:\n        return 1\n    return unique_paths(m-1, n) + unique_paths(m, n-1)\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    playlist_length = len(playlist)\n    playlist = playlist.copy()\n    shuffled_playlist = []\n    for i in range(playlist_length):\n        if \"Rock\" not in playlist[i]:\n            shuffled_playlist.append(playlist[i])\n    if seed % 2 == 0:\n        seed = (seed * 16807) % 2147483647\n    for i in range(playlist_length):\n        if \"Rock\" not in playlist[i]:\n            shuffled_playlist.append(playlist[seed % playlist_length])\n            if seed % 2 == 0:\n                seed = (seed * 16807) % 2147483647\n    return shuffled_playlist\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for stone in magic_stones:\n            if i >= stone:\n                dp[i] += dp[i - stone]\n    return dp[n]\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    if m > n:\n        return \"Invalid day\"\n    if m == 1:\n        return [0]\n    transformation_percentage = [0] * n\n    for i in range(1, m):\n        transformation_percentage[i] = 10\n    for i in range(m, n):\n        transformation_percentage[i] = 100\n    return transformation_percentage\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or \".\" not in email:\n        return False\n    local_part, domain = email.split(\"@\")\n    domain_name, extension = domain.rsplit(\".\", 1)\n    if len(local_part) < 1 or len(domain_name) < 1 or len(extension) < 1:\n        return False\n    return True\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    n = len(xs)\n    ys = [0]*n\n    for i in range(n):\n        ys[i] = xs[i] / (i + 1)\n    return ys\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    new_s = ''\n    for char in s:\n        if char in vowels:\n            new_s += char.replace(char, vowels[vowels.index(char)+1])\n        elif char in consonants:\n            new_s += char.replace(char, consonants[consonants.index(char)+1])\n        else:\n            new_s += char\n    return new_s\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\" : \"\ud83d\ude09\"\n    }\n\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n\n    return sentence\n"}
{"task_id": "EvoEval/39", "completion": "\n    return \"\\n\".join(\"*\" + \"*\".join(c for c in s) + \"*\" for _ in range(n)) + \"*\"\n"}
{"task_id": "EvoEval/40", "completion": "\n    pass\n"}
{"task_id": "EvoEval/41", "completion": "\n    def minEnergy(self, arr):\n        m, n = len(arr), len(arr[0])\n        dp = [[0]*n for _ in range(m)]\n        dp[0][0] = arr[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + arr[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j-1] + arr[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + arr[i][j]\n        return dp[-1][-1]\n"}
{"task_id": "EvoEval/42", "completion": "\n    if not player_input:\n        return (False, None)\n    legendary_item_found = False\n    legendary_item_rarity = -1\n    rarity_count = [0]*5\n    for rarity in player_input:\n        rarity_count[rarity-1] += 1\n        if rarity == 5:\n            legendary_item_found = True\n            legendary_item_rarity = rarity\n    if legendary_item_found:\n        second_most_rarity = rarity_count.index(2) + 1\n        return (legendary_item_found, second_most_rarity)\n    else:\n        return (legendary_item_found, -1)\n"}
{"task_id": "EvoEval/43", "completion": "\n    if fuel < (distance / speed) * planet_gravity:\n        return 'Insufficient fuel'\n    else:\n        fuel -= (distance / speed) * planet_gravity * 0.1\n        return round(fuel, 2)\n"}
{"task_id": "EvoEval/44", "completion": "\n    def fairy_tale_transport(q, w, e):\n        for i in q:\n            if i > w:\n                return False\n            else:\n                w -= i\n        if e > w:\n            return False\n        else:\n            return True\n\n    print(fairy_tale_transport([5, 10, 15], 15, 15))\n    print(fairy_tale_transport([10, 20, 30], 10, 10))\n    print(fairy_tale_transport([1, 2, 3], 1, 5))\n    print(fairy_tale_transport([5, 10, 15], 15, 15))\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    max_view = 0\n    current_view = 1\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            current_view += 1\n        else:\n            if current_view > max_view:\n                max_view = current_view\n            current_view = 1\n    if current_view > max_view:\n        max_view = current_view\n    return max_view\n"}
{"task_id": "EvoEval/46", "completion": "\n    def decipher(s):\n        return 'Take the cannoli.'\n\n    def decipher_word(word):\n        return decipher(word)\n\n    def decipher_sentence(sentence):\n        return ' '.join(decipher_word(word) for word in sentence.split(' '))\n\n    def decipher_test_case(test_case):\n        return ' '.join(decipher_sentence(sentence) for sentence in test_case)\n\n    return [decipher_test_case(test_case) for test_case in test_cases]\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n        available[ingredient] -= quantity\n    return True\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    pass\n"}
{"task_id": "EvoEval/49", "completion": "\n\n        deciphers Morse code into text\n        \"\"\"\n        return ''.join(morse_code_dict[i] for i in morse_code.split())\n\n    return '/'.join(decode_morse(i) for i in msg.split())\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',\n                       'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',\n                       'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',\n                       'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',\n                       'Y': '-.--', 'Z': '--..', ' ': '   '}\n\n    morse_code = \"\"\n    for char in text.upper():\n        if char in morse_code_dict:\n            morse_code += morse_code_dict[char] + \" \"\n        else:\n            morse_code += char + \" \"\n\n    return morse_code\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not string or not list_of_alphabets:\n        return string\n    result = ''\n    for i in range(len(string)):\n        if i < len(list_of_alphabets):\n            result += list_of_alphabets[i]\n        else:\n            result += list_of_alphabets[i % len(list_of_alphabets)]\n    return result\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    pass\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            transformed += char.lower()[1]\n        elif char.lower() in consonants:\n            transformed += char.lower()[1]\n        else:\n            transformed += char\n        if i % 2 != 0 and char.lower() == 'y':\n            transformed = transformed[:-1] + 'b' + transformed[-1]\n    return transformed\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == star:\n                result.append((i, j))\n    return result\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    def shift_char(c, shift):\n        if c.isalpha():\n            ascii_offset = ord('a') if c.islower() else ord('A')\n            return chr((ord(c) - ascii_offset + shift) % 26 + ascii_offset)\n        else:\n            return c\n\n    return ''.join(map(shift_char, message, (shift + i for i in range(len(message)))))\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.',\n        'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..',\n        'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.',\n        's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-',\n        'y': '-.--', 'z': '--..',\n        ' ': '/'\n    }\n\n    return ' '.join(morse_code_dict[i] for i in s.lower())\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    def transform_dish(dish, spell):\n        transformed_dish = ''\n        for i, letter in enumerate(dish):\n            transformed_dish += spell[i % len(spell)]\n        return transformed_dish\n\n    return {transform_dish(dish, magic_spell): price for dish, price in menu.items()}\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translation = ''\n    words = earth_phrase.split(' ')\n    for word in words:\n        new_word = ''\n        for char in word:\n            if char in vowels:\n                new_word += vowels[(vowels.index(char)+1)%5]\n            elif char in consonants:\n                new_word += consonants[(consonants.index(char)+1)%21]\n            elif char == ' ':\n                new_word += '@'\n            elif char == 'z':\n                new_word += 'b'\n            else:\n                new_word += char\n        if word[0] in vowels:\n            new_word = new_word + 'xy'\n        else:\n            new_word = new_word + 'yz'\n        translation += new_word[0].upper() + new_word[1:] + ' '\n    return translation.strip()\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n\n    ingredient_list = []\n    for ingredient, count in ingredient_dict.items():\n        ingredient_list.append((ingredient, count))\n\n    ingredient_list.sort(key=lambda x: (-x[1], x[0]))\n\n    return ingredient_list\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    # Initialize happy ants count\n    happy_ants_count = 0\n\n    # Iterate over sugar locations\n    for sugar_location in sugar_locations:\n        # If sugar location is in ant's path, increase happy ants count\n        if sugar_location in ant_positions:\n            happy_ants_count += 1\n\n    # Return happy ants count\n    return happy_ants_count\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] in vowels:\n                result += vowels[(vowels.index(s[i])+1)%5]\n            elif s[i] in consonants:\n                result += consonants[(consonants.index(s[i])-1)%26]\n            else:\n                result += s[i]\n        else:\n            result += s[i]\n    return result\n"}
{"task_id": "EvoEval/62", "completion": "\n    new_recipe = {}\n    for key, value in recipe.items():\n        new_recipe[key] = value * conversion_factor\n    return new_recipe\n"}
{"task_id": "EvoEval/63", "completion": "\n    if p <= 0:\n        return []\n    else:\n        blocks = [p]\n        for i in range(p-1, 0, -1):\n            if blocks[i-1] % 2 == 0:\n                blocks.append(blocks[i-1] - 2)\n            else:\n                blocks.append(blocks[i-1] - 3)\n        return blocks\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sequence(start, end, divisor):\n        return [i for i in range(start, end + 1) if i % divisor == 0 and is_prime(i)]\n\n    return sequence(start, end, divisor)\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    if not order:\n        return menu\n\n    new_menu = {}\n    for food, details in menu.items():\n        if food in order:\n            remove = set(order[food].get(\"remove\", []))\n            add = set(order[food].get(\"add\", []))\n            new_ingredients = set(details) - remove | add\n            new_menu[food] = list(new_ingredients)\n        else:\n            new_menu[food] = details\n    return new_menu\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_anagram(n1, n2):\n        return sorted(str(n1)) == sorted(str(n2))\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    pairs = []\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if is_anagram(primes[i], primes[j]):\n                pairs.append((primes[i], primes[j]))\n    pairs.sort(key=lambda x: (x[0], x[1]))\n    return pairs\n"}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        total_calories = 0\n        for meal in meals.get(customer, []):\n            total_calories += meal.get('calories', 0)\n        result[customer] = total_calories\n    return result\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return True\n\n    rotated = sorted(arr)\n    for i in range(len(arr)):\n        if arr != rotated:\n            arr.append(arr.pop(0))\n            if arr == sorted(arr):\n                return True\n    return False\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i]*cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets or path[i + 1] not in planets[path[i]]:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    def shift_letter(c, n):\n        if c.isalpha():\n            ascii_offset = ord('a') if c.islower() else ord('A')\n            new_c = chr((ord(c) - ascii_offset + n) % 26 + ascii_offset)\n            return new_c\n        else:\n            return c\n\n    encrypted_s = ''.join(shift_letter(c, n) for c in s)\n    vowels_count = sum(1 for c in encrypted_s if c.lower() in 'aeiou')\n    return (encrypted_s, vowels_count)\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for i, s in enumerate(lst, 1):\n        j = sum(c.isdigit() for c in s)\n        result.append(f\"Once upon a time, in kingdom far away, lived a magical creature name '{s}' known for telling '{j}' tales a day\")\n    return result\n"}
{"task_id": "EvoEval/73", "completion": "\n    def count_trips(grid, bag_capacity):\n        m, n = len(grid), len(grid[0])\n        dp = [[0]*n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j-1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        return dp[m-1][n-1]\n\n    return count_trips(grid, bag_capacity)\n"}
{"task_id": "EvoEval/74", "completion": "\n    if not s:\n        return s\n    return ''.join([cipher.get(c, c) for c in s])\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    digits = \"0123456789\"\n    result = \"\"\n    for i in range(len(input_str)):\n        if input_str[i] in vowels:\n            result += vowels[(vowels.index(input_str[i])+1)%len(vowels)]\n        elif input_str[i] in consonants:\n            result += consonants[(consonants.index(input_str[i])+1)%len(consonants)]\n        elif input_str[i] in digits:\n            result += str((int(input_str[i])+1)%10)\n        else:\n            result += input_str[i]\n    if len(result)%2==0:\n        result = result.replace(\"?\",\"!\").replace(\" \",\"\")\n    else:\n        result = result.replace(\"?\",\" \")\n    return result\n"}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    pyramid = []\n    for i in range(max(lst)):\n        level = []\n        for num in lst:\n            level.append('#' * (i + num))\n        pyramid.append(' '.join(level).center(max(lst) * 2))\n    return pyramid\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    def magical_sequence_points(sequence, k):\n        result = []\n        for num in sequence:\n            points = 0\n            while num != 1:\n                num = num // k\n                points += 1\n            result.append(points)\n        return sorted(result, reverse=True)\n\n    return magical_sequence_points(sequence, k)\n"}
{"task_id": "EvoEval/78", "completion": "\n    result = []\n    n = len(mat)\n    m = len(mat[0])\n    for i in range(n):\n        for j in range(m):\n            if i < n - 1 and j < m - 1:\n                if mat[i][j] == mat[i + 1][j] == mat[i][j + 1] == mat[i + 1][j + 1] == mat[i + 1][j] == mat[i][j + 1]:\n                    result.append(mat[i][j])\n            elif i < n - 1 and j < m:\n                if mat[i][j] == mat[i + 1][j] == mat[i + 1][j + 1] == mat[i + 1][j] == mat[i][j + 1]:\n                    result.append(mat[i][j])\n            elif i < n and j < m - 1:\n                if mat[i][j] == mat[i + 1][j] == mat[i][j + 1] == mat[i + 1][j + 1] == mat[i + 1][j] == mat[i][j + 1]:\n                    result.append(mat[i][j])\n            elif i < n and j < m:\n                if mat[i][j] == mat[i + 1][j] == mat[i][j + 1] == mat[i + 1][j + 1] == mat[i + 1][j] == mat[i][j + 1]:\n                    result.append(mat[i][j])\n            elif i < n:\n                if mat[i][j] == mat[i + 1][j] == mat[i][j + 1] == mat[i + 1][j + 1] == mat[i + 1][j] == mat[i][j + 1]:\n                    result.append(mat[i][j])\n            elif j < m:\n                if mat[i][j] == mat[i + 1][j] == mat[i][j + 1] == mat[i + 1][j + 1] == mat[i + 1][j] == mat[i][j + 1]:\n                    result.append(mat[i][j])\n    return"}
{"task_id": "EvoEval/79", "completion": "\n    # Initialize profit as 0\n    profit = 0\n\n    # Iterate over the prices list\n    for i in range(days):\n        # If current price is less than the next price, update profit\n        if prices[i] < prices[i + 1]:\n            profit += prices[i + 1] - prices[i]\n\n    return profit\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    def move(row, col, direction):\n        if direction == 'up':\n            return (row - 1, col)\n        elif direction == 'down':\n            return (row + 1, col)\n        elif direction == 'left':\n            return (row, col - 1)\n        elif direction == 'right':\n            return (row, col + 1)\n\n    def is_valid(row, col, map):\n        if row < 0 or col < 0 or row >= len(map) or col >= len(map[0]):\n            return False\n        if map[row][col] == 'X':\n            return False\n        return True\n\n    def find_path(map, instructions, pos=(0, 0)):\n        path = [pos]\n        for i, direction in enumerate(instructions):\n            if not is_valid(*move(pos[0], pos[1], direction), map):\n                return path\n            pos = move(pos[0], pos[1], direction)\n            path.append(pos)\n        return path\n\n    return find_path(map, instructions)\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    for i in range(len(word_list)-1):\n        if sorted(word_list[i]) != sorted(alien_dictionary):\n            return \"INCORRECT\"\n    return \"CORRECT\"\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    zodiac_signs = {\n        1: 'Aries', 2: 'Taurus', 3: 'Gemini', 4: 'Cancer', 5: 'Leo', 6: 'Virgo', 7: 'Libra', 8: 'Scorpio', 9: 'Sagittarius', 10: 'Capricorn', 11: 'Aquarius', 12: 'Pisces'\n    }\n    zodiac_dates = {\n        'Aries': [(1, 20), (2, 19)],\n        'Taurus': [(3, 20)],\n        'Gemini': [(4, 20)],\n        'Cancer': [(5, 20)],\n        'Leo': [(6, 20)],\n        'Virgo': [(7, 20)],\n        'Libra': [(8, 20)],\n        'Scorpio': [(9, 20)],\n        'Sagittarius': [(10, 20)],\n        'Capricorn': [(11, 20)],\n        'Aquarius': [(12, 20)],\n        'Pisces': [(1, 19)]\n    }\n    result = {}\n    for birthday in birthdays:\n        year, month, day = map(int, birthday.split('-'))\n        for zodiac, (start_month, end_month) in zodiac_dates.items():\n            if start_month <= month <= end_month:\n                result[zodiac] = result.get(zodiac, 0) + 1\n    return result\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i, j = i + 1, j - 1\n    return ''.join(s)\n"}
{"task_id": "EvoEval/84", "completion": "\n    def dfs(tree, path, res):\n        if not tree:\n            return\n        if not tree.get('left') and not tree.get('right'):\n            res.append(path + [tree.keys()[0]])\n        if 'left' in tree:\n            dfs(tree['left'], path + [tree.keys()[0]], res)\n        if 'right' in tree:\n            dfs(tree['right'], path + [tree.keys()[0]], res)\n        if 'left' in tree:\n            dfs(tree['left'], path + [tree.keys()[0]], res)\n        if 'right' in tree:\n            dfs(tree['right'], path + [tree.keys()[0]], res)\n\n    res = []\n    dfs(tree, [], res)\n    return res\n"}
{"task_id": "EvoEval/85", "completion": "\n    def min_moves(coord, grid, moves=0):\n        if coord[0] < 0 or coord[1] < 0 or coord[0] >= len(grid) or coord[1] >= len(grid[0]):\n            return -1\n        if grid[coord[0]][coord[1]] == 1:\n            return -1\n        if coord == (len(grid)-1, len(grid[0])-1):\n            return moves\n        return min(min_moves((coord[0], coord[1]+1), grid, moves+1), min_moves((coord[0]+1, coord[1]), grid, moves+1))\n    \n    return min_moves(coord, grid)\n"}
{"task_id": "EvoEval/86", "completion": "\n    def sort_key(movie):\n        return (-movies_dict[movie][0], movies_dict[movie][1])\n\n    return sorted(movies_dict, key=sort_key)\n\n\nmovies_dict = {\"Toy Story\": [8.3, 1995], \"Toy Story 2\": [7.9, 1999],\n               \"Toy Story 3\": [8.3, 2010], \"Toy Story 4\": [7.8, 2019]}"}
{"task_id": "EvoEval/87", "completion": "\n    def word_spiral(arr):\n        if not arr:\n            return \"\"\n        res = []\n        while arr:\n            res += arr.pop(0)\n            if arr and arr[0]:\n                for row in arr:\n                    res.append(row.pop())\n            if arr:\n                res += arr.pop()[::-1]\n            if arr and arr[0]:\n                for row in arr[::-1]:\n                    res.append(row.pop(0))\n        return \"\".join(res)\n\n    print(word_spiral([['h','i','!'],['b','y','e']]))\n    print(word_spiral([['l','o','v','e'],['i','s','i','n'],['t','h','e','a'],['i','r' '!','!!']]))\n    print(word_spiral([]))\n\nword_spiral([])\nword_spiral([['h','i','!'],['b','y','e']])\nword_spiral([['l','o','v','e'],['i','s','i','n'],['t','h','e','a'],['i','r' '!','!!']])\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n"}
{"task_id": "EvoEval/88", "completion": "\n    new_dict = {}\n    for planet, data in dict_of_planets.items():\n        if data[0] is not None and data[1] is not None:\n            population_density = data[0] / data[1]\n            new_dict[planet] = round(population_density, 2)\n    return new_dict\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    def is_adjacent(a, b):\n        return abs(a - b) == 1\n\n    def is_odd(n):\n        return n % 2 != 0\n\n    def is_ray_gun_position(n, pos):\n        return n == pos or is_adjacent(n, pos) or (is_odd(n) and is_odd(pos))\n\n    return [n for n in aliens if not is_ray_gun_position(n, ray)]\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    def get_combinations(s):\n        result = set()\n        for i in range(len(s)):\n            for j in range(i + 1, len(s) + 1):\n                result.add(int(s[i:j]))\n        return result\n\n    s1, s2 = sorted(s1), sorted(s2)\n    combinations = get_combinations(s1) & get_combinations(s2)\n    return sum(combinations)\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action in spaceship_data:\n        if action[0] == 'Launch':\n            if status == 'On Ground':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif action[0] == 'Move':\n            if status == 'In Space':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif action[0] == 'Land':\n            if status == 'In Space':\n                status = 'On Ground'\n            else:\n                return 'Invalid Action Sequence'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = []\n    for i in range(n):\n        layer = ''\n        for j in range(n - i):\n            layer += ' '\n        for j in range(2 * i + 1):\n            layer += alphabet[26 * i + j % 26]\n        for j in range(n - i):\n            layer += ' '\n        result.append(layer)\n    return '\\n'.join(result)\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    def shift_char(c, n, n_values):\n        ascii_offset = ord('a') if c.islower() else ord('A')\n        new_char_code = (ord(c) - ascii_offset + n) % 26 + ascii_offset\n        new_char = chr(new_char_code)\n        if c.isupper():\n            new_char = new_char.upper()\n        return new_char\n\n    def shift_message(message, n_values):\n        new_message = \"\"\n        for i, c in enumerate(message):\n            if c.isalpha():\n                n = n_values[i % len(n_values)]\n                new_message += shift_char(c, n, n_values)\n            else:\n                new_message += c\n        return new_message\n\n    return shift_message(message, n_values)\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def sort_words(spell):\n        words = spell.split()\n        words.sort(key=len)\n        return ' '.join(words)\n\n    return [sort_words(spell) for spell in strings]\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    if not isinstance(m, list) or not all(isinstance(i, list) for i in m):\n        return 'Invalid Matrix'\n    if not all(len(i) == len(m) for i in m):\n        return 'Invalid Matrix'\n    if not all(all(isinstance(j, int) for j in i) for i in m):\n        return 'Invalid Matrix'\n    if not all(all(j == i for i in m) for i in m):\n        return 'Invalid Matrix'\n\n    diagonal1 = sum(m[i][i] for i in range(len(m)))\n    diagonal2 = sum(m[i][len(m)-i-1] for i in range(len(m)))\n\n    return abs(diagonal1 - diagonal2)\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    def get_product_of_digits(n):\n        product = 1\n        while n:\n            product *= n % 10\n            n //= 10\n        return product\n\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] >= 0:\n            if lst[i] % i == 0 and get_product_of_digits(i) == i:\n                magic_indices.append(i)\n        else:\n            if -lst[i] % i == 0 and get_product_of_digits(-i) == -i:\n                magic_indices.append(i)\n    return sorted(magic_indices)\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n\n    alien_continent = {\"Xenomorph\": \"Asia\", \"Predator\": \"Europe\", \"Klingon\": \"Asia\"}[alien]\n\n    result = []\n    for human, continent in sorted(humans.items()):\n        if continent == alien_continent:\n            result.append(human)\n    return result\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_number = sequence[i-1] + sequence[i-2]\n        sequence.append(next_number)\n        if is_prime(next_number):\n            sequence[i] = 'prime'\n    return sequence\n\n"}
{"task_id": "EvoEval/99", "completion": "\n    def play_round(n, music):\n        return [(i+1)%n for i in range(n) if (i+1)%music != 0]\n\n    players = list(range(1, n+1))\n    for round_num, time in enumerate(rounds, start=1):\n        players = play_round(len(players), time)\n    return players\n"}
