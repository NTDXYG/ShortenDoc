{"task_id": "EvoEval/0", "completion": "\n    shipping_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            shipping_cost += 5.0 * 1.5\n        else:\n            shipping_cost += 5.0\n            if item > 5.0:\n                shipping_cost += 10.0\n    if location == \"National\":\n        shipping_cost *= 1.5\n    elif location == \"International\":\n        shipping_cost *= 2.5\n    return round(shipping_cost, 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/1", "completion": "\n    base_cost = 5.0\n    weight_factor = 1.0\n    location_factor = 1.0\n\n    if location == \"National\":\n        location_factor = 1.5\n    elif location == \"International\":\n        location_factor = 2.5\n\n    total_cost = 0.0\n\n    for item in items:\n        if isinstance(item, str):\n            weight = 1.0\n        else:\n            weight = item\n\n        if weight > 5.0:\n            weight_factor += 10.0\n\n        total_cost += (base_cost + weight_factor) * location_factor\n\n    return round(total_cost, 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 161, in <module>\n  File \"<string>\", line 159, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/2", "completion": "\n    result = []\n    if isinstance(key, str):\n        key = sum(ord(c) for c in key)\n    for word in words:\n        encrypted_word = \"\"\n        for char in word:\n            if char.isalpha():\n                ascii_offset = ord('a') if char.islower() else ord('A')\n                encrypted_char = chr((ord(char) - ascii_offset + key) % 26 + ascii_offset)\n                encrypted_word += encrypted_char\n            else:\n                encrypted_word += char\n        result.append(encrypted_word)\n    return result", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/3", "completion": "\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 131, in <module>\n  File \"<string>\", line 129, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    tallest = max(candles)\n    return sum(1 for candle in candles if candle == tallest)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/5", "completion": "\n    if not matrix or not matrix[0]:\n        return []\n    rows, cols = len(matrix), len(matrix[0])\n    result = []\n    for i in range(rows + cols - 1):\n        if i % 2 == 0:\n            row, col = min(i, rows - 1), max(0, i - rows + 1)\n            while row >= 0 and col < cols:\n                result.append(matrix[row][col])\n                row -= 1\n                col += 1\n        else:\n            row, col = max(0, i - cols + 1), min(i, cols - 1)\n            while col >= 0 and row < rows:\n                result.append(matrix[row][col])\n                row += 1\n                col -= 1\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/6", "completion": "\n    # Check if position is out of grid\n    if position[0] < 0 or position[0] >= len(grid) or position[1] < 0 or position[1] >= len(grid[0]):\n        return grid\n\n    # Check if cell is a mine\n    if grid[position[0]][position[1]] == 1:\n        return grid\n\n    # Check if cell is already clicked\n    if grid[position[0]][position[1]] == -1:\n        return grid\n\n    # Check if cell is empty\n    if grid[position[0]][position[1]] == 0:\n        return grid\n\n    # Update adjacent cells\n    for i in range(max(0, position[0] - 1), min(len(grid), position[0] + 2)):\n        for j in range(max(0, position[1] - 1), min(len(grid[0]), position[1] + 2)):\n            if grid[i][j] == -1:\n                grid[i][j] = 0\n\n    return grid\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 170, in <module>\n  File \"<string>\", line 168, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\n    for direction in code_sequence:\n        if direction == 0:\n            y += 1\n        elif direction == 1:\n            x += 1\n        elif direction == 2:\n            y -= 1\n        elif direction == 3:\n            x -= 1\n        if x == 0 and y == 0:\n            return 'Shangri-La found'\n    return 'Shangri-La not found'\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/8", "completion": "\n    canvas = list(canvas)\n    painter = canvas.index('P')\n    canvas[painter] = '*'\n    for i in range(painter + 1, len(canvas)):\n        if canvas[i] == '#':\n            break\n        canvas[i] = '*'\n    for i in range(painter - 1, -1, -1):\n        if canvas[i] == '#':\n            break\n        canvas[i] = '*'\n    if canvas.count('*') == 0:\n        return ''.join(canvas)\n    if canvas.count('*') % 2 == 0:\n        return 'Invalid canvas'\n    return ''.join(canvas)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 153, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/9", "completion": "\n    word_frequency = {}\n    words = string.lower().split()\n    for word in words:\n        word_frequency[word] = word_frequency.get(word, 0) + 1\n    return word_frequency\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 133, in <module>\n  File \"<string>\", line 131, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/10", "completion": "\n    animal_counts = {'C': 0, 'D': 0, 'B': 0}\n    animal_sounds = animal_string.split(' ')\n    for sound in animal_sounds:\n        if len(sound) > 1 and sound[0] in animal_counts:\n            animal_counts[sound[0]] += len(sound) - 1\n    return [animal_counts[animal] for animal in sorted(animal_counts.keys())]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh {fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"are {', '.join(fruits[:-1])} and {fruits[-1]} from {location}? Marvelous!\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    counter = Counter(flux_values)\n    max_occurrence = max(counter.values())\n    max_element = min([k for k, v in counter.items() if v == max_occurrence])\n    return sum(flux_values) * max_element\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    count = {}\n    for elem in elems:\n        if elem in count:\n            count[elem] += 1\n        else:\n            count[elem] = 1\n    min_count = min(count.values())\n    rarest_elems = [k for k, v in count.items() if v == min_count]\n    return rarest_elems[0]", "result": "passed", "passed": true}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                if char.isupper():\n                    alias += vowels[index + 1].upper()\n                else:\n                    alias += vowels[index + 1]\n            elif char.lower() in consonants:\n                index = consonants.index(char.lower())\n                if char.isupper():\n                    alias += consonants[index + 1].upper()\n                else:\n                    alias += consonants[index + 1]\n    return alias\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/15", "completion": "\n    hand = [int(card[:-1]) for card in hand]\n    hand.sort()\n    if hand.count(hand[0]) == 5:\n        return hand[0] * 4\n    elif hand.count(hand[0]) == 4:\n        return hand[0] * 3\n    elif hand.count(hand[0]) == 3 and hand.count(hand[3]) == 2:\n        return hand[0] * 2 + hand[3]\n    elif hand.count(hand[0]) == 3 and hand.count(hand[2]) == 2:\n        return hand[0] * 2 + hand[2]\n    elif hand.count(hand[0]) == 2 and hand.count(hand[2]) == 3:\n        return hand[2] * 2 + hand[0]\n    elif hand.count(hand[0]) == 2 and hand.count(hand[3]) == 3:\n        return hand[3] * 2 + hand[0]\n    elif hand.count(hand[0]) == 2 and hand.count(hand[4]) == 3:\n        return hand[4] * 2 + hand[0]\n    elif hand.count(hand[0]) == 2 and hand.count(hand[2]) == 2:\n        return hand[0] + hand[2]\n    elif hand.count(hand[0]) == 2 and hand.count(hand[3]) == 2:\n        return hand[0] + hand[3]\n    elif hand.count(hand[0]) == 2 and hand.count(hand[4]) == 2:\n        return hand[0] + hand[4]\n    else:\n        return 0\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 164, in <module>\n  File \"<string>\", line 161, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 26, in evaluate_poker_hand\n    hand = [int(card[:-1]) for card in hand]\n  File \"<string>\", line 26, in <listcomp>\n    hand = [int(card[:-1]) for card in hand]\nValueError: invalid literal for int() with base 10: 'A'\n", "passed": false}
{"task_id": "EvoEval/16", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        sum = 1\n        for i in range(2, n+1):\n            a, b = b, a + b\n            sum += b\n        return sum\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        dragon_hp -= wizard[1]\n        if dragon_hp <= 0:\n            return wizard[0]\n    return 'The dragon won!'\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/18", "completion": "\n    return [i for i in range(1, 1000000) if sum(int(j) for j in str(i)) == 7 and i % 7 == 0][n - 1]", "result": "timed out", "passed": false}
{"task_id": "EvoEval/19", "completion": "\n    danger = 0\n    for row in m:\n        for cell in row:\n            if cell == 1:\n                danger += 1\n    return danger\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    pattern = []\n    for i in range(1, n + 1):\n        pattern.append(str(i))\n    for i in range(n - 1, 0, -1):\n        pattern.append(str(i))\n    return pattern\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/21", "completion": "\n    def is_word_in_grid(word, grid):\n        for row in grid:\n            if word in ''.join(row):\n                return True\n        for col in range(len(grid[0])):\n            column = [grid[row][col] for row in range(len(grid))]\n            if word in ''.join(column):\n                return True\n        return False\n\n    for word in words:\n        if not is_word_in_grid(word, grid):\n            return False\n    return True\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 151, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/22", "completion": "\n    return t * v / 9.461e12\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 123, in <module>\n  File \"<string>\", line 121, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_prime(n):\n        count = 0\n        num = 2\n        while count < n:\n            if is_prime(num):\n                count += 1\n            num += 1\n        return num - 1\n\n    result = \"\"\n    for char in s:\n        if char.islower():\n            result += str(get_prime(ord(char) - ord('a') + 1))\n        else:\n            result += char\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/24", "completion": "\n    # Create a dictionary to map each English letter to its corresponding alien symbol\n    alien_dict = {\n        'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!',\n        'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=',\n        'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<',\n        'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'\n    }\n\n    # Translate the English word into the alien language\n    alien_word = ''.join(alien_dict[letter] for letter in english_word.lower())\n\n    return alien_word\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/25", "completion": "\n    sentences = text.split(\".\")\n    word_count = 0\n    max_sentence = \"\"\n    max_count = 0\n    for sentence in sentences:\n        count = sentence.lower().split().count(word.lower())\n        if count > max_count:\n            max_count = count\n            max_sentence = sentence\n        word_count += count\n    return word_count, max_sentence", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/26", "completion": "\n    # Check if start and end are the same\n    if start == end:\n        return []\n    \n    # Check if start or end are out of bounds\n    if start[0] < 0 or start[0] >= len(maze) or start[1] < 0 or start[1] >= len(maze[0]) or end[0] < 0 or end[0] >= len(maze) or end[1] < 0 or end[1] >= len(maze[0]):\n        return []\n    \n    # Check if start or end are walls\n    if maze[start[0]][start[1]] == 1 or maze[end[0]][end[1]] == 1:\n        return []\n    \n    # Initialize the queue and visited set\n    queue = [(start, [])]\n    visited = set()\n    \n    # Perform breadth-first search\n    while queue:\n        (current, path) = queue.pop(0)\n        visited.add(current)\n        \n        # Check if we've reached the end\n        if current == end:\n            return path\n        \n        # Add neighboring cells to the queue\n        for direction in ['up', 'down', 'left', 'right']:\n            next_cell = get_next_cell(maze, current, direction)\n            if next_cell and next_cell not in visited:\n                queue.append((next_cell, path + [direction]))\n    \n    # If we've exhausted the queue without finding a path, return None\n    return None\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 83, in <module>\n  File \"<string>\", line 81, in check\n        _check_maze(*inp, candidate(*inp), exp)\n  File \"<string>\", line 48, in pathfinder\n            next_cell = get_next_cell(maze, current, direction)\nNameError: name 'get_next_cell' is not defined\n", "passed": false}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    if taxable_income <= 10000:\n        return 0\n    elif taxable_income <= 35000:\n        return (taxable_income - 10000) * 0.15\n    elif taxable_income <= 80000:\n        return 2500 + (taxable_income - 35000) * 0.25\n    else:\n        return 2500 + 15000 + (taxable_income - 80000) * 0.30\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/29", "completion": "\n    # create empty set to store unique palindromes\n    palindromes = set()\n  \n    # iterate over each character in the string\n    for i in range(len(s)):\n        # iterate over each possible substring starting at i\n        for j in range(i+1, len(s)+1):\n            # check if the substring is a palindrome\n            if s[i:j] == s[i:j][::-1]:\n                # add the palindrome to the set\n                palindromes.add(s[i:j])\n  \n    # return the sorted list of unique palindromes\n    return sorted(list(palindromes))\n  ", "result": "passed", "passed": true}
{"task_id": "EvoEval/30", "completion": "\n    # Check if start or end points are walls\n    if maze[start[0]][start[1]] == 0 or maze[end[0]][end[1]] == 0:\n        return []\n    # Initialize variables\n    queue = [start]\n    visited = set()\n    visited.add(start)\n    path = {start: []}\n    # Perform breadth-first search\n    while queue:\n        current = queue.pop(0)\n        if current == end:\n            return path[current]\n        for neighbor in get_neighbors(maze, current):\n            if neighbor not in visited:\n                queue.append(neighbor)\n                visited.add(neighbor)\n                path[neighbor] = path[current] + [neighbor]\n    return []\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 71, in <module>\n  File \"<string>\", line 69, in check\n        _check_path(*inp, candidate(*inp), exp)\n  File \"<string>\", line 35, in find_path\n        for neighbor in get_neighbors(maze, current):\nNameError: name 'get_neighbors' is not defined\n", "passed": false}
{"task_id": "EvoEval/31", "completion": "\n    # create a 2D array to store the number of unique paths to each cell\n    paths = [[0] * n for _ in range(m)]\n\n    # initialize the first row and column to 1, since there is only one way to reach them\n    for i in range(m):\n        paths[i][0] = 1\n    for j in range(n):\n        paths[0][j] = 1\n\n    # fill in the rest of the array\n    for i in range(1, m):\n        for j in range(1, n):\n            # the number of unique paths to a cell is the sum of the number of unique paths to the cell above it\n            # and the cell to the left of it\n            paths[i][j] = paths[i - 1][j] + paths[i][j - 1]\n\n    # return the number of unique paths to the bottom-right corner\n    return paths[m - 1][n - 1]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/32", "completion": "\n    playlist_length = len(playlist)\n    seed = seed % playlist_length\n    for i in range(playlist_length):\n        if \"Rock\" in playlist[i]:\n            continue\n        playlist[i], playlist[seed % playlist_length] = playlist[seed % playlist_length], playlist[i]\n        seed = (seed * 16807) % 2147483647\n    return playlist\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/33", "completion": "\n    # create a list to store the number of ways to reach each step\n    ways = [0] * (n + 1)\n    # base case: there is 1 way to reach the 0th step (by not jumping)\n    ways[0] = 1\n    # iterate through each step\n    for i in range(1, n + 1):\n        # for each magic stone, add the number of ways to reach the current step\n        for stone in magic_stones:\n            if i - stone >= 0:\n                ways[i] += ways[i - stone]\n    # return the number of ways to reach the nth step\n    return ways[n]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/34", "completion": "\n    transformation = [0]\n    for i in range(1, n + 1):\n        if i < m:\n            transformation.append(min(100, transformation[-1] + 10))\n        elif i == m:\n            transformation.append(min(100, transformation[-1] * 2))\n        else:\n            transformation.append(max(0, transformation[-1] - 10))\n    return transformation\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 151, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or email[0] == \"@\" or email[-1] == \"@\" or \".\" not in email[email.index(\"@\"):] or \"@\" in email[email.index(\"@\")+1:email.index(\"@\") + email[email.index(\"@\"):].index(\".\")]:\n        return False\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 133, in <module>\n  File \"<string>\", line 131, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/36", "completion": "\n    integral_coefficients = [0]\n    for i, x in enumerate(xs):\n        integral_coefficients.append(x / (i + 1))\n    return integral_coefficients\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for char in s:\n        if char.lower() in vowels:\n            if char.isupper():\n                result += vowels[vowels.index(char.lower()) + 1].upper()\n            else:\n                result += vowels[vowels.index(char.lower()) + 1]\n        elif char.lower() in consonants:\n            if char.isupper():\n                result += consonants[consonants.index(char.lower()) + 1].upper()\n            else:\n                result += consonants[consonants.index(char.lower()) + 1]\n        else:\n            result += char\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 145, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 26, in string_transform\n                result += vowels[vowels.index(char.lower()) + 1]\nIndexError: string index out of range\n", "passed": false}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\": \"\ud83d\ude09\"\n    }\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n    return sentence\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/39", "completion": "\n    # Create a list to store the rows of the ASCII art\n    rows = []\n    # Create a string to store the characters in the row\n    row = \"\"\n    # Iterate over the characters in the string\n    for char in s:\n        # Add the character to the row n times\n        row += char * n\n    # Add the row to the list of rows\n    rows.append(row)\n    # Add the frame to the list of rows\n    rows.append(\"*\" * (len(row) + 2))\n    # Return the list of rows as a single string\n    return \"\\n\".join(rows)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 151, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/40", "completion": "\n    potions = sorted(potions)\n    for i in range(len(potions)):\n        for j in range(i + 1, len(potions)):\n            for k in range(j + 1, len(potions)):\n                if int(potions[i].split()[-1]) + int(potions[j].split()[-1]) + int(potions[k].split()[-1]) == target:\n                    return [potions[i], potions[j], potions[k]]\n    return []\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/41", "completion": "\n    # create a 2D array to store the minimum energy required to reach each cell\n    min_energy = [[float('inf')] * len(arr[0]) for _ in range(len(arr))]\n    min_energy[0][0] = arr[0][0]\n    \n    # perform dynamic programming to find the minimum energy required to reach each cell\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if arr[i][j] == 0:\n                continue\n            if i > 0 and min_energy[i-1][j] != float('inf'):\n                min_energy[i][j] = min(min_energy[i][j], min_energy[i-1][j] + arr[i][j])\n            if j > 0 and min_energy[i][j-1] != float('inf'):\n                min_energy[i][j] = min(min_energy[i][j], min_energy[i][j-1] + arr[i][j])\n    \n    # return the minimum energy required to reach the safe cell\n    return min_energy[-1][-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 163, in <module>\n  File \"<string>\", line 161, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/42", "completion": "\n    # Create a dictionary to store the rarity of each item\n    item_rarity = {}\n    # Iterate through the player_input list\n    for item in player_input:\n        # If the item's rarity is 5, return True and the second most valuable item's rarity\n        if item == 5:\n            return (True, -1)\n        # If the item's rarity is not 5, add it to the dictionary\n        item_rarity[item] = item\n    # If no item's rarity is 5, return False and None\n    return (False, None)\n  ", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/43", "completion": "\n    duration = distance / speed\n    fuel_consumption = spaceship_weight * planet_gravity * 0.1\n    if fuel >= duration:\n        remaining_fuel = fuel - (fuel_consumption * duration)\n        return round(remaining_fuel, 2)\n    else:\n        return 'Insufficient fuel'\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/44", "completion": "\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 132, in <module>\n  File \"<string>\", line 130, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/45", "completion": "\n    # create a list to store the number of hills prince can see from each hill\n    num_hills = []\n    # iterate through the list of hills\n    for i in range(len(arr)):\n        # initialize the number of hills prince can see from this hill to 1 (the hill itself)\n        count = 1\n        # iterate through the hills to the left of this hill\n        for j in range(i-1, -1, -1):\n            # if the hill to the left is shorter or equal in height, increment the count\n            if arr[j] <= arr[i]:\n                count += 1\n            # if the hill to the left is taller, break the loop\n            else:\n                break\n        # iterate through the hills to the right of this hill\n        for j in range(i+1, len(arr)):\n            # if the hill to the right is shorter or equal in height, increment the count\n            if arr[j] <= arr[i]:\n                count += 1\n            # if the hill to the right is taller, break the loop\n            else:\n                break\n        # append the count to the list of number of hills prince can see from each hill\n        num_hills.append(count)\n    # return the maximum number of hills prince can see from any hill\n    return max(num_hills)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 154, in <module>\n  File \"<string>\", line 152, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/46", "completion": "\n    result = []\n    for test_case in test_cases:\n        secret_message = ''\n        for word in test_case:\n            for letter in word:\n                if letter.isalpha():\n                    secret_message += letter.lower()\n        result.append(secret_message)\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n    return {item: quantity for item, quantity in inventory.items() if quantity > 0}\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/49", "completion": "\n    morse = {\n        '01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E',\n        '0010': 'F', '110': 'G', '0000': 'H', '00': 'I', '0111': 'J',\n        '101': 'K', '0100': 'L', '11': 'M', '10': 'N', '111': 'O',\n        '0110': 'P', '1101': 'Q', '010': 'R', '000': 'S', '1': 'T',\n        '001': 'U', '0001': 'V', '011': 'W', '1001': 'X', '1011': 'Y',\n        '1100': 'Z', '01111': '1', '00111': '2', '00011': '3',\n        '00001': '4', '00000': '5', '10000': '6', '11000': '7',\n        '11100': '8', '11110': '9', '11111': '0'\n    }\n    return ''.join(morse[i] for i in msg.split(' ') if i)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 156, in <module>\n  File \"<string>\", line 153, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 42, in morse_decoder\n    return ''.join(morse[i] for i in msg.split(' ') if i)\n  File \"<string>\", line 42, in <genexpr>\n    return ''.join(morse[i] for i in msg.split(' ') if i)\nKeyError: '010101/01'\n", "passed": false}
{"task_id": "EvoEval/50", "completion": "\n    morse_code = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..'}\n    morse_text = ''\n    for char in text.upper():\n        if char == ' ':\n            morse_text += '   '\n        elif char in morse_code:\n            morse_text += morse_code[char] + ' '\n    return morse_text.strip()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/51", "completion": "\n    if not string:\n        return ''\n    if not list_of_alphabets:\n        return string\n    result = ''\n    for char in string:\n        result += list_of_alphabets[(ord(char) - 97) % len(list_of_alphabets)]\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/52", "completion": "\n    # Sort the orders in descending order\n    orders.sort(reverse=True)\n    \n    # Initialize the number of orders fulfilled\n    fulfilled_orders = 0\n    \n    # Iterate through the orders\n    for order in orders:\n        # If the order can be fulfilled in a single batch\n        if order <= n:\n            fulfilled_orders += 1\n            # If the maximum number of batches has been reached\n            if fulfilled_orders == m:\n                break\n    \n    return fulfilled_orders\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.isupper():\n                transformed += vowels[vowels.index(char.lower()) + 1].upper()\n            else:\n                transformed += vowels[vowels.index(char.lower()) + 1]\n        elif char.lower() in consonants:\n            if char.isupper():\n                transformed += consonants[consonants.index(char.lower()) + 1].upper()\n            else:\n                transformed += consonants[consonants.index(char.lower()) + 1]\n        elif char == '?':\n            if i % 2 == 0:\n                transformed += '!'\n            else:\n                transformed += '?'\n        else:\n            transformed += char\n    return transformed\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 156, in <module>\n  File \"<string>\", line 154, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == star:\n                result.append((i, j))\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/55", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    result = ''\n    for i, char in enumerate(message):\n        if char.isalpha():\n            if char.isupper():\n                char = char.lower()\n            index = (alphabet.index(char) + shift + i) % 26\n            result += alphabet[index].upper()\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....',\n                       'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.',\n                       'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-',\n                       'y': '-.--', 'z': '--..', ' ': '/'}\n    morse_code = ''\n    for char in s:\n        morse_code += morse_code_dict[char] + ' '\n    return morse_code.strip()\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_name = ''\n        for i, letter in enumerate(dish):\n            new_name += magic_spell[i % len(magic_spell)]\n        new_menu[new_name] = price\n    return new_menu\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated = ''\n    for char in earth_phrase:\n        if char in vowels:\n            translated += vowels[(vowels.index(char) + 1) % len(vowels)]\n        elif char in consonants:\n            translated += consonants[(consonants.index(char) + 1) % len(consonants)]\n        elif char == ' ':\n            translated += '@'\n    translated = translated.split(' ')\n    for i in range(len(translated)):\n        if translated[i][0] in vowels:\n            translated[i] += 'xy'\n        else:\n            translated[i] += 'yz'\n        translated[i] = translated[i].capitalize()\n    return ''.join(translated)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 157, in <module>\n  File \"<string>\", line 155, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    else:\n        return sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/60", "completion": "\n    # Initialize a dictionary to keep track of the number of sugar pieces at each location\n    sugar_dict = {location: 1 for location in sugar_locations}\n\n    # Initialize a list to keep track of the number of happy ants\n    happy_ants = 0\n\n    # Iterate over each ant's position and direction\n    for position, direction in ant_positions:\n        # Initialize a variable to keep track of the number of sugar pieces the ant has picked up\n        sugar_picked_up = 0\n\n        # If the ant is moving right\n        if direction == \"right\":\n            # Iterate over each location from the ant's position to the end of the path\n            for location in range(position, path_length):\n                # If there is sugar at the current location\n                if location in sugar_dict:\n                    # Pick up a small bite of sugar\n                    sugar_picked_up += 1\n                    # Decrease the number of sugar pieces at the current location\n                    sugar_dict[location] -= 1\n                    # If there are no more sugar pieces at the current location\n                    if sugar_dict[location] == 0:\n                        # Remove the location from the dictionary\n                        del sugar_dict[location]\n\n        # If the ant is moving left\n        elif direction == \"left\":\n            # Iterate over each location from the ant's position to the start of the path\n            for location in range(position, -1, -1):\n                # If there is sugar at the current location\n                if location in sugar_dict:\n                    # Pick up a small bite of sugar\n                    sugar_picked_up += 1\n                    # Decrease the number of sugar pieces at the current location\n                    sugar_dict[location] -= 1\n                    # If there are no more sugar pieces at the current location\n                    if sugar_dict[location] == 0:\n                        # Remove the location from the dictionary\n                        del sugar_dict[location]\n\n        # If the ant has picked up at least one sugar piece\n        if sugar_picked_up > 0:\n            # Increment the number of happy ants\n            happy_ants += 1\n\n    # Return the number of happy ants\n    return happy_ants\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 187, in <module>\n  File \"<string>\", line 185, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.isupper():\n                result += vowels[(vowels.index(char.lower()) + 1) % len(vowels)].upper()\n            else:\n                result += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            if char.isupper():\n                result += consonants[(consonants.index(char.lower()) - 1) % len(consonants)].upper()\n            else:\n                result += consonants[(consonants.index(char.lower()) - 1) % len(consonants)]\n        else:\n            result += char\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/62", "completion": "\n    new_recipe = {}\n    for ingredient, quantity in recipe.items():\n        new_quantity = quantity * conversion_factor\n        new_recipe[ingredient] = new_quantity\n    return new_recipe\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = []\n    blocks = p\n    while blocks > 0:\n        pyramid.append(blocks)\n        if blocks % 2 == 0:\n            blocks -= 2\n        else:\n            blocks -= 3\n    return pyramid", "result": "passed", "passed": true}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in range(start, end + 1):\n        if num % divisor == 0 and is_prime(num):\n            result.append(num)\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/65", "completion": "\n    if not order:\n        return menu\n    else:\n        for food in order:\n            if \"remove\" in order[food]:\n                for ingredient in order[food][\"remove\"]:\n                    if ingredient in menu[food]:\n                        menu[food].remove(ingredient)\n            if \"add\" in order[food]:\n                for ingredient in order[food][\"add\"]:\n                    if ingredient not in menu[food]:\n                        menu[food].append(ingredient)\n        return menu\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_anagram(a, b):\n        return sorted(str(a)) == sorted(str(b))\n\n    primes = [i for i in range(2, n + 1) if is_prime(i)]\n    pairs = []\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            if is_anagram(primes[i], primes[j]):\n                pairs.append((primes[i], primes[j]))\n    return pairs\n\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        if customer in meals:\n            total_calories = sum([meal['calories'] for meal in meals[customer]])\n        else:\n            total_calories = 0\n        result[customer] = total_calories\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/68", "completion": "\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        return arr[0] <= arr[1]\n    if len(arr) == 3:\n        return arr[0] <= arr[1] <= arr[2] or arr[0] <= arr[2] <= arr[1] or arr[1] <= arr[0] <= arr[2] or arr[1] <= arr[2] <= arr[0] or arr[2] <= arr[0] <= arr[1] or arr[2] <= arr[1] <= arr[0]\n    if len(arr) == 4:\n        return arr[0] <= arr[1] <= arr[2] <= arr[3] or arr[0] <= arr[1] <= arr[3] <= arr[2] or arr[0] <= arr[2] <= arr[1] <= arr[3] or arr[0] <= arr[2] <= arr[3] <= arr[1] or arr[0] <= arr[3] <= arr[1] <= arr[2] or arr[0] <= arr[3] <= arr[2] <= arr[1] or arr[1] <= arr[0] <= arr[2] <= arr[3] or arr[1] <= arr[0] <= arr[3] <= arr[2] or arr[1] <= arr[2] <= arr[0] <= arr[3] or arr[1] <= arr[2] <= arr[3] <= arr[0] or arr[1] <= arr[3] <= arr[0] <= arr[2] or arr[1] <= arr[3] <= arr[2] <= arr[0] or arr[2] <= arr[0] <= arr[1] <= arr[3] or arr[2] <= arr[0] <= arr[3] <= arr[1] or arr[2] <= arr[1] <= arr[0] <= arr[3] or arr[2] <= arr[1] <= arr[3] <= arr[0] or arr[2] <= arr[3] <= arr[0] <= arr[1] or arr[2] <= arr[3] <= arr[1] <=", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 38\n        return arr[0] <= arr[1] <= arr[2] <= arr[3] or arr[0] <= arr[1] <= arr[3] <= arr[2] or arr[0] <= arr[2] <= arr[1] <= arr[3] or arr[0] <= arr[2] <= arr[3] <= arr[1] or arr[0] <= arr[3] <= arr[1] <= arr[2] or arr[0] <= arr[3] <= arr[2] <= arr[1] or arr[1] <= arr[0] <= arr[2] <= arr[3] or arr[1] <= arr[0] <= arr[3] <= arr[2] or arr[1] <= arr[2] <= arr[0] <= arr[3] or arr[1] <= arr[2] <= arr[3] <= arr[0] or arr[1] <= arr[3] <= arr[0] <= arr[2] or arr[1] <= arr[3] <= arr[2] <= arr[0] or arr[2] <= arr[0] <= arr[1] <= arr[3] or arr[2] <= arr[0] <= arr[3] <= arr[1] or arr[2] <= arr[1] <= arr[0] <= arr[3] or arr[2] <= arr[1] <= arr[3] <= arr[0] or arr[2] <= arr[3] <= arr[0] <= arr[1] or arr[2] <= arr[3] <= arr[1] <=\n    return arr[0] <= arr[1] <= arr[2] <= arr[3] or arr[0] <= arr[1] <= arr[3] <= arr[2] or arr[0] <= arr[2] <= arr[1] <= arr[3] or arr[0] <= arr[2] <= arr[3] <= arr[1] or arr[0] <= arr[3] <= arr[1] <= arr[2] or arr[0] <= arr[3] <= arr[2] <= arr[1] or arr[1] <= arr[0] <= arr[2] <= arr[3] or arr[1] <= arr[0] <= arr[3] <= arr[2] or arr[1] <= arr[2] <= arr[0] <= arr[3] or arr[1] <= arr[2] <= arr[3] <= arr[0] or arr[1] <= arr[3] <= arr[0] <= arr[2] or arr[1] <= arr[3] <= arr[2] <= arr[0] or arr[2] <= arr[0] <= arr[1] <= arr[3] or arr[2] <= arr[0] <= arr[3] <= arr[1] or arr[2] <= arr[1] <= arr[0] <= arr[3] or arr[2] <= arr[1] <= arr[3] <= arr[0] or arr[2] <= arr[3] <= arr[0] <= arr[1] or arr[2] <= arr[3] <= arr[1] <=\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ^\nSyntaxError: invalid syntax\n", "passed": false}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets or path[i + 1] not in planets[path[i]]:\n            return False\n    return True\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    result = ''\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                result += chr((ord(char.lower()) - 97 + n) % 26 + 97)\n            else:\n                result += chr((ord(char) - 97 + n) % 26 + 97)\n        else:\n            result += char\n    return result, result.count(vowels)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/72", "completion": "\n    fairy_tales = []\n    for i in lst:\n        fairy_tales.append(\"Once upon a time, in kingdom far away, lived a magical creature name '{}' known for telling {} tales a day\".format(i, sum(c.isdigit() for c in i)))\n    return fairy_tales", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 131, in <module>\n  File \"<string>\", line 129, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/73", "completion": "\n    # Write your code here\n    if not grid or not grid[0]:\n        return 0\n    m, n = len(grid), len(grid[0])\n    total_chests = sum(sum(row) for row in grid)\n    if total_chests <= bag_capacity:\n        return 2\n    trips = 0\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                grid[i][j] = 0\n                total_chests -= 1\n                trips += 1\n                if total_chests <= bag_capacity:\n                    return trips * 2\n                while total_chests > bag_capacity:\n                    for k in range(i, m):\n                        for l in range(n):\n                            if grid[k][l] == 1:\n                                grid[k][l] = 0\n                                total_chests -= 1\n                                trips += 1\n                                break\n                        else:\n                            continue\n                        break\n    return trips * 2\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 174, in <module>\n  File \"<string>\", line 172, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/74", "completion": "\n    if s == '':\n        return s\n    else:\n        return ''.join([cipher.get(i, i) for i in s])\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    digits = '0123456789'\n    special_chars = '!@#$%^&*()_+-=[]{}|;:,.<>?'\n    output_str = ''\n    for i, char in enumerate(input_str):\n        if char.lower() in vowels:\n            if char.isupper():\n                output_str += vowels[(vowels.index(char.lower()) + 1) % len(vowels)].upper()\n            else:\n                output_str += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            if char.isupper():\n                output_str += consonants[(consonants.index(char.lower()) + 1) % len(consonants)].upper()\n            else:\n                output_str += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        elif char.lower() in digits:\n            output_str += str((int(char) + 1) % 10)\n        elif char in special_chars:\n            if i % 2 == 0:\n                output_str += '!'\n            else:\n                output_str += '?'\n        else:\n            output_str += char\n    return output_str\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 161, in <module>\n  File \"<string>\", line 159, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    pyramid = []\n    level = 0\n    for i in lst:\n        level += i\n        pyramid.append('#' * level)\n    return pyramid[::-1]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/77", "completion": "\n    def calculate_points(n, k):\n        points = 0\n        while n > 1:\n            points += n * n // k\n            n = n * n // k\n        return points\n\n    points = [calculate_points(n, k) for n in sequence]\n    return sorted(points, reverse=True)\n\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    if n % 2 == 0:\n        return []\n    pattern = []\n    for i in range(n):\n        for j in range(n):\n            if (i + j) % 2 == 0:\n                pattern.append(mat[i][j])\n    return pattern\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    for i in range(len(prices)):\n        for j in range(i + 1, min(i + days + 1, len(prices))):\n            profit = prices[j] - prices[i]\n            if profit > max_profit:\n                max_profit = profit\n    return max_profit\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/80", "completion": "\n    # get the start position\n    start = next((i, j) for i, row in enumerate(map) for j, val in enumerate(row) if val == 'S')\n    # get the end position\n    end = next((i, j) for i, row in enumerate(map) for j, val in enumerate(row) if val == 'E')\n    # get the width and height of the map\n    width = len(map[0])\n    height = len(map)\n    # create a list to store the path\n    path = [start]\n    # create a set to store the visited positions\n    visited = set()\n    # create a set to store the walls\n    walls = set()\n    # create a set to store the positions that are out of bounds\n    out_of_bounds = set()\n    # create a set to store the positions that are not valid\n    not_valid = set()\n    # create a set to store the positions that are not walls\n    not_walls = set()\n    # create a set to store the positions that are not out of bounds\n    not_out_of_bounds = set()\n    # create a set to store the positions that are not valid\n    not_valid = set()\n    # create a set to store the positions that are not walls\n    not_walls = set()\n    # create a set to store the positions that are not out of bounds\n    not_out_of_bounds = set()\n    # create a set to store the positions that are not valid\n    not_valid = set()\n    # create a set to store the positions that are not walls\n    not_walls = set()\n    # create a set to store the positions that are not out of bounds\n    not_out_of_bounds = set()\n    # create a set to store the positions that are not valid\n    not_valid = set()\n    # create a set to store the positions that are not walls\n    not_walls = set()\n    # create a set to store the positions that are not out of bounds\n    not_out_of_bounds = set()\n    # create a set to store the positions that are not valid\n    not_valid = set()\n    # create a set to store the positions that are not walls\n    not_walls = set()\n    # create a set to store the positions that are not out of bounds\n    not_out_of_bounds = set()\n    # create a set to store the positions that are not valid\n    not_valid", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 191, in <module>\n  File \"<string>\", line 189, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/81", "completion": "\n    if len(word_list) == 0:\n        return \"CORRECT\"\n    for i in range(len(word_list) - 1):\n        if word_list[i][0] not in alien_dictionary:\n            return \"INCORRECT\"\n        if word_list[i + 1][0] not in alien_dictionary:\n            return \"INCORRECT\"\n        if alien_dictionary.index(word_list[i][0]) > alien_dictionary.index(word_list[i + 1][0]):\n            return \"INCORRECT\"\n    return \"CORRECT\"\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_signs = {\n        \"Aries\": (\"March 21\", \"April 19\", \"Fire\"),\n        \"Taurus\": (\"April 20\", \"May 20\", \"Earth\"),\n        \"Gemini\": (\"May 21\", \"June 20\", \"Air\"),\n        \"Cancer\": (\"June 21\", \"July 22\", \"Water\"),\n        \"Leo\": (\"July 23\", \"August 22\", \"Fire\"),\n        \"Virgo\": (\"August 23\", \"September 22\", \"Earth\"),\n        \"Libra\": (\"September 23\", \"October 22\", \"Air\"),\n        \"Scorpio\": (\"October 23\", \"November 21\", \"Water\"),\n        \"Sagittarius\": (\"November 22\", \"December 21\", \"Fire\"),\n        \"Capricorn\": (\"December 22\", \"January 19\", \"Earth\"),\n        \"Aquarius\": (\"January 20\", \"February 18\", \"Air\"),\n        \"Pisces\": (\"February 19\", \"March 20\", \"Water\"),\n    }\n    elements = {\"Fire\": 0, \"Water\": 0, \"Air\": 0, \"Earth\": 0}\n    for birthday in birthdays:\n        month, day = map(int, birthday.split(\"-\")[1:])\n        for sign, (start, end, element) in zodiac_signs.items():\n            start_month, start_day = map(int, start.split())\n            end_month, end_day = map(int, end.split())\n            if (\n                (month == start_month and day >= start_day)\n                or (month == end_month and day <= end_day)\n                or (month > start_month and month < end_month)\n            ):\n                elements[element] += 1\n    return {element: count for element, count in elements.items() if count > 0}\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 176, in <module>\n  File \"<string>\", line 173, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 53, in zodiac_element\n            start_month, start_day = map(int, start.split())\nValueError: invalid literal for int() with base 10: 'March'\n", "passed": false}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/84", "completion": "\n    paths = []\n    def dfs(node, path):\n        if not node:\n            return\n        path.append(node)\n        if not node.get('left') and not node.get('right'):\n            paths.append(path.copy())\n        else:\n            dfs(node.get('left'), path)\n            dfs(node.get('right'), path)\n        path.pop()\n    dfs(tree, [])\n    return paths\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/85", "completion": "\n    # Check if the starting point is a monster\n    if grid[0][0] == 1:\n        return -1\n    \n    # Initialize the number of moves to 0\n    moves = 0\n    \n    # Initialize the current position to the starting point\n    current_position = (0, 0)\n    \n    # While the current position is not the princess's position\n    while current_position != coord:\n        # Check if the princess's position is out of bounds\n        if coord[0] >= len(grid) or coord[1] >= len(grid[0]):\n            return -1\n        \n        # Check if the princess's position is a monster\n        if grid[coord[0]][coord[1]] == 1:\n            return -1\n        \n        # Check if the current position is a monster\n        if grid[current_position[0]][current_position[1]] == 1:\n            return -1\n        \n        # Move to the right if possible\n        if current_position[1] < len(grid[0]) - 1 and grid[current_position[0]][current_position[1] + 1] == 0:\n            current_position = (current_position[0], current_position[1] + 1)\n        # Move down if possible\n        elif current_position[0] < len(grid) - 1 and grid[current_position[0] + 1][current_position[1]] == 0:\n            current_position = (current_position[0] + 1, current_position[1])\n        # Move up if possible\n        elif current_position[0] > 0 and grid[current_position[0] - 1][current_position[1]] == 0:\n            current_position = (current_position[0] - 1, current_position[1])\n        # Move left if possible\n        elif current_position[1] > 0 and grid[current_position[0]][current_position[1] - 1] == 0:\n            current_position = (current_position[0], current_position[1] - 1)\n        # If no moves are possible, return -1\n        else:\n            return -1\n        \n        # Increment the number of moves\n        moves += 1\n    \n    # Return the number of moves\n    return moves\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 180, in <module>\n  File \"<string>\", line 178, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/86", "completion": "\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n    return [movie[0] for movie in sorted_movies]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 137, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 24, in sort_movies_by_ratings_and_release_date\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n  File \"<string>\", line 24, in <lambda>\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\nTypeError: bad operand type for unary -: 'str'\n", "passed": false}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    result = ''\n    while arr:\n        result += ''.join(arr.pop(0))\n        if arr and arr[0]:\n            for row in arr:\n                result += row.pop()\n        if arr:\n            result += ''.join(arr.pop()[::-1])\n        if arr and arr[0]:\n            for row in arr[::-1]:\n                result += row.pop(0)\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/88", "completion": "\n    new_dict = {}\n    for planet, data in dict_of_planets.items():\n        if data[0] is not None and data[1] is not None:\n            new_dict[planet] = round(data[0] / data[1], 2)\n    return new_dict\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/89", "completion": "\n    # create a copy of the aliens list\n    aliens_copy = aliens.copy()\n    # remove the alien at the aimed position\n    aliens_copy.remove(ray)\n    # remove the alien at the position adjacent to the aimed position\n    if ray - 1 in aliens_copy:\n        aliens_copy.remove(ray - 1)\n    if ray + 1 in aliens_copy:\n        aliens_copy.remove(ray + 1)\n    # return the remaining aliens\n    return aliens_copy\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/90", "completion": "\n    return sum(int(''.join(i)) for i in itertools.product(s1, s2))\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 129, in <module>\n  File \"<string>\", line 126, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 15, in magical_multiply\n    return sum(int(''.join(i)) for i in itertools.product(s1, s2))\nNameError: name 'itertools' is not defined\n", "passed": false}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if status == 'On Ground' and action == 'Launch':\n            status = 'In Space'\n        elif status == 'In Space' and action == 'Move':\n            status = 'In Space'\n        elif status == 'In Space' and action == 'Land':\n            status = 'On Ground'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = []\n    for i in range(n):\n        layer = ' ' * (n - i - 1) + alphabet[i % 26] * (2 * i + 1) + ' ' * (n - i - 1)\n        result.append(layer)\n    return '\\n'.join(result)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/93", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    result = \"\"\n    for i, char in enumerate(message):\n        if char.isalpha():\n            if char.isupper():\n                char = char.lower()\n            index = alphabet.index(char)\n            n = n_values[i % len(n_values)]\n            new_index = (index + n) % 26\n            new_char = alphabet[new_index]\n            if char.isupper():\n                new_char = new_char.upper()\n            result += new_char\n        else:\n            result += char\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 151, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/94", "completion": "\n    return [sorted(spell.split(), key=len) for spell in strings]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    else:\n        sum1 = 0\n        sum2 = 0\n        for i in range(len(m)):\n            sum1 += m[i][i]\n            sum2 += m[i][len(m)-i-1]\n        return abs(sum1 - sum2)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        value = lst[i]\n        if value % i == 0 and product_of_digits(value) == i:\n            magic_indices.append(i)\n    return magic_indices\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 137, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 24, in get_magic_indices\n        if value % i == 0 and product_of_digits(value) == i:\nZeroDivisionError: integer modulo by zero\n", "passed": false}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    else:\n        continents = [\"Asia\", \"Africa\", \"Europe\", \"North America\", \"South America\"]\n        encounter_order = []\n        for continent in continents:\n            for human, location in humans.items():\n                if location == continent:\n                    encounter_order.append(human)\n        return encounter_order\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[i - 1] + sequence[i - 2] + i\n        sequence.append(next_num)\n    for i in range(n):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n    return sequence\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 153, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    for round in rounds:\n        time = round * music\n        for i in range(time):\n            players.append(players.pop(0))\n        players.pop(0)\n    return players\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
