{"task_id": "MBPP/11", "completion": "\n    return s.replace(ch, '')\n\n"}
{"task_id": "MBPP/12", "completion": "\n    # 1. Flatten the matrix\n    flat_list = [item for sublist in M for item in sublist]\n\n    # 2. Sort the flattened list\n    sorted_list = sorted(flat_list)\n\n    # 3. Reshape the sorted list back into a matrix\n    sorted_matrix = [sorted_list[i * len(M):(i + 1) * len(M)] for i in range((len(sorted_list) + len(M) - 1) // len(M))]\n\n    return sorted_matrix\n\n"}
{"task_id": "MBPP/13", "completion": "\n    word_counts = Counter(words)\n    common_counts = word_counts.most_common(10)\n    return common_counts\n"}
{"task_id": "MBPP/14", "completion": "\n    return l * b * h\n\n"}
{"task_id": "MBPP/15", "completion": "\n    return re.findall('[a-z]+', text.lower())\n"}
{"task_id": "MBPP/16", "completion": "\n    return re.sub(r'(?<=[a-z])(?=[A-Z])', '_', text).lower()\n"}
{"task_id": "MBPP/17", "completion": "\n    return 4 * a\n\n"}
{"task_id": "MBPP/18", "completion": "\n    return [ord(c) for c in string]\n"}
{"task_id": "MBPP/19", "completion": "\n    return len(arraynums) != len(set(arraynums))\n\n"}
{"task_id": "MBPP/20", "completion": "\n    if x < 10:\n        return False\n    x_str = str(x)\n    for i in range(1, len(x_str)):\n        if int(x_str[i]) <= int(x_str[i-1]):\n            return False\n    return True\n\n"}
{"task_id": "MBPP/21", "completion": "\n    multiples = []\n    for i in range(1, n+1):\n        if i % m == 0:\n            multiples.append(i)\n    return multiples\n"}
{"task_id": "MBPP/22", "completion": "\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1\n\n"}
{"task_id": "MBPP/23", "completion": "\n    max_sum = -1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i] != list1[j] and list1[i] + list1[j] > max_sum:\n                max_sum = list1[i] + list1[j]\n    return max_sum\n"}
{"task_id": "MBPP/24", "completion": "\n    binary = str(binary)\n    decimal = 0\n    for i in range(len(binary)):\n        decimal += int(binary[i]) * (2 ** (len(binary) - 1 - i))\n    return decimal\n\n"}
{"task_id": "MBPP/25", "completion": "\n    # Initialize maximum and minimum\n    max_val = max(arr)\n    min_val = min(arr)\n\n    # Initialize product variable\n    product = 1\n\n    # Traverse through the array\n    for i in range(n):\n        # If the current element is not max or min\n        if arr[i] != max_val and arr[i] != min_val:\n            # Multiply product with the current element\n            product *= arr[i]\n\n    # Return the product\n    return product\n\n"}
{"task_id": "MBPP/26", "completion": "\n    # Initialize the count\n    count = 0\n\n    # Iterate over the list\n    for i in test_list:\n        if i == 0:\n            count += 1\n\n    # Check if count is less than K\n    if count < K:\n        return False\n    else:\n        return True\n\n"}
{"task_id": "MBPP/27", "completion": "\n    return [i for i in list if not re.match(r'^\\s*$', i)]\n"}
{"task_id": "MBPP/28", "completion": "\n    if k > n:\n        return 0\n    if k > n - k:\n        k = n - k\n    res = 1\n    for i in range(0 , k):\n        res = res * (n - i)\n        res = res // (i + 1)\n    return res\n"}
{"task_id": "MBPP/29", "completion": "\n    res = 0\n    for element in arr:\n        res = res ^ element\n    return res\n\n\narr = [1, 2, 3, 2, 3, 1, 3]\nn = len(arr)"}
{"task_id": "MBPP/30", "completion": "\n    # Write your code here\n    s = s.lower()\n    return s == s[::-1]\n\n"}
{"task_id": "MBPP/31", "completion": "\n    count = collections.Counter(nums)\n    heap = [(-cnt, num) for num, cnt in count.items()]\n    heapq.heapify(heap)\n    res = []\n    while k > 0 and heap:\n        cnt, num = heapq.heappop(heap)\n        res.append(num)\n        k -= 1\n    return res\n\n"}
{"task_id": "MBPP/32", "completion": "\n    max_prime = -1\n\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n\n    if n > 2:\n        max_prime = n\n\n    return max_prime\n\n"}
{"task_id": "MBPP/33", "completion": "\n    if N == 0:\n        return 0\n    else:\n        return (N % 2 + 10 * decimal_To_Binary(N // 2))\n\n"}
{"task_id": "MBPP/34", "completion": "\n    total = (N+1)*(N+2)/2\n    sum_of_ar = sum(ar)\n    return total - sum_of_ar\n\n"}
{"task_id": "MBPP/35", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return n + find_rect_num(n-1)\n\n"}
{"task_id": "MBPP/36", "completion": "\n    # 1. \u8ba1\u7b97\u603b\u4f4d\u6570\n    total_digits = 0\n    i = 1\n    while total_digits < N:\n        total_digits += len(str(i)) * q\n        i += 1\n\n    # 2. \u627e\u5230\u5bf9\u5e94\u7684\u6570\u5b57\n    num = i - 1\n    digit_index = total_digits - N\n    digit = int(str(num)[digit_index])\n\n    return digit\n\n"}
{"task_id": "MBPP/37", "completion": "\n    int_list = []\n    str_list = []\n    for item in mixed_list:\n        if isinstance(item, int):\n            int_list.append(item)\n        elif isinstance(item, str):\n            str_list.append(item)\n    int_list.sort()\n    str_list.sort()\n    return int_list + str_list\n\n"}
{"task_id": "MBPP/38", "completion": "\n    even_list = []\n    odd_list = []\n    for i in list1:\n        if i % 2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    return even_list, odd_list\n\n"}
{"task_id": "MBPP/39", "completion": "\n    counter = Counter(S)\n    max_heap = []\n    for char, freq in counter.items():\n        heapq.heappush(max_heap, (-freq, char))\n\n    result = []\n    while len(max_heap) > 1:\n        freq1, char1 = heapq.heappop(max_heap)\n        freq2, char2 = heapq.heappop(max_heap)\n        result.extend([char1, char2])\n        if freq1 < -1:\n            heapq.heappush(max_heap, (freq1+1, char1))\n        if freq2 < -1:\n            heapq.heappush(max_heap, (freq2+1, char2))\n\n    # If there is any character left in max_heap, append it to result\n    if max_heap:\n        result.append(max_heap[0][1])\n\n    return \"\".join(result)\n\n"}
{"task_id": "MBPP/40", "completion": "\n    c = Counter(nums)\n    return c.most_common(1)[0][0]\n\n"}
{"task_id": "MBPP/41", "completion": "\n    return [num for num in nums if num % 2 == 0]\n\n"}
{"task_id": "MBPP/42", "completion": "\n    # Sort the array\n    arr.sort()\n\n    # Initialize first and last element as two pointers\n    l = 0\n    r = n - 1\n\n    # Initialize two variables to track the sum of minimum and maximum pair\n    min_l = l\n    min_r = r\n\n    # Initialize minimum sum\n    min_sum = arr[l] + arr[r]\n\n    while l < r:\n        curr_sum = arr[l] + arr[r]\n\n        # If current sum is smaller than minimum sum, update minimum sum and pair\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n            min_l = l\n            min_r = r\n\n        # If current sum is greater than 0, decrement right pointer, else increment left pointer\n        if curr_sum > 0:\n            r -= 1\n        else:\n            l += 1\n\n    return (arr[min_l], arr[min_r])\n\n"}
{"task_id": "MBPP/43", "completion": "\n    patterns = '^[a-zA-Z0-9_]*$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n"}
{"task_id": "MBPP/44", "completion": "\n    pattern = 'ab*?'\n    if re.search(pattern, text):\n        return 'Found a match'\n    else:\n        return 'Not matched'\n"}
{"task_id": "MBPP/45", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n\n"}
{"task_id": "MBPP/46", "completion": "\n    return len(data) == len(set(data))\n\n"}
{"task_id": "MBPP/47", "completion": "\n    # write your code in Python 3.6\n    A = A % 10\n    B = B % 4\n    if B == 0:\n        B = 4\n    result = pow(A, B)\n    return result % 10\n\n"}
{"task_id": "MBPP/48", "completion": "\n    # 1. \uc8fc\uc5b4\uc9c4 \uc22b\uc790 n\uc744 \uc774\uc9c4\uc218\ub85c \ubcc0\ud658\n    binary_n = bin(n)[2:]\n\n    # 2. \uc774\uc9c4\uc218\uc758 \uae38\uc774\ub97c \uad6c\ud568\n    length = len(binary_n)\n\n    # 3. \uac01 \uc790\ub9bf\uc218\ub9c8\ub2e4 \ud640\uc218 \uc790\ub9ac\uc5d0 \uc788\ub294 \uc22b\uc790\ub97c \uad6c\ud568\n    odd_bit_numbers = [2**i for i in range(length) if i % 2 != 0]\n\n    # 4. \uac01 \uc790\ub9bf\uc218\ub9c8\ub2e4 \ud640\uc218 \uc790\ub9ac\uc5d0 \uc788\ub294 \uc22b\uc790\ub97c \ubaa8\ub450 \ub354\ud568\n    sum_odd_bit_numbers = sum(odd_bit_numbers)\n\n    # 5. \uad6c\ud55c \ud569\uc744 \ubc18\ud658\n    return sum_odd_bit_numbers\n\n"}
{"task_id": "MBPP/49", "completion": "\n    if len(nums) == 0:\n        return 0\n    else:\n        return nums[N]\n\n"}
{"task_id": "MBPP/50", "completion": "\n    min_length = len(input_list[0])\n    min_list = input_list[0]\n    for i in input_list:\n        if len(i) < min_length:\n            min_length = len(i)\n            min_list = i\n    return min_list\n\n"}
{"task_id": "MBPP/51", "completion": "\n    if x == y == z:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/52", "completion": "\n    return b * h\n\n"}
{"task_id": "MBPP/53", "completion": "\n    str = str.lower()\n    return str == str[::-1]\n"}
{"task_id": "MBPP/54", "completion": "\n    # 1. \ucd5c\ub300\uac12 \ucc3e\uae30\n    max_val = max(my_list)\n\n    # 2. \uce74\uc6b4\ud305 \ub9ac\uc2a4\ud2b8 \ucd08\uae30\ud654\n    count_list = [0] * (max_val + 1)\n\n    # 3. \uce74\uc6b4\ud305\n    for num in my_list:\n        count_list[num] += 1\n\n    # 4. \ub204\uc801 \uce74\uc6b4\ud305\n    for i in range(1, len(count_list)):\n        count_list[i] += count_list[i - 1]\n\n    # 5. \uc815\ub82c\ub41c \ub9ac\uc2a4\ud2b8 \ucd08\uae30\ud654\n    sorted_list = [0] * len(my_list)\n\n    # 6. \uc815\ub82c\n    for num in my_list:\n        sorted_list[count_list[num] - 1] = num\n        count_list[num] -= 1\n\n    return sorted_list\n\n"}
{"task_id": "MBPP/55", "completion": "\n    return a * (r ** (n - 1))\n\n"}
{"task_id": "MBPP/56", "completion": "\n\n    \n    num_str = str(num)\n    num_rev = int(num_str[::-1])\n    if num == num_rev * 2 - 1:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/57", "completion": "\n    max_num = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    return max_num\n\n"}
{"task_id": "MBPP/58", "completion": "\n    return (x ^ y) < 0\n"}
{"task_id": "MBPP/59", "completion": "\n    i = 1\n    while True:\n        num = n + (7 * (i - 1))\n        if num < 0:\n            return False\n        if num == i * (3 * i - 2):\n            return True\n        i += 1\n\n"}
{"task_id": "MBPP/60", "completion": "\n    # initializing the maximum length to 0\n    max_len = 0\n\n    # initializing the map to store the ending index of the subarray\n    map = {}\n\n    # initializing the start index of the subarray\n    start = 0\n\n    for i in range(n):\n        if arr[i] in map:\n            if map[arr[i]] >= start:\n                start = map[arr[i]] + 1\n        # updating the maximum length\n        max_len = max(max_len, i - start + 1)\n\n        # updating the ending index of the subarray\n        map[arr[i]] = i\n\n    return max_len\n\n"}
{"task_id": "MBPP/61", "completion": "\n    # Create a dictionary to store the count of substrings\n    substr_count = defaultdict(int)\n\n    # Traverse through the string\n    for i in range(n):\n        # Check for all substrings starting with str[i]\n        for j in range(i, n):\n            substr_count[s[i:j+1]] += 1\n\n    return substr_count\n\n"}
{"task_id": "MBPP/62", "completion": "\n    return min(xs)\n\n"}
{"task_id": "MBPP/63", "completion": "\n    test_list.sort()\n    return test_list[-1] - test_list[0]\n\n"}
{"task_id": "MBPP/64", "completion": "\n    subjectmarks = subjectmarks.split(\",\")\n    subjectmarks = [int(i) for i in subjectmarks]\n    subjectmarks.sort()\n    subjectmarks.pop(0)\n    subjectmarks.pop(-1)\n    avg = sum(subjectmarks)/len(subjectmarks)\n    return avg\n"}
{"task_id": "MBPP/65", "completion": "\n    if data_list == []:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n\n"}
{"task_id": "MBPP/66", "completion": "\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/67", "completion": "\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n"}
{"task_id": "MBPP/68", "completion": "\n    return all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1))\n\n"}
{"task_id": "MBPP/69", "completion": "\n    return s in l\n\n"}
{"task_id": "MBPP/70", "completion": "\n    # Initialize the result list\n    result = []\n\n    # Iterate over the input list\n    for i in range(len(Input)):\n        # Iterate over the rest of the list\n        for j in range(i+1, len(Input)):\n            # Check if the sum of the two elements equals k\n            if Input[i] + Input[j] == k:\n                # If so, add the tuple to the result list\n                result.append((Input[i], Input[j]))\n\n    # Return the result list\n    return result\n"}
{"task_id": "MBPP/71", "completion": "\n    gap = len(nums)\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = max(1, int(gap / 1.25))\n        swapped = False\n\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums\n\n"}
{"task_id": "MBPP/72", "completion": "\n    sum_of_squares = sum([i**2 for i in range(1, n+1)])\n    square_of_sum = sum(range(1, n+1))**2\n    return square_of_sum - sum_of_squares\n"}
{"task_id": "MBPP/73", "completion": "\n    return re.split('([^a-zA-Z0-9])', text)\n"}
{"task_id": "MBPP/74", "completion": "\n    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i] != patterns[i]:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/75", "completion": "\n    # Initialize an empty list to store the tuples\n    result = []\n\n    # Iterate over the list\n    for i in range(len(test_list)):\n        # Iterate over the rest of the list\n        for j in range(i+1, len(test_list)):\n            # If the sum of the elements in the tuple is less than K, add it to the result list\n            if test_list[i] + test_list[j] < K:\n                result.append((test_list[i], test_list[j]))\n\n    # Return the result list\n    return result\n"}
{"task_id": "MBPP/76", "completion": "\n    # \u521d\u59cb\u5316\u4e00\u4e2a\u5927\u5c0f\u4e3am*n\u7684\u77e9\u9635\uff0c\u5e76\u5c06\u6240\u6709\u5143\u7d20\u8bbe\u7f6e\u4e3a0\n    dp = [[0]*n for _ in range(m)]\n\n    # \u904d\u5386\u77e9\u9635\u7684\u6bcf\u4e00\u884c\n    for i in range(m):\n        # \u904d\u5386\u6bcf\u4e00\u884c\u7684\u6bcf\u4e00\u5217\n        for j in range(n):\n            # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u5143\u7d20\u4e3a1\uff0c\u5219\u8ba1\u7b97\u4ee5\u8be5\u4f4d\u7f6e\u4e3a\u53f3\u4e0b\u89d2\u7684\u6b63\u65b9\u5f62\u7684\u6570\u91cf\n            if i>0 and j>0 and matrix[i][j]==1:\n                dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1\n            # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u5143\u7d20\u4e3a0\uff0c\u5219\u8be5\u4f4d\u7f6e\u4e0d\u80fd\u6784\u6210\u6b63\u65b9\u5f62\uff0c\u6240\u4ee5\u6570\u91cf\u4e3a0\n            # elif matrix[i][j]==0:\n            #     dp[i][j] = 0\n    # \u8fd4\u56dedp\u4e2d\u6240\u6709\u5143\u7d20\u7684\u548c\uff0c\u5373\u4e3a\u6b63\u65b9\u5f62\u7684\u603b\u6570\u91cf\n    return sum(sum(row) for row in dp)\n\n\nmatrix = [\n    [1, 0, 1],\n    [1, 1, 0],\n    [1, 1, 0]\n]\n"}
{"task_id": "MBPP/77", "completion": "\n    if n < 10:\n        return False\n    else:\n        num_list = [int(i) for i in str(n)]\n        diff_list = [num_list[i+1] - num_list[i] for i in range(len(num_list)-1)]\n        if len(set(diff_list)) == 1:\n            return True\n        else:\n            return False\n\n"}
{"task_id": "MBPP/78", "completion": "\n    count = 0\n    for i in range(1, n+1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/79", "completion": "\n    return len(s)\n\n"}
{"task_id": "MBPP/80", "completion": "\n    return n * (n + 1) * (n + 2) // 6\n\n"}
{"task_id": "MBPP/81", "completion": "\n    return tuple(zip(test_tup1, test_tup2))\n\n"}
{"task_id": "MBPP/82", "completion": "\n    return (4/3) * math.pi * r**3\n\n"}
{"task_id": "MBPP/83", "completion": "\n    return strr[0]\n\n"}
{"task_id": "MBPP/84", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)\n\n"}
{"task_id": "MBPP/85", "completion": "\n    return 4 * math.pi * r**2\n\n"}
{"task_id": "MBPP/86", "completion": "\n    if n < 1:\n        return \"Input must be a positive integer.\"\n    else:\n        return n * (5 * n - 3) // 2\n\n"}
{"task_id": "MBPP/87", "completion": "\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return merged_dict.maps\n"}
{"task_id": "MBPP/88", "completion": "\n    return collections.Counter(list1)\n\n"}
{"task_id": "MBPP/89", "completion": "\n    # \uc81c\uacf1\uc218 \ub9ac\uc2a4\ud2b8 \uc0dd\uc131\n    square_list = [i**2 for i in range(1, N+1)]\n\n    # \uc81c\uacf1\uc218 \ub9ac\uc2a4\ud2b8 \uc911 \uac00\uc7a5 \ud070 \uc218\ubcf4\ub2e4 \uc791\uac70\ub098 \uac19\uc740 \uc218\ub97c \ucc3e\uae30\n    for i in range(N-1, -1, -1):\n        if square_list[i] <= N:\n            return i+1\n\n"}
{"task_id": "MBPP/90", "completion": "\n    return len(list1)\n"}
{"task_id": "MBPP/91", "completion": "\n    if str1.find(sub_str) != -1:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/92", "completion": "\n    n = str(n)\n    if len(n) < 3:\n        return False\n    else:\n        diff = int(n[1]) - int(n[0])\n        for i in range(len(n) - 1):\n            if int(n[i+1]) - int(n[i]) != diff:\n                return False\n        return True\n\n"}
{"task_id": "MBPP/93", "completion": "\n    return a ** b\n\n"}
{"task_id": "MBPP/94", "completion": "\n    return min(enumerate(test_list), key=itemgetter(1))[0]\n"}
{"task_id": "MBPP/95", "completion": "\n    min_length = len(lst[0])\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length\n"}
{"task_id": "MBPP/96", "completion": "\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n"}
{"task_id": "MBPP/97", "completion": "\n    frequency_dict = {}\n    for i in list1:\n        if i in frequency_dict:\n            frequency_dict[i] += 1\n        else:\n            frequency_dict[i] = 1\n    return frequency_dict\n"}
{"task_id": "MBPP/98", "completion": "\n    result = 1\n    for number in numbers:\n        result *= number\n    return result\n\n"}
{"task_id": "MBPP/99", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return n % 2 + 10 * decimal_to_binary(n // 2)\n\n"}
{"task_id": "MBPP/100", "completion": "\n    num = str(num)\n    length = len(num)\n    if length == 1:\n        return num\n    if num == num[::-1]:\n        return num\n    else:\n        mid = length // 2\n        left = num[:mid]\n        right = num[mid:][::-1]\n        if int(left) > int(right):\n            return left + right[1:]\n        else:\n            left = str(int(left) - 1)\n            if length % 2 == 1:\n                return left + left[-2::-1]\n            else:\n                return left + left[::-1]\n"}
{"task_id": "MBPP/101", "completion": "\n    arr.sort()\n    return arr[k-1]\n\n"}
{"task_id": "MBPP/102", "completion": "\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n"}
{"task_id": "MBPP/103", "completion": "\n    if n == 0:\n        return 1\n    if m == 0:\n        return 0\n    return (n / m) * eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n\n"}
{"task_id": "MBPP/104", "completion": "\n    return sorted(input_list, key=lambda x: x[0])\n\n"}
{"task_id": "MBPP/105", "completion": "\n    return len(lst)\n\n"}
{"task_id": "MBPP/106", "completion": "\n    test_list.extend(test_tup)\n    return test_list\n\ntest_list = [1, 2, 3]\ntest_tup = (4, 5, 6)\n"}
{"task_id": "MBPP/107", "completion": "\n    # Write your code here\n    count = 0\n    for i in range(L, R+1):\n        if i % 16 == 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/108", "completion": "\n    result = []\n    heap = []\n\n    # \u5c06\u4e09\u4e2a\u5217\u8868\u7684\u5934\u90e8\u5143\u7d20\u653e\u5165\u5806\u4e2d\n    for i in range(len(num1)):\n        heapq.heappush(heap, (num1[i], 0, num1))\n    for i in range(len(num2)):\n        heapq.heappush(heap, (num2[i], 0, num2))\n    for i in range(len(num3)):\n        heapq.heappush(heap, (num3[i], 0, num3))\n\n    while heap:\n        num, index, arr = heapq.heappop(heap)\n        result.append(num)\n\n        # \u5c06\u4e0b\u4e00\u4e2a\u5143\u7d20\u63a8\u5165\u5806\u4e2d\n        if index + 1 < len(arr):\n            heapq.heappush(heap, (arr[index + 1], index + 1, arr))\n\n    return result\n\n\nnum1 = [1, 3, 5, 7, 9]\nnum2 = [2, 4, 6, 8, 10]\nnum3 = [1.5, 2.5, 3.5, 4.5, 5.5]\n"}
{"task_id": "MBPP/109", "completion": "\n    # 1. \u5c06\u5b57\u7b26\u4e32s\u5206\u5272\u6210\u5947\u6570\u957f\u5ea6\u7684\u5b50\u4e32\n    # 2. \u5bf9\u6bcf\u4e2a\u5b50\u4e32\u8fdb\u884c\u6392\u5e8f\n    # 3. \u5c06\u6392\u5e8f\u540e\u7684\u5b50\u4e32\u62fc\u63a5\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\n    # 4. \u68c0\u67e5\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u7b49\u4e8es\n    # 5. \u5982\u679c\u7b49\u4e8e\uff0c\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFalse\n\n    # \u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u5217\u8868\u6765\u5b58\u50a8\u5b50\u4e32\n    substrings = []\n\n    # \u904d\u5386\u5b57\u7b26\u4e32s\n    for i in range(0, len(s), n):\n        # \u5c06\u6bcf\u4e2a\u5b50\u4e32\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\n        substrings.append(s[i:i+n])\n\n    # \u5bf9\u6bcf\u4e2a\u5b50\u4e32\u8fdb\u884c\u6392\u5e8f\n    substrings = [''.join(sorted(sub)) for sub in substrings]\n\n    # \u5c06\u6392\u5e8f\u540e\u7684\u5b50\u4e32\u62fc\u63a5\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\n    sorted_s = ''.join(substrings)\n\n    # \u68c0\u67e5\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u7b49\u4e8es\n    if sorted_s == s:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/110", "completion": "\n    # initializing the result list\n    result = []\n\n    # iterating over the test_list\n    for i in range(len(test_list)):\n        # checking if the current element is missing\n        if test_list[i] == \"\":\n            result.append(i + strt_val)\n\n    # returning the result\n    return result\n\n"}
{"task_id": "MBPP/111", "completion": "\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements = common_elements & set(sublist)\n    return list(common_elements)\n\n"}
{"task_id": "MBPP/112", "completion": "\n    radius = diameter / 2\n    circ = 2 * 3.14159 * radius\n    perim = circ + height\n    return perim\n"}
{"task_id": "MBPP/113", "completion": "\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n"}
{"task_id": "MBPP/114", "completion": "\n    freq_dict = Counter(test_list)\n    return freq_dict\n"}
{"task_id": "MBPP/115", "completion": "\n    list2 = []\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\n\n"}
{"task_id": "MBPP/116", "completion": "\n    return int(''.join(map(str, nums)))\n\n"}
{"task_id": "MBPP/117", "completion": "\n    return [float(i) for i in test_list]\n\n"}
{"task_id": "MBPP/118", "completion": "\n    return list(string)\n\n"}
{"task_id": "MBPP/119", "completion": "\n    for i in range(len(arr)):\n        if arr[i] == n:\n            return i\n    return -1\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = 5"}
{"task_id": "MBPP/120", "completion": "\n    max_product = 0\n    max_tuple = ()\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i]*list1[j] > max_product:\n                max_product = list1[i]*list1[j]\n                max_tuple = (list1[i], list1[j])\n    return max_tuple\n\n"}
{"task_id": "MBPP/121", "completion": "\n    if count == 3:\n        return sum == 0\n    if n == 0:\n        return False\n    return check_triplet(A, n - 1, sum + A[n - 1], count + 1) or check_triplet(A, n - 1, sum, count)\n\n"}
{"task_id": "MBPP/122", "completion": "\n    if n < 2:\n        return False\n    if n == 2 or n == 3 or n == 5 or n == 7 or n == 11 or n == 13 or n == 17 or n == 19 or n == 23 or n == 29:\n        return True\n    if n % 2 == 0 or n % 3 == 0 or n % 5 == 0 or n % 7 == 0 or n % 11 == 0 or n % 13 == 0 or n % 17 == 0 or n % 19 == 0 or n % 23 == 0 or n % 29 == 0:\n        return False\n    i = 5\n    w = 28\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += w\n        w = 6 - w\n    return True\n"}
{"task_id": "MBPP/123", "completion": "\n    sum_divisors = [0] * limit\n    for i in range(1, limit):\n        for j in range(i * 2, limit, i):\n            sum_divisors[j] += i\n\n    return sum(i for i in range(limit) if sum_divisors[i] < limit and sum_divisors[i] != i and sum_divisors[sum_divisors[i]] == i)\n\n"}
{"task_id": "MBPP/124", "completion": "\n    # Calculate the angle between two complex numbers\n    # The angle is in radians\n    # The angle is defined as the arc cosine of the real part of the division of the two complex numbers\n    # The result is in the range [0, pi]\n    # If the denominator is zero, the function returns None\n    try:\n        angle = cmath.acos(a / b)\n    except ZeroDivisionError:\n        return None\n    return angle\n"}
{"task_id": "MBPP/125", "completion": "\n    # Initialize the count of characters\n    count = [0]*256\n\n    # Traverse through the given string\n    for i in range(n):\n        count[ord(string[i])] += 1\n\n    # Traverse through the count[] and return the index\n    # of first non-repeating character\n    for i in range(256):\n        if count[i] == 1:\n            return i\n\n    return -1\n\n"}
{"task_id": "MBPP/126", "completion": "\n    return a + b\n"}
{"task_id": "MBPP/127", "completion": "\n    return x * y\n\n"}
{"task_id": "MBPP/128", "completion": "\n    return [word for word in str.split() if len(word) > n]\n\n"}
{"task_id": "MBPP/129", "completion": "\n    # Check if the matrix is a square\n    if len(my_matrix) != len(my_matrix[0]):\n        return False\n\n    # Check if the matrix is filled with numbers from 1 to n^2\n    n = len(my_matrix)\n    numbers = set(range(1, n*n + 1))\n    for row in my_matrix:\n        if set(row) != numbers:\n            return False\n\n    # Check the sum of each row, column and diagonal\n    sum_row = [sum(row) for row in my_matrix]\n    sum_col = [sum(my_matrix[i][j] for i in range(n)) for j in range(n)]\n    sum_diag1 = sum(my_matrix[i][i] for i in range(n))\n    sum_diag2 = sum(my_matrix[i][n-i-1] for i in range(n))\n\n    if len(set(sum_row)) != 1 or len(set(sum_col)) != 1 or sum_diag1 != sum_diag2 != sum_row[0] != sum_col[0]:\n        return False\n\n    return True\n\n"}
{"task_id": "MBPP/130", "completion": "\n    num_dict = defaultdict(int)\n    for num in nums:\n        num_dict[num] += 1\n\n    max_occurrences = max(num_dict.values())\n    return max_occurrences\n\n"}
{"task_id": "MBPP/131", "completion": "\n    vowels = 'aeiou'\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n\n    while i < j:\n        if str1[i].lower() not in vowels:\n            i += 1\n        elif str1[j].lower() not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n\n    return ''.join(str1)\n\n"}
{"task_id": "MBPP/132", "completion": "\n    return ''.join(tup1)\n\n"}
{"task_id": "MBPP/133", "completion": "\n    return sum(num for num in nums if num < 0)\n\n"}
{"task_id": "MBPP/134", "completion": "\n    # \uc815\ub82c\n    arr.sort()\n\n    # \ub9c8\uc9c0\ub9c9 \uc694\uc18c\ub97c \uc81c\uc678\ud55c \ubaa8\ub4e0 \uc694\uc18c\uc758 \ud569\n    sum_except_last = sum(arr[:-1])\n\n    # \ub9c8\uc9c0\ub9c9 \uc694\uc18c\uac00 \ub420 \uc218 \uc788\ub294 \ucd5c\ub300\uac12\n    max_last = sum_except_last + arr[-1] * p\n\n    # \ub9c8\uc9c0\ub9c9 \uc694\uc18c\uac00 \ub420 \uc218 \uc788\ub294 \ucd5c\uc18c\uac12\n    min_last = sum_except_last + arr[-1]\n\n    # \ub9c8\uc9c0\ub9c9 \uc694\uc18c\uac00 \ub420 \uc218 \uc788\ub294 \uac12\uc774 \uc544\ub2c8\uba74 False, \uac00\ub2a5\ud558\uba74 True \ubc18\ud658\n    return min_last <= n <= max_last\n\n"}
{"task_id": "MBPP/135", "completion": "\n    return n*(2*n-1)\n"}
{"task_id": "MBPP/136", "completion": "\n    if units <= 100:\n        return units * 4.5\n    elif units <= 200:\n        return 100 * 4.5 + (units - 100) * 6\n    elif units <= 300:\n        return 100 * 4.5 + 100 * 6 + (units - 200) * 10\n    else:\n        return 100 * 4.5 + 100 * 6 + 100 * 10 + (units - 300) * 20\n\n"}
{"task_id": "MBPP/137", "completion": "\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/138", "completion": "\n    # 1. \u5224\u65ad n \u662f\u5426\u4e3a 2 \u7684\u5e42\u6b21\u65b9\n    if n & (n - 1) == 0:\n        return True\n\n    # 2. \u5224\u65ad n \u662f\u5426\u4e3a 2 \u7684\u5e42\u6b21\u65b9\u7684\u548c\n    while n != 0:\n        if n & 1:\n            n = n >> 1\n            if n & (n - 1) == 0:\n                return True\n    return False\n\n"}
{"task_id": "MBPP/139", "completion": "\n    import math\n    return 2 * math.pi * r\n\n"}
{"task_id": "MBPP/140", "completion": "\n    result = []\n    for i in test_list:\n        if isinstance(i, list):\n            result.extend(extract_singly(i))\n        else:\n            result.append(i)\n    return result\n\n"}
{"task_id": "MBPP/141", "completion": "\n    for i in range(len(nums), 0, -1):\n        max_index = max_element(nums, i)\n        if max_index != i - 1:\n            nums = flip(nums, max_index)\n            nums = flip(nums, i - 1)\n    return nums\n\n"}
{"task_id": "MBPP/142", "completion": "\n    count = 0\n    for i in list1:\n        if i in list2 and i in list3:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/143", "completion": "\n    # Initialize the list of lists\n    lists = []\n\n    # Initialize the current list\n    current_list = []\n\n    # Initialize the current number\n    current_number = \"\"\n\n    # Initialize the state\n    state = \"start\"\n\n    # Iterate over the input\n    for char in Input:\n        if state == \"start\":\n            if char == \"[\":\n                state = \"list\"\n            else:\n                state = \"number\"\n                current_number += char\n        elif state == \"list\":\n            if char == \"[\":\n                current_list.append([])\n                current_list = current_list[-1]\n            elif char == \"]\":\n                if current_number != \"\":\n                    current_list.append(int(current_number))\n                    current_number = \"\"\n                lists.append(current_list)\n                current_list = []\n                state = \"start\"\n            else:\n                state = \"number\"\n                current_number += char\n        elif state == \"number\":\n            if char == \"[\":\n                current_list.append(int(current_number))\n                current_number = \"\"\n                state = \"list\"\n            elif char == \"]\":\n                current_list.append(int(current_number))\n                current_number = \"\"\n                state = \"list\"\n            else:\n                current_number += char\n\n    return lists\n"}
{"task_id": "MBPP/144", "completion": "\n\n    This function finds the duplicates in an array.\n    \"\"\"\n    duplicates = []\n    for i in range(len(arr)):\n        if arr[abs(arr[i])] >= 0:\n            arr[abs(arr[i])] = -arr[abs(arr[i])]\n        else:\n            duplicates.append(abs(arr[i]))\n    return duplicates\n\n\narr = [1, 2, 3, 1, 3, 6, 6]"}
{"task_id": "MBPP/145", "completion": "\n    arr.sort()\n    return max(abs(arr[i] - arr[i - 1]) for i in range(1, n))\n\n"}
{"task_id": "MBPP/146", "completion": "\n    return ord(str1)\n\n"}
{"task_id": "MBPP/147", "completion": "\n    for i in range(m-1, -1, -1):\n        for j in range(i+1):\n            if tri[i+1][j] > tri[i+1][j+1]:\n                tri[i][j] += tri[i+1][j]\n            else:\n                tri[i][j] += tri[i+1][j+1]\n    return tri[0][0]\n\n\ntri = [[7], [3, 8], [8, 1, 0], [2, 7, 4, 4], [4, 5, 2, 6, 5]]\nm = len(tri) - 1\nn = len(tri[-1]) - 1"}
{"task_id": "MBPP/148", "completion": "\n    return sum(int(digit) for digit in str(x))\n"}
{"task_id": "MBPP/149", "completion": "\n    # Initialize the dp array\n    dp = [1]*n\n    # Initialize the longest increasing subsequence\n    longest_subseq = 1\n\n    # Compute the longest increasing subsequence\n    for i in range(1, n):\n        for j in range(0, i):\n            if abs(arr[i] - arr[j]) == 1 and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n        longest_subseq = max(longest_subseq, dp[i])\n\n    return longest_subseq\n\n"}
{"task_id": "MBPP/150", "completion": "\n    if a == b or a == c or b == c:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/151", "completion": "\n    if q == 0:\n        return p\n    else:\n        return gcd(q, p % q)\n\n"}
{"task_id": "MBPP/152", "completion": "\n\n    \n    # If the array is empty or only contains one element, it is already sorted\n    if len(a) <= 1:\n        return a\n    \n    # Divide the array into two halves\n    mid = len(a) // 2\n    left_half = a[:mid]\n    right_half = a[mid:]\n    \n    # Recursively sort the two halves\n    left_half = merge(left_half)\n    right_half = merge(right_half)\n    \n    # Merge the two sorted halves\n    return merge_sorted_arrays(left_half, right_half)\n"}
{"task_id": "MBPP/153", "completion": "\n    h = -b / (2 * a)\n    k = c - (b ** 2) / (4 * a)\n    return h, k\n\n"}
{"task_id": "MBPP/154", "completion": "\n    if len(nums) == 0:\n        return 0\n    else:\n        return nums[N]\n\n"}
{"task_id": "MBPP/155", "completion": "\n    # convert the number to binary\n    binary = bin(n)[2:]\n\n    # find the even indexed bits\n    even_bits = [bit for i, bit in enumerate(binary) if i % 2 == 0]\n\n    # toggle the even indexed bits\n    toggled_bits = [str(int(not int(bit))) if i % 2 == 0 else bit for i, bit in enumerate(binary)]\n\n    # convert the toggled bits back to a number\n    toggled_number = int(''.join(toggled_bits), 2)\n\n    return toggled_number\n\n"}
{"task_id": "MBPP/156", "completion": "\n    tuple_int = ()\n    for i in tuple_str:\n        tuple_int += (int(i),)\n    return tuple_int\n\n"}
{"task_id": "MBPP/157", "completion": "\n    return [(len(list(group)), key) for key, group in groupby(list1)]\n"}
{"task_id": "MBPP/158", "completion": "\n    # Initialize the sum and the minimum operations\n    sum, min_operations = 0, float('inf')\n    left = 0\n\n    # Traverse the array\n    for right in range(n):\n        # Add the current element to the sum\n        sum += arr[right]\n\n        # While the sum is greater than or equal to k\n        while sum >= k:\n            # Update the minimum operations\n            if sum == k:\n                min_operations = min(min_operations, right - left + 1)\n            # Subtract the leftmost element from the sum\n            sum -= arr[left]\n            left += 1\n    # If no subarray sum is equal to k, return -1\n    if min_operations == float('inf'):\n        return -1\n    else:\n        return min_operations\n\n"}
{"task_id": "MBPP/159", "completion": "\n    if month in ['January', 'February', 'March']:\n        return 'Winter'\n    elif month in ['April', 'May', 'June']:\n        return 'Spring'\n    elif month in ['July', 'August', 'September']:\n        return 'Summer'\n    elif month in ['October', 'November', 'December']:\n        return 'Autumn'\n    else:\n        return 'Invalid month'\n"}
{"task_id": "MBPP/160", "completion": "\n    answer = 0\n    while n >= a:\n        q, r = divmod(n, a)\n        answer += q * b\n        n = q * b + r\n    return answer\n"}
{"task_id": "MBPP/161", "completion": "\n    return [i for i in list1 if i not in list2]\n\n"}
{"task_id": "MBPP/162", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return sum_series(n - 1) + n\n\n"}
{"task_id": "MBPP/163", "completion": "\n    return (s * l**2) / (4 * tan(pi/s))\n"}
{"task_id": "MBPP/164", "completion": "\n    result = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n / i == i:\n                result = result + i\n            else:\n                result = result + i\n                result = result + (n//i)\n    return result\n\n"}
{"task_id": "MBPP/165", "completion": "\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == 'a':\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/166", "completion": "\n    # \uc815\ub82c\n    A.sort()\n\n    # \ucd5c\uc18c\uac12 \ucc3e\uae30\n    min_val = A[0]\n\n    # \ucd5c\uc18c\uac12\uc774 \uc9dd\uc218\uc778\uc9c0 \ud655\uc778\n    if min_val % 2 == 0:\n        return [min_val, min_val]\n\n    # \ucd5c\uc18c\uac12\uc774 \ud640\uc218\uc778 \uacbd\uc6b0, \ub2e4\uc74c \uc218\uac00 \uc9dd\uc218\uc778\uc9c0 \ud655\uc778\n    elif A[1] % 2 == 0:\n        return [min_val, A[1]]\n\n    # \ubaa8\ub450 \ud640\uc218\uc778 \uacbd\uc6b0, \uccab \ubc88\uc9f8 \ub450 \uac1c\uc758 \uc218\ub97c \ubc18\ud658\n    else:\n        return [A[0], A[1]]\n\n"}
{"task_id": "MBPP/167", "completion": "\n    if (n and not(n & (n - 1))):\n        return n\n\n    while (n > 0):\n        n >>= 1\n\n    return 1 << (n + 1)\n\n"}
{"task_id": "MBPP/168", "completion": "\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/169", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        pell_numbers = [0, 1]\n        for i in range(2, n + 1):\n            pell_numbers.append(2 * pell_numbers[i - 1] + pell_numbers[i - 2])\n        return pell_numbers[n]\n\n"}
{"task_id": "MBPP/170", "completion": "\n    return sum(list1[m:n+1])\n\n"}
{"task_id": "MBPP/171", "completion": "\n    return 5 * a\n\n"}
{"task_id": "MBPP/172", "completion": "\n    count = {}\n    for i in s:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n\n"}
{"task_id": "MBPP/173", "completion": "\n    return re.sub(r'[^a-zA-Z0-9 ]', '', text)\n"}
{"task_id": "MBPP/174", "completion": "\n    result = {}\n    for item in l:\n        if item[0] in result:\n            result[item[0]].append(item[1])\n        else:\n            result[item[0]] = [item[1]]\n    return result\n\n"}
{"task_id": "MBPP/175", "completion": "\n    stack = []\n    parentheses = {')': '(', ']': '[', '}': '{'}\n    for char in str1:\n        if char in parentheses.values():\n            stack.append(char)\n        elif char in parentheses.keys():\n            if not stack or parentheses[char] != stack.pop():\n                return False\n    return not stack\n\n"}
{"task_id": "MBPP/176", "completion": "\n    return a + b + c\n\n"}
{"task_id": "MBPP/177", "completion": "\n    # Your code goes here\n    return 0\n\n"}
{"task_id": "MBPP/178", "completion": "\n    result = []\n    for pattern in patterns:\n        matches = re.findall(pattern, text)\n        result.append(matches)\n    return result\n\n"}
{"task_id": "MBPP/179", "completion": "\n    def digits(n):\n        return [int(i) for i in str(n)]\n\n    def is_keith(n):\n        seen = set()\n        a, b = n, n + 1\n        while b not in seen:\n            seen.add(a)\n            a, b = b, sum(digits(b))\n        return b in seen\n\n    return is_keith(x)\n\n"}
{"task_id": "MBPP/180", "completion": "\n    # Radius of earth in kilometers\n    R = 6371\n\n    # Convert degrees to radians\n    slat = radians(slat)\n    slon = radians(slon)\n    elat = radians(elat)\n    elon = radians(elon)\n\n    # Haversine formula\n    dlon = elon - slon\n    dlat = elat - slat\n    a = sin(dlat / 2)**2 + cos(slat) * cos(elat) * sin(dlon / 2)**2\n    c = 2 * acos(a**0.5)\n    distance = R * c\n\n    return distance\n\n"}
{"task_id": "MBPP/181", "completion": "\n    result = \"\"\n    n1 = len(str1)\n    n2 = len(str2)\n    i = 0\n    j = 0\n    while i <= n1 - 1 and j <= n2 - 1:\n        if str1[i] != str2[j]:\n            break\n        result += str1[i]\n        i += 1\n        j += 1\n    return result\n\n"}
{"task_id": "MBPP/182", "completion": "\n    # \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u5b57\u7b26\u4e32\u4e2d\u7684\u6240\u6709\u5b57\u6bcd\u5b57\u7b26\n    pattern = re.compile(r'[a-zA-Z]')\n    matches = pattern.findall(string)\n    return matches\n\n"}
{"task_id": "MBPP/183", "completion": "\n    arr.sort()\n    left = 0\n    right = 0\n    count = 0\n    while right < n:\n        if arr[right] - arr[left] == k:\n            count += 1\n            left += 1\n            right += 1\n        elif arr[right] - arr[left] > k:\n            left += 1\n        else:\n            right += 1\n    return count\n\n"}
{"task_id": "MBPP/184", "completion": "\n    return [i for i in list if i > num]\n"}
{"task_id": "MBPP/185", "completion": "\n    return (a, b)\n"}
{"task_id": "MBPP/186", "completion": "\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return True\n    return False\n\n"}
{"task_id": "MBPP/187", "completion": "\n    if m == 0 or n == 0:\n        return []\n    elif X[m-1] == Y[n-1]:\n        return longest_common_subsequence(X, Y, m-1, n-1) + [X[m-1]]\n    else:\n        lcs1 = longest_common_subsequence(X, Y, m-1, n)\n        lcs2 = longest_common_subsequence(X, Y, m, n-1)\n        if len(lcs1) > len(lcs2):\n            return lcs1\n        else:\n            return lcs2\n\n"}
{"task_id": "MBPP/188", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return n * n * prod_Square(n - 1)\n\n"}
{"task_id": "MBPP/189", "completion": "\n    # Mark 1 as present\n    arr.append(1)\n\n    # Mark all negative numbers and numbers greater than n as 1\n    for i in range(n + 1):\n        if arr[i] <= 0 or arr[i] > n:\n            arr[i] = 1\n\n    # Use index as a hash key and number sign as a presence detector\n    for i in range(n):\n        a = abs(arr[i])\n        if a == n:\n            arr[0] = -abs(arr[0])\n        else:\n            arr[a] = -abs(arr[a])\n\n    # Return the first index that is positive\n    for i in range(1, n + 1):\n        if arr[i] > 0:\n            return i\n\n    if arr[0] > 0:\n        return n + 1\n\n    return n + 2\n\n"}
{"task_id": "MBPP/190", "completion": "\n    # \u8ba1\u7b97\u659c\u7387\n    k = (y2 - y1) / (x2 - x1)\n    # \u8ba1\u7b97\u622a\u8ddd\n    b = y1 - k * x1\n    # \u8ba1\u7b97\u79ef\u5206\u70b9\n    integral_points = [(x1 + i, k * (x1 + i) + b) for i in range(x1, x2 + 1)]\n    return integral_points\n\n"}
{"task_id": "MBPP/191", "completion": "\n    month_dict = {\n        'january': 1,\n        'february': 2,\n        'march': 3,\n        'april': 4,\n        'may': 5,\n        'june': 6,\n        'july': 7,\n        'august': 8,\n        'september': 9,\n        'october': 10,\n        'november': 11,\n        'december': 12\n    }\n    try:\n        month_number = month_dict[monthname3.lower()]\n        return month_number\n    except KeyError:\n        return 'Invalid month name'\n\n"}
{"task_id": "MBPP/192", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str = str.lower()\n    for vowel in vowels:\n        if str.count(vowel) == 0:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/193", "completion": "\n    res = []\n    for i in test_tup:\n        if i not in res:\n            res.append(i)\n    return tuple(res)\n\n\ntest_tup = (5, 6, 7, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)"}
{"task_id": "MBPP/194", "completion": "\n    decimal, i = 0, 0\n    while(n != 0):\n        dec = n % 10\n        n = int(n / 10)\n        decimal = decimal + dec * pow(8, i)\n        i += 1\n    return decimal\n"}
{"task_id": "MBPP/195", "completion": "\n    for i in range(0, n):\n        if (arr[i] == x):\n            return i\n    return -1\n\n"}
{"task_id": "MBPP/196", "completion": "\n    return [t for t in test_list if len(t) != K]\n\n"}
{"task_id": "MBPP/197", "completion": "\n    # initializing the result\n    res = []\n\n    # iterating through the tuples\n    for i in range(len(test_tup1)):\n        # finding the exponentiation\n        exp = test_tup1[i] ** test_tup2[i]\n        # appending the result\n        res.append(exp)\n\n    # returning the result\n    return tuple(res)\n\n"}
{"task_id": "MBPP/198", "completion": "\n    # \u8ba1\u7b97\u4e09\u89d2\u5f62\u7684\u9762\u79ef\n    area = (a * b) / 2\n\n    # \u8ba1\u7b97\u4e09\u89d2\u5f62\u7684\u5468\u957f\n    perimeter = 2 * (a + b)\n\n    # \u8ba1\u7b97\u4e09\u89d2\u5f62\u7684\u5bf9\u89d2\u7ebf\u957f\u5ea6\n    diagonal = math.sqrt(a**2 + b**2)\n\n    return area, perimeter, diagonal\n\n"}
{"task_id": "MBPP/199", "completion": "\n    count = 0\n    while (n != 0):\n        n >>= 1\n        count += 1\n    return count\n\n"}
{"task_id": "MBPP/200", "completion": "\n    max_value = max(list1)\n    max_position = list1.index(max_value)\n    return max_position\n\n"}
{"task_id": "MBPP/201", "completion": "\n    if len(lst) == 0:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/202", "completion": "\n    str2 = \"\"\n    for i in str1:\n        if int(i) % 2 != 0:\n            str2 += i\n    return str2\n\n"}
{"task_id": "MBPP/203", "completion": "\n    xor = n1 ^ n2\n    return bin(xor).count('1')\n\n"}
{"task_id": "MBPP/204", "completion": "\n    return s.count(c)\n\n"}
{"task_id": "MBPP/205", "completion": "\n    res = []\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] > test_tup[j]:\n                res.append((test_tup[i], test_tup[j]))\n    return res\n\n"}
{"task_id": "MBPP/206", "completion": "\n    str1 = ''.join(test_tup)\n    return str1\n\ntest_tup = ('g', 'e', 'e', 'k', 's')"}
{"task_id": "MBPP/207", "completion": "\n    n = len(str)\n    LCSRe = [[0 for x in range(n+1)] for y in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if str[i-1] == str[j-1] and i != j:\n                LCSRe[i][j] = LCSRe[i-1][j-1] + 1\n            else:\n                LCSRe[i][j] = max(LCSRe[i][j-1], LCSRe[i-1][j])\n\n    return LCSRe[n][n]\n\n"}
{"task_id": "MBPP/208", "completion": "\n    return re.match(r'^\\d+(\\.\\d+)?$', num) is not None\n"}
{"task_id": "MBPP/209", "completion": "\n    if heap:\n        return hq.heapreplace(heap, a)\n    else:\n        hq.heappush(heap, a)\n"}
{"task_id": "MBPP/210", "completion": "\n    # \u5b9a\u4e49\u5141\u8bb8\u7684\u5b57\u7b26\n    allowed_set = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '_']\n\n    # \u68c0\u67e5\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\n    for char in string:\n        if char not in allowed_set:\n            return False\n\n    return True\n\n"}
{"task_id": "MBPP/211", "completion": "\n    count = 0\n    while n > 0:\n        count += 1\n        n = n // 10\n    return count\n\n"}
{"task_id": "MBPP/212", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum\n\n"}
{"task_id": "MBPP/213", "completion": "\n    # code here\n    return test_tup1 + test_tup2\n\n"}
{"task_id": "MBPP/214", "completion": "\n    return radian * 180 / math.pi\n\n"}
{"task_id": "MBPP/215", "completion": "\n    decoded_list = []\n    for item in alist:\n        if isinstance(item, list):\n            decoded_list.extend(decode_list(item))\n        else:\n            decoded_list.append(item)\n    return decoded_list\n\n"}
{"task_id": "MBPP/216", "completion": "\n    return set(list1).issubset(set(list2))\n\n"}
{"task_id": "MBPP/217", "completion": "\n    # Create an empty character set\n    char_set = set()\n\n    # Traverse through the given string\n    for i in str:\n\n        # If current character has already occurred\n        if i in char_set:\n            return i\n        else:\n            char_set.add(i)\n\n    # If no repeated character found\n    return None\n\n"}
{"task_id": "MBPP/218", "completion": "\n    # write your code in Python 3.6\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    def min_operations_helper(A, B, op, cur, lcm_val):\n        if cur > B or cur < 0:\n            return float('inf')\n        if cur == B:\n            return op\n        return min(min_operations_helper(A, B, op + 1, cur + A, lcm_val),\n                   min_operations_helper(A, B, op + 1, cur - A, lcm_val),\n                   min_operations_helper(A, B, op + 1, cur * A, lcm(lcm_val, A)),\n                   min_operations_helper(A, B, op + 1, cur // A if cur != 0 else float('inf'), lcm_val // A if cur != 0 else float('inf')))\n\n    return min_operations_helper(A, B, 0, 1, 1)\n\n"}
{"task_id": "MBPP/219", "completion": "\n    # Initialize the variables\n    min_val = float('inf')\n    max_val = float('-inf')\n\n    # Iterate over the tuple\n    for i in range(len(test_tup)):\n        # If the current element is less than min_val, update min_val\n        if test_tup[i] < min_val:\n            min_val = test_tup[i]\n        # If the current element is greater than max_val, update max_val\n        if test_tup[i] > max_val:\n            max_val = test_tup[i]\n\n    # Return the min and max values\n    return min_val, max_val\n\n"}
{"task_id": "MBPP/220", "completion": "\n    special_chars = re.findall(r'\\W', text)\n    special_chars_count = len(special_chars)\n    \n    if n > special_chars_count:\n        return text\n    \n    for _ in range(n):\n        max_char = max(special_chars, key=text.count)\n        text = text.replace(max_char, '', 1)\n        special_chars.remove(max_char)\n    \n    return text\n\n"}
{"task_id": "MBPP/221", "completion": "\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n\n"}
{"task_id": "MBPP/222", "completion": "\n    return type(test_tuple)\n"}
{"task_id": "MBPP/223", "completion": "\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/224", "completion": "\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"}
{"task_id": "MBPP/225", "completion": "\n    if high < low:\n        return arr[0]\n\n    if high == low:\n        return arr[low]\n\n    mid = (low + high) // 2\n\n    if mid < high and arr[mid+1] < arr[mid]:\n        return arr[mid+1]\n\n    if mid > low and arr[mid] < arr[mid-1]:\n        return arr[mid]\n\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid-1)\n    return find_Min(arr, mid+1, high)\n\n"}
{"task_id": "MBPP/226", "completion": "\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result = result + str[i]\n    return result\n\n"}
{"task_id": "MBPP/227", "completion": "\n    return min(a, b, c)\n\n"}
{"task_id": "MBPP/228", "completion": "\n    for i in range(l, r+1):\n        if (n >> i) & 1 == 0:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/229", "completion": "\n    for i in range(n):\n        if arr[i] != -1 and arr[i] != i:\n            temp = arr[i]\n            arr[i] = arr[temp]\n            arr[temp] = temp\n            if arr[i] != i:\n                i -= 1\n    return arr\n\n\narr = [-1, -1, 6, 1, 9, 3, 2, -1, 4, -1]\nn = len(arr)"}
{"task_id": "MBPP/230", "completion": "\n    str1 = str1.replace(\" \", char)\n    return str1\n\n"}
{"task_id": "MBPP/231", "completion": "\n    for i in range(n-1, -1, -1):\n        for j in range(0, i+1):\n            if(tri[i+1][j] > tri[i+1][j+1]):\n                tri[i][j] += tri[i+1][j]\n            else:\n                tri[i][j] += tri[i+1][j+1]\n    return tri[0][0]\n\n"}
{"task_id": "MBPP/232", "completion": "\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n\n    result = []\n    for _ in range(n):\n        result.append(heapq.heappop(heap))\n\n    return result\n\n\nlist1 = [3, 2, 1, 5, 6, 4]\nn = 2"}
{"task_id": "MBPP/233", "completion": "\n    import math\n    lsc = 2 * math.pi * r * h\n    return lsc\n\n"}
{"task_id": "MBPP/234", "completion": "\n    return l**3\n"}
{"task_id": "MBPP/235", "completion": "\n    # 1. \uc22b\uc790 n\uc744 \uc774\uc9c4\uc218\ub85c \ubcc0\ud658\ud55c\ub2e4.\n    binary_n = bin(n)[2:]\n\n    # 2. \uc774\uc9c4\uc218\uc5d0\uc11c \uc9dd\uc218 \uc704\uce58\uc758 \ube44\ud2b8\uac00 \uc124\uc815\ub41c \uc22b\uc790\ub97c \uad6c\ud55c\ub2e4.\n    even_bit_set_numbers = []\n    for i in range(0, len(binary_n), 2):\n        binary_list = list(binary_n)\n        binary_list[i] = '1'\n        even_bit_set_numbers.append(int(''.join(binary_list), 2))\n\n    return even_bit_set_numbers\n\n"}
{"task_id": "MBPP/236", "completion": "\n    # Write your code here\n    count = 0\n    for i in range(1, N+1):\n        for j in range(i+1, N+1):\n            for k in range(j+1, N+1):\n                if i+j+k == K:\n                    count += 1\n    return count\n\n"}
{"task_id": "MBPP/237", "completion": "\n    count = Counter(test_list)\n    return {k: v for k, v in count.items() if v > 1}\n\n"}
{"task_id": "MBPP/238", "completion": "\n    return sum(1 for _ in iter(str.split, ''))\n\n"}
{"task_id": "MBPP/239", "completion": "\n    # Initialize the matrix\n    matrix = [[0 for _ in range(n+1)] for _ in range(m+1)]\n\n    # Fill the matrix\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                matrix[i][j] = 1\n            else:\n                matrix[i][j] = matrix[i-1][j] + matrix[i][j-1]\n\n    return matrix[m][n]\n\n"}
{"task_id": "MBPP/240", "completion": "\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1[i] = list2[list2.index(list1[i])]\n    return list1\n\n"}
{"task_id": "MBPP/241", "completion": "\n    return [[[0 for _ in range(o)] for _ in range(n)] for _ in range(m)]\n\n"}
{"task_id": "MBPP/242", "completion": "\n    count = 0\n    for i in str1:\n        if i.isalpha():\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/243", "completion": "\n    # Create a dictionary to store the count of each element\n    count_dict = {}\n    for i in lst:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_count_dict[i] = 1\n\n    # Sort the list based on the count of each element\n    lst.sort(key=lambda x: count_dict[x])\n\n    return lst\n\n"}
{"task_id": "MBPP/244", "completion": "\n    if N < 0:\n        return False\n    sqrt = math.sqrt(N)\n    return (sqrt + 1) ** 2 if sqrt != int(sqrt) else False\n\n"}
{"task_id": "MBPP/245", "completion": "\n    # Initialize result\n    max_sum = -10**18\n\n    # Consider all rotations one by one\n    for i in range(1, n+1):\n        # Compute sum of all rotations using\n        # sum of previous rotation - removed element\n        # and added element\n        curr_sum = sum(arr[i-1:]) + sum(arr[:i-1])\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum\n\n"}
{"task_id": "MBPP/246", "completion": "\n    if number < 0:\n        raise ValueError(\"Cannot compute square root of negative number\")\n    if number == 0 or number == 1:\n        return number\n\n    x = number\n    y = 1\n\n    e = 0.000001  # This can be any small number\n\n    while x - y > e:\n        x = (x + y) / 2\n        y = number / x\n\n    return x\n\n"}
{"task_id": "MBPP/247", "completion": "\n    n = len(str)\n    L = [[0 for x in range(n)]for y in range(n)]\n \n    for i in range(n):\n        L[i][i] = 1\n \n    for cl in range(2, n+1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if (str[i] == str[j] and cl == 2):\n                L[i][j] = 2\n            elif (str[i] == str[j]):\n                L[i][j] = L[i + 1][j - 1] + 2\n            else:\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]);\n \n    return L[0][n - 1]\n\n"}
{"task_id": "MBPP/248", "completion": "\n    if n < 2:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n\n"}
{"task_id": "MBPP/249", "completion": "\n    return list(set(array_nums1) & set(array_nums2))\n\n"}
{"task_id": "MBPP/250", "completion": "\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/251", "completion": "\n    list.append(element)\n    return list\n\n"}
{"task_id": "MBPP/252", "completion": "\n    result = []\n    for number in numbers:\n        result.append(cmath.exp(number))\n    return result\n"}
{"task_id": "MBPP/253", "completion": "\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/254", "completion": "\n    return len(re.findall(r'\\b[a-z]+\\b', text.lower()))\n\n"}
{"task_id": "MBPP/255", "completion": "\n    return list(combinations_with_replacement(l, n))\n\n"}
{"task_id": "MBPP/256", "completion": "\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, n, i):\n                primes[j] = False\n    return sum(primes)\n"}
{"task_id": "MBPP/257", "completion": "\n    a, b = b, a\n    return a, b\n\n\na = 10\nb = 20\na, b = swap_numbers(a, b)"}
{"task_id": "MBPP/258", "completion": "\n    count = 0\n    for num in array_nums:\n        if num % 2 != 0:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/259", "completion": "\n    # your code goes here\n    res = []\n    for i in range(len(test_tup1)):\n        res.append(max(test_tup1[i], test_tup2[i]))\n    return tuple(res)\n\n"}
{"task_id": "MBPP/260", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def newman_prime_helper(n, primes, non_primes):\n        if n in primes:\n            return 1\n        elif n in non_primes:\n            return 0\n        else:\n            if is_prime(n):\n                primes.add(n)\n                return 1 + newman_prime_helper(n - len(primes), primes, non_primes)\n            else:\n                non_primes.add(n)\n                return 0 + newman_prime_helper(n - len(primes), primes, non_primes)\n\n    return newman_prime_helper(n, set(), set())\n"}
{"task_id": "MBPP/261", "completion": "\n    res = tuple(a/b for a, b in zip(test_tup1, test_tup2))\n    return res\n\n\ntest_tup1 = (10, 20, 30, 40, 50)\ntest_tup2 = (2, 4, 5, 2, 3)"}
{"task_id": "MBPP/262", "completion": "\n    list1.sort()\n    return list1[:L], list1[L:]\n\n"}
{"task_id": "MBPP/263", "completion": "\n    merged_dict = d1.copy()\n    merged_dict.update(d2)\n    return merged_dict\n\n"}
{"task_id": "MBPP/264", "completion": "\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4\n\n"}
{"task_id": "MBPP/265", "completion": "\n    return [S[i:i+step] for i in range(0, len(S), step)]\n\n"}
{"task_id": "MBPP/266", "completion": "\n    return 8*l**2\n"}
{"task_id": "MBPP/267", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n"}
{"task_id": "MBPP/268", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return 4 * n ** 2 - 3 * n + 1\n\n"}
{"task_id": "MBPP/269", "completion": "\n    return ord(k)\n"}
{"task_id": "MBPP/270", "completion": "\n    sum = 0\n    for i in range(0, n, 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n\n"}
{"task_id": "MBPP/271", "completion": "\n    sum = 0\n    for i in range(n):\n        sum += 2**i\n    return sum\n"}
{"task_id": "MBPP/272", "completion": "\n    res = [test_list[i] for i in range(len(test_list)) if i % 2 == 0]\n    return res\n\n"}
{"task_id": "MBPP/273", "completion": "\n    res = tuple(a - b for a, b in zip(test_tup1, test_tup2))\n    return res\n\n\ntest_tup1 = (5, 6, 7, 8)\ntest_tup2 = (1, 2, 3, 4)"}
{"task_id": "MBPP/274", "completion": "\n    sum = 0\n    for i in range(n+1):\n        sum += binomial_Coeff(n, i)\n    return sum\n"}
{"task_id": "MBPP/275", "completion": "\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return get_Position(a*a % m, n//2, m)\n    else:\n        return a * get_Position(a*a % m, (n-1)//2, m) % m\n"}
{"task_id": "MBPP/276", "completion": "\n    import math\n    return math.pi * r**2 * h\n"}
{"task_id": "MBPP/277", "completion": "\n    return {k: v for k, v in dict.items() if v >= n}\n\n"}
{"task_id": "MBPP/278", "completion": "\n    return test_tup[0]\n\n"}
{"task_id": "MBPP/279", "completion": "\n    t = 1\n    while n > 0:\n        n -= t\n        t += 1\n    return n == 0\n\n"}
{"task_id": "MBPP/280", "completion": "\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return i\n    return -1\n\n"}
{"task_id": "MBPP/281", "completion": "\n    return len(test_list) == len(set(test_list))\n\n"}
{"task_id": "MBPP/282", "completion": "\n    return [i for i in nums1 if i not in nums2]\n\n"}
{"task_id": "MBPP/283", "completion": "\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n % 2 == 0:\n        return False\n    return True\n\n"}
{"task_id": "MBPP/284", "completion": "\n    if element in list:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/285", "completion": "\n    patterns = ['^.{2}.*$', '^.{3}.*$']\n\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return True\n    return False\n\n"}
{"task_id": "MBPP/286", "completion": "\n    # Initialize result\n    max_sum = -1\n\n    # Compute sum of first subarray of size k\n    window_sum = sum([a[i] for i in range(k)])\n    max_sum = max(max_sum, window_sum)\n\n    # Compute sums of remaining subarrays\n    for i in range(k, n):\n        window_sum = window_sum - a[i - k] + a[i]\n        max_sum = max(max_sum, window_sum)\n\n    return max_sum\n\n"}
{"task_id": "MBPP/287", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n"}
{"task_id": "MBPP/288", "completion": "\n    inv = [0] * (N + 1)\n    inv[1] = 1\n    for i in range(2, N + 1):\n        inv[i] = (P - (P // i) * inv[P % i] % P) % P\n    for i in range(2, N + 1):\n        inv[i] = (inv[i - 1] + inv[i]) % P\n    res = [0] * N\n    for i in range(N):\n        res[i] = arr[i] * inv[i + 1] % P\n    return res\n\n"}
{"task_id": "MBPP/289", "completion": "\n    # Write your code here\n    odd_days = []\n    for i in range(1, N+1):\n        if i % 2 != 0:\n            odd_days.append(i)\n    return odd_days\n"}
{"task_id": "MBPP/290", "completion": "\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"}
{"task_id": "MBPP/291", "completion": "\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    if k == 0:\n        return 0\n    return count_no_of_ways(n - k, k) + count_no_of_ways(n, k - 1)\n\n"}
{"task_id": "MBPP/292", "completion": "\n    if n == 0:\n        return m\n    if m == 0:\n        return n\n    if n == m:\n        return n\n    if n > m:\n        return find(n-m, m)\n    if m > n:\n        return find(n, m-n)\n\n"}
{"task_id": "MBPP/293", "completion": "\n    return math.sqrt(w**2 + h**2)\n\n"}
{"task_id": "MBPP/294", "completion": "\n    max_value = listval[0]\n    for i in listval:\n        if i > max_value:\n            max_value = i\n    return max_value\n\n"}
{"task_id": "MBPP/295", "completion": "\n    divisors = [i for i in range(1, number) if number % i == 0]\n    return sum(divisors)\n\n"}
{"task_id": "MBPP/296", "completion": "\n    inv_count = 0\n    empty_slot = -1\n    for i in range(n):\n        if arr[i] == empty_slot:\n            continue\n        for j in range(i + 1, n):\n            if arr[j] == empty_slot:\n                continue\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n\n"}
{"task_id": "MBPP/297", "completion": "\n    flat_list = []\n    for sublist in list1:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list\n\n"}
{"task_id": "MBPP/298", "completion": "\n    return [value for value in l1 if value in l2]\n\n"}
{"task_id": "MBPP/299", "completion": "\n    # 1. \uc804\uccb4 \ub370\uc774\ud130\ub97c \uc21c\ud68c\ud558\uba70 \uac01 \uc9c0\uc5ed\ubcc4 \uc804\uae30 \uc0ac\uc6a9\ub7c9\uc744 \uacc4\uc0b0\ud55c\ub2e4.\n    # 2. \uac01 \uc9c0\uc5ed\ubcc4 \uc804\uae30 \uc0ac\uc6a9\ub7c9\uc744 \uc800\uc7a5\ud55c\ub2e4.\n    # 3. \uc804\uae30 \uc0ac\uc6a9\ub7c9\uc774 \uac00\uc7a5 \ub9ce\uc740 \uc9c0\uc5ed\uc744 \ubc18\ud658\ud55c\ub2e4.\n\n    # \uc9c0\uc5ed\ubcc4 \uc804\uae30 \uc0ac\uc6a9\ub7c9 \uc800\uc7a5\n    elec_usage = defaultdict(int)\n\n    for data in stdata:\n        # \uc9c0\uc5ed\uba85, \uc804\uae30 \uc0ac\uc6a9\ub7c9 \ucd94\ucd9c\n        region, usage = data[0], data[1]\n        # \uc804\uae30 \uc0ac\uc6a9\ub7c9 \ub204\uc801\n        elec_usage[region] += usage\n\n    # \uc804\uae30 \uc0ac\uc6a9\ub7c9\uc774 \uac00\uc7a5 \ub9ce\uc740 \uc9c0\uc5ed \ucd94\ucd9c\n    max_usage_region = max(elec_usage, key=elec_usage.get)\n\n    return max_usage_region\n\n"}
{"task_id": "MBPP/300", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 4\n    else:\n        a, b = 2, 4\n        for _ in range(n - 2):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "MBPP/301", "completion": "\n    if isinstance(d, dict):\n        if d:\n            return 1 + max(dict_depth(v) for v in d.values())\n        else:\n            return 0\n    elif isinstance(d, list):\n        if d:\n            return 1 + max(dict_depth(v) for v in d)\n        else:\n            return 0\n    else:\n        return 0\n\n"}
{"task_id": "MBPP/302", "completion": "\n    count = 0\n    while (n):\n        n >>= 1\n        count += 1\n    return count\n"}
{"task_id": "MBPP/303", "completion": "\n    # \uc5f0\uc0b0 \ud69f\uc218\ub97c \uc800\uc7a5\ud560 \ubcc0\uc218\n    cnt = 0\n\n    # \ubc30\uc5f4 a\uc758 \uae38\uc774\uac00 1\uc774 \ub420 \ub54c\uae4c\uc9c0 \ubc18\ubcf5\n    while len(a) != 1:\n        # \ubc30\uc5f4 a\uc758 \uae38\uc774\uac00 1\uc774 \ub420 \ub54c\uae4c\uc9c0 \ubc18\ubcf5\n        while len(a) != 1:\n            # \ubc30\uc5f4 a\uc758 \uccab \ubc88\uc9f8 \uc6d0\uc18c\uc640 \ub9c8\uc9c0\ub9c9 \uc6d0\uc18c\ub97c \ub354\ud558\uace0, \uadf8 \uacb0\uacfc\ub97c \ubc30\uc5f4 a\uc758 \uccab \ubc88\uc9f8 \uc6d0\uc18c\ub85c \uc124\uc815\n            a[0] = a[0] + a[-1]\n            # \ubc30\uc5f4 a\uc758 \ub9c8\uc9c0\ub9c9 \uc6d0\uc18c\ub97c \uc81c\uac70\n            a.pop()\n            # \uc5f0\uc0b0 \ud69f\uc218\ub97c 1 \uc99d\uac00\n            cnt += 1\n\n            # \ub9cc\uc57d \uc5f0\uc0b0 \ud69f\uc218\uac00 n\ubcf4\ub2e4 \ud06c\uba74, \ubc18\ubcf5\ubb38\uc744 \uc885\ub8cc\n            if cnt > n:\n                return cnt\n\n        # \ubc30\uc5f4 a\uc758 \uae38\uc774\uac00 1\uc774 \ub420 \ub54c\uae4c\uc9c0 "}
{"task_id": "MBPP/304", "completion": "\n    # 1. Rotate the array\n    arr = arr[rotations:] + arr[:rotations]\n\n    # 2. Find the element in the array\n    for start, end in ranges:\n        if index >= start and index <= end:\n            return arr[index]\n\n    return None\n\n"}
{"task_id": "MBPP/305", "completion": "\n    return [word for word in words if re.match(r'^p', word)]\n"}
{"task_id": "MBPP/306", "completion": "\n    if index == n or k <= 0:\n        return 0\n    max_sum = 0\n    for i in range(index, n):\n        if a[i] < a[index] and a[i] < a[k]:\n            max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i+1, i))\n    return max_sum\n"}
{"task_id": "MBPP/307", "completion": "\n    tuplex_copy = deepcopy(tuplex)\n    tuplex_copy = tuplex_copy[m:n]\n    return tuplex_copy\n\ntuplex = (\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\")"}
{"task_id": "MBPP/308", "completion": "\n    # \u521d\u59cb\u5316\u7ed3\u679c\n    result = [0] * N\n    # \u521d\u59cb\u5316\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\n    max1, max2 = float('-inf'), float('-inf')\n    min1, min2 = float('inf'), float('inf')\n    # \u627e\u5230\u6700\u5927\u548c\u6700\u5c0f\u7684\u4e24\u4e2a\u6570\n    for num in nums1:\n        if num > max1:\n            max1 = num\n        if num < min1:\n            min1 = num\n    for num in nums2:\n        if num > max2:\n            max2 = num\n        if num < min2:\n            min2 = num\n    # \u5982\u679c\u4e24\u4e2a\u6570\u7ec4\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u4e58\u79ef\u5927\u4e8e\u4e24\u4e2a\u6570\u7ec4\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u4e58\u79ef\uff0c\u5219\u8fd4\u56de\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u4e58\u79ef\n    if max1 * max2 > min1 * min2:\n        return max1 * max2\n    else:\n        return min1 * min2\n\n"}
{"task_id": "MBPP/309", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "MBPP/310", "completion": "\n    return tuple(str1)\n\n"}
{"task_id": "MBPP/311", "completion": "\n    if n == 0:\n        return 1\n    if n & (n + 1) == 0:\n        return n + 1\n    pos = 0\n    while n > 0:\n        n >>= 1\n        pos += 1\n    return 1 << pos\n\n"}
{"task_id": "MBPP/312", "completion": "\n    return (1/3) * math.pi * (r**2) * h\n\n"}
{"task_id": "MBPP/313", "completion": "\n    return [i for i in list1 if i > 0]\n"}
{"task_id": "MBPP/314", "completion": "\n    # \u521d\u59cb\u5316\u6700\u5927\u548c\n    max_sum = -1e9\n    # \u904d\u5386\u6240\u6709\u5b50\u77e9\u9635\n    for left in range(n):\n        # \u521d\u59cb\u5316\u4e34\u65f6\u6570\u7ec4\n        temp = [0]*n\n        for right in range(left, n):\n            # \u66f4\u65b0\u4e34\u65f6\u6570\u7ec4\n            for i in range(n):\n                temp[i] += grid[i][right]\n            # \u8ba1\u7b97\u5f53\u524d\u5b50\u77e9\u9635\u7684\u6700\u5927\u548c\n            curr_sum = kadane(temp, n)\n            # \u66f4\u65b0\u6700\u5927\u548c\n            max_sum = max(max_sum, curr_sum)\n    return max_sum\n"}
{"task_id": "MBPP/315", "completion": "\n    max_len = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if (str[i:j+1] == str[i:j+1][::-1]) and (len(str[i:j+1]) % 2 == 0):\n                if len(str[i:j+1]) > max_len:\n                    max_len = len(str[i:j+1])\n    return max_len\n"}
{"task_id": "MBPP/316", "completion": "\n    n = len(A)\n    last_occurrence = -1\n    for i in range(n):\n        if A[i] == x:\n            last_occurrence = i\n    return last_occurrence\n\n"}
{"task_id": "MBPP/317", "completion": "\n    return [(len(list(group)), key) for key, group in groupby(alist)]\n\n"}
{"task_id": "MBPP/318", "completion": "\n    # 1. \uc785\ub825\ubc1b\uc740 \ubb38\uc790\uc5f4\uc744 \ub9ac\uc2a4\ud2b8\ub85c \ubcc0\ud658\n    s = list(s)\n\n    # 2. \ub9ac\uc2a4\ud2b8\ub97c \uc21c\ud68c\ud558\uba70 \uac01 \uc694\uc18c\ub97c \uc22b\uc790\ub85c \ubcc0\ud658\n    for i in range(len(s)):\n        s[i] = int(s[i])\n\n    # 3. \ub9ac\uc2a4\ud2b8\ub97c \uc815\ub82c\n    s.sort()\n\n    # 4. \uc815\ub82c\ub41c \ub9ac\uc2a4\ud2b8\uc758 \uccab\ubc88\uc9f8 \uc694\uc18c\uc640 \ub9c8\uc9c0\ub9c9 \uc694\uc18c\ub97c \uacf1\ud558\uc5ec \ubc18\ud658\n    return s[0] * s[-1]\n\n"}
{"task_id": "MBPP/319", "completion": "\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_word = max(words, key=len)\n    return long_word\n\n"}
{"task_id": "MBPP/320", "completion": "\n    sum_of_squares = sum([i**2 for i in range(1, n+1)])\n    square_of_sum = sum(range(1, n+1))**2\n    return square_of_sum - sum_of_squares\n"}
{"task_id": "MBPP/321", "completion": "\n    # your code here\n    pass\n\n"}
{"task_id": "MBPP/322", "completion": "\n    min_value = min(list1)\n    min_position = list1.index(min_value)\n    return min_position\n\n"}
{"task_id": "MBPP/323", "completion": "\n    temp = arr[n - 1]\n    for i in range(n - 1, out_of_place, -1):\n        arr[i] = arr[i - 1]\n    arr[out_of_place] = temp\n    return out_of_place + 1\n\n"}
{"task_id": "MBPP/324", "completion": "\n    return sum(test_tuple[::2])\n\n"}
{"task_id": "MBPP/325", "completion": "\n    if n <= 3:\n        return n\n\n    dp = [0] * (n+1)\n    dp[0] = 0\n    dp[1] = 1\n    dp[2] = 2\n    dp[3] = 3\n\n    for i in range(4, n+1):\n        dp[i] = i\n        for j in range(1, i//2+1):\n            temp = dp[j] + dp[i-j]\n            if temp < dp[i]:\n                dp[i] = temp\n\n    return dp[n]\n\n"}
{"task_id": "MBPP/326", "completion": "\n    # Creating an empty dictionary\n    dict = defaultdict(int)\n\n    # Counting the frequency of each element in the list\n    for i in test_list:\n        dict[i] += 1\n\n    # Finding the element with the highest frequency\n    max_freq = max(dict.values())\n    max_freq_elements = [key for key, value in dict.items() if value == max_freq]\n\n    return max_freq_elements\n"}
{"task_id": "MBPP/327", "completion": "\n    if x == y or y == z or z == x:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/328", "completion": "\n    # \u5c06\u5217\u8868\u5206\u5272\u6210\u4e24\u90e8\u5206\n    part1 = list1[:m]\n    part2 = list1[m:]\n\n    # \u5c06part2\u65cb\u8f6c\u5230part1\u7684\u5de6\u8fb9\n    part2.extend(part1)\n\n    return part2[:n]\n\n"}
{"task_id": "MBPP/329", "completion": "\n    count = 0\n    for i in list:\n        if i < 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/330", "completion": "\n    return re.findall(r'[a-zA-Z]', text)\n"}
{"task_id": "MBPP/331", "completion": "\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n"}
{"task_id": "MBPP/332", "completion": "\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict\n"}
{"task_id": "MBPP/333", "completion": "\n    length = len(sub_li)\n    for i in range(length):\n        for j in range(0, length-i-1):\n            if sub_li[j] > sub_li[j+1]:\n                sub_li[j], sub_li[j+1] = sub_li[j+1], sub_li[j]\n    return sub_li\n\n"}
{"task_id": "MBPP/334", "completion": "\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    else:\n        return True\n\n"}
{"task_id": "MBPP/335", "completion": "\n    return n / 2 * (2 * a + (n - 1) * d)\n\n"}
{"task_id": "MBPP/336", "completion": "\n    month_dict = {\n        'january': 1,\n        'february': 2,\n        'march': 3,\n        'april': 4,\n        'may': 5,\n        'june': 6,\n        'july': 7,\n        'august': 8,\n        'september': 9,\n        'october': 10,\n        'november': 11,\n        'december': 12\n    }\n    try:\n        month_num = month_dict[monthname1.lower()]\n        return month_num\n    except KeyError:\n        return 'Invalid month name'\n\n"}
{"task_id": "MBPP/337", "completion": "\n    pattern = r'\\b\\w+\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/338", "completion": "\n    # Write your code here\n    s = s.lower()\n    return s == s[::-1]\n"}
{"task_id": "MBPP/339", "completion": "\n    divisor = []\n    for i in range(x, y+1):\n        divisor.append(i)\n    return divisor\n"}
{"task_id": "MBPP/340", "completion": "\n    lst.sort()\n    return sum(lst[:3])\n\n"}
{"task_id": "MBPP/341", "completion": "\n    return tuple(s)\n\n"}
{"task_id": "MBPP/342", "completion": "\n    min_heap = []\n    max_val = float('-inf')\n    range_start, range_end = float('inf'), float('-inf')\n\n    for l in list:\n        max_val = max(max_val, l[0])\n        heappush(min_heap, Node(l[0], l, 0))\n\n    while len(min_heap) == len(list):\n        node = heappop(min_heap)\n        if max_val - node.value < range_end - range_start:\n            range_start, range_end = node.value, max_val\n\n        if len(node.list[node.index + 1]):\n            heappush(min_heap, Node(node.list[node.index + 1], node.list, node.index + 1))\n            max_val = max(max_val, node.list[node.index + 1])\n\n    return [range_start, range_end]\n\n"}
{"task_id": "MBPP/343", "completion": "\n    # \u521d\u59cb\u5316\u53d8\u91cf\n    digits = \"0123456789\"\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    num_digits = 0\n    num_letters = 0\n    num_other = 0\n\n    # \u904d\u5386\u5b57\u7b26\u4e32\n    for char in s:\n        if char in digits:\n            num_digits += 1\n        elif char in letters:\n            num_letters += 1\n        else:\n            num_other += 1\n\n    return num_digits, num_letters, num_other\n\n"}
{"task_id": "MBPP/344", "completion": "\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i*i % 2 != 0 and j*j % 2 != 0:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/345", "completion": "\n    if len(nums) < 2:\n        return []\n    else:\n        return [nums[i+1]-nums[i] for i in range(len(nums)-1)]\n"}
{"task_id": "MBPP/346", "completion": "\n    if n == 0 or k == 0 or k > n * (n + 1) / 2:\n        return []\n    res = [[0] * n for _ in range(n)]\n    direct = [(0, 1), (1, -1), (1, 1), (-1, 1)]\n    d = 0\n    x, y = 0, 0\n    for i in range(1, k + 1):\n        res[x][y] = i\n        dx, dy = direct[d]\n        if not (0 <= x + dx < n and 0 <= y + dy < n and res[x + dx][y + dy] == 0):\n            d = (d + 1) % 4\n        x, y = x + direct[d][0], y + direct[d][1]\n    return res\n\n"}
{"task_id": "MBPP/347", "completion": "\n    # \u521d\u59cb\u5316\u4e00\u4e2a\u5927\u5c0f\u4e3am*n\u7684\u77e9\u9635\uff0c\u5e76\u5c06\u6240\u6709\u5143\u7d20\u8bbe\u7f6e\u4e3a0\n    dp = [[0]*n for _ in range(m)]\n\n    # \u904d\u5386\u77e9\u9635\u7684\u6bcf\u4e00\u884c\n    for i in range(m):\n        # \u904d\u5386\u6bcf\u4e00\u884c\u7684\u6bcf\u4e00\u5217\n        for j in range(n):\n            # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u5143\u7d20\u4e3a1\uff0c\u5219\u8ba1\u7b97\u4ee5\u8be5\u4f4d\u7f6e\u4e3a\u53f3\u4e0b\u89d2\u7684\u6b63\u65b9\u5f62\u7684\u6570\u91cf\n            if i>0 and j>0 and matrix[i][j]==1:\n                dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1\n            # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u5143\u7d20\u4e3a0\uff0c\u5219\u8be5\u4f4d\u7f6e\u4e0d\u80fd\u6784\u6210\u6b63\u65b9\u5f62\uff0c\u6240\u4ee5\u6570\u91cf\u4e3a0\n            elif matrix[i][j]==0:\n                dp[i][j] = 0\n            # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u5143\u7d20\u4e3a\u7b2c\u4e00\u884c\u6216\u7b2c\u4e00\u5217\uff0c\u5219\u8be5\u4f4d\u7f6e\u53ea\u80fd\u6784\u6210\u4e00\u4e2a\u6b63\u65b9\u5f62\uff0c\u6240\u4ee5\u6570\u91cf\u4e3a1\n            else:\n                dp[i][j] = 1\n    # \u8fd4\u56de\u6240\u6709\u6b63\u65b9\u5f62\u7684\u6570\u91cf\n    return sum(sum(row) for row in dp)\n\n\nmatrix = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]"}
{"task_id": "MBPP/348", "completion": "\n    if r == 0 or r == n:\n        return 1\n    else:\n        return bin_coff(n - 1, r - 1) + bin_coff(n - 1, r)\n\n"}
{"task_id": "MBPP/349", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    string = string.lower()\n    for vowel in vowels:\n        if vowel in string:\n            return True\n    return False\n\n"}
{"task_id": "MBPP/350", "completion": "\n    left = 0\n    right = len(s) - 1\n\n    while left < right:\n        if s[left] != s[right]:\n            break\n        else:\n            while left < len(s) - 1 and s[left] == s[left + 1]:\n                left += 1\n            while right > 0 and s[right] == s[right - 1]:\n                right -= 1\n            left += 1\n            right -= 1\n\n    if left > right:\n        return 0\n    else:\n        return right - left + 1\n\n"}
{"task_id": "MBPP/351", "completion": "\n    # create an empty hash map\n    hashmap = {}\n\n    # store the first element of the array in the hash map\n    hashmap[arr[0]] = 1\n\n    # traverse the array from the second element\n    for i in range(1, n):\n        # if the current element is not present in the hash map\n        if arr[i] not in hashmap:\n            # store the current element in the hash map\n            hashmap[arr[i]] = 1\n        # if the current element is present in the hash map\n        else:\n            # increment the count of the current element in the hash map\n            hashmap[arr[i]] += 1\n\n        # if the count of the current element in the hash map is equal to k\n        if hashmap[arr[i]] == k:\n            # return the current element\n            return arr[i]\n\n    # if no element is found whose count is equal to k\n    return -1\n\n"}
{"task_id": "MBPP/352", "completion": "\n    # Creating an empty list\n    list_str = []\n\n    # Iterating over the string\n    for i in str:\n        # If the character is not in the list, append it\n        if i not in list_str:\n            list_str.append(i)\n        # If the character is in the list, return False\n        else:\n            return False\n    # If the function has not returned False by this point, return True\n    return True\n\n"}
{"task_id": "MBPP/353", "completion": "\n    return [i[:n] + i[n+1:] for i in list1]\n\n"}
{"task_id": "MBPP/354", "completion": "\n    if n == 0:\n        return a\n    elif n % 2 == 0:\n        return tn_ap(a, n / 2, d * d)\n    else:\n        return d * tn_ap(a, n - 1, d)\n\n"}
{"task_id": "MBPP/355", "completion": "\n    # 1. \u8ba1\u7b97\u5706\u7684\u9762\u79ef\n    area_circle = math.pi * radius ** 2\n\n    # 2. \u8ba1\u7b97\u77e9\u5f62\u7684\u9762\u79ef\n    area_rectangle = area_circle / 2\n\n    # 3. \u8ba1\u7b97\u77e9\u5f62\u7684\u8fb9\u957f\n    side_length = math.sqrt(area_rectangle)\n\n    # 4. \u8ba1\u7b97\u77e9\u5f62\u7684\u6570\u91cf\n    num_rectangles = side_length / 2\n\n    return num_rectangles\n\n"}
{"task_id": "MBPP/356", "completion": "\n    import math\n    # convert to radians\n    a = math.radians(a)\n    b = math.radians(b)\n    # calculate angle\n    angle = math.degrees(math.atan(a/b))\n    return angle\n"}
{"task_id": "MBPP/357", "completion": "\n    max_val = test_list[0]\n    for num in test_list:\n        if num > max_val:\n            max_val = num\n    return max_val\n"}
{"task_id": "MBPP/358", "completion": "\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] % nums2[i])\n\n    return result\n\n"}
{"task_id": "MBPP/359", "completion": "\n    if a + b == c:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/360", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_carol(n-1) + get_carol(n-2)\n\n"}
{"task_id": "MBPP/361", "completion": "\n    return [value for value in list1 if value]\n\n"}
{"task_id": "MBPP/362", "completion": "\n    num_dict = {}\n    for num in nums:\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n    max_occurrence = max(num_dict.values())\n    max_nums = [num for num, occurrence in num_dict.items() if occurrence == max_occurrence]\n    return max_nums, max_occurrence\n\n"}
{"task_id": "MBPP/363", "completion": "\n    return [i+K for i in test_list]\n\n"}
{"task_id": "MBPP/364", "completion": "\n    if ch == 'H':\n        return 'T'\n    else:\n        return 'H'\n"}
{"task_id": "MBPP/365", "completion": "\n    count = 0\n    while n != 0:\n        n //= 10\n        count += 1\n    return count\n\n"}
{"task_id": "MBPP/366", "completion": "\n    # Initialize the product to 1\n    product = 1\n\n    # Initialize the maximum product to 1\n    max_product = 1\n\n    # Iterate over the list of numbers\n    for num in list_nums:\n        # If the number is not 0, multiply the product by the number\n        if num != 0:\n            product *= num\n\n        # If the product is greater than the maximum product, update the maximum product\n        if product > max_product:\n            max_product = product\n\n        # If the number is 0, reset the product to 1\n        if num == 0:\n            product = 1\n\n    # Return the maximum product\n    return max_product\n\n"}
{"task_id": "MBPP/367", "completion": "\n    if root is None:\n        return True\n\n    height_diff = abs(get_height(root.left) - get_height(root.right))\n    if height_diff > 1:\n        return False\n    else:\n        return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\n"}
{"task_id": "MBPP/368", "completion": "\n    res = []\n    for tup in test_tup:\n        res.extend([tup]*N)\n    return tuple(res)\n\n"}
{"task_id": "MBPP/369", "completion": "\n    return 2 * (l*w + w*h + h*l)\n\n"}
{"task_id": "MBPP/370", "completion": "\n    price.sort(key=float)\n    return price\n\n"}
{"task_id": "MBPP/371", "completion": "\n    n = len(A)\n    for i in range(left_element, right_element):\n        if i not in A:\n            return i\n    return -1\n\n"}
{"task_id": "MBPP/372", "completion": "\n    hq.heapify(nums)\n    return nums\n"}
{"task_id": "MBPP/373", "completion": "\n    return l * w * h\n\n"}
{"task_id": "MBPP/374", "completion": "\n    if len(str) == 0:\n        return ['']\n    else:\n        result = []\n        for perm in permute_string(str[1:]):\n            for i in range(len(str)):\n                result.append(perm[:i] + str[0] + perm[i:])\n        return result\n\n"}
{"task_id": "MBPP/375", "completion": "\n    return round(n, m)\n\n"}
{"task_id": "MBPP/376", "completion": "\n    res = []\n    for i in test_tup:\n        if i not in res:\n            res.append(i)\n    return tuple(res)\n\n"}
{"task_id": "MBPP/377", "completion": "\n    return s.replace(c, '')\n\n"}
{"task_id": "MBPP/378", "completion": "\n    # \u5c06\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u79fb\u5230\u672b\u5c3e\n    test_list.append(test_list.pop(0))\n    return test_list\n\n"}
{"task_id": "MBPP/379", "completion": "\n    surface_area = 2 * (l*w + w*h + h*l)\n    return surface_area\n"}
{"task_id": "MBPP/380", "completion": "\n    multi_list = [[0]*colnum for i in range(rownum)]\n    return multi_list\n\n"}
{"task_id": "MBPP/381", "completion": "\n    return [itemgetter(index_no)(item) for item in list_data]\n\n"}
{"task_id": "MBPP/382", "completion": "\n    rotation_count = 0\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            rotation_count = i + 1\n            break\n    return rotation_count\n\n"}
{"task_id": "MBPP/383", "completion": "\n    # convert the number to binary\n    binary = bin(n)[2:]\n\n    # find the even indexed bits\n    even_bits = [bit for i, bit in enumerate(binary) if i % 2 == 0]\n\n    # toggle the even indexed bits\n    toggled_bits = [str(int(not int(bit))) if i % 2 == 0 else bit for i, bit in enumerate(binary)]\n\n    # convert the toggled bits back to a number\n    toggled_number = int(''.join(toggled_bits), 2)\n\n    return toggled_number\n\n"}
{"task_id": "MBPP/384", "completion": "\n    min_val = min(arr)\n    return arr.count(min_val)\n\n"}
{"task_id": "MBPP/385", "completion": "\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n - 1) + get_perrin(n - 2) + get_perrin(n - 3)\n\n"}
{"task_id": "MBPP/386", "completion": "\n    n = len(s)\n    swap_count = 0\n    open_braces = []\n    for i in range(n):\n        if s[i] == '{':\n            open_braces.append(i)\n        else:\n            if open_braces:\n                open_braces.pop()\n            else:\n                swap_count += 1\n                open_braces.append(i)\n    swap_count += len(open_braces)//2\n    return swap_count\n\n"}
{"task_id": "MBPP/387", "completion": "\n    if N % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n"}
{"task_id": "MBPP/388", "completion": "\n    count = 0\n    while (n != 0):\n        n >>= 1\n        count += 1\n    return count\n\n"}
{"task_id": "MBPP/389", "completion": "\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    lucas_numbers = [2, 1]\n    for i in range(2, n + 1):\n        lucas_numbers.append(lucas_numbers[i - 1] + lucas_numbers[i - 2])\n    return lucas_numbers[n]\n\n"}
{"task_id": "MBPP/390", "completion": "\n    list.append(string)\n    return list\n\n"}
{"task_id": "MBPP/391", "completion": "\n    return [{\"name\": l1[i], \"age\": l2[i], \"job\": l3[i]} for i in range(len(l1))]\n\n"}
{"task_id": "MBPP/392", "completion": "\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        dp = [0] * (n+1)\n        dp[1] = 1\n        dp[2] = 2\n        dp[3] = 4\n        for i in range(4, n+1):\n            dp[i] = dp[i-1] + dp[i-2] + dp[i-3]\n        return dp[n]\n\n"}
{"task_id": "MBPP/393", "completion": "\n    max_length = 0\n    max_length_list = []\n    for sub_list in input_list:\n        if len(sub_list) > max_length:\n            max_length = len(sub_list)\n            max_length_list = sub_list\n    return max_length_list\n\n"}
{"task_id": "MBPP/394", "completion": "\n    return len(test_tup) == len(set(test_tup))\n\n"}
{"task_id": "MBPP/395", "completion": "\n    count = [0] * 256\n    index = [0] * 256\n\n    for i in range(len(str1)):\n        count[ord(str1[i])] += 1\n        index[ord(str1[i])] = i\n\n    min_index = float('inf')\n    for i in range(256):\n        if count[i] == 1:\n            min_index = min(min_index, index[i])\n\n    return str1[min_index] if min_index != float('inf') else '_'\n\n"}
{"task_id": "MBPP/396", "completion": "\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/397", "completion": "\n    return sorted([a, b, c])[1]\n\n"}
{"task_id": "MBPP/398", "completion": "\n    sum_nums = 0\n    for num in nums:\n        sum_nums += num\n    return sum_nums\n\n"}
{"task_id": "MBPP/399", "completion": "\n    res = tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n    return res\n\n"}
{"task_id": "MBPP/400", "completion": "\n    freq_dict = {}\n    for sublist in test_list:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict\n\n"}
{"task_id": "MBPP/401", "completion": "\n    # Initialize the result\n    result = ()\n\n    # Iterate over the tuples\n    for i in range(len(test_tup1)):\n        # Add the tuples\n        result += (test_tup1[i] + test_tup2[i],)\n\n    return result\n\n"}
{"task_id": "MBPP/402", "completion": "\n    if r > n:\n        return 0\n    if r > n - r:\n        r = n - r\n    numerator = 1\n    for i in range(0, r):\n        numerator = (numerator * (n - i)) % p\n    denominator = 1\n    for i in range(1, r + 1):\n        denominator = (denominator * i) % p\n    return (numerator * pow(denominator, p - 2, p)) % p\n\n"}
{"task_id": "MBPP/403", "completion": "\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, str) is not None\n\n"}
{"task_id": "MBPP/404", "completion": "\n    if a < b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "MBPP/405", "completion": "\n    return tuplex == tuple1\n\n\ntuplex = (\"t\", \"u\", \"p\", \"l\", \"e\", \"x\")\ntuple1 = (\"t\", \"u\", \"p\", \"l\", \"e\", \"x\")\n"}
{"task_id": "MBPP/406", "completion": "\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n"}
{"task_id": "MBPP/407", "completion": "\n    # \u5c06\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n    n = str(n)\n\n    # \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5b57\u7b26\u5217\u8868\n    n = list(n)\n\n    # \u5bf9\u5b57\u7b26\u5217\u8868\u8fdb\u884c\u6392\u5e8f\n    n.sort()\n\n    # \u5c06\u5b57\u7b26\u5217\u8868\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n    n = ''.join(n)\n\n    # \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6574\u6570\n    n = int(n)\n\n    return n\n\n"}
{"task_id": "MBPP/408", "completion": "\n    queue = []\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2):\n            heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n\n    push(0, 0)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n            push(i + 1, 1)\n    return pairs\n\n\nnums1 = [1, 7, 11]\nnums2 = [2, 4, 6]\nk = 3"}
{"task_id": "MBPP/409", "completion": "\n    min_product = float('inf')\n    min_tuple = ()\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][0]\n            if product < min_product:\n                min_product = product\n                min_tuple = (list1[i], list1[j])\n    return min_tuple\n\n"}
{"task_id": "MBPP/410", "completion": "\n    min_value = listval[0]\n    for i in listval:\n        if i < min_value:\n            min_value = i\n    return min_value\n"}
{"task_id": "MBPP/411", "completion": "\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n"}
{"task_id": "MBPP/412", "completion": "\n    return [i for i in l if i % 2 == 0]\n"}
{"task_id": "MBPP/413", "completion": "\n    if n > len(list1):\n        return None\n    else:\n        return list1[n-1]\n\n"}
{"task_id": "MBPP/414", "completion": "\n    return [value for value in list1 if value in list2]\n\n"}
{"task_id": "MBPP/415", "completion": "\n    n = len(arr)\n    if n < 3:\n        return -1\n\n    arr.sort()\n\n    return max(arr[0] * arr[1] * arr[n - 1], arr[n - 3] * arr[n - 2] * arr[n - 1])\n\n"}
{"task_id": "MBPP/416", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n in memo:\n        return memo[n]\n    else:\n        res = max(n, breakSum(n//2) + breakSum(n//3) + breakSum(n//4))\n        memo[n] = res\n        return res\n\nwhile True:\n    try:\n        n = int(input())\n        memo = {}\n        print(breakSum(n))\n    except EOFError:\n        break\n    except ValueError:\n        break\n    except Exception as e:\n        print(e)\n        breakdef solve(n, m):\n    if n == 0 and m == 0:\n        return 0\n    elif n == 0 or m == 0:\n        return 1\n    else:\n        return solve(n-1, m) + solve(n, m-1)\n\nwhile True:\n    try:\n        n, m = map(int, input().split())\n        print(solve(n, m))\n    except EOFError:\n        break\n    except ValueError:\n        break\n    except Exception as e:\n        print(e)\n        breakdef solve(n, m):\n    if n == 0 and m == 0:\n        return 0\n    elif n == 0 or m == 0:\n        return 1\n    else:\n        return solve(n-1, m) + solve(n, m-1)\n\nwhile True:\n    try:\n        n, m = map(int, input().split())\n        print(solve(n, m))\n    except EOFError:\n        break\n    except ValueError:\n        break\n    except Exception as e:\n        print(e)\n        break\n"}
{"task_id": "MBPP/417", "completion": "\n    # Initialize an empty dictionary\n    dict_group = {}\n\n    # Loop through the input list\n    for tup in Input:\n        # If the first element of the tuple is already a key in the dictionary, append the second element to the list\n        if tup[0] in dict_group:\n            dict_group[tup[0]].append(tup[1])\n        # If the first element of the tuple is not a key in the dictionary, create a new key with the second element as the value\n        else:\n            dict_group[tup[0]] = [tup[1]]\n\n    # Convert the dictionary to a list of tuples and return it\n    return [(k, v) for k, v in dict_group.items()]\n\n"}
{"task_id": "MBPP/418", "completion": "\n    max_val = lst[0]\n    for num in lst:\n        if num > max_val:\n            max_val = num\n    return max_val\n"}
{"task_id": "MBPP/419", "completion": "\n    # \ub9ac\uc2a4\ud2b8\uc758 \uac01 \uc694\uc18c\ub97c \ubc18\uc62c\ub9bc\ud558\uace0 \ubaa8\ub450 \ub354\ud55c\ub2e4.\n    return sum(round(i) for i in list1)\n\n"}
{"task_id": "MBPP/420", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n"}
{"task_id": "MBPP/421", "completion": "\n    str_tup = ''.join(test_tup)\n    return str_tup\n\n\ntest_tup = ('g', 'e', 'e', 'k', 's')"}
{"task_id": "MBPP/422", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n\n"}
{"task_id": "MBPP/423", "completion": "\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if gold[i-1][j-1] != 0:\n                dp[i][j] = max(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + gold[i-1][j-1]\n    return max(dp[m])\n\n\ngold = [[1, 3, 1, 5],\n        [2, 2, 4, 1],\n        [5, 0, 2, 3],\n        [0, 6, 1, 2]]\nm = 4\nn = 4"}
{"task_id": "MBPP/424", "completion": "\n    return test_tuple[-1]\n\n"}
{"task_id": "MBPP/425", "completion": "\n    count = 0\n    for i in list1:\n        if i == x:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/426", "completion": "\n    return [num for num in nums if num % 2 == 0]\n\n"}
{"task_id": "MBPP/427", "completion": "\n    # \u5339\u914d\u65e5\u671f\u683c\u5f0f\n    pattern = r'(\\d{4})-(\\d{1,2})-(\\d{1,2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        # \u5982\u679c\u6708\u4efd\u548c\u65e5\u671f\u53ea\u6709\u4e00\u4f4d\u6570\uff0c\u5219\u5728\u524d\u9762\u88650\n        month = '0' + month if len(month) == 1 else month\n        day = '0' + day if len(day) == 1 else day\n        # \u8fd4\u56de\u65b0\u7684\u65e5\u671f\u683c\u5f0f\n        return f'{year}/{month}/{day}'\n    else:\n        return None\n"}
{"task_id": "MBPP/428", "completion": "\n    sublist_count = len(my_list) // 2\n    while sublist_count > 0:\n        for start_position in range(sublist_count):\n            gap_insertion_sort(my_list, start_position, sublist_count)\n        sublist_count = sublist_count // 2\n    return my_list\n"}
{"task_id": "MBPP/429", "completion": "\n    return tuple(x & y for x, y in zip(test_tup1, test_tup2))\n\n"}
{"task_id": "MBPP/430", "completion": "\n    return -b/(2*a)\n"}
{"task_id": "MBPP/431", "completion": "\n    common_elements = []\n    for i in list1:\n        if i in list2:\n            common_elements.append(i)\n    return common_elements\n\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]"}
{"task_id": "MBPP/432", "completion": "\n    return (base1 + base2) * height / 2\n\n"}
{"task_id": "MBPP/433", "completion": "\n    count = 0\n    for i in arr:\n        if i > number:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/434", "completion": "\n    patterns = ['^[a-zA-Z0-9_]*$']\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return True\n    return False\n"}
{"task_id": "MBPP/435", "completion": "\n    return n % 10\n\n"}
{"task_id": "MBPP/436", "completion": "\n    neg_list = [i for i in list1 if i < 0]\n    return neg_list\n"}
{"task_id": "MBPP/437", "completion": "\n    return ''.join([str1[i] for i in range(len(str1)) if i % 2 == 0])\n\n"}
{"task_id": "MBPP/438", "completion": "\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                count += 1\n    return count\n\n"}
{"task_id": "MBPP/439", "completion": "\n    result = []\n    for sublist in L:\n        for item in sublist:\n            result.append(item)\n    return result\n\n"}
{"task_id": "MBPP/440", "completion": "\n    # \u5b9a\u4e49\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u6a21\u5f0f\uff0c\u5339\u914d\u4efb\u4f55\u5f62\u5f0f\u7684\u526f\u8bcd\n    adverb_pattern = r'\\b(?:very|just|really|too|so|well|badly|often|often|frequently|usually|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|often|"}
{"task_id": "MBPP/441", "completion": "\n    return 6*l**2\n"}
{"task_id": "MBPP/442", "completion": "\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/443", "completion": "\n    list1.sort()\n    return list1[0]\n\n"}
{"task_id": "MBPP/444", "completion": "\n    return tuple(test_list[:K])\n\n"}
{"task_id": "MBPP/445", "completion": "\n    res = []\n    for i in range(len(test_tup1)):\n        res.append(test_tup1[i]*test_tup2[i])\n    return tuple(res)\n\n"}
{"task_id": "MBPP/446", "completion": "\n    count = Counter(lst)\n    return count[tup]\n\n"}
{"task_id": "MBPP/447", "completion": "\n    return [num ** 3 for num in nums]\n\n"}
{"task_id": "MBPP/448", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n\n"}
{"task_id": "MBPP/449", "completion": "\n    # Calculate the area of the triangle\n    area = abs(((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2.0))\n\n    # If the area is 0, then the points are collinear\n    if area == 0:\n        return \"Collinear\"\n    else:\n        return \"Not Collinear\"\n"}
{"task_id": "MBPP/450", "completion": "\n    return str[l[0]:l[1]+1]\n\n"}
{"task_id": "MBPP/451", "completion": "\n    return re.sub(r'\\s', '', text1)\n"}
{"task_id": "MBPP/452", "completion": "\n    return actual_cost * sale_amount\n\n"}
{"task_id": "MBPP/453", "completion": "\n    sum = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i == (n / i):\n                sum = sum + i\n            else:\n                sum = sum + (i + n/i)\n    return sum\n\n"}
{"task_id": "MBPP/454", "completion": "\n    pattern = r'\\b\\w*z\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/455", "completion": "\n    if monthnum2.isdigit():\n        monthnum2 = int(monthnum2)\n        if 1 <= monthnum2 <= 12:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n"}
{"task_id": "MBPP/456", "completion": "\n    return [s[::-1] for s in stringlist]\n\n"}
{"task_id": "MBPP/457", "completion": "\n    min_val = lst[0]\n    for i in lst:\n        if i < min_val:\n            min_val = i\n    return min_val\n"}
{"task_id": "MBPP/458", "completion": "\n    return l * b\n\n"}
{"task_id": "MBPP/459", "completion": "\n    return re.sub(r'[A-Z]', '', str1)\n"}
{"task_id": "MBPP/460", "completion": "\n    return [i for i in lst if i%2 == 0]\n"}
{"task_id": "MBPP/461", "completion": "\n    ctr = 0\n    for char in str:\n        if char.isupper():\n            ctr += 1\n    return ctr\n"}
{"task_id": "MBPP/462", "completion": "\n    if len(list1) == 0:\n        return [[]]\n    else:\n        head, tail = list1[0], list1[1:]\n        combinations = []\n        for c in combinations_list(tail):\n            combinations += [c, c + [head]]\n        return combinations\n"}
{"task_id": "MBPP/463", "completion": "\n    max_ending_here = max_ending_so_far = 1\n    min_ending_here = min_ending_so_far = 1\n    max_product = float('-inf')\n\n    for num in arr:\n        if num > 0:\n            max_ending_here = max_ending_here * num\n            min_ending_here = min(min_ending_here * num, 1)\n        elif num < 0:\n            temp = max_ending_here\n            max_ending_here = max(min_ending_here * num, 1)\n            min_ending_here = temp * num\n        else:\n            max_ending_here = min_ending_so_far = 1\n\n        max_ending_so_far = max(max_ending_so_far, max_ending_here)\n\n        max_product = max(max_product, max_ending_so_far)\n\n    return max_product\n\n"}
{"task_id": "MBPP/464", "completion": "\n    for key, value in dict.items():\n        if value == n:\n            return key\n    return None\n\n"}
{"task_id": "MBPP/465", "completion": "\n    return {k: v for k, v in dict1.items() if v}\n\n"}
{"task_id": "MBPP/466", "completion": "\n    mid = low + (high - low) // 2\n    if ((mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid])):\n        return mid\n    elif (mid > 0 and arr[mid - 1] > arr[mid]):\n        return find_peak_util(arr, low, (mid - 1), n)\n    else:\n        return find_peak_util(arr, (mid + 1), high, n)\n"}
{"task_id": "MBPP/467", "completion": "\n    octNum = \"\"\n    while deciNum > 0:\n        octNum = str(deciNum % 8) + octNum\n        deciNum = deciNum // 8\n    return octNum\n\n"}
{"task_id": "MBPP/468", "completion": "\n    arr.sort()\n    return max(arr[0]*arr[1]*arr[n-1], arr[n-1]*arr[n-2]*arr[n-3])\n\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)"}
{"task_id": "MBPP/469", "completion": "\n    n = len(price)\n    if k >= n // 2:\n        return sum(price[i] - price[i - 1] for i in range(1, n) if price[i] > price[i - 1])\n\n    dp = [[-float('inf')] * (k + 1) for _ in range(n)]\n    dp[0][0] = 0\n    for i in range(1, n):\n        dp[i][0] = 0\n        for j in range(1, min(i, k) + 1):\n            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + price[i] - price[i - 1])\n    return dp[-1][-1]\n\n"}
{"task_id": "MBPP/470", "completion": "\n    # initializing sum\n    sum = 0\n    # iterating over tuple elements\n    for num in test_tup:\n        # adding number to sum\n        sum += num\n    return sum\n\n"}
{"task_id": "MBPP/471", "completion": "\n    # \u521d\u59cb\u5316\u4f59\u6570\n    remainder = 0\n\n    # \u904d\u5386\u6570\u7ec4\n    for i in range(lens):\n        remainder = (remainder + arr[i]) % n\n\n    return remainder\n\n"}
{"task_id": "MBPP/472", "completion": "\n    return sorted(l) == list(range(min(l), max(l) + 1))\n\n"}
{"task_id": "MBPP/473", "completion": "\n    return list(set(test_list1) & set(test_list2))\n\n"}
{"task_id": "MBPP/474", "completion": "\n    return str1.replace(ch, newch)\n\n"}
{"task_id": "MBPP/475", "completion": "\n    return Counter(dict1)\n"}
{"task_id": "MBPP/476", "completion": "\n    return sum(nums)\n\n"}
{"task_id": "MBPP/477", "completion": "\n    return string == string.lower()\n\n"}
{"task_id": "MBPP/478", "completion": "\n    return re.sub(r'[a-z]', '', str1)\n"}
{"task_id": "MBPP/479", "completion": "\n    if n < 0:\n        n = -n\n    while n > 0:\n        digit = n % 10\n        n = n // 10\n        return digit\n"}
{"task_id": "MBPP/480", "completion": "\n    count = [0] * 256\n    max = -1\n    c = ''\n\n    for i in str1:\n        count[ord(i)] += 1\n\n    for i in str1:\n        if max < count[ord(i)]:\n            max = count[ord(i)]\n            c = i\n\n    return c\n\n"}
{"task_id": "MBPP/481", "completion": "\n    # Base Cases\n    if sum == 0:\n        return True\n    if n == 0 and sum != 0:\n        return False\n\n    # If last element is greater than sum, ignore it\n    if set[n - 1] > sum:\n        return is_subset_sum(set, n - 1, sum)\n\n    # else check if sum can be obtained by any of the following\n    # (a) including the last element\n    # (b) excluding the last element\n    return is_subset_sum(set, n - 1, sum) or is_subset_sum(set, n - 1, sum - set[n - 1])\n\n\nset = [3, 1, 5, 9, 12]\nsum = 10\nn = len(set)"}
{"task_id": "MBPP/482", "completion": "\n    pattern = r'^[a-zA-Z0-9]*$'\n    return bool(re.match(pattern, text))\n"}
{"task_id": "MBPP/483", "completion": "\n    if x < 0:\n        return \"Invalid input\"\n    elif x == 0:\n        return 1\n    else:\n        fact = 1\n        for i in range(1, x+1):\n            fact *= i\n        return fact\n"}
{"task_id": "MBPP/484", "completion": "\n    return [i for i in test_list1 if i not in test_list2]\n\n"}
{"task_id": "MBPP/485", "completion": "\n    return str(n) == str(n)[::-1]\n\n"}
{"task_id": "MBPP/486", "completion": "\n    if n < r:\n        return 0\n    if n == r:\n        return 1\n    if r == 0:\n        return 1\n    if r == 1:\n        return n\n    if r > n / 2:\n        r = n - r\n    numerator = 1\n    denominator = 1\n    for i in range(1, r + 1):\n        numerator *= n\n        denominator *= i\n        n -= 1\n    return numerator // denominator\n\n"}
{"task_id": "MBPP/487", "completion": "\n    return sorted(tup, key=lambda x: x[1])\n\n"}
{"task_id": "MBPP/488", "completion": "\n    return (math.sqrt(5 * (5 + 2 * math.sqrt(5))) * a * a) / 4\n\n"}
{"task_id": "MBPP/489", "completion": "\n    max_val = max(arr)\n    return arr.count(max_val)\n\n"}
{"task_id": "MBPP/490", "completion": "\n    res = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                res.append(test_list[i])\n    return res\n\n"}
{"task_id": "MBPP/491", "completion": "\n    return a * (1 - r**n) / (1 - r)\n\n"}
{"task_id": "MBPP/492", "completion": "\n    first = 0\n    last = len(item_list) - 1\n    found = False\n\n    while(first <= last and not found):\n        mid = (first + last)//2\n        if item_list[mid] == item:\n            found = True\n        else:\n            if item < item_list[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\t\n    return found\n"}
{"task_id": "MBPP/493", "completion": "\n    # Calculate the distance between the two points\n    distance = math.sqrt((endx - startx)**2 + (endy - starty)**2)\n\n    # Calculate the number of polygons\n    polygons = distance / (2 * radius)\n\n    return polygons\n\n"}
{"task_id": "MBPP/494", "completion": "\n    return int(test_tup, 2)\n\n"}
{"task_id": "MBPP/495", "completion": "\n    return re.sub(r'[a-z]', '', str1)\n"}
{"task_id": "MBPP/496", "completion": "\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n    \n    res = []\n    for _ in range(n):\n        res.append(hq.heappop(heap))\n    \n    return res\n\n"}
{"task_id": "MBPP/497", "completion": "\n    return math.pi * r * (r + math.sqrt(h ** 2 + r ** 2))\n\n"}
{"task_id": "MBPP/498", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n"}
{"task_id": "MBPP/499", "completion": "\n    return 2 * r\n"}
{"task_id": "MBPP/500", "completion": "\n    return ''.join(list)\n\n"}
{"task_id": "MBPP/501", "completion": "\n    while y:\n        x, y = y, x % y\n    return x\n"}
{"task_id": "MBPP/502", "completion": "\n    if n == 0:\n        return m\n    if m == 0:\n        return n\n    if n == m:\n        return n\n    if n > m:\n        return find(n-m, m)\n    if m > n:\n        return find(n, m-n)\n\n"}
{"task_id": "MBPP/503", "completion": "\n    sum_nums = 0\n    for num in nums:\n        sum_nums += num\n    return sum_nums\n\n"}
{"task_id": "MBPP/504", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n"}
{"task_id": "MBPP/505", "completion": "\n    n = len(A)\n    for i in range(n):\n        if A[i] == i:\n            continue\n        else:\n            A[A[i]], A[i] = A[i], A[A[i]]\n    return A\n\n"}
{"task_id": "MBPP/506", "completion": "\n    if k > n:\n        return 0\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    if k == n:\n        return 1\n    if k > n/2:\n        k = n - k\n    result = 1\n    for i in range(k):\n        result *= (n - i)\n    return result\n\n"}
{"task_id": "MBPP/507", "completion": "\n    return [word for word in list1 if word not in removewords]\n\n"}
{"task_id": "MBPP/508", "completion": "\n    if len(l1) != len(l2):\n        return False\n    for i in range(len(l1)):\n        if l1[i] != l2[i]:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/509", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in range(n+1):\n        if i % 2 != 0:\n            sum_odd += i\n            count_odd += 1\n    return sum_odd / count_odd\n"}
{"task_id": "MBPP/510", "completion": "\n    n = len(arr)\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    dp[0][0] = 1\n\n    for i in range(1, n+1):\n        for j in range(k+1):\n            if arr[i-1] <= j:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-arr[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][k]\n\n\narr = [1, 2, 3, 4]\nk = 4"}
