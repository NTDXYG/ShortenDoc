{"task_id": "EvoEval/0", "completion": "\n    if a.happiness > b.happiness:\n        return a\n    elif a.happiness < b.happiness:\n        return b\n    else:\n        if a.name < b.name:\n            return a\n        else:\n            return b\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    def __init__(self, name, age, gender, interests):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.interests = interests\n\n    def hello(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old. I am interested in {self.interests}.\"\n\n\nperson = Person(\"Ryan\", 30, \"male\", \"being a good person\")\n"}
{"task_id": "EvoEval/2", "completion": "\n    # Write your code here\n    pass\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    def __init__(self, name, age, gender, interests):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.interests = interests\n\n    def hello(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old. I am interested in {self.interests}.\"\n\n\nperson = Person(\"Ryan\", 30, \"male\", \"being a good person\")\n"}
{"task_id": "EvoEval/4", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def digit_sum(n: int) -> int:\n        return sum(map(int, str(n)))\n\n    max_prime_divisor = -1\n    for num in lst:\n        if is_prime(num) and digit_sum(num) % 2 == 0:\n            max_prime_divisor = max(max_prime_divisor, num)\n    return max_prime_divisor\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    numbers.sort()\n    return [num for num in numbers if num > threshold]\n"}
{"task_id": "EvoEval/6", "completion": "\n    # 1. \uc785\ub825\ubc1b\uc740 \uc218 n\uc774 \uc9dd\uc218\uc778 \uacbd\uc6b0\n    if n % 2 == 0:\n        return n // 2\n    # 2. \uc785\ub825\ubc1b\uc740 \uc218 n\uc774 \ud640\uc218\uc778 \uacbd\uc6b0\n    else:\n        return n // 2 + 1\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    sum_square = sum(i**2 for i in range(1, n+1))\n    sum_cube = sum(i**3 for i in range(1, n+1))\n    return sum_square, sum_cube\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    bracket_pairs = {')': '(', ']': '[', '}': '{'}\n    stack = []\n    count = 0\n    for s in string:\n        if s in bracket_pairs.values():\n            stack.append(s)\n        elif s in bracket_pairs.keys():\n            if stack and stack[-1] == bracket_pairs[s]:\n                stack.pop()\n                count += 1\n            else:\n                return False, count\n    return not stack, count\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    # \u5b9a\u4e49\u884c\u661f\u4e0e\u592a\u9633\u7684\u8ddd\u79bb\n    planet_distance = {\n        '\u6c34\u661f': 1,\n        '\u91d1\u661f': 2,\n        '\u5730\u7403': 3,\n        '\u706b\u661f': 4,\n        '\u6728\u661f': 5,\n        '\u571f\u661f': 6,\n        '\u5929\u738b\u661f': 7,\n        '\u6d77\u738b\u661f': 8,\n        '\u51a5\u738b\u661f': 9\n    }\n\n    # \u8ba1\u7b97\u884c\u661f\u4e4b\u95f4\u7684\u8ddd\u79bb\n    distance = abs(planet_distance[planet1] - planet_distance[planet2])\n\n    # \u5c06\u8ddd\u79bb\u8f6c\u6362\u4e3a\u7f57\u9a6c\u6570\u5b57\n    roman_numerals = {\n        1: 'I',\n        2: 'II',\n        3: 'III',\n        4: 'IV',\n        5: 'V',\n        6: 'VI',\n        7: 'VII',\n        8: 'VIII',\n        9: 'IX'\n    }\n\n    return roman_numerals[distance]\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    # Sort the list by grades in descending order\n    name_grade_list.sort(key=lambda x: x[1], reverse=True)\n\n    # Create a new list to hold the flipped grades\n    flipped_grades = []\n\n    # Iterate over the sorted list\n    for name, grade in name_grade_list:\n        # Flip the grade and append it to the new list\n        flipped_grades.append((name, 100 - grade))\n\n    return flipped_grades\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    def __init__(self, name, age, gender, interests):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.interests = interests\n\n    def hello(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old. I am interested in {self.interests}.\"\n\n\nperson = Person(\"Ryan\", 30, \"male\", \"being a good person\")\n"}
{"task_id": "EvoEval/12", "completion": "\n    # Sort the student_info list by the second element of each tuple (i.e., the grade) in descending order\n    student_info.sort(key=lambda x: x[1], reverse=True)\n\n    # Return the first n elements of the sorted list\n    return student_info[:n]\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    return [i for i in arr if i in lst1]\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    primes = [i for i in range(n, m+1) if is_prime(i)]\n    return sum(primes)/len(primes)\n"}
{"task_id": "EvoEval/15", "completion": "\n    # Initialize the balance of the triples\n    balance = [0, 0, 0]\n\n    # Iterate over the operations\n    for op in operations:\n        # Determine the index of the triple to which the operation belongs\n        triple_index = op // 100\n\n        # Determine the value of the operation\n        operation_value = op % 100\n\n        # Update the balance of the triple\n        balance[triple_index] += operation_value\n\n    # Check if the balances of the triples are equal\n    return balance[0] == balance[1] == balance[2]\n"}
{"task_id": "EvoEval/16", "completion": "\n    notes = {\n        \"C\": 1,\n        \"D\": 2,\n        \"E\": 3,\n        \"F\": 4,\n        \"G\": 5,\n        \"A\": 6,\n        \"B\": 7,\n    }\n    music_notes = []\n    for i in range(len(music_string)):\n        if music_string[i] in notes:\n            music_notes.append(notes[music_string[i]])\n        elif music_string[i] == \"#\":\n            music_notes[-1] += 7\n        elif music_string[i] == \"b\":\n            music_notes[-1] -= 1\n        elif music_string[i] == \"x\":\n            music_notes.append(0)\n        else:\n            continue\n    return music_notes\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    fib_nums = [0, 1]\n    while fib_nums[-1] < n:\n        fib_nums.append(fib_nums[-1] + fib_nums[-2])\n\n    offset = 0\n    while fib_nums[-1] > len(lst):\n        fib_nums.pop()\n\n    while len(fib_nums) > 1:\n        i = min(offset + fib_nums[-2], len(lst) - 1)\n        if lst[i] < n:\n            fib_nums.pop()\n            fib_nums.pop()\n            offset = i\n        elif lst[i] > n:\n            fib_nums.pop()\n        else:\n            return i\n\n    if len(fib_nums) == 1 and lst[offset] == n:\n        return offset\n\n    return -1\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    nums.sort()\n    return nums[0] + nums[1] + nums[2]\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    # Write your code here\n    pass\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    grade_dict = {\n        'A': 100,\n        'B': 80,\n        'C': 60,\n        'D': 40,\n        'E': 20,\n        'F': 0\n    }\n\n    if s in grade_dict:\n        return grade_dict[s], 'upper'\n    elif s.islower():\n        return grade_dict[s.upper()], 'lower'\n    else:\n        return 'Invalid grade'\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    prefixes = ['K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']\n    prefix_index = 0\n    while x >= base:\n        x /= base\n        prefix_index += 1\n    return [str(x), prefixes[prefix_index]]\n"}
{"task_id": "EvoEval/22", "completion": "\n    def __init__(self, name, age, gender, interests):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.interests = interests\n\n    def hello(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old. I am interested in {self.interests}.\"\n\n\nperson = Person(\"Ryan\", 30, \"male\", \"being a good person\")\n"}
{"task_id": "EvoEval/23", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return n * special_stone_factorial(n - 1)\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    # Convert the string of numbers into a list of integers\n    numbers = list(map(int, numbers.split(',')))\n\n    # Sort the list of numbers\n    numbers.sort()\n\n    # Convert the list of numbers back into a string\n    numbers = ','.join(map(str, numbers))\n\n    return numbers\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    # Initialize the sum and product variables\n    sum_val = 0\n    product_val = 1\n\n    # Iterate over the range from 1 to n\n    for i in range(1, n+1):\n        # If i is a multiple of 3, add it to the sum\n        if i % 3 == 0:\n            sum_val += i\n        # If i is a multiple of 5, multiply it to the product\n        elif i % 5 == 0:\n            product_val *= i\n\n    # Return the sum and product\n    return sum_val, product_val\n"}
{"task_id": "EvoEval/26", "completion": "\n    values.sort()\n    return values[0], len(values)\n"}
{"task_id": "EvoEval/27", "completion": "\n    if x not in lst1 or y not in lst2:\n        return False\n    else:\n        index_x = lst1.index(x)\n        index_y = lst2.index(y)\n        lst1[index_x], lst2[index_y] = lst2[index_y], lst1[index_x]\n        return lst1, lst2\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    # \u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u5217\u8868\u6765\u5b58\u50a8\u7ed3\u679c\n    result = []\n\n    # \u904d\u5386\u6210\u7ee9\u5217\u8868\n    for grade in grades:\n        # \u5c06\u6210\u7ee9\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        grade_str = str(grade)\n\n        # \u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\u6765\u5b58\u50a8\u7ed3\u679c\n        res = \"\"\n\n        # \u904d\u5386\u6210\u7ee9\u5b57\u7b26\u4e32\n        for char in grade_str:\n            # \u5982\u679c\u5b57\u7b26\u662f0\uff0c\u5219\u7528s0\u66ff\u6362\n            if char == \"0\":\n                res += s0\n            # \u5982\u679c\u5b57\u7b26\u662f1\uff0c\u5219\u7528s1\u66ff\u6362\n            elif char == \"1\":\n                res += s1\n            # \u5982\u679c\u5b57\u7b26\u4e0d\u662f0\u62161\uff0c\u5219\u76f4\u63a5\u6dfb\u52a0\u5230\u7ed3\u679c\u5b57\u7b26\u4e32\u4e2d\n            else:\n                res += char\n\n        # \u5c06\u7ed3\u679c\u6dfb\u52a0\u5230\u7ed3\u679c\u5217\u8868\u4e2d\n        result.append(res)\n\n    # \u8fd4\u56de\u7ed3\u679c\u5217\u8868\n    return result\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime_factor(n):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n\n\n    if is_prime(n):\n        return n\n    else:\n        return largest_prime_factor(n)\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    # \u5c06\u97f3\u7b26\u8f6c\u6362\u4e3a\u6570\u5b57\n    music_dict = {'C': 0, 'D': 2, 'E': 4, 'F': 5, 'G': 7, 'A': 9, 'B': 11}\n    music_list = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == '#':\n            music_list[-1] += 1\n            i += 1\n        elif music_string[i] == 'b':\n            music_list[-1] -= 1\n            i += 1\n        else:\n            music_list.append(music_dict[music_string[i]])\n            i += 2\n    # \u5c06\u97f3\u7b26\u8f6c\u6362\u4e3a\u5e03\u5c14\u503c\n    music_bool = [False] * len(music_list)\n    for i in range(len(music_list)):\n        music_bool[i] = music_list[i] % 12 in x\n    # \u7b80\u5316\u97f3\u4e50\n    i = 0\n    while i < len(music_bool):\n        if music_bool[i]:\n            j = i + 1\n            while j < len(music_bool) and music_bool[j]:\n                j += 1\n            if j - i > 1:\n                music_bool[i:j] = [False] * (j - i)\n                i = j\n            else:\n                i += 1\n        else:\n            i += 1\n    return music_bool\n"}
{"task_id": "EvoEval/31", "completion": "\n    # 1. \uc18c\uc218 \ud329\ud1a0\ub9ac\uc5bc \uad6c\ud558\uae30\n    # 2. \uc18c\uc218 \ud329\ud1a0\ub9ac\uc5bc\uc758 \uc18c\uc218 \uc81c\uacf1 \uad6c\ud558\uae30\n    # 3. \uc18c\uc218 \uc81c\uacf1\uc758 \ud569\uc774 n\ubcf4\ub2e4 \uc791\uc740 \uacbd\uc6b0 \uc18c\uc218 \uc81c\uacf1\uc758 \ud569\uc744 \ubc18\ud658\n    # 4. \uc18c\uc218 \uc81c\uacf1\uc758 \ud569\uc774 n\uacfc \uac19\uc740 \uacbd\uc6b0 \uc18c\uc218 \uc81c\uacf1\uc758 \ud569\uc744 \ubc18\ud658\n    # 5. \uc18c\uc218 \uc81c\uacf1\uc758 \ud569\uc774 n\ubcf4\ub2e4 \ud070 \uacbd\uc6b0 \uc18c\uc218 \uc81c\uacf1\uc758 \ud569\uc744 \ubc18\ud658\n    pass\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    # Your code goes here\n    pass\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    # \u5b9a\u4e49\u7f57\u9a6c\u6570\u5b57\u7684\u503c\n    roman_values = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000,\n    }\n\n    # \u5b9a\u4e49\u7f57\u9a6c\u6570\u5b57\u7684\u7279\u6b8a\u60c5\u51b5\n    special_cases = {\n        'IV': 4,\n        'IX': 9,\n        'XL': 40,\n        'XC': 90,\n        'CD': 400,\n        'CM': 900,\n    }\n\n    # \u521d\u59cb\u5316\u7ed3\u679c\n    result = 0\n\n    # \u904d\u5386\u5b57\u7b26\u4e32\n    i = 0\n    while i < len(s):\n        # \u68c0\u67e5\u662f\u5426\u5b58\u5728\u7279\u6b8a\u60c5\u51b5\n        if i + 1 < len(s) and s[i:i+2] in special_cases:\n            result += special_cases[s[i:i+2]]\n            i += 2\n        else:\n            result += roman_values[s[i]]\n            i += 1\n\n    return result\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    pass\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    if not isinstance(dict, dict):\n        raise TypeError(\"Input must be a dictionary\")\n    if not dict:\n        return \"The dictionary is empty\"\n    else:\n        return \"The dictionary is not empty\"\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    # 1. \ubc30\uc5f4\uc744 \ub450 \uac1c\ub85c \ub098\ub208\ub2e4.\n    # 2. \ub450 \ubc88\uc9f8 \ubc30\uc5f4\uc744 \uccab \ubc88\uc9f8 \ubc30\uc5f4\uc758 \uc55e\uc5d0 \ubd99\uc778\ub2e4.\n    # 3. \ub450 \ubc30\uc5f4\uc744 \ud569\uce5c\ub2e4.\n    # 4. \ubc30\uc5f4\uc744 p\ub9cc\ud07c \uc624\ub978\ucabd\uc73c\ub85c \uc26c\ud504\ud2b8 \uc2dc\ud0a8\ub2e4.\n    # 5. \ubc30\uc5f4\uc744 \uc815\ub82c\ud55c\ub2e4.\n\n    # \ubc30\uc5f4\uc744 \ub450 \uac1c\ub85c \ub098\ub208\ub2e4.\n    arr1 = arr[:n]\n    arr2 = arr[n:]\n\n    # \ub450 \ubc88\uc9f8 \ubc30\uc5f4\uc744 \uccab \ubc88\uc9f8 \ubc30\uc5f4\uc758 \uc55e\uc5d0 \ubd99\uc778\ub2e4.\n    arr1 = arr2 + arr1\n\n    # \ubc30\uc5f4\uc744 p\ub9cc\ud07c \uc624\ub978\ucabd\uc73c\ub85c \uc26c\ud504\ud2b8 \uc2dc\ud0a8\ub2e4.\n    arr1 = arr1[-p:] + arr1[:-p]\n\n    # \ubc30\uc5f4\uc744 \uc815\ub82c\ud55c\ub2e4.\n    arr1.sort()\n\n    return arr1\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    n = len(nums)\n    min_even = [0]*n\n    min_odd = [0]*n\n    min_even[0] = nums[0] if nums[0] % 2 == 0 else math.inf\n    min_odd[0] = nums[0] if nums[0] % 2 == 1 else math.inf\n\n    for i in range(1, n):\n        if nums[i] % 2 == 0:\n            min_even[i] = min(min_even[i-1], min_odd[i-1] + nums[i])\n            min_odd[i] = min(min_odd[i-1], min_even[i-1] + nums[i])\n        else:\n            min_odd[i] = min(min_odd[i-1], min_even[i-1] + nums[i])\n            min_even[i] = min(min_even[i-1], min_odd[i-1] + nums[i])\n\n    return min_even[-1]\n"}
{"task_id": "EvoEval/38", "completion": "\n    even_sum = 0\n    odd_sum = 0\n    zero_sum = 0\n    for i in range(n):\n        if l[i] % 2 == 0:\n            even_sum += l[i]\n        elif l[i] % 2 != 0:\n            odd_sum += l[i]\n        else:\n            zero_sum += 1\n    return even_sum, odd_sum, zero_sum\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    arr.sort()\n    changes = 0\n    for i in range(len(arr)):\n        if arr[i] < x:\n            arr[i] = x\n            changes += 1\n        elif arr[i] > y:\n            arr[i] = y\n            changes += 1\n    return changes, sum(arr)\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime(nums):\n        primes = [n for n in nums if is_prime(n)]\n        return max(primes) if primes else None\n\n    return largest_prime(nums)\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    # Your code here\n    count = 0\n    for i in range(len(s)):\n        if ord(s[i]) >= ord('A') and ord(s[i]) <= ord('Z'):\n            if ord(s[i]) + shift > ord('Z'):\n                count += 1\n    return count\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    stack = []\n    brackets = {')': '(', ']': '[', '}': '{'}\n    for char in expression:\n        if char in brackets.values():\n            stack.append(char)\n        elif char in brackets.keys():\n            if not stack or brackets[char] != stack.pop():\n                return False\n    return not stack\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    fib_sequence = [0, 1]\n    for i in range(2, n):\n        fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2])\n    return sorted(fib_sequence)\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    prefixes = {\n        1000: \"M\",\n        900: \"CM\",\n        500: \"D\",\n        400: \"CD\",\n        100: \"C\",\n        90: \"XC\",\n        50: \"L\",\n        40: \"XL\",\n        10: \"X\",\n        9: \"IX\",\n        5: \"V\",\n        4: \"IV\",\n        1: \"I\"\n    }\n\n    result = []\n    for key in sorted(prefixes.keys(), reverse=True):\n        while number >= key:\n            result.append(prefixes[key])\n            number -= key\n    return result\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sum_primes = 0\n    product_primes = 1\n    for num in numbers:\n        if is_prime(num):\n            sum_primes += num\n            product_primes *= num\n    return sum_primes, product_primes\n"}
{"task_id": "EvoEval/46", "completion": "\n    max_even = -1\n    for num in l:\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and s[i] in lst:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    # Your code here\n    pass\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    # Initialize result\n    count = 0\n\n    # Traverse through every element of array\n    for i in range(n):\n        # If current element is divisible by p\n        if arr[i] % p == 0:\n            count += 1\n\n    return count\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    vowels = 'aeiou'\n    for letter in word[::-1]:\n        if letter in vowels:\n            return letter\n    return None\n"}
{"task_id": "EvoEval/51", "completion": "\n    a = a.replace(' ', '')\n    b = b.replace(' ', '')\n\n    a = a.lower()\n    b = b.lower()\n\n    return a == b\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    # Initialize the product and the pluck list\n    product = 1\n    pluck_list = []\n\n    # Loop through the array\n    for i in range(len(arr)):\n        # If the element is a list, append the product of its elements to the pluck list\n        if isinstance(arr[i], list):\n            pluck_list.append(prod(arr[i]))\n        # If the element is an integer, append it to the pluck list and multiply it to the product\n        elif isinstance(arr[i], int):\n            pluck_list.append(arr[i])\n            product *= arr[i]\n\n    # Return the pluck list and the product\n    return pluck_list, product\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    # Initialize variables\n    total_grade = 0\n    total_weight = 0\n    # Loop through each grade\n    for grade in grades:\n        # Add the grade to the total grade\n        total_grade += grade[0] * grade[1]\n        # Add the weight to the total weight\n        total_weight += grade[1]\n    # Calculate the final grade\n    final_grade = total_grade / total_weight\n    # Return the final grade\n    return final_grade\n"}
{"task_id": "EvoEval/54", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_nums = [i for i in nums if is_prime(i)]\n    if not prime_nums:\n        return 0\n\n    dp = [0] * len(prime_nums)\n    dp[0] = prime_nums[0]\n    max_sum = dp[0]\n\n    for i in range(1, len(prime_nums)):\n        dp[i] = max(prime_nums[i], dp[i-1] + prime_nums[i])\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    # \u5c06\u5c0f\u7f57\u9a6c\u6570\u5b57\u8f6c\u6362\u4e3a\u5341\u8fdb\u5236\n    if number == 'I':\r\n        number = 1\r\n    elif number == 'V':\r\n        number = 5\r\n    elif number == 'X':\r\n        number = 10\r\n    elif number == 'L':\r\n        number = 50\r\n    elif number == 'C':\r\n        number = 100\r\n    elif number == 'D':\r\n        number = 500\r\n    elif number == 'M':\r\n        number = 1000\r\n    else:\r\n        return \"Invalid input\"\r\n\r\n    # \u5c06\u5341\u8fdb\u5236\u6570\u5b57\u8f6c\u6362\u4e3aMD5\r\n    md5_hash = hashlib.md5(str(number).encode())\r\n    return md5_hash.hexdigest()\r\n\r"}
{"task_id": "EvoEval/56", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        factors = []\n        for i in range(2, n + 1):\n            while n % i == 0 and is_prime(i):\n                factors.append(i)\n                n /= i\n            if n == 1:\n                break\n        return factors\n\n    factors = prime_factors(n)\n    product = 1\n    for factor in factors:\n        if factor % 2 != 0:\n            product *= factor\n    return product\n"}
{"task_id": "EvoEval/57", "completion": "\n    palindromic_numbers = [num for num in arr if str(num) == str(num)[::-1]]\n    odd_digit_numbers = [num for num in palindromic_numbers if len(str(num)) % 2 != 0]\n    return odd_digit_numbers\r\n\r\n\r"}
{"task_id": "EvoEval/58", "completion": "\n    def __init__(self, name, age, gender, interests):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.interests = interests\n\n    def hello(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old. I am interested in {self.interests}.\"\n\n\nperson = Person(\"Ryan\", 30, \"male\", \"being a good person\")\n"}
{"task_id": "EvoEval/59", "completion": "\n    odd_count = 0\n    for num in lst:\n        if num % 2 != 0:\n            odd_count += 1\n    return convert_to_base(odd_count, base)\n"}
{"task_id": "EvoEval/60", "completion": "\n    arr.sort()\n    for i in range(n-2):\n        if arr[i] % 2 == 0 and arr[i+1] % 2 == 0 and arr[i+2] % 2 == 0:\n            return [arr[i], arr[i+1], arr[i+2]]\n    return []\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    def __init__(self, name, age, gender, interests):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.interests = interests\n\n    def hello(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old. I am interested in {self.interests}.\"\n\n\nperson = Person(\"Ryan\", 30, \"male\", \"being a good person\")\n"}
{"task_id": "EvoEval/62", "completion": "\n    words = text.split(' ')\n    words.sort(key=lambda x: (len(x), x))\n    return ' '.join(words)\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    def __init__(self, name, age, gender, interests):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.interests = interests\n\n    def hello(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old. I am interested in {self.interests}.\"\n\n\nperson = Person(\"Ryan\", 30, \"male\", \"being a good person\")\n"}
{"task_id": "EvoEval/64", "completion": "\n    if n < 2:\n        return []\n    primes = [2]\n    for num in range(3, n + 1, 2):\n        if all(num % prime != 0 for prime in primes):\n            primes.append(num)\n        if len(primes) == p:\n            return primes\n    return primes\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    if n == 0:\n        return 0\n    if p == 1:\n        return 0\n    if n == 1:\n        return 1\n    if n == p:\n        return n\n    if n < p:\n        return n\n    if n % p == 0:\n        return p\n    else:\n        return n % p\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    x.sort(reverse=True)\n    y.sort(reverse=True)\n    z = x + y\n    z.sort(reverse=True)\n    return sum(z[:n])\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    # Your code goes here\n    pass\n"}
{"task_id": "EvoEval/68", "completion": "\n    n = len(nums)\n    prefix_product = [1] * (n + 1)\n    for i in range(n):\n        prefix_product[i + 1] = prefix_product[i] * nums[i]\n\n    min_product = float('inf')\n    for i in range(n):\n        for j in range(i, n):\n            subarray_product = prefix_product[j + 1] // prefix_product[i]\n            if subarray_product % 2 == 1 and subarray_product < min_product:\n                min_product = subarray_product\n\n    return min_product if min_product != float('inf') else -1\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    happy_strings = []\n    for i in range(len(lst)):\n        happy_strings.append(lst[i])\n    happy_strings.sort()\n    return happy_strings\n\n"}
{"task_id": "EvoEval/70", "completion": "\n    special_factorial_numbers = [1, 2, 6, 24, 120, 720, 5040, 40320, 362880]\n    closest_num = min(numbers, key=lambda x: (abs(x - special_factorial_numbers[0]), x))\n    closest_special_factorial_num = min(special_factorial_numbers, key=lambda x: (abs(x - closest_num), x))\n    return closest_num, closest_special_factorial_num\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    # Write your code here\n    if n == 0 or w == 0:\n        return 0\n    else:\n        return math.floor(w/n)\n"}
{"task_id": "EvoEval/72", "completion": "\n    for number in numbers:\n        if factorial(number) < threshold:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Convert the string fractions to Fraction objects\n    fractions = [Fraction(fraction) for fraction in fractions]\n\n    # Convert the string n to an integer\n    n = int(n)\n\n    # Filter the fractions to only include those that are less than n\n    fractions = [fraction for fraction in fractions if fraction < n]\n\n    # Simplify the fractions\n    fractions = [fraction.limit_denominator(n) for fraction in fractions]\n\n    # Convert the fractions to booleans\n    # If the fraction is 1, convert to True, otherwise convert to False\n    fractions = [bool(fraction) for fraction in fractions]\n\n    return fractions\n"}
{"task_id": "EvoEval/74", "completion": "\n    lst1.sort()\n    lst2.sort()\n    lst1.reverse()\n    lst2.reverse()\n    sum1 = sum(lst1)\n    sum2 = sum(lst2)\n    if sum1 - lst1[0] + lst2[0] <= x and sum2 - lst2[0] + lst1[0] <= y:\n        return sum1 - lst1[0] + lst2[0]\n    elif sum1 - lst1[0] + lst2[1] <= x and sum2 - lst2[1] + lst1[0] <= y:\n        return sum1 - lst1[0] + lst2[1]\n    elif sum1 - lst1[1] + lst2[0] <= x and sum2 - lst2[0] + lst1[1] <= y:\n        return sum1 - lst1[1] + lst2[0]\n    elif sum1 - lst1[1] + lst2[1] <= x and sum2 - lst2[1] + lst1[1] <= y:\n        return sum1 - lst1[1] + lst2[1]\n    else:\n        return sum1 + sum2 - lst1[0] - lst2[0]\n\n"}
{"task_id": "EvoEval/75", "completion": "\n    def __init__(self, name, age, gender, interests):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.interests = interests\n\n    def hello(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old. I am interested in {self.interests}.\"\n\n\nperson = Person(\"Ryan\", 30, \"male\", \"being a good person\")\n"}
{"task_id": "EvoEval/76", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n\n    prime_numbers = [n for n in lst if is_prime(n)]\n    prime_numbers.sort(key=lambda n: (digit_sum(n), n))\n    return prime_numbers\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    # \uc815\ub82c\n    arr.sort()\n\n    # \ucd5c\ub300\uac12 \uad6c\ud558\uae30\n    max_val = max(arr)\n\n    # \ucd5c\uc18c\uac12 \uad6c\ud558\uae30\n    min_val = min(arr)\n\n    # \uc911\uac04\uac12 \uad6c\ud558\uae30\n    mid_val = arr[len(arr)//2]\n\n    # \ucd5c\ub300\uac12, \ucd5c\uc18c\uac12, \uc911\uac04\uac12 \ubc18\ud658\n    return max_val, min_val, mid_val\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    # \u521d\u59cb\u5316\u8ba1\u6570\u5668\n    count = 0\n    # \u521d\u59cb\u5316\u6808\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        else:\n            if not stack:\n                count += 1\n            else:\n                stack.pop()\n    count += len(stack)\n    return count\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    # 1. \uc785\ub825\ubc1b\uc740 \ubb38\uc790\uc5f4\uc744 \ubaa8\ub450 \uc18c\ubb38\uc790\ub85c \ubcc0\ud658\n    s = s.lower()\n\n    # 2. \ubb38\uc790\uc5f4\uc744 \ub4a4\uc9d1\uc740 \ub4a4 \uc800\uc7a5\n    s_reverse = s[::-1]\n\n    # 3. \uc6d0\ub798 \ubb38\uc790\uc5f4\uacfc \ub4a4\uc9d1\uc740 \ubb38\uc790\uc5f4\uc774 \uac19\uc73c\uba74 happy case, \uc544\ub2c8\uba74 sad case \ubc18\ud658\n    if s == s_reverse:\n        return \"happy case\"\n    else:\n        return \"sad case\"\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    pass\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    # Generate Fibonacci sequence\n    fib = [0, 1]\n    for i in range(2, n+1):\n        fib.append(fib[i-1] + fib[i-2])\n\n    # Calculate mean absolute deviation\n    mean = sum(fib) / n\n    deviations = [abs(x - mean) for x in fib]\n    mad = sum(deviations) / n\n\n    return mad\n"}
{"task_id": "EvoEval/82", "completion": "\n    if n < 1:\n        return []\n    fib_numbers = [0, 1]\n    odd_fib_numbers = [1]\n    while len(fib_numbers) < n:\n        fib_numbers.append(fib_numbers[-1] + fib_numbers[-2])\n        if fib_numbers[-1] % 2 != 0:\n            odd_fib_numbers.append(fib_numbers[-1])\n    return odd_fib_numbers\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    # Remove all non-alphanumeric characters\n    text = re.sub(r'\\W+', '', text)\n\n    # Count the number of prime numbers up to the length of the text\n    prime_count = 0\n    for i in range(2, len(text) + 1):\n        if is_prime(i):\n            prime_count += 1\n\n    return prime_count\n"}
{"task_id": "EvoEval/84", "completion": "\n    prefix_histogram = {}\n    for i in range(1, len(string) + 1):\n        prefix = string[:i]\n        if prefix in prefix_histogram:\n            prefix_histogram[prefix]['count'] += 1\n        else:\n            prefix_histogram[prefix] = {'count': 1}\n    return prefix_histogram\n"}
{"task_id": "EvoEval/85", "completion": "\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    if lst[0] < lst[1]:\n        return lst[0]\n    if lst[-1] > lst[-2]:\n        return lst[-1]\n    left = 0\n    right = len(lst) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if lst[mid] < lst[mid + 1] and lst[mid] < lst[mid - 1]:\n            return lst[mid]\n        elif lst[mid] > lst[0]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return None\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    # Initialize the result list\n    results = []\n\n    # Iterate over each operator and operand list\n    for operator, operand_list in zip(operators, operand_lists):\n        # Evaluate the expression\n        result = eval(operator + ''.join(map(str, operand_list)))\n\n        # Append the result to the results list\n        results.append(result)\n\n    return results\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    stack = []\n    for char in text:\n        if char in '([{':\n            stack.append(char)\n        elif char in ')]}':\n            if not stack:\n                return False\n            if (char == ')' and stack[-1] == '(') or (char == ']' and stack[-1] == '[') or (char == '}' and stack[-1] == '{'):\n                stack.pop()\n            else:\n                return False\n    return not stack\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    # Remove all non-alphabetic characters\n    s = ''.join(c for c in s if c.isalpha())\n\n    # Convert to lowercase\n    s = s.lower()\n\n    # Sort the string\n    s = ''.join(sorted(s))\n\n    return s\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    pass\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for key in dict.keys():\n        for letter in key:\n            if letter in vowels:\n                count += 1\n    return count\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    prime_numbers = []\n    even_numbers = []\n    others = []\n\n    for i in l:\n        if i % 2 == 0:\n            even_numbers.append(i)\n        elif is_prime(i):\n            prime_numbers.append(i)\n        else:\n            others.append(i)\n\n    if x == 'prime':\n        return prime_numbers + even_numbers + others\n    elif y == 'even':\n        return even_numbers + prime_numbers + others\n    else:\n        return others + prime_numbers + even_numbers\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    l1.sort()\n    l1.reverse()\n    return l1[:n]\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    for char in string:\n        if char in vowels:\n            vowel_count += 1\n    if vowel_count % 2 == 0:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n\n    left = sort_count_nums(left_half)\n    right = sort_count_nums(right_half)\n\n    return merge_count_split_inv(left, right)\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    # Filter the list to only include strings that contain the substring\n    filtered_strings = [s for s in strings if substring in s]\n\n    # Sort the filtered list in ascending order\n    sorted_strings = sorted(filtered_strings)\n\n    return sorted_strings\n"}
{"task_id": "EvoEval/96", "completion": "\n    # Create a set to store the sum of pairs\n    sum_set = set()\n\n    # Iterate over the first list\n    for i in l1:\n        # Iterate over the second list\n        for j in l2:\n            # Add the sum of the pair to the set\n            sum_set.add(i + j)\n\n    # Check if 0 is in the set\n    return 0 in sum_set\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    bracketing_dict = {}\n    for key in dict.keys():\n        if isinstance(dict[key], dict):\n            bracketing_dict[key] = check_dict_bracketing(dict[key])\n        else:\n            bracketing_dict[key] = dict[key]\n    return bracketing_dict\n\n"}
{"task_id": "EvoEval/99", "completion": "\n    if x == 0:\n        return 0\n    else:\n        return 1 + len_base_conversion(x // base, base)\n\n"}
