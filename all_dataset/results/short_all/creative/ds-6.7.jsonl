{"task_id": "EvoEval/0", "completion": "\n    # Define the cost of shipping per item\n    shipping_cost_per_item = 1.5\n\n    # Calculate the total shipping cost\n    total_shipping_cost = len(items) * shipping_cost_per_item\n\n    # Add a surcharge if the order is for a location outside the USA\n    if location != \"USA\":\n        total_shipping_cost += 5\n\n    return total_shipping_cost\n"}
{"task_id": "EvoEval/1", "completion": "\n    # Define the cost of shipping per item\n    shipping_cost_per_item = 1.5\n\n    # Calculate the total shipping cost\n    total_shipping_cost = len(items) * shipping_cost_per_item\n\n    # Add a surcharge if the order is for a location outside the USA\n    if location != \"USA\":\n        total_shipping_cost += 5\n\n    return total_shipping_cost\n"}
{"task_id": "EvoEval/2", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/3", "completion": "\n    # Initialize the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    # Initialize the result list\n    result = []\n    # Loop through the input string\n    for char in input_string:\n        # If the character is in the alphabet, add its position to the result list\n        if char in alphabet:\n            result.append(alphabet.index(char) + 1)\n    # Return the result list\n    return result\n"}
{"task_id": "EvoEval/4", "completion": "\n    return sum(candles)\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not matrix:\n        return []\n\n    rows, cols = len(matrix), len(matrix[0])\n    result = []\n    row = col = 0\n    going_down = True\n\n    while len(result) < rows * cols:\n        result.append(matrix[row][col])\n        if going_down:\n            if col > 0 and row < rows - 1:\n                col -= 1\n                row += 1\n            elif col == 0 and row < rows - 1:\n                row += 1\n                going_down = False\n            elif row == rows - 1:\n                col += 1\n                going_down = False\n        else:\n            if row > 0 and col < cols - 1:\n                row -= 1\n                col += 1\n            elif col == cols - 1 and row < rows - 1:\n                row += 1\n                going_down = True\n            elif row == rows - 1:\n                col += 1\n                going_down = True\n\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    # TODO: Implement function\n    pass\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    # \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5b57\u7b26\u5217\u8868\n    code_sequence = [chr(i) for i in code_sequence]\n    # \u5c06\u5b57\u7b26\u5217\u8868\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n    code_sequence = ''.join(code_sequence)\n    # \u67e5\u627e\u5b57\u7b26\u4e32\u4e2d\u7684'shangri-la'\n    index = code_sequence.find('shangri-la')\n    # \u5982\u679c\u627e\u5230\u4e86'shangri-la'\uff0c\u8fd4\u56de'Shangri-la found'\uff0c\u5426\u5219\u8fd4\u56de'Shangri-la not found'\n    return 'Shangri-la found' if index != -1 else 'Shangri-la not found'\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    # Your code here\n    pass\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    words = string.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    return frequency\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    animal_string = animal_string.lower()\n    animal_list = animal_string.split(\",\")\n    animal_dict = {}\n    for animal in animal_list:\n        animal = animal.strip()\n        if animal in animal_dict:\n            animal_dict[animal] += 1\n        else:\n            animal_dict[animal] = 1\n    return [animal_dict[animal] for animal in sorted(animal_dict.keys())]\n\r\n\r"}
{"task_id": "EvoEval/11", "completion": "\n    # Your code here\n    return f\"I like {fruits[0]} and {fruits[1]} and {location} is a great place to visit!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    # Initialize the variables\n    min_flux = min(flux_values)\n    max_flux = max(flux_values)\n    energy_signature = max_flux - min_flux\n\n    return energy_signature\n"}
{"task_id": "EvoEval/13", "completion": "\n    # \u521b\u5efa\u4e00\u4e2a\u5b57\u5178\u6765\u5b58\u50a8\u6bcf\u4e2a\u5143\u7d20\u7684\u51fa\u73b0\u6b21\u6570\n    count_dict = {}\n    for elem in elems:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n\n    # \u627e\u5230\u51fa\u73b0\u6b21\u6570\u6700\u5c11\u7684\u5143\u7d20\n    min_count = min(count_dict.values())\n    rarest_elements = [k for k, v in count_dict.items() if v == min_count]\n\n    # \u5982\u679c\u6709\u591a\u4e2a\u51fa\u73b0\u6b21\u6570\u6700\u5c11\u7684\u5143\u7d20\uff0c\u8fd4\u56de\u5b57\u6bcd\u987a\u5e8f\u6700\u5c0f\u7684\u90a3\u4e2a\n    return min(rarest_elements)\n"}
{"task_id": "EvoEval/14", "completion": "\n    alias = name.split(' ')\n    return '-'.join(alias).lower()\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    # 1. \uce74\ub4dc \uc22b\uc790\ub97c \ucd94\ucd9c\ud558\uc5ec \uc22b\uc790\ubcc4 \uac1c\uc218\ub97c \uc13c\ub2e4.\n    # 2. \uce74\ub4dc \ubb34\ub2ac\ub97c \ucd94\ucd9c\ud558\uc5ec \ubb34\ub2ac\ubcc4 \uac1c\uc218\ub97c \uc13c\ub2e4.\n    # 3. \uc22b\uc790 \uac1c\uc218\uc640 \ubb34\ub2ac \uac1c\uc218\ub97c \ube44\uad50\ud558\uc5ec \ud3ec\ucee4 \ud578\ub4dc \ub7ad\ud06c\ub97c \ud310\ub2e8\ud55c\ub2e4.\n    # 4. \uc22b\uc790 \uac1c\uc218\uac00 \uac19\uc740 \uacbd\uc6b0, \ubb34\ub2ac \uac1c\uc218\ub97c \ube44\uad50\ud558\uc5ec \ud3ec\ucee4 \ud578\ub4dc \ub7ad\ud06c\ub97c \ud310\ub2e8\ud55c\ub2e4.\n    # 5. \ubaa8\ub4e0 \uc22b\uc790\uac00 \uac19\uc740 \uacbd\uc6b0, \uc22b\uc790 \uc790\uccb4\ub97c \ube44\uad50\ud558\uc5ec \ud3ec\ucee4 \ud578\ub4dc \ub7ad\ud06c\ub97c \ud310\ub2e8\ud55c\ub2e4.\n    # 6. \ubaa8\ub4e0 \uc22b\uc790\uac00 \uac19\uace0, \uc22b\uc790\uac00 \uc5f0\uc18d\uc801\uc778 \uacbd\uc6b0, "}
{"task_id": "EvoEval/16", "completion": "\n    fibonacci_numbers = [0, 1]\n    for i in range(2, n+1):\n        fibonacci_numbers.append(fibonacci_numbers[i-1] + fibonacci_numbers[i-2])\n    return sum(fibonacci_numbers)\n"}
{"task_id": "EvoEval/17", "completion": "\n    # write your code here\n    for wizard in wizards:\n        wizard_name, wizard_damage = wizard.split()\n        wizard_damage = int(wizard_damage)\n        while dragon_hp > 0:\n            dragon_hp -= wizard_damage\n            if dragon_hp <= 0:\n                return f\"{wizard_name} won the battle!\"\n    return \"The dragon won the battle!\"\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    if n < 10:\n        return n\n    else:\n        return 1 + magical_seven(sum(map(int, str(n))))\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    vampires = []\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 'V':\n                vampires.append((i, j))\n    return vampires\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n < 1:\n        return []\n    pattern = []\n    for i in range(1, n+1):\n        pattern.append([i]*i)\n    return pattern\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    # 1. \u68c0\u67e5\u7f51\u683c\u662f\u5426\u6709\u6548\n    if not grid or not words:\n        return False\n\n    # 2. \u68c0\u67e5\u7f51\u683c\u662f\u5426\u4e3a\u65b9\u9635\n    if not all(len(row) == len(grid) for row in grid):\n        return False\n\n    # 3. \u68c0\u67e5\u5355\u8bcd\u662f\u5426\u6709\u6548\n    if not all(isinstance(word, str) and len(word) > 0 for word in words):\n        return False\n\n    # 4. \u68c0\u67e5\u5355\u8bcd\u662f\u5426\u5728\u7f51\u683c\u4e2d\n    for word in words:\n        if not any(word in row for row in grid) and not any(word in row for row in zip(*grid)):\n            return False\n\n    return True\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    # 1 AU = 9.461e12 km\n    # 1 light year = 9.461e15 km\n    # 1 day = 24 hours\n    # 1 hour = 3600 seconds\n    # 1 light second = 9.461e13 km\n    \n    # convert t to seconds\n    t = t * 24 * 3600\n    \n    # calculate distance\n    d = v * t\n    \n    # convert distance to light years\n    d = d / (9.461e15)\n    \n    return d\n"}
{"task_id": "EvoEval/23", "completion": "\n    prime_chars = \"adgjmpsvy\"\n    cipher_chars = \"qwbezcdrkftovnhxulia\"\n    cipher_dict = {prime_chars[i]: cipher_chars[i] for i in range(len(prime_chars))}\n    return \"\".join(cipher_dict[c] if c in cipher_dict else c for c in s)\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    # 1. \uc601\uc5b4 \ub2e8\uc5b4\ub97c \uc785\ub825\ubc1b\ub294\ub2e4.\n    # 2. \uc601\uc5b4 \ub2e8\uc5b4\ub97c \ud55c\uae00\ub85c \ubc88\uc5ed\ud55c\ub2e4.\n    # 3. \ubc88\uc5ed\ub41c \ud55c\uae00 \ub2e8\uc5b4\ub97c \ubc18\ud658\ud55c\ub2e4.\n    pass\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    text = text.lower()\n    word = word.lower()\n    words = text.split()\n    count = words.count(word)\n    return count\r\n\r\n\r"}
{"task_id": "EvoEval/26", "completion": "\n    # Initialize the queue with the start position\n    queue = [start]\n    # Initialize the path dictionary to keep track of the path\n    path = {start: None}\n\n    while queue:\n        # Get the current position\n        current = queue.pop(0)\n        # If we reached the end, we found the path\n        if current == end:\n            return construct_path(path, start, end)\n        # Get the neighbors of the current position\n        for next_pos in get_neighbors(maze, current):\n            # If we haven't visited this position yet, add it to the queue and update the path\n            if next_pos not in path:\n                queue.append(next_pos)\n                path[next_pos] = current\n    # If we haven't found the path, return None\n    return None\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    if income <= 9950:\n        tax_rate = 0.10\n    elif income <= 40525:\n        tax_rate = 0.12\n    elif income <= 86375:\n        tax_rate = 0.22\n    elif income <= 164925:\n        tax_rate = 0.24\n    elif income <= 209425:\n        tax_rate = 0.32\n    elif income <= 523600:\n        tax_rate = 0.35\n    else:\n        tax_rate = 0.37\n\n    tax = income * tax_rate - deductions\n\n    return tax\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    n = len(s)\n    dp = [[False]*n for _ in range(n)]\n    count = [0]*n\n    for gap in range(n):\n        i = 0\n        while i+gap < n:\n            if gap == 0:\n                dp[i][i+gap] = True\n            elif gap == 1:\n                dp[i][i+gap] = (s[i] == s[i+1])\n            else:\n                dp[i][i+gap] = (dp[i+1][i+gap-1] and s[i] == s[i+gap])\n            if dp[i][i+gap]:\n                count[gap] += 1\n            i += 1\n    return count\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    # \u5b9a\u4e49\u65b9\u5411\u5411\u91cf\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    # \u5b9a\u4e49\u961f\u5217\n    queue = [(start, [])]\n    # \u5b9a\u4e49\u5df2\u8bbf\u95ee\u96c6\u5408\n    visited = set()\n    while queue:\n        # \u51fa\u961f\n        (x, y), path = queue.pop(0)\n        # \u5224\u65ad\u662f\u5426\u5230\u8fbe\u7ec8\u70b9\n        if (x, y) == end:\n            return path\n        # \u5224\u65ad\u662f\u5426\u8d8a\u754c\n        if x < 0 or y < 0 or x >= len(maze) or y >= len(maze[0]):\n            continue\n        # \u5224\u65ad\u662f\u5426\u53ef\u8d70\n        if maze[x][y] == 0:\n            continue\n        # \u5224\u65ad\u662f\u5426\u5df2\u8bbf\u95ee\n        if (x, y) in visited:\n            continue\n        # \u6807\u8bb0\u4e3a\u5df2\u8bbf\u95ee\n        visited.add((x, y))\n        # \u5c06\u90bb\u5c45\u52a0\u5165\u961f\u5217\n        for dx, dy in directions:\n            queue.append(((x + dx, y + dy), path + [(x, y)]))\n    # \u5982\u679c\u6ca1\u6709\u8def\u5f84\uff0c\u8fd4\u56deNone\n    return None\n\nmaze = [\n    [1, 0, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 0, 1],\n    [1, 0, 0, 0, 0, 0, 0, 1, 0, 1],\n    [1, 0, 1, 1, 1, 1, 1, 1, 0, 1],\n    [1, 0, "}
{"task_id": "EvoEval/31", "completion": "\n    # \u521d\u59cb\u5316\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u6765\u5b58\u50a8\u4ece\u8d77\u70b9\u5230\u6bcf\u4e2a\u5355\u5143\u683c\u7684\u8def\u5f84\u6570\n    dp = [[0]*n for _ in range(m)]\n\n    # \u4ece\u8d77\u70b9\u5230\u6bcf\u4e2a\u5355\u5143\u683c\u7684\u8def\u5f84\u6570\u4e3a1\n    for i in range(m):\n        dp[i][0] = 1\n    for j in range(n):\n        dp[0][j] = 1\n\n    # \u52a8\u6001\u89c4\u5212\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u5355\u5143\u683c\uff0c\u8def\u5f84\u6570\u662f\u5230\u8fbe\u5176\u4e0a\u65b9\u5355\u5143\u683c\u548c\u5de6\u8fb9\u5355\u5143\u683c\u7684\u8def\u5f84\u6570\u4e4b\u548c\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n\n    # \u8fd4\u56de\u76ee\u6807\u5355\u5143\u683c\u7684\u8def\u5f84\u6570\n    return dp[-1][-1]\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    import random\n    random.seed(seed)\n    random.shuffle(playlist)\n    return playlist\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    # Initialize the dp array\n    dp = [0] * (n + 1)\n    dp[0] = 1\n\n    # Iterate over the dp array\n    for i in range(1, n + 1):\n        # Iterate over the magic stones\n        for magic_stone in magic_stones:\n            # If the magic stone is less than or equal to the current stair, update the dp array\n            if magic_stone <= i:\n                dp[i] += dp[i - magic_stone]\n\n    # Return the final result\n    return dp[n]\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    if n == 0 or m == 0:\n        return 0\n    elif n == 1 and m == 1:\n        return 1\n    elif n == 1:\n        return m\n    elif m == 1:\n        return n\n    else:\n        return n * m - 1\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    import re\n\n    email_regex = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$'\n    if re.match(email_regex, email):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    n = len(xs)\n    coefficients = [0] * n\n    for i in range(n):\n        for j in range(i+1):\n            coefficients[i] += xs[j] * (-1)**(i-j)\n        coefficients[i] /= (i+1)\n    return coefficients\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    # 1. \ubb38\uc790\uc5f4\uc744 \ubaa8\ub450 \uc18c\ubb38\uc790\ub85c \ubcc0\ud658\n    s = s.lower()\n\n    # 2. \ubb38\uc790\uc5f4\uc744 \ub9ac\uc2a4\ud2b8\ub85c \ubcc0\ud658\n    s = list(s)\n\n    # 3. \ub9ac\uc2a4\ud2b8\uc758 \uac01 \uc694\uc18c\ub97c \ubc18\ubcf5\ud558\uba70 \ubcc0\ud658\n    for i in range(len(s)):\n        if s[i] == 'a':\n            s[i] = '1'\n        elif s[i] == 'e':\n            s[i] = '2'\n        elif s[i] == 'i':\n            s[i] = '3'\n        elif s[i] == 'o':\n            s[i] = '4'\n        elif s[i] == 'u':\n            s[i] = '5'\n\n    # 4. \ub9ac\uc2a4\ud2b8\ub97c \ub2e4\uc2dc \ubb38\uc790\uc5f4\ub85c \ubcc0\ud658\n    s = ''.join(s)\n\n    return s\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude42\",\n        \":(\": \"\u2639\",\n        \":D\": \"\ud83d\ude00\",\n        \":P\": \"\ud83d\ude1b\",\n        \":O\": \"\ud83d\ude2e\",\n        \":|\": \"\ud83d\ude10\",\n        \";)\": \"\ud83d\ude1c\",\n        \":*\": \"\ud83d\ude18\",\n        \":^)\": \"\ud83d\ude42\",\n        \":-D\": \"\ud83d\ude00\",\n        \":-P\": \"\ud83d\ude1b\",\n        \":-O\": \"\ud83d\ude2e\",\n        \":-|\": \"\ud83d\ude10\",\n        \";-)\": \"\ud83d\ude1c\",\n        \";-(\": \"\ud83d\ude2d\",\n        \":-&\": \"\ud83d\ude0b\",\n        \":$\": \"\ud83d\ude0b\",\n        \":\u20ac\": \"\ud83d\ude0b\",\n        \"8)\": \"\ud83d\ude0e\",\n        \"8-D\": \"\ud83d\ude00\",\n        \"8-P\": \"\ud83d\ude1b\",\n        \"8-O\": \"\ud83d\ude2e\",\n        \"8-|\": \"\ud83d\ude10\",\n        \"8;)\": \"\ud83d\ude1c\",\n        \"8-D\": \"\ud83d\ude00\",\n        \"8-P\": \"\ud83d\ude1b\",\n        \"8-O\": \"\ud83d\ude2e\",\n        \"8-|\": \"\ud83d\ude10\",\n        \"8;D\": \"\ud83d\ude0e\",\n        \"8;P\": \"\ud83d\ude1b\",\n        \"8;O\": \"\ud83d\ude2e\",\n        \"8;|\": \"\ud83d\ude10\",\n        \"8;D\": \"\ud83d\ude0e\",\n        \"8;P\": \"\ud83d\ude1b\",\n        \"8;O\": \"\ud83d\ude2e\",\n        \"8;|\": \"\ud83d\ude10\",\n        \"8;D\": \"\ud83d\ude0e\",\n        \"8;P\": \"\ud83d\ude1b\",\n        \"8;O\": \"\ud83d\ude2e\",\n        \"8;|\": \"\ud83d\ude10\",\n        \"8;D\": \"\ud83d\ude0e\",\n        \"8;P\": \"\ud83d\ude1b\",\n        \"8"}
{"task_id": "EvoEval/39", "completion": "\n    # 1. \uc785\ub825\ubc1b\uc740 \ubb38\uc790\uc5f4\uc744 \uc544\uc2a4\ud0a4 \ucf54\ub4dc\ub85c \ubcc0\ud658\n    ascii_s = [ord(c) for c in s]\n\n    # 2. \uc544\uc2a4\ud0a4 \ucf54\ub4dc\ub97c \uc774\uc6a9\ud558\uc5ec \uc544\uc2a4\ud0a4 \uc544\ud2b8 \uc0dd\uc131\n    art = []\n    for i in range(n):\n        row = \"\"\n        for ascii_code in ascii_s:\n            row += chr(ascii_code + i)\n        art.append(row)\n\n    return art\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    potions.sort()\n    left, right = 0, len(potions - 1)\n    while left < right:\n        mid = (left + right) // 2\n        if potions[mid] < target:\n            left = mid + 1\n        else:\n            right = mid\n    return len(potions) - left if potions[left] >= target else -1\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    # \u521d\u59cb\u5316\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n\n    # \u52a8\u6001\u89c4\u5212\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] + arr[i])\n\n    return dp[-1]\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    def __init__(self, name, age, gender, interests):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.interests = interests\n\n    def hello(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old. I am interested in {self.interests}.\"\n\n\nperson = Person(\"Ryan\", 30, \"male\", \"being a good person\")\n"}
{"task_id": "EvoEval/43", "completion": "\n    # Calculate the time it takes to travel the distance at the speed\n    time = distance / speed\n\n    # Calculate the fuel consumption\n    fuel_consumption = distance / fuel\n\n    # Calculate the weight of the spaceship after the travel\n    spaceship_weight_after_travel = spaceship_weight + (planet_gravity * time)\n\n    # Check if the spaceship can survive the travel\n    if spaceship_weight_after_travel <= fuel_consumption:\n        return \"The spaceship can survive the travel\"\n    else:\n        return \"The spaceship will not survive the travel\"\n"}
{"task_id": "EvoEval/44", "completion": "\n    def __init__(self, name, age, gender, interests):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.interests = interests\n\n    def hello(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old. I am interested in {self.interests}.\"\n\n\nperson = Person(\"Ryan\", 30, \"male\", \"being a good person\")\n"}
{"task_id": "EvoEval/45", "completion": "\n    # \uc131\uc758 \uc704\uce58\ub97c \uc800\uc7a5\ud560 \ub9ac\uc2a4\ud2b8\n    castle_loc = []\n\n    # \ubc30\uc5f4\uc758 \uac00\ub85c\uc640 \uc138\ub85c \uae38\uc774\ub97c \uc800\uc7a5\n    n, m = len(arr), len(arr[0])\n\n    # \ubc30\uc5f4\uc744 \uc21c\ud68c\ud558\uba70 \uc131\uc758 \uc704\uce58\ub97c \ucc3e\uc74c\n    for i in range(n):\n        for j in range(m):\n            if arr[i][j] == 'X':\n                castle_loc.append((i, j))\n\n    return castle_loc\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    def __init__(self, name, age, gender, interests):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.interests = interests\n\n    def hello(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old. I am interested in {self.interests}.\"\n\n\nperson = Person(\"Ryan\", 30, \"male\", \"being a good person\")\n"}
{"task_id": "EvoEval/47", "completion": "\n    # Your code here\n    pass\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    def __init__(self, name, age, gender, interests):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.interests = interests\n\n    def hello(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old. I am interested in {self.interests}.\"\n\n\nperson = Person(\"Ryan\", 30, \"male\", \"being a good person\")\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code = {\n        \".-\": \"A\",\n        \"-...\": \"B\",\n        \"-.-.\": \"C\",\n        \"-..\": \"D\",\n        \".\": \"E\",\n        \"..-.\": \"F\",\n        \"--.\": \"G\",\n        \"....\": \"H\",\n        \"..\": \"I\",\n        \".---\": \"J\",\n        \"-.-\": \"K\",\n        \".-..\": \"L\",\n        \"--\": \"M\",\n        \"-.\": \"N\",\n        \"---\": \"O\",\n        \".--.\": \"P\",\n        \"--.-\": \"Q\",\n        \".-.\": \"R\",\n        \"...\": \"S\",\n        \"-\": \"T\",\n        \"..-\": \"U\",\n        \"...-\": \"V\",\n        \".--\": \"W\",\n        \"-..-\": \"X\",\n        \"-.--\": \"Y\",\n        \"--..\": \"Z\",\n        \"/\": \" \",\n    }\n\n    words = msg.split(\" / \")\n    decoded_msg = \"\"\n\n    for word in words:\n        letters = word.split(\" \")\n        for letter in letters:\n            decoded_msg += morse_code[letter]\n        decoded_msg += \" \"\n\n    return decoded_msg.strip()\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', \n        'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', \n        'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', \n        'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', \n        'Y': '-.--', 'Z': '--..', '1': '.----', '2': '..---', '3': '...--', \n        '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', \n        '9': '----.', '0': '-----', ',': '--..--', '.': '.-.-.-', '?': '..--..', \n        ' ': '/'\n    }\n\n    text = text.upper()\n    morse = \"\"\n\n    for char in text:\n        if char in morse_code:\n            morse += morse_code[char] + \" \"\n        else:\n            morse += char + \" \"\n\n    return morse.strip()\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    # 1. Create a dictionary to store the encoding of each character\n    encoding_dict = {}\n\n    # 2. Create a list to store the encoded string\n    encoded_string = []\n\n    # 3. Iterate over the list of alphabets\n    for i in range(len(list_of_alphabets)):\n        # 4. Add the encoding of each character to the dictionary\n        encoding_dict[list_of_alphabets[i]] = chr(65 + i)\n\n    # 5. Iterate over the string\n    for char in string:\n        # 6. If the character is in the dictionary, add its encoding to the encoded string\n        if char in encoding_dict:\n            encoded_string.append(encoding_dict[char])\n        # 7. If the character is not in the dictionary, add it as is to the encoded string\n        else:\n            encoded_string.append(char)\n\n    # 8. Return the encoded string\n    return ''.join(encodedstring)\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    # \u521d\u59cb\u5316\n    cookies = [0]*n\n    total_orders = sum(orders)\n    total_cookies = sum(cookies)\n    total_baked = 0\n    total_time = 0\n    i = 0\n\n    # \u5faa\u73af\u76f4\u5230\u6240\u6709\u8ba2\u5355\u90fd\u88ab\u70d8\u7119\n    while total_baked < total_orders:\n        # \u5982\u679c\u6709\u8db3\u591f\u7684\u997c\u5e72\uff0c\u5c31\u70d8\u7119\u4e0b\u4e00\u4e2a\u8ba2\u5355\n        if total_cookies >= orders[i]:\n            cookies[i%n] += 1\n            total_cookies += 1\n            total_baked += 1\n            total_time += 1\n        # \u5982\u679c\u6ca1\u6709\u8db3\u591f\u7684\u997c\u5e72\uff0c\u5c31\u751f\u4ea7\u4e00\u4e2a\u65b0\u7684\u997c\u5e72\n        else:\n            cookies[i%n] += 1\n            total_cookies += 1\n            total_time += m\n        # \u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u8ba2\u5355\n        i = (i+1) % n\n\n    return total_time\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    # Your code here\n    pass\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    for i in range(len(lst)):\n        if lst[i] == star:\n            return i\n    return -1\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_message = ''\n\n    for char in message:\n        if char in alphabet:\n            index = (alphabet.index(char) + shift) % len(alphabet)\n            new_message += alphabet[index]\n        else:\n            new_message += char\n\n    return new_message\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', \n        'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', \n        'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', \n        'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', \n        'Y': '-.--', 'Z': '--..', '1': '.----', '2': '..---', '3': '...--', \n        '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', \n        '9': '----.', '0': '-----', ',': '--..--', '.': '.-.-.-', '?': '..--..', \n        ' ': '/'\n    }\n\n    s = s.upper()\n    morse_code = \"\"\n    for char in s:\n        if char in morse_code_dict:\n            morse_code += morse_code_dict[char] + \" \"\n        else:\n            morse_code += char + \" \"\n    return morse_code.strip()\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    # \uc5ec\uae30\uc5d0 \ucf54\ub4dc\ub97c \uc791\uc131\ud569\ub2c8\ub2e4.\n    spell_list = list(magic_spell)\n    menu_list = list(menu)\n    spell_dict = {}\n    menu_dict = {}\n    for i in spell_list:\n        if i in spell_dict:\n            spell_dict[i] += 1\n        else:\n            spell_dict[i] = 1\n    for i in menu_list:\n        if i in menu_dict:\n            menu_dict[i] += 1\n        else:\n            menu_dict[i] = 1\n    for key, value in spell_dict.items():\n        if key in menu_dict:\n            if value > menu_dict[key]:\n                return False\n        else:\n            return False\n    return True\n"}
{"task_id": "EvoEval/58", "completion": "\n    # Define the Morse code dictionary\n    morse_code_dict = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', \n        'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', \n        'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', \n        'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', \n        'Y': '-.--', 'Z': '--..', '1': '.----', '2': '..---', '3': '...--', \n        '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', \n        '9': '----.', '0': '-----', ',': '--..--', '.': '.-.-.-', '?': '..--..', \n        ' ': '/'\n    }\n\n    # Reverse the Morse code dictionary\n    reverse_morse_code_dict = {v: k for k, v in morse_code_dict.items()}\n\n    # Convert the Earth phrase to Morse code\n    morse_code = ' '.join(morse_code_dict[char.upper()] for char in earth_phrase)\n\n    # Convert the Morse code to Earth phrase\n    earth_phrase_reversed = ''.join(reverse_morse_code_dict[code] for code in morse_code.split())\n\n    return morse_code, earth_phrase_reversed\n"}
{"task_id": "EvoEval/59", "completion": "\n    # 1. \uc7ac\ub8cc \ub515\uc154\ub108\ub9ac\ub97c \uc785\ub825\ubc1b\uc544 \uc7ac\ub8cc\uc758 \uc885\ub958\ub97c \ubc18\ud658\ud558\ub294 \ud568\uc218\n    def get_ingredient_types(ingredient_dict):\n        return list(ingredient_dict.keys())\n\n    # 2. \uc7ac\ub8cc \ub515\uc154\ub108\ub9ac\ub97c \uc785\ub825\ubc1b\uc544 \uc7ac\ub8cc\uc758 \uc591\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218\n    def get_ingredient_amounts(ingredient_dict):\n        return list(ingredient_dict.values())\n\n    # 3. \uc7ac\ub8cc\uc758 \uc885\ub958\uc640 \uc591\uc744 \uc785\ub825\ubc1b\uc544 \uc694\ub9ac\ub97c \uc900\ube44\ud558\ub294 \ubc29\ubc95\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218\n    def prepare_recipe(ingredient_types, ingredient_amounts):\n        recipe = []\n        for i in range(len(ingredient_types)):\n            recipe.append(f\"{ingredient_amounts[i]}g\uc758 {ingredient_types[i]}\ub97c \ub123\uc2b5\ub2c8\ub2e4.\")\n        return recipe\n\n    ingredient_types = get_ingredient_types(ingredient_dict)\n    ingredient_amounts = get_ingredient_amounts(ingredient_dict)\n    recipe = prepare_recipe(ingredient_types, ingredient_amounts)\n\n    return recipe\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    # Initialize variables\n    sugar_locations = set(sugar_locations)\n    ants = []\n    for i in range(len(ant_positions)):\n        ants.append([ant_positions[i], i])\n    ants.sort()\n\n    # Initialize dp table\n    dp = [0] * (path_length + 1)\n    dp[0] = 1\n\n    # Initialize prefix sum table\n    prefix_sum = [0] * (path_length + 1)\n    prefix_sum[0] = 1\n\n    # Initialize sugar locations\n    sugar_locations_dp = [0] * (path_length + 1)\n    for sugar in sugar_locations:\n        sugar_locations_dp[sugar] = 1\n\n    # Dynamic programming\n    for i in range(1, path_length + 1):\n        if sugar_locations_dp[i] == 1:\n            dp[i] = dp[i - 1]\n            prefix_sum[i] = prefix_sum[i - 1]\n        else:\n            dp[i] = (dp[i - 1] + dp[i]) % 1000000007\n            prefix_sum[i] = (prefix_sum[i - 1] + dp[i]) % 1000000007\n\n    # Calculate the number of happy ants\n    happy_ants = 0\n    for ant in ants:\n        position, index = ant\n        happy_ants = (happy_ants + prefix_sum[position]) % 1000000007\n\n    return happy_ants\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    # Your code here\n    return s.swapcase()\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    def __init__(self, name, age, gender, interests):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.interests = interests\n\n    def hello(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old. I am interested in {self.interests}.\"\n\n\nperson = Person(\"Ryan\", 30, \"male\", \"being a good person\")\n"}
{"task_id": "EvoEval/63", "completion": "\n    for i in range(p):\n        print(\" \"*(p-i-1)+\"#\"*(2*i+1))\r\n\r\n\r"}
{"task_id": "EvoEval/64", "completion": "\n    sequence = []\n    for i in range(start, end+1):\n        if i % divisor == 0:\n            sequence.append(i)\n    return sequence\n"}
{"task_id": "EvoEval/65", "completion": "\n    # \uc8fc\ubb38 \ub0b4\uc5ed\uc744 \ub9ac\uc2a4\ud2b8\ub85c \ubcc0\ud658\n    order_list = list(order)\n\n    # \uba54\ub274\uc640 \uc8fc\ubb38 \ub0b4\uc5ed\uc744 \ube44\uad50\ud558\uc5ec \uc21c\uc11c\ub300\ub85c \uc815\ub82c\n    result = []\n    for o in order_list:\n        if o in menu:\n            result.append(o)\n\n    # \uc8fc\ubb38 \ub0b4\uc5ed\uacfc \uba54\ub274\uac00 \uc77c\uce58\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0\n    if len(result) != len(order_list):\n        return \"\uc8fc\ubb38 \ub0b4\uc5ed\uc774 \uc798\ubabb\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\"\n\n    return result\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_anagram(str1, str2):\n        return sorted(str1) == sorted(str2)\n\n    primes = [i for i in range(n) if is_prime(i)]\n    pairs = []\n\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if is_anagram(str(primes[i]), str(primes[j])):\n                pairs.append((primes[i], primes[j]))\n\n    return pairs\n"}
{"task_id": "EvoEval/67", "completion": "\n    # \uc608\uc678\ucc98\ub9ac\n    if not isinstance(customers, list) or not isinstance(meals, list):\n        raise TypeError(\"customers\uc640 meals\ub294 \ub9ac\uc2a4\ud2b8\uc5ec\uc57c \ud569\ub2c8\ub2e4.\")\n    if not all(isinstance(customer, str) for customer in customers):\n        raise TypeError(\"customers\uc758 \ubaa8\ub4e0 \uc694\uc18c\ub294 \ubb38\uc790\uc5f4\uc774\uc5b4\uc57c \ud569\ub2c8\ub2e4.\")\n    if not all(isinstance(meal, (int, float)) for meal in meals):\n        raise TypeError(\"meals\uc758 \ubaa8\ub4e0 \uc694\uc18c\ub294 \uc22b\uc790\uc5ec\uc57c \ud569\ub2c8\ub2e4.\")\n    if len(meals) != len(customers):\n        raise ValueError(\"customers\uc640 meals\uc758 \uae38\uc774\ub294 \uac19\uc544\uc57c \ud569\ub2c8\ub2e4.\")\n    \n    # \uc804\uccb4 \uc2dd\ub300 \uacc4\uc0b0\n    total_meal_cost = sum(meals)\n    \n    # \uac01 \uace0\uac1d\ubcc4 \uc2dd\ub300 \uacc4\uc0b0\n    meal_costs = {customer: meal for customer, meal in zip(customers, meals)}\n    \n    # \uac01 \uace0\uac1d\ubcc4 \ube44\uc6a9 \uacc4\uc0b0\n    customer_costs = {customer: meal/total_meal_cost for customer, meal in meal_costs.items()}\n    \n    return customer_costs\n"}
{"task_id": "EvoEval/68", "completion": "\n    # \uc815\ub82c \uc804 \ubc30\uc5f4\uc758 \uae38\uc774\n    n = len(arr)\n\n    # \uc815\ub82c \uc804 \ubc30\uc5f4\uc758 \ud569\n    sum_before = sum(arr)\n\n    # \uc815\ub82c \ud6c4 \ubc30\uc5f4\uc758 \ud569\n    sum_after = sum(sorted(arr))\n\n    # \uc815\ub82c \uc804 \ubc30\uc5f4\uc758 \ud569\uacfc \uc815\ub82c \ud6c4 \ubc30\uc5f4\uc758 \ud569\uc774 \uac19\uc73c\uba74 \uc815\ub82c\uc774 \ud544\uc694 \uc5c6\ub2e4.\n    if sum_before == sum_after:\n        return \"YES\"\n\n    # \uc815\ub82c \uc804 \ubc30\uc5f4\uc758 \ud569\uacfc \uc815\ub82c \ud6c4 \ubc30\uc5f4\uc758 \ud569\uc774 \ub2e4\ub974\uba74 \uc815\ub82c\uc774 \ud544\uc694\ud558\ub2e4.\n    else:\n        return \"NO\"\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] + cards[j] == magicNumber:\n                return [i, j]\n    return []\n"}
{"task_id": "EvoEval/70", "completion": "\n    planet_path = []\n    for planet in planets:\n        if planet in path:\n            planet_path.append(planet)\n    return planet_path\r\n\r\n\r"}
{"task_id": "EvoEval/71", "completion": "\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            result += chr((ord(char) - ascii_offset + n) % 26 + ascii_offset)\n        else:\n            result += char\n    return result\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    fairy_tale = \"\"\n    for i in lst:\n        fairy_tale += i + \" \"\n    return fairy_tale.strip()\n\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Initialize variables\n    n = len(grid)\n    dp = [[0] * (bag_capacity + 1) for _ in range(n + 1)]\n    directions = [(0, 1), (1, 0)]\n\n    # Dynamic programming\n    for i in range(1, n + 1):\n        for j in range(1, bag_capacity + 1):\n            for d in directions:\n                ni, nj = i + d[0], j + d[1]\n                if grid[i - 1][j - 1] == 'T':\n                    dp[i][j] = max(dp[i][j], dp[ni][nj] + math.floor(grid[i - 1][j - 1]))\n                else:\n                    dp[i][j] = max(dp[i][j], dp[ni][nj])\n\n    return dp[n][bag_capacity]\n\n"}
{"task_id": "EvoEval/74", "completion": "\n    mapping = {}\n    for i in range(len(s)):\n        mapping[s[i]] = cipher[i]\n    return mapping\n"}
{"task_id": "EvoEval/75", "completion": "\n    # Initialize the result string\n    result = \"\"\n\n    # Initialize the counter\n    counter = 0\n\n    # Initialize the flag\n    flag = True\n\n    # Iterate over the input string\n    for char in input_str:\n        # If the character is a digit\n        if char.isdigit():\n            # If the flag is True, append the character to the result string\n            if flag:\n                result += char\n            # If the flag is False, append the character to the result string twice\n            else:\n                result += char * 2\n            # Increment the counter\n            counter += 1\n            # If the counter is 3, reset the counter and flip the flag\n            if counter == 3:\n                counter = 0\n                flag = not flag\n        # If the character is not a digit, append it to the result string\n        else:\n            result += char\n\n    # Return the result string\n    return result\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    def __init__(self, name, age, gender, interests):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.interests = interests\n\n    def hello(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old. I am interested in {self.interests}.\"\n\n\nperson = Person(\"Ryan\", 30, \"male\", \"being a good person\")\n"}
{"task_id": "EvoEval/77", "completion": "\n    # \u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u5217\u8868\u6765\u5b58\u50a8\u7ed3\u679c\n    result = []\n\n    # \u904d\u5386\u5e8f\u5217\n    for i in range(len(sequence)):\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u662f'*'\uff0c\u5219\u5c06\u5176\u6dfb\u52a0\u5230\u7ed3\u679c\u5217\u8868\u4e2d\n        if sequence[i] == '*':\n            result.append(sequence[i])\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u662f\u6570\u5b57\uff0c\u5219\u5c06\u5176\u6dfb\u52a0\u5230\u7ed3\u679c\u5217\u8868\u4e2dk\u6b21\n        else:\n            result.extend([sequence[i]] * k)\n\n    # \u8fd4\u56de\u7ed3\u679c\u5217\u8868\n    return result\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    pattern = []\n    for i in range(len(mat)):\n        for j in range(len(mat[i])):\n            if mat[i][j] == 1:\n                pattern.append((i, j))\n    return pattern\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    # Initialize variables\n    max_profit = 0\n    min_price = prices[0]\n\n    # Iterate over the prices\n    for price in prices:\n        # Update minimum price\n        min_price = min(min_price, price)\n\n        # Update maximum profit\n        max_profit = max(max_profit, price - min_price)\n\n    # Calculate fruitful days\n    fruitful_days = max_profit / (prices[1] - prices[0])\n\n    return fruitful_days\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    def __init__(self, name, age, gender, interests):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.interests = interests\n\n    def hello(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old. I am interested in {self.interests}.\"\n\n\nperson = Person(\"Ryan\", 30, \"male\", \"being a good person\")\n"}
{"task_id": "EvoEval/81", "completion": "\n    alien_to_english = {v: k for k, v in alien_dictionary.items()}\n    english_words = []\n    for word in word_list:\n        english_word = ''\n        for alien_char in word:\n            english_word += alien_to_english[alien_char]\n        english_words.append(english_word)\n    return english_words\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    zodiac_signs = {\n        \"\u6c34\u74f6\u5ea7\": [\"0120\", \"0218\"],\n        \"\u53cc\u9c7c\u5ea7\": [\"0219\", \"0320\"],\n        \"\u767d\u7f8a\u5ea7\": [\"0321\", \"0419\"],\n        \"\u91d1\u725b\u5ea7\": [\"0420\", \"0520\"],\n        \"\u53cc\u5b50\u5ea7\": [\"0521\", \"0620\"],\n        \"\u5de8\u87f9\u5ea7\": [\"0621\", \"0722\"],\n        \"\u72ee\u5b50\u5ea7\": [\"0723\", \"0822\"],\n        \"\u5904\u5973\u5ea7\": [\"0823\", \"0922\"],\n        \"\u5929\u79e4\u5ea7\": [\"0923\", \"1022\"],\n        \"\u5929\u874e\u5ea7\": [\"1023\", \"1121\"],\n        \"\u5c04\u624b\u5ea7\": [\"1122\", \"1221\"],\n        \"\u6469\u7faf\u5ea7\": [\"1222\", \"0119\"]\n    }\n\n    elements = {\n        \"\u6c34\u74f6\u5ea7\": \"\u6c34\",\n        \"\u53cc\u9c7c\u5ea7\": \"\u6c34\",\n        \"\u767d\u7f8a\u5ea7\": \"\u706b\",\n        \"\u91d1\u725b\u5ea7\": \"\u571f\",\n        \"\u53cc\u5b50\u5ea7\": \"\u98ce\",\n        \"\u5de8\u87f9\u5ea7\": \"\u571f\",\n        \"\u72ee\u5b50\u5ea7\": \"\u706b\",\n        \"\u5904\u5973\u5ea7\": \"\u571f\",\n        \"\u5929\u79e4\u5ea7\": \"\u98ce\",\n        \"\u5929\u874e\u5ea7\": \"\u6c34\",\n        \"\u5c04\u624b\u5ea7\": \"\u98ce\",\n        \"\u6469\u7faf\u5ea7\": \"\u571f\"\n    }\n\n    birth_date = birthdays.split('-')[1] + birthdays.split('-')[2]\n    for zodiac, dates in zodiac_signs.items():\n        if birth_date >= dates[0] and birth_date <= dates[1]:\n            return elements[zodiac]\n"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    def __init__(self, name, age, gender, interests):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.interests = interests\n\n    def hello(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old. I am interested in {self.interests}.\"\n\n\nperson = Person(\"Ryan\", 30, \"male\", \"being a good person\")\n"}
{"task_id": "EvoEval/85", "completion": "\n    # \uc88c\ud45c \uc815\ubcf4\ub97c \ubc1b\uc544\uc11c \uc88c\ud45c\ub97c \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \ud568\uc218\n    def update_coord(coord, direction):\n        if direction == 'U':\n            return (coord[0], coord[1]-1)\n        elif direction == 'D':\n            return (coord[0], coord[1]+1)\n        elif direction == 'L':\n            return (coord[0]-1, coord[1])\n        elif direction == 'R':\n            return (coord[0]+1, coord[1])\n\n    # \uc88c\ud45c\uac00 \uaca9\uc790 \ub0b4\uc5d0 \uc788\ub294\uc9c0 \ud655\uc778\ud558\ub294 \ud568\uc218\n    def is_in_grid(coord, grid):\n        return 0 <= coord[0] < len(grid[0]) and 0 <= coord[1] < len(grid)\n\n    # \uc88c\ud45c\uac00 \uc548\uc804\ud55c \uacf3\uc778\uc9c0 \ud655\uc778\ud558\ub294 \ud568\uc218\n    def is_safe(coord, grid):\n        return grid[coord[1]][coord[0]] != 'X'\n\n    # \uc8fc\uc5b4\uc9c4 \ubc29\ud5a5\uc73c\ub85c \uc774\ub3d9\ud558\uba70 \uc548\uc804\ud55c \uacf3\uc744 \ucc3e\uc544\ub098\uac00\ub294 \ud568\uc218\n    def find_safe_path(coord, direction, grid):\n        while is_in_grid(coord, grid) and is_safe(coord, grid):\n            coord = update_coord(coord, direction)\n       "}
{"task_id": "EvoEval/86", "completion": "\n    def __init__(self, name, age, gender, interests):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.interests = interests\n\n    def hello(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old. I am interested in {self.interests}.\"\n\n\nperson = Person(\"Ryan\", 30, \"male\", \"being a good person\")\n"}
{"task_id": "EvoEval/87", "completion": "\n    # \uc608\uc678\ucc98\ub9ac\n    if not arr:\n        return []\n\n    # \ubc30\uc5f4\uc758 \ud06c\uae30 \uc800\uc7a5\n    m, n = len(arr), len(arr[0])\n\n    # \ucd9c\ub825 \ubc30\uc5f4 \ucd08\uae30\ud654\n    output = []\n\n    # \ubc29\ud5a5 \uc804\ud658\uc744 \uc704\ud55c \ubc29\ud5a5 \ubc30\uc5f4\n    dr = [0, 1, 0, -1]\n    dc = [1, 0, -1, 0]\n\n    # \ubc29\ud5a5 \uc804\ud658 \uc778\ub371\uc2a4\n    di = 0\n\n    # \ubc29\ubb38 \uccb4\ud06c\ub97c \uc704\ud55c \ubc30\uc5f4\n    visited = [[False]*n for _ in range(m)]\n\n    # \ubc29\ubb38\ud560 \uc704\uce58\n    r, c = 0, 0\n\n    # \ubaa8\ub4e0 \uc6d0\uc18c\ub97c \ubc29\ubb38\ud560 \ub54c\uae4c\uc9c0 \ubc18\ubcf5\n    for _ in range(m*n):\n        output.append(arr[r][c])\n        visited[r][c] = True\n\n        # \ub2e4\uc74c \uc704\uce58 \uacc4\uc0b0\n        nr, nc = r + dr[di], c + dc[di]\n\n        # \ub2e4\uc74c \uc704\uce58\uac00 \ubc94\uc704 \ub0b4\uc5d0 \uc788\uace0 \ubc29\ubb38\ud558\uc9c0 \uc54a\uc558\ub2e4\uba74 \uc774\ub3d9\n        if 0 <= n"}
{"task_id": "EvoEval/88", "completion": "\n    def __init__(self, name, age, gender, interests):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.interests = interests\n\n    def hello(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old. I am interested in {self.interests}.\"\n\n\nperson = Person(\"Ryan\", 30, \"male\", \"being a good person\")\n"}
{"task_id": "EvoEval/89", "completion": "\n    # \u521d\u59cb\u5316\n    aliens.sort(key=lambda x: x[0])\n    res = []\n    for i in range(len(aliens)):\n        if i == 0 or aliens[i][0] - aliens[i-1][1] > ray:\n            res.append([aliens[i][0], aliens[i][1]])\n        else:\n            res[-1][1] = max(res[-1][1], aliens[i][1])\n    return res\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    if not isinstance(s1, str) or not isinstance(s2, str):\n        raise TypeError(\"Both inputs must be strings\")\n    if not s1.isdigit() or not s2.isdigit():\n        raise ValueError(\"Both inputs must be positive integers\")\n\n    return int(s1) * int(s2)\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    # Your code here\n    pass\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    # 1. \uc785\ub825\ubc1b\uc740 \uc218\ub97c \ubb38\uc790\uc5f4\ub85c \ubcc0\ud658\ud558\uc5ec \uac01 \uc790\ub9ac\uc218\ub97c \ub9ac\uc2a4\ud2b8\ub85c \ub9cc\ub4e0\ub2e4.\n    n_list = list(str(n))\n\n    # 2. \uac01 \uc790\ub9ac\uc218\ub97c \ubaa8\ub450 \ub354\ud55c\ub2e4.\n    sum_n = sum(map(int, n_list))\n\n    # 3. \uac01 \uc790\ub9ac\uc218\ub97c \ubaa8\ub450 \uacf1\ud55c\ub2e4.\n    mul_n = 1\n    for i in n_list:\n        mul_n *= int(i)\n\n    # 4. \uac01 \uc790\ub9ac\uc218\ub97c \ubaa8\ub450 \ub354\ud55c \uac12\uacfc \uac01 \uc790\ub9ac\uc218\ub97c \ubaa8\ub450 \uacf1\ud55c \uac12\uc744 \ub9ac\uc2a4\ud2b8\ub85c \ub9cc\ub4e4\uc5b4 \ubc18\ud658\ud55c\ub2e4.\n    return [sum_n, mul_n]\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    # 1. Convert the message to a list of ASCII values\n    ascii_values = [ord(c) for c in message]\n\n    # 2. Create a list to store the encrypted values\n    encrypted_values = []\n\n    # 3. Loop through the ASCII values and encrypt them\n    for i in range(len(ascii_values)):\n        encrypted_values.append((ascii_values[i] + n_values[i % len(n_values)]) % 256)\n\n    # 4. Convert the encrypted values back to characters\n    encrypted_message = ''.join([chr(v) for v in encrypted_values])\n\n    return encrypted_message\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    # Your code here\n    spell_list = []\n    for string in strings:\n        spell_list.append(string.split(' '))\n    return spell_list\n"}
{"task_id": "EvoEval/95", "completion": "\n    # 1. \u8ba1\u7b97\u77e9\u9635\u7684\u884c\u5217\u5f0f\n    det = m[0][0] * m[1][1] - m[0][1] * m[1][0]\n\n    # 2. \u8ba1\u7b97\u77e9\u9635\u7684\u9006\n    inv = [[m[1][1], -m[0][1]], [-m[1][0], m[0][0]]]\n    for i in range(2):\n        for j in range(2):\n            inv[i][j] /= det\n\n    # 3. \u8ba1\u7b97\u77e9\u9635\u7684\u8ff9\n    trace = m[0][0] + m[1][1]\n\n    # 4. \u8ba1\u7b97\u77e9\u9635\u7684\u7279\u5f81\u503c\n    l1 = (m[0][0] + m[1][1] + (m[0][0] - m[1][1])**2 / 4) / 2\n    l2 = (m[0][0] + m[1][1] - (m[0][0] - m[1][1])**2 / 4) / 2\n\n    # 5. \u8ba1\u7b97\u77e9\u9635\u7684\u7279\u5f81\u5411\u91cf\n    v1 = [1, (m[0][0] - l1) / m[0][1]]\n    v2 = [1, (m[1][1] - l2) / m[1][0]]\n\n    return det, inv, trace, l1, l2, v1, v2\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        if i == lst[i]:\n            magic_indices.append(i)\n    return magic_indices\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    def __init__(self, name, age, gender, interests):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.interests = interests\n\n    def hello(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old. I am interested in {self.interests}.\"\n\n\nperson = Person(\"Ryan\", 30, \"male\", \"being a good person\")\n"}
{"task_id": "EvoEval/98", "completion": "\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        return nature_sequence_generator(n - 1, a, b) + nature_sequence_generator(n - 2, a, b)\n\n"}
{"task_id": "EvoEval/99", "completion": "\n    chairs = [i for i in range(n)]\n    for i in range(rounds):\n        if music[i] == 'A':\n            chairs = chairs[1:] + [chairs[0]]\n        elif music[i] == 'B':\n            chairs = [chairs[-1]] + chairs[:-1]\n    return chairs[0] + 1\n\n"}
