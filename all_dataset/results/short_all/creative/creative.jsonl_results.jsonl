{"task_id": "EvoEval/0", "completion": "\n    # \u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u5b57\u5178\uff0c\u5176\u4e2d\u6bcf\u4e2a\u952e\u662f\u4e00\u4e2a\u56fd\u5bb6\uff0c\u503c\u662f\u8be5\u56fd\u5bb6\u5bf9\u5e94\u7684\u90ae\u8d39\n    shipping_costs = {\n        \"USA\": 5.00,\n        \"UK\": 3.50,\n        \"EU\": 4.00,\n        \"Japan\": 5.50,\n        \"China\": 6.00,\n    }\n\n    # \u8ba1\u7b97\u603b\u90ae\u8d39\n    total_shipping_cost = sum(shipping_costs.get(item, 0) for item in items)\n\n    # \u5982\u679c\u4f4d\u7f6e\u4e0d\u5728\u5217\u8868\u4e2d\uff0c\u5219\u8fd4\u56de\u9519\u8bef\u6d88\u606f\n    if location not in shipping_costs.keys():\n        return f\"\u65e0\u6548\u7684\u4f4d\u7f6e\uff1a{location}\"\n\n    return total_shipping_cost + shipping_costs[location]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 153, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/1", "completion": "\n    # \u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u5b57\u5178\uff0c\u5176\u4e2d\u6bcf\u4e2a\u952e\u662f\u4e00\u4e2a\u56fd\u5bb6\uff0c\u503c\u662f\u8be5\u56fd\u5bb6\u5bf9\u5e94\u7684\u90ae\u8d39\n    shipping_costs = {\n        \"USA\": 5.00,\n        \"UK\": 3.50,\n        \"EU\": 4.00,\n        \"Japan\": 5.50,\n        \"China\": 6.00,\n    }\n\n    # \u8ba1\u7b97\u603b\u90ae\u8d39\n    total_shipping_cost = sum(shipping_costs.get(item, 0) for item in items)\n\n    # \u5982\u679c\u4f4d\u7f6e\u4e0d\u5728\u5217\u8868\u4e2d\uff0c\u5219\u8fd4\u56de\u9519\u8bef\u6d88\u606f\n    if location not in shipping_costs.keys():\n        return f\"\u65e0\u6548\u7684\u4f4d\u7f6e\uff1a{location}\"\n\n    return total_shipping_cost + shipping_costs[location]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 153, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/2", "completion": "\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/3", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    result = []\n    for char in input_string:\n        if char.lower() in alphabet:\n            result.append(alphabet.index(char.lower()) + 1)\n        else:\n            result.append(ord(char))\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 138, in <module>\n  File \"<string>\", line 136, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/4", "completion": "\n    max_candle = max(candles)\n    max_candle_index = candles.index(max_candle)\n    candles[max_candle_index] = 0\n    return len(candles)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for r in range(rows):\n        if r % 2 == 0:\n            for c in range(cols):\n                result.append(matrix[r][c])\n        else:\n            for c in range(cols-1, -1, -1):\n                result.append(matrix[r][c])\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 132, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    n = len(grid)\n    m = len(grid[0])\n\n    for i in range(max(0, x-1), min(n, x+2)):\n        for j in range(max(0, y-1), min(m, y+2)):\n            if i == x and j == y:\n                continue\n            grid[i][j] += 1\n    return grid\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 157, in <module>\n  File \"<string>\", line 155, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/7", "completion": "\n    # \u5b9a\u4e49\u4e00\u4e2a\u5b57\u5178\u6765\u5b58\u50a8\u6bcf\u4e2a\u5b57\u6bcd\u7684\u9891\u7387\n    freq_dict = {}\n\n    # \u904d\u5386\u5b57\u7b26\u5e8f\u5217\n    for char in code_sequence:\n        # \u5982\u679c\u5b57\u7b26\u5df2\u7ecf\u5728\u5b57\u5178\u4e2d\uff0c\u589e\u52a0\u5176\u9891\u7387\n        if char in freq_dict:\n            freq_dict[char] += 1\n        # \u5426\u5219\uff0c\u5c06\u5b57\u7b26\u6dfb\u52a0\u5230\u5b57\u5178\u4e2d\uff0c\u5e76\u8bbe\u7f6e\u9891\u7387\u4e3a1\n        else:\n            freq_dict[char] = 1\n\n    # \u627e\u5230\u51fa\u73b0\u6700\u9891\u7e41\u7684\u5b57\u6bcd\n    most_frequent_char = max(freq_dict, key=freq_dict.get)\n\n    # \u8fd4\u56de\u51fa\u73b0\u6700\u9891\u7e41\u7684\u5b57\u6bcd\n    return most_frequent_char\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/8", "completion": "\n    # \u5c06canvas\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n    canvas_str = str(canvas)\n\n    # \u68c0\u67e5canvas\u662f\u5426\u4e3a\u7a7a\n    if not canvas_str:\n        return \"canvas is empty\"\n\n    # \u68c0\u67e5canvas\u662f\u5426\u4e3a\u6570\u5b57\n    if canvas_str.isdigit():\n        return \"canvas is a number\"\n\n    # \u68c0\u67e5canvas\u662f\u5426\u4e3a\u5b57\u7b26\u4e32\n    if isinstance(canvas_str, str):\n        return \"canvas is a string\"\n\n    # \u68c0\u67e5canvas\u662f\u5426\u4e3a\u5217\u8868\n    if isinstance(canvas_str, list):\n        return \"canvas is a list\"\n\n    # \u68c0\u67e5canvas\u662f\u5426\u4e3a\u5143\u7ec4\n    if isinstance(canvas_str, tuple):\n        return \"canvas is a tuple\"\n\n    # \u68c0\u67e5canvas\u662f\u5426\u4e3a\u5b57\u5178\n    if isinstance(canvas_str, dict):\n        return \"canvas is a dictionary\"\n\n    # \u5982\u679ccanvas\u65e2\u4e0d\u662f\u6570\u5b57\u4e5f\u4e0d\u662f\u5b57\u7b26\u4e32\uff0c\u4e5f\u4e0d\u662f\u5217\u8868\u3001\u5143\u7ec4\u3001\u5b57\u5178\uff0c\u5219\u8ba4\u4e3a\u5b83\u662f\u5176\u4ed6\u7c7b\u578b\n    return \"canvas is of a different type\"\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 169, in <module>\n  File \"<string>\", line 167, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/9", "completion": "\n    # \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5c0f\u5199\n    string = string.lower()\n\n    # \u5c06\u5b57\u7b26\u4e32\u5206\u5272\u6210\u5355\u8bcd\n    words = string.split()\n\n    # \u521b\u5efa\u4e00\u4e2a\u7a7a\u5b57\u5178\u6765\u5b58\u50a8\u5355\u8bcd\u9891\u7387\n    word_frequency = {}\n\n    # \u904d\u5386\u5355\u8bcd\n    for word in words:\n        # \u5982\u679c\u5355\u8bcd\u5df2\u7ecf\u5728\u5b57\u5178\u4e2d\uff0c\u589e\u52a0\u5176\u8ba1\u6570\n        if word in word_frequency:\n            word_frequency[word] += 1\n        # \u5982\u679c\u5355\u8bcd\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5c06\u5176\u6dfb\u52a0\u5230\u5b57\u5178\u4e2d\uff0c\u5e76\u8ba1\u6570\u4e3a1\n        else:\n            word_frequency[word] = 1\n\n    return word_frequency\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/10", "completion": "\n    animal_counts = {'a': 0, 'c': 0, 'g': 0, 't': 0}\n    for char in animal_string:\n        if char in animal_counts:\n            animal_counts[char] += 1\n    return list(animal_counts.values())\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/11", "completion": "\n    if location == \"North Pole\":\n        return f\"You're welcome, {fruits[0]}!\"\n    elif location == \"South Pole\":\n        return f\"You're welcome, {fruits[1]}!\"\n    elif location == \"East Pole\":\n        return f\"You're welcome, {fruits[2]}!\"\n    elif location == \"West Pole\":\n        return f\"You're welcome, {fruits[3]}!\"\n    else:\n        return \"You're welcome, but I'm not sure where you're from.\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/12", "completion": "\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/13", "completion": "\n    from collections import Counter\n    count_dict = Counter(elems)\n    return min(count_dict, key=count_dict.get)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 132, in <module>\n  File \"<string>\", line 129, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 18, in find_rarest_element\n    return min(count_dict, key=count_dict.get)\nValueError: min() arg is an empty sequence\n", "passed": false}
{"task_id": "EvoEval/14", "completion": "\n    if not isinstance(name, str):\n        raise TypeError(\"Name must be a string\")\n    \n    if len(name) < 1:\n        raise ValueError(\"Name must be at least 1 character long\")\n    \n    return name\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 131, in <module>\n  File \"<string>\", line 129, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/15", "completion": "\n    # \u68c0\u67e5\u662f\u5426\u6709\u91cd\u590d\u7684\u6570\u5b57\n    if len(set(hand)) != len(hand):\n        return \"\u65e0\u6548\u7684\u624b\u724c\"\n\n    # \u68c0\u67e5\u662f\u5426\u6709\u91cd\u590d\u7684\u82b1\u8272\n    if len(set([card[1] for card in hand])) != len(hand):\n        return \"\u65e0\u6548\u7684\u624b\u724c\"\n\n    # \u5bf9\u624b\u724c\u8fdb\u884c\u6392\u5e8f\n    hand.sort(key=lambda card: card[0])\n\n    # \u68c0\u67e5\u662f\u5426\u6709\u987a\u5b50\n    if len(set([i for i in range(len(hand)-1) if hand[i+1][0] - hand[i][0] == 1])) == len(hand)-1:\n        return \"\u987a\u5b50\"\n\n    # \u68c0\u67e5\u662f\u5426\u6709\u540c\u82b1\n    if len(set([card[1] for card in hand])) == 1:\n        return \"\u540c\u82b1\"\n\n    # \u68c0\u67e5\u662f\u5426\u6709\u4e09\u5f20\u76f8\u540c\u7684\u724c\n    if len([card for card in hand if hand.count(card) == 3]):\n        return \"\u4e09\u5f20\u76f8\u540c\u7684\u724c\"\n\n    # \u68c0\u67e5\u662f\u5426\u6709\u4e24\u5bf9\n    pairs = [card for card in hand if hand.count(card) == 2]\n    if len(pairs) == 2:\n        return \"\u4e24\u5bf9\"\n\n    # \u5982\u679c\u6ca1\u6709\u4ee5\u4e0a\u60c5\u51b5\uff0c\u5219\u662f\u9ad8\u724c\n    return \"\u9ad8\u724c\"\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 170, in <module>\n  File \"<string>\", line 168, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/16", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        sum = 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n            sum += b\n        return sum\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        wizard.heal()\n        while dragon_hp > 0:\n            dragon_hp -= wizard.attack()\n            if dragon_hp <= 0:\n                return f\"{wizard.name} has defeated the dragon!\"\n            wizard.heal()\n            while dragon_hp > 0:\n                dragon_hp -= wizard.attack()\n    return \"The dragon has defeated all the wizards!\"\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 141, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 21, in wizard_battle\n        wizard.heal()\nAttributeError: 'tuple' object has no attribute 'heal'\n", "passed": false}
{"task_id": "EvoEval/18", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 7\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/19", "completion": "\n    vampires = 0\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 'v':\n                vampires += 1\n    return vampires\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/20", "completion": "\n    for i in range(1, n+1):\n        for j in range(n, i, -1):\n            print(' ', end='')\n        for k in range(2*i-1):\n            print('*', end='')\n        print()\n\n\ngenerate_pattern(5)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/21", "completion": "\n    # \u68c0\u67e5\u5355\u8bcd\u662f\u5426\u5728\u7f51\u683c\u4e2d\n    def is_word_in_grid(word, grid):\n        for i in range(len(word)):\n            for j in range(len(word[0])):\n                if word[i][j] != '.' and word[i][j] != grid[i][j]:\n                    return False\n        return True\n\n    # \u68c0\u67e5\u5355\u8bcd\u662f\u5426\u5728\u7f51\u683c\u4e2d\n    def is_word_in_grid(word, grid):\n        for i in range(len(word)):\n            for j in range(len(word[0])):\n                if word[i][j] != '.' and word[i][j] != grid[i][j]:\n                    return False\n        return True\n\n    # \u68c0\u67e5\u5355\u8bcd\u662f\u5426\u5728\u7f51\u683c\u4e2d\n    def is_word_in_grid(word, grid):\n        for i in range(len(word)):\n            for j in range(len(word[0])):\n                if word[i][j] != '.' and word[i][j] != grid[i][j]:\n                    return False\n        return True\n\n    # \u68c0\u67e5\u5355\u8bcd\u662f\u5426\u5728\u7f51\u683c\u4e2d\n    def is_word_in_grid(word, grid):\n        for i in range(len(word)):\n            for j in range(len(word[0])):\n                if word[i][j] != '.' and word[i][j] != grid[i][j]:\n                    return False\n        return True\n\n    # \u68c0\u67e5\u5355\u8bcd\u662f\u5426\u5728\u7f51\u683c\u4e2d\n    def is_word_in_grid(word, grid):\n        for i in range(len(word)):\n            for j in range(len(word[0])):\n                if word[i][j] != '.' and word[i][j] != grid[i][j]:\n                    return False\n        return True\n\n    # \u68c0\u67e5\u5355\u8bcd\u662f\u5426\u5728\u7f51\u683c\u4e2d\n    def is_word_in_grid(word, grid):\n        for i in range(len(word)):", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 69\nimport numpy as np\n    import numpy as np\nIndentationError: expected an indented block after 'for' statement on line 67\n", "passed": false}
{"task_id": "EvoEval/22", "completion": "\n    # \u8ba1\u7b97\u65c5\u884c\u6240\u9700\u7684\u5929\u6570\n    days = t / v\n    return days\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 124, in <module>\n  File \"<string>\", line 122, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_cipher_char(c: str) -> str:\n        if is_prime(ord(c)):\n            return '*'\n        else:\n            return c\n\n    return ''.join(prime_cipher_char(c) for c in s)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 151, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/24", "completion": "\n    # \u5b9a\u4e49\u4e00\u4e2a\u5b57\u5178\uff0c\u5c06\u82f1\u6587\u5355\u8bcd\u6620\u5c04\u5230\u5176\u7ffb\u8bd1\n    alien_language_dictionary = {\n        \"hello\": \"hola\",\n        \"world\": \"mundo\",\n        \"python\": \"python\",\n        \"programming\": \"programaci\u00f3n\"\n    }\n\n    # \u68c0\u67e5\u82f1\u6587\u5355\u8bcd\u662f\u5426\u5728\u5b57\u5178\u4e2d\n    if english_word in alien_language_dictionary:\n        return alien_language_dictionary[english_word]\n    else:\n        return \"\u8be5\u5355\u8bcd\u5728\u963f\u5c14\u5351\u65af\u8bed\u4e2d\u4e0d\u5b58\u5728\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/25", "completion": "\n    # \u5c06\u6587\u672c\u5206\u5272\u6210\u5355\u8bcd\n    words = text.split()\n\n    # \u8ba1\u7b97\u5355\u8bcd\u7684\u9891\u7387\n    frequency = words.count(word)\n\n    return frequency\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/26", "completion": "\n    # \u5b9a\u4e49\u4e00\u4e2a\u961f\u5217\u6765\u5b58\u50a8\u8981\u8bbf\u95ee\u7684\u8282\u70b9\n    queue = []\n\n    # \u5c06\u8d77\u59cb\u8282\u70b9\u52a0\u5165\u961f\u5217\n    queue.append(start)\n\n    # \u521b\u5efa\u4e00\u4e2a\u96c6\u5408\u6765\u5b58\u50a8\u5df2\u8bbf\u95ee\u7684\u8282\u70b9\n    visited = set()\n\n    # \u521b\u5efa\u4e00\u4e2a\u5b57\u5178\u6765\u5b58\u50a8\u7236\u8282\u70b9\n    parent = {}\n\n    while queue:\n        # \u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u7b2c\u4e00\u4e2a\u8282\u70b9\n        current_node = queue.pop(0)\n\n        # \u5982\u679c\u5f53\u524d\u8282\u70b9\u662f\u76ee\u6807\u8282\u70b9\uff0c\u5219\u505c\u6b62\u641c\u7d22\n        if current_node == end:\n            break\n\n        # \u5c06\u5f53\u524d\u8282\u70b9\u6807\u8bb0\u4e3a\u5df2\u8bbf\u95ee\n        visited.add(current_node)\n\n        # \u904d\u5386\u5f53\u524d\u8282\u70b9\u7684\u90bb\u5c45\u8282\u70b9\n        for neighbor in maze[current_node]:\n            # \u5982\u679c\u90bb\u5c45\u8282\u70b9\u672a\u88ab\u8bbf\u95ee\u8fc7\uff0c\u5219\u5c06\u5176\u52a0\u5165\u961f\u5217\u548c\u7236\u8282\u70b9\u5b57\u5178\n            if neighbor not in visited:\n                queue.append(neighbor)\n                parent[neighbor] = current_node\n\n    # \u5982\u679c\u76ee\u6807\u8282\u70b9\u672a\u88ab\u627e\u5230\uff0c\u5219\u8fd4\u56deNone\n    if end not in visited:\n        return None\n\n    # \u4ece\u76ee\u6807\u8282\u70b9\u5f00\u59cb\uff0c\u901a\u8fc7\u7236\u8282\u70b9\u56de\u6eaf\uff0c\u6784\u5efa\u8def\u5f84\n    path = [end]\n    while parent[end] != start:\n        path.append(parent[end])\n        end = parent[end]\n    path.append(start)\n    path.reverse()\n\n    return path\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 94, in <module>\n  File \"<string>\", line 92, in check\n        _check_maze(*inp, candidate(*inp), exp)\n  File \"<string>\", line 45, in pathfinder\n        for neighbor in maze[current_node]:\nTypeError: list indices must be integers or slices, not tuple\n", "passed": false}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/28", "completion": "\n    if income < 0:\n        raise ValueError(\"Income must be a positive number\")\n    if deductions < 0:\n        raise ValueError(\"Deductions must be a non-negative number\")\n    \n    if income <= 20000:\n        return 0.1\n    elif income <= 50000:\n        return 0.2\n    elif income <= 100000:\n        return 0.3\n    else:\n        return 0.4\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/29", "completion": "\n    n = len(s)\n    dp = [[False]*n for _ in range(n)]\n    ans = []\n    \n    for l in range(n):\n        for i in range(n-l):\n            j = i+l\n            if l == 0:\n                dp[i][j] = True\n            elif l == 1:\n                dp[i][j] = s[i] == s[j]\n            else:\n                dp[i][j] = s[i] == s[j] and dp[i+1][j-1]\n            \n            if dp[i][j] and l+1 > len(ans[0]):\n                ans.append(s[i:j+1])\n                \n    return ans\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 157, in <module>\n  File \"<string>\", line 154, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 39, in find_palindrome_substrings\n            if dp[i][j] and l+1 > len(ans[0]):\nIndexError: list index out of range\n", "passed": false}
{"task_id": "EvoEval/30", "completion": "\n    # \u5b9a\u4e49\u4e00\u4e2a\u5806\u6808\u6765\u8ddf\u8e2a\u8def\u5f84\n    stack = [start]\n    # \u5b9a\u4e49\u4e00\u4e2a\u96c6\u5408\u6765\u5b58\u50a8\u5df2\u8bbf\u95ee\u7684\u5355\u5143\u683c\n    visited = set()\n    # \u5b9a\u4e49\u4e00\u4e2a\u96c6\u5408\u6765\u5b58\u50a8\u969c\u788d\u7269\n    obstacles = set()\n    for row in maze:\n        for cell in row:\n            if cell == 1:\n                obstacles.add((row, cell))\n\n    while stack:\n        current_pos = stack[-1]\n        if current_pos == end:\n            return True\n        else:\n            # \u68c0\u67e5\u5f53\u524d\u5355\u5143\u683c\u7684\u76f8\u90bb\u5355\u5143\u683c\n            for direction in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                next_pos = (current_pos[0] + direction[0], current_pos[1] + direction[1])\n                if next_pos not in visited and next_pos not in obstacles and 0 <= next_pos[0] < len(maze) and 0 <= next_pos[1] < len(maze[0]):\n                    stack.append(next_pos)\n                    visited.add(next_pos)\n                    break\n            else:\n                # \u5982\u679c\u6ca1\u6709\u76f8\u90bb\u7684\u53ef\u8bbf\u95ee\u5355\u5143\u683c\uff0c\u5219\u56de\u6eaf\u5230\u4e0a\u4e00\u4e2a\u5355\u5143\u683c\n                stack.pop()\n    return False\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 79, in <module>\n  File \"<string>\", line 77, in check\n        _check_path(*inp, candidate(*inp), exp)\n  File \"<string>\", line 31, in find_path\n                obstacles.add((row, cell))\nTypeError: unhashable type: 'list'\n", "passed": false}
{"task_id": "EvoEval/31", "completion": "\n    if m == 1 or n == 1:\n        return 1\n    return unique_paths(m-1, n) + unique_paths(m, n-1)\n\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/32", "completion": "\n    import random\n    random.seed(seed)\n    random.shuffle(playlist)\n    return playlist\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/33", "completion": "\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/34", "completion": "\n    # \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u6765\u8ba1\u7b97n\u548cm\u7684\u6700\u5927\u516c\u7ea6\u6570\n    def gcd(n, m):\n        if m == 0:\n            return n\n        else:\n            return gcd(m, n % m)\n\n    # \u8ba1\u7b97n\u548cm\u7684\u6700\u5c0f\u516c\u500d\u6570\n    def lcm(n, m):\n        return n * m // gcd(n, m)\n\n    # \u8ba1\u7b97n\u548cm\u7684\u6700\u5927\u516c\u7ea6\u6570\u548c\u6700\u5c0f\u516c\u500d\u6570\n    gcd_val = gcd(n, m)\n    lcm_val = lcm(n, m)\n\n    # \u8fd4\u56de\u7ed3\u679c\n    return gcd_val, lcm_val\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 160, in <module>\n  File \"<string>\", line 158, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/35", "completion": "\n    import re\n\n    pattern = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n\n    if re.match(pattern, email):\n        return True\n    else:\n        return False\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 138, in <module>\n  File \"<string>\", line 136, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/36", "completion": "\n    n = len(xs)\n    if n < 2:\n        raise ValueError(\"List must contain at least two elements\")\n\n    # Initialize the coefficients\n    a = [0]*n\n    b = [0]*n\n\n    # Calculate the coefficients\n    a[0] = 1\n    b[0] = 0\n    a[1] = xs[1]\n    b[1] = xs[0]\n\n    for i in range(2, n):\n        a[i] = xs[i]\n        b[i] = a[i-1] + b[i-1]*xs[i-1]\n\n    return a, b\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/37", "completion": "\n    if not isinstance(s, str):\n        raise TypeError(\"Input should be a string\")\n    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() + s[1:].lower()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":-)\": \"\ud83d\ude42\",\n        \":-(\": \"\ud83d\ude41\",\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\ud83d\ude1e\",\n        \";)\": \"\ud83d\ude09\",\n        \":o)\": \"\ud83d\ude0a\",\n        \":p\": \"\ud83d\ude1c\",\n        \":P\": \"\ud83d\ude1c\",\n        \":|\": \"\ud83d\ude10\",\n        \":\\\\\": \"\ud83d\ude0a\",\n        \":<\": \"\ud83d\ude00\",\n        \":>\": \"\ud83d\ude00\",\n        \":*\": \"\ud83d\ude0a\",\n        \":^)\": \"\ud83d\ude0a\",\n        \":^(\": \"\ud83d\ude1c\",\n        \":&\": \"\ud83d\ude0a\",\n        \":%\": \"\ud83d\ude0a\",\n        \":$\": \"\ud83d\ude0a\",\n        \":@\": \"\ud83d\ude0a\",\n        \":+\": \"\ud83d\ude0a\",\n        \":=)\": \"\ud83d\ude0a\",\n        \":=(\": \"\ud83d\ude1c\",\n        \":^*\": \"\ud83d\ude0a\",\n        \":^*\": \"\ud83d\ude1c\",\n        \":^_^\": \"\ud83d\ude1c\",\n        \":^_^\": \"\ud83d\ude1c\",\n        \":^_/\": \"\ud83d\ude1c\",\n        \":^_/\": \"\ud83d\ude1c\",\n        \":^_|\": \"\ud83d\ude1c\",\n        \":^_|\": \"\ud83d\ude1c\",\n        \":^_8\": \"\ud83d\ude1c\",\n        \":^_8\": \"\ud83d\ude1c\",\n        \":^_|\": \"\ud83d\ude1c\",\n        \":^_|\": \"\ud83d\ude1c\",\n        \":^_8\": \"\ud83d\ude1c\",\n        \":^_8\": \"\ud83d\ude1c\",\n        \":^_/\": \"\ud83d\ude1c\",\n        \":^_/\": \"\ud83d\ude1c\",\n        \":^_|\": \"\ud83d\ude1c\",\n        \":^_|\": \"\ud83d\ude1c\",\n        \":^_8\": \"", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 58\n        \":^_8\": \"\n    \":^_8\": \"\n            ^\nSyntaxError: unterminated string literal (detected at line 58)\n", "passed": false}
{"task_id": "EvoEval/39", "completion": "\n    if n == 1:\n        return s\n    else:\n        return s + asciiArt(n-1, s)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/40", "completion": "\n    # \u5c06\u6240\u6709\u6df7\u5408\u7269\u8f6c\u6362\u4e3a\u5c0f\u5199\n    potions = [potion.lower() for potion in potions]\n    # \u5c06\u76ee\u6807\u8f6c\u6362\u4e3a\u5c0f\u5199\n    target = target.lower()\n\n    # \u68c0\u67e5\u76ee\u6807\u662f\u5426\u5728\u6df7\u5408\u7269\u4e2d\n    if target in potions:\n        return True\n    else:\n        return False\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 141, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 24, in potion_mixing\n    target = target.lower()\nAttributeError: 'int' object has no attribute 'lower'\n", "passed": false}
{"task_id": "EvoEval/41", "completion": "\n    # \u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u7684\u96c6\u5408\u6765\u5b58\u50a8\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\n    visited = set()\n\n    # \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u6765\u5904\u7406\u8282\u70b9\n    def dfs(node):\n        # \u5c06\u5f53\u524d\u8282\u70b9\u6dfb\u52a0\u5230\u5df2\u8bbf\u95ee\u7684\u96c6\u5408\u4e2d\n        visited.add(node)\n\n        # \u6253\u5370\u5f53\u524d\u8282\u70b9\n        print(node)\n\n        # \u904d\u5386\u5f53\u524d\u8282\u70b9\u7684\u90bb\u5c45\u8282\u70b9\n        for nei in arr[node]:\n            # \u5982\u679c\u90bb\u5c45\u8282\u70b9\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\uff0c\u5219\u9012\u5f52\u8c03\u7528dfs\u51fd\u6570\n            if nei not in visited:\n                dfs(nei)\n\n    # \u4ece\u7b2c\u4e00\u4e2a\u8282\u70b9\u5f00\u59cb\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\n    dfs(0)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 166, in <module>\n  File \"<string>\", line 163, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 52, in spider_web_jump\n    dfs(0)\n  File \"<string>\", line 49, in dfs\n                dfs(nei)\n  File \"<string>\", line 46, in dfs\n        for nei in arr[node]:\nIndexError: list index out of range\n", "passed": false}
{"task_id": "EvoEval/42", "completion": "\n    def __init__(self, name, age, gender, occupation):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.occupation = occupation\n\n    def introduce(self):\n        return f\"Hello, my name is {self.name}, I'm {self.age} years old, and I'm a {self.gender}.\"\n\n    def greet(self, other_person):\n        return f\"Hello, {other_person}!\"\n\n\nperson1 = Person(\"John\", 25, \"male\", \"Engineer\")", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 35, in <module>\nperson1 = Person(\"John\", 25, \"male\", \"Engineer\")\nNameError: name 'Person' is not defined\n", "passed": false}
{"task_id": "EvoEval/43", "completion": "\n    # calculate time to travel\n    time = distance / speed\n\n    # calculate fuel used\n    fuel_used = time * fuel\n\n    # calculate weight of spaceship\n    spaceship_weight_after_fuel = spaceship_weight - fuel_used\n\n    # calculate gravity on the planet\n    gravity_on_planet = (spaceship_weight_after_fuel / planet_gravity) - 1\n\n    return gravity_on_planet\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/44", "completion": "\n    def __init__(self, name, age, gender, occupation):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.occupation = occupation\n\n    def introduce(self):\n        return f\"Hello, my name is {self.name}, I'm {self.age} years old, and I'm a {self.gender}.\"\n\n    def greet(self, other_person):\n        return f\"Hello, {other_person}!\"\n\n\nperson1 = Person(\"John\", 25, \"male\", \"Engineer\")", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 31, in <module>\nperson1 = Person(\"John\", 25, \"male\", \"Engineer\")\nNameError: name 'Person' is not defined\n", "passed": false}
{"task_id": "EvoEval/45", "completion": "\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if arr[i][j] == 'C':\n                return (i, j)\n    return None\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 133, in <module>\n  File \"<string>\", line 130, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 16, in find_castle\n        for j in range(len(arr[i])):\nTypeError: object of type 'int' has no len()\n", "passed": false}
{"task_id": "EvoEval/46", "completion": "\n    def __init__(self, name, age, gender, occupation):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.occupation = occupation\n\n    def introduce(self):\n        return f\"Hello, my name is {self.name}, I'm {self.age} years old, and I'm a {self.gender}.\"\n\n    def greet(self, other_person):\n        return f\"Hello, {other_person}!\"\n\n\nperson1 = Person(\"John\", 25, \"male\", \"Engineer\")", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 36, in <module>\nperson1 = Person(\"John\", 25, \"male\", \"Engineer\")\nNameError: name 'Person' is not defined\n", "passed": false}
{"task_id": "EvoEval/47", "completion": "\n    ingredients_needed = []\n    for ingredient, amount in recipe.items():\n        if ingredient in available:\n            ingredients_needed.append((ingredient, amount))\n    return ingredients_needed\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/48", "completion": "\n    def __init__(self, name, age, gender, occupation):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.occupation = occupation\n\n    def introduce(self):\n        return f\"Hello, my name is {self.name}, I'm {self.age} years old, and I'm a {self.gender}.\"\n\n    def greet(self, other_person):\n        return f\"Hello, {other_person}!\"\n\n\nperson1 = Person(\"John\", 25, \"male\", \"Engineer\")", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 40, in <module>\nperson1 = Person(\"John\", 25, \"male\", \"Engineer\")\nNameError: name 'Person' is not defined\n", "passed": false}
{"task_id": "EvoEval/49", "completion": "\n    morse_code_dict = {\n        '.-': 'A', '-.': 'B', '-...': 'C', '--.': 'D', '---': 'E', '.--.': 'F',\n        '--.-': 'G', '---.': 'H', '----': 'I', '.-.': 'J', '...': 'K', '-.-.': 'L',\n        '.-..': 'M', '--': 'N', '-.': 'O', '---': 'P', '.--.': 'Q', '--.-': 'R',\n        '.-.': 'S', '...': 'T', '-': 'U', '..-': 'V', '...-': 'W', '.--': 'X',\n        '-..-': 'Y', '-.--': 'Z', '--..': '1', '----.': '2', '.-.-.': '3', '..-.': '4',\n        '...-': '5', '.--.': '6', '-....': '7', '--...': '8', '---..': '9', '----.': '0'\n    }\n\n    decoded_msg = ''\n    word = ''\n    for char in msg:\n        if char == ' ':\n            decoded_msg += ' '\n            word = ''\n        else:\n            word += char\n            if word in morse_code_dict:\n                decoded_msg += morse_code_dict[word]\n                word = ''\n\n    return decoded_msg\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 168, in <module>\n  File \"<string>\", line 166, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', \n        'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', \n        'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', \n        'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', \n        'Y': '-.--', 'Z': '--..', '0': '-----', '1': '.----', '2': '..---', \n        '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', \n        '8': '---..', '9': '----.', ' ': ' ', '?': '..--..', '/': '-..-.', \n        '(': '-.--.', ')': '-.--.-', '&': '.-...', ':': '---...', ';': '-.-.-.', \n        '=': '-...-', '+': '.-.-.', '-': '-....-', '_': '..--.-', '\"': '.-..-.', \n        '$': '...-..-', '@': '.--.-.'\n    }\n\n    morse_code = ''\n    for char in text.upper():\n        morse_code += morse_code_dict[char] + ' '\n\n    return morse_code\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 154, in <module>\n  File \"<string>\", line 152, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/51", "completion": "\n    encoded_string = \"\"\n    for char in string:\n        if char in list_of_alphabets:\n            encoded_string += str(list_of_alphabets.index(char))\n        else:\n            encoded_string += char\n    return encoded_string\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/52", "completion": "\n    from collections import deque\n\n    def is_valid(order):\n        return order[0] <= n and order[1] <= m\n\n    def is_valid_order(order):\n        return order[0] <= m and order[1] <= n\n\n    def is_valid_bake(bake):\n        return bake[0] <= m and bake[1] <= n\n\n    def is_valid_mix(mix):\n        return mix[0] <= n and mix[1] <= m\n\n    def is_valid_bake_order(order, bake):\n        return order[0] <= m and order[1] <= n and bake[0] <= m and bake[1] <= n\n\n    def is_valid_mix_order(order, mix):\n        return order[0] <= n and order[1] <= m and mix[0] <= m and mix[1] <= n\n\n    def is_valid_bake_mix(bake, mix):\n        return bake[0] <= n and bake[1] <= m and mix[0] <= m and mix[1] <= n\n\n    def is_valid_bake_mix_order(order, bake, mix):\n        return order[0] <= n and order[1] <= m and bake[0] <= n and bake[1] <= m and mix[0] <= m and mix[1] <= n\n\n    bake_orders = deque([])\n    mix_orders = deque([])\n\n    for order in orders:\n        if is_valid_order(order):\n            if is_valid_bake_order(order, bake_orders[0]):\n                bake_orders.appendleft(order)\n            elif is_valid_mix_order(order, mix_orders[0]):\n                mix_orders.appendleft(order)\n        elif is_valid_order(order) and is_valid_bake_order(bake_orders[0], order) and is_valid_mix_order(mix_orders[0], order", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 64\n        elif is_valid_order(order) and is_valid_bake_order(bake_orders[0], order) and is_valid_mix_order(mix_orders[0], order\n    elif is_valid_order(order) and is_valid_bake_order(bake_orders[0], order) and is_valid_mix_order(mix_orders[0], order\n                                                                                                    ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": "EvoEval/53", "completion": "\n    s = s.lower()\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for i in range(len(s)):\n        if s[i] in vowels:\n            result += s[i]*2\n        else:\n            result += s[i]\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/54", "completion": "\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                return (i, j)\n    return None\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 151, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/55", "completion": "\n    encrypted_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                encrypted_message += chr((ord(char) - 65 + shift) % 26 + 65)\n            else:\n                encrypted_message += chr((ord(char) - 97 + shift) % 26 + 97)\n        else:\n            encrypted_message += char\n    return encrypted_message\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', \n        'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', \n        'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', \n        'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', \n        'Y': '-.--', 'Z': '--..', '0': '-----', '1': '.----', '2': '..---', \n        '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', \n        '8': '---..', '9': '----.', ' ': ' ', '?': '..--..', '/': '-..-.', \n        '(': '-.--.', ')': '-.--.-', '&': '.-...', ':': '---...', ';': '-.-.-.', \n        '=': '-...-', '+': '.-.-.', '-': '-....-', '_': '..--.-', '\"': '.-..-.', \n        '$': '...-..-', '@': '.--.-.'\n    }\n\n    morse_code = ''\n    for char in s.upper():\n        morse_code += morse_code_dict[char] + ' '\n\n    return morse_code\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/57", "completion": "\n\n        \"\"\"\n        if magic_spell in menu:\n            return True\n        else:\n            return False\n\n    def check_menu(menu, magic_spell):\n        \"\"\"\n        \"\"\"\n        if magic_spell in menu:\n            return True\n        else:\n            return False\n\n    if check_spell(menu, magic_spell) and check_menu(menu, magic_spell):\n        return \"You can't cast a spell without a menu\"\n    elif check_spell(menu, magic_spell):\n        return \"You can't cast a spell without a menu\"\n    elif check_menu(menu, magic_spell):\n        return \"You can't cast a spell without a menu\"\n    else:\n        return \"The menu doesn't contain the spell\"\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 19\n        \"\"\"\n    \"\"\"\nIndentationError: unexpected indent\n", "passed": false}
{"task_id": "EvoEval/58", "completion": "\n    earth_phrase = earth_phrase.lower()\n    earth_phrase = earth_phrase.replace(\" \", \"\")\n    earth_phrase = earth_phrase.replace(\".\", \"\")\n    earth_phrase = earth_phrase.replace(\",\", \"\")\n    earth_phrase = earth_phrase.replace(\"?\", \"\")\n    earth_phrase = earth_phrase.replace(\"!\", \"\")\n    earth_phrase = earth_phrase.replace(\":\", \"\")\n    earth_phrase = earth_phrase.replace(\";\", \"\")\n    earth_phrase = earth_phrase.replace(\"-\", \"\")\n    earth_phrase = earth_phrase.replace(\"(\", \"\")\n    earth_phrase = earth_phrase.replace(\")\", \"\")\n    earth_phrase = earth_phrase.replace(\"\\\"\", \"\")\n    earth_phrase = earth_phrase.replace(\"\\'\", \"\")\n    earth_phrase = earth_phrase.replace(\"<\", \"\")\n    earth_phrase = earth_phrase.replace(\">\", \"\")\n    earth_phrase = earth_phrase.replace(\"/\", \"\")\n    earth_phrase = earth_phrase.replace(\"@\", \"\")\n    earth_phrase = earth_phrase.replace(\"#\", \"\")\n    earth_phrase = earth_phrase.replace(\"$\", \"\")\n    earth_phrase = earth_phrase.replace(\"%\", \"\")\n    earth_phrase = earth_phrase.replace(\"^\", \"\")\n    earth_phrase = earth_phrase.replace(\"&\", \"\")\n    earth_phrase = earth_phrase.replace(\"*\", \"\")\n    earth_phrase = earth_phrase.replace(\"{\", \"\")\n    earth_phrase = earth_phrase.replace(\"}\", \"\")\n    earth_phrase = earth_phrase.replace(\"[\", \"\")\n    earth_phrase = earth_phrase.replace(\"]\", \"\")\n    earth_phrase = earth_phrase.replace(\"~\", \"\")\n    earth_phrase = earth_phrase.replace(\"`\", \"\")\n    earth_phrase = earth_phrase.replace(\"+\", \"\")\n    earth_phrase = earth_phrase.replace(\"=\", \"\")\n    earth_phrase", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 169, in <module>\n  File \"<string>\", line 167, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/59", "completion": "\n    for key, value in ingredient_dict.items():\n        if key == 'spices':\n            for spice in value:\n                print(f\"Cook {spice} carefully.\")\n        elif key == 'vegetables':\n            for vegetable in value:\n                print(f\"Peel {vegetable} and mash it.\")\n        elif key == 'meats':\n            for meat in value:\n                print(f\"Cut the {meat} into small pieces.\")\n        elif key == 'grains':\n            for grain in value:\n                print(f\"Crush {grain} into small pieces.\")\n        elif key == 'condiments':\n            for condiment in value:\n                print(f\"Add {condiment} to your dish.\")\n        else:\n            print(f\"Cook {key} carefully.\")\n\ningredient_dict = {\n    'spices': ['cumin', 'cayenne', 'salt'],\n    'vegetables': ['carrot', 'broccoli', 'bell peppers'],\n    'meats': ['chicken', 'beef', 'pork'],\n    'grains': ['quinoa', 'rice', 'barley'],\n    'condiments': ['olive oil', 'vinegar', 'salt']\n}\n\ncooking_challenge(ingredient_dict)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 157, in <module>\n  File \"<string>\", line 155, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/60", "completion": "\n    # \u8ba1\u7b97\u7cd6\u679c\u7684\u603b\u6570\n    total_sugar = sum(sugar_locations)\n\n    # \u8ba1\u7b97\u7cd6\u679c\u7684\u603b\u6570\n    total_ants = len(ant_positions)\n\n    # \u5982\u679c\u7cd6\u679c\u7684\u603b\u6570\u5c0f\u4e8e\u7b49\u4e8e\u8682\u8681\u7684\u603b\u6570\uff0c\u5219\u8fd4\u56deTrue\n    if total_sugar <= total_ants:\n        return True\n\n    # \u5982\u679c\u7cd6\u679c\u7684\u603b\u6570\u5927\u4e8e\u8682\u8681\u7684\u603b\u6570\uff0c\u5219\u8fd4\u56deFalse\n    else:\n        return False\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/61", "completion": "\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n\n    if len(s) == 0:\n        return s\n\n    result = \"\"\n    for i in range(len(s)):\n        if i % 2 == 0:\n            result += s[i].upper()\n        else:\n            result += s[i].lower()\n\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/62", "completion": "\n    def __init__(self, name, age, gender, occupation):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.occupation = occupation\n\n    def introduce(self):\n        return f\"Hello, my name is {self.name}, I'm {self.age} years old, and I'm a {self.gender}.\"\n\n    def greet(self, other_person):\n        return f\"Hello, {other_person}!\"\n\n\nperson1 = Person(\"John\", 25, \"male\", \"Engineer\")", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 32, in <module>\nperson1 = Person(\"John\", 25, \"male\", \"Engineer\")\nNameError: name 'Person' is not defined\n", "passed": false}
{"task_id": "EvoEval/63", "completion": "\n    for i in range(p):\n        print(' ' * (p - i) + '*' * (2 * i + 1))\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/64", "completion": "\n    sequence = [start]\n    while sequence[-1] + divisor <= end:\n        sequence.append(sequence[-1] + divisor)\n    return sequence\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 128, in <module>\n  File \"<string>\", line 126, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/65", "completion": "\n    if order in menu:\n        return True\n    else:\n        return False\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 140, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 26, in food_order\n    if order in menu:\nTypeError: unhashable type: 'dict'\n", "passed": false}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_anagram(str1, str2):\n        return sorted(str1) == sorted(str2)\n\n    prime_nums = [num for num in range(2, n+1) if is_prime(num)]\n    anagram_pairs = []\n\n    for i in range(len(prime_nums)):\n        for j in range(i+1, len(prime_nums)):\n            if is_anagram(str(prime_nums[i]), str(prime_nums[j])):\n                anagram_pairs.append((prime_nums[i], prime_nums[j]))\n\n    return anagram_pairs\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/67", "completion": "\n    total_meals = sum(meals.values())\n    total_customers = sum(customers.values())\n    return total_meals / total_customers\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 134, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 20, in meal_calculator\n    total_meals = sum(meals.values())\nTypeError: unsupported operand type(s) for +: 'int' and 'list'\n", "passed": false}
{"task_id": "EvoEval/68", "completion": "\n    n = len(arr)\n    if n == 1:\n        return arr\n    else:\n        mid = n // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n        return merge_sorted_arrays(magical_sorting(left_half), magical_sorting(right_half))\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 147, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 36, in magical_sorting\n        return merge_sorted_arrays(magical_sorting(left_half), magical_sorting(right_half))\nNameError: name 'merge_sorted_arrays' is not defined\n", "passed": false}
{"task_id": "EvoEval/69", "completion": "\n    # \u5c06\u5361\u7247\u5217\u8868\u8f6c\u6362\u4e3a\u96c6\u5408\u4ee5\u53bb\u9664\u91cd\u590d\u9879\n    cards = set(cards)\n\n    # \u68c0\u67e5\u9b54\u6cd5\u6570\u5b57\u662f\u5426\u5728\u5361\u7247\u4e2d\n    if magicNumber in cards:\n        return True\n    else:\n        return False\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 50, in <module>\n  File \"<string>\", line 48, in check\n        _check_product(*inp, candidate(*inp), exp)\n  File \"<string>\", line 39, in _check_product\n        assert isinstance(solution, tuple)\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/70", "completion": "\n    planet_path = []\n    for planet in path:\n        if planet in planets:\n            planet_path.append(planets[planet])\n        else:\n            raise ValueError(f\"{planet} is not a valid planet\")\n    return planet_path\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/71", "completion": "\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = ord('a') if char.islower() else ord('A')\n            ciphered_char = chr((ord(char) - ascii_offset + n) % 26 + ascii_offset)\n            result += ciphered_char\n        else:\n            result += char\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for i in lst:\n        if isinstance(i, str):\n            result.append(i.lower())\n        elif isinstance(i, list):\n            result.append([j.lower() for j in i])\n        else:\n            result.append(i)\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/73", "completion": "\n    def is_valid(grid, x, y, visited):\n        if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]):\n            return False\n        if grid[x][y] == 'X' or visited[x][y]:\n            return False\n        return True\n\n    def dfs(grid, x, y, visited, path, treasure):\n        if not is_valid(grid, x, y, visited):\n            return\n        visited[x][y] = True\n        path.append((x, y))\n        if grid[x][y] == 'T':\n            treasure.append(path)\n        else:\n            dfs(grid, x-1, y, visited, path, treasure)\n            dfs(grid, x+1, y, visited, path, treasure)\n            dfs(grid, x, y-1, visited, path, treasure)\n            dfs(grid, x, y+1, visited, path, treasure)\n        path.pop()\n        visited[x][y] = False\n\n    treasure = []\n    visited = [[False]*len(grid[0]) for _ in range(len(grid))]\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            dfs(grid, i, j, visited, [], treasure)\n    return treasure\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 174, in <module>\n  File \"<string>\", line 172, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/74", "completion": "\n    mapping = {\n        'A': 'E',\n        'B': 'H',\n        'C': 'K',\n        'D': 'O',\n        'E': 'A',\n        'F': 'H',\n        'G': 'K',\n        'H': 'B',\n        'I': 'D',\n        'J': 'E',\n        'K': 'C',\n        'L': 'F',\n        'M': 'G',\n        'N': 'I',\n        'O': 'J',\n        'P': 'L',\n        'Q': 'M',\n        'R': 'N',\n        'S': 'Q',\n        'T': 'P',\n        'U': 'R',\n        'V': 'S',\n        'W': 'T',\n        'X': 'U',\n        'Y': 'V',\n        'Z': 'W',\n        '1': '1',\n        '2': '2',\n        '3': '3',\n        '4': '4',\n        '5': '5',\n        '6': '6',\n        '7': '7',\n        '8': '8',\n        '9': '9',\n        '0': '0',\n    }\n    return ''.join(mapping.get(i, i) for i in s.upper() if i in mapping)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 174, in <module>\n  File \"<string>\", line 172, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/75", "completion": "\n    result = ''\n    i = 0\n    while len(result) < len(input_str):\n        if i % 2 == 0:\n            result += '1'\n        else:\n            result += '2'\n        i += 1\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/76", "completion": "\n    def __init__(self, name, age, gender, occupation):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.occupation = occupation\n\n    def introduce(self):\n        return f\"Hello, my name is {self.name}, I'm {self.age} years old, and I'm a {self.gender}.\"\n\n    def greet(self, other_person):\n        return f\"Hello, {other_person}!\"\n\n\nperson1 = Person(\"John\", 25, \"male\", \"Engineer\")", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 32, in <module>\nperson1 = Person(\"John\", 25, \"male\", \"Engineer\")\nNameError: name 'Person' is not defined\n", "passed": false}
{"task_id": "EvoEval/77", "completion": "\n    # \u5c06\u5e8f\u5217\u8f6c\u6362\u4e3a\u6574\u6570\u5217\u8868\n    sequence = list(map(int, sequence.split()))\n\n    # \u68c0\u67e5\u5e8f\u5217\u662f\u5426\u6709\u91cd\u590d\u5143\u7d20\n    if len(sequence) != len(set(sequence)):\n        return \"\u5e8f\u5217\u5305\u542b\u91cd\u590d\u5143\u7d20\"\n\n    # \u68c0\u67e5\u5e8f\u5217\u662f\u5426\u6709k\u4e2a\u8fde\u7eed\u7684\u5143\u7d20\n    for i in range(len(sequence) - k + 1):\n        if len(set(sequence[i:i+k])) != k:\n            return \"\u5e8f\u5217\u4e2d\u6ca1\u6709k\u4e2a\u8fde\u7eed\u7684\u5143\u7d20\"\n\n    # \u5982\u679c\u6ca1\u6709\u8fd4\u56de\u4efb\u4f55\u5185\u5bb9\uff0c\u5219\u8fd4\u56de\u5e8f\u5217\n    return sequence\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 147, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 24, in magical_sequence\n    sequence = list(map(int, sequence.split()))\nAttributeError: 'list' object has no attribute 'split'\n", "passed": false}
{"task_id": "EvoEval/78", "completion": "\n    rows, cols = len(mat), len(mat[0])\n    for i in range(rows):\n        for j in range(cols):\n            if mat[i][j] == 1:\n                return (i, j)\n    return None\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/79", "completion": "\n    fruitful_days = []\n    for i in range(1, len(prices)):\n        if prices[i] > prices[i-1] and prices[i] > prices[i+1]:\n            fruitful_days.append(i)\n    return fruitful_days\n\nprices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ndays = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/80", "completion": "\n    def __init__(self, name, age, gender, occupation):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.occupation = occupation\n\n    def introduce(self):\n        return f\"Hello, my name is {self.name}, I'm {self.age} years old, and I'm a {self.gender}.\"\n\n    def greet(self, other_person):\n        return f\"Hello, {other_person}!\"\n\n\nperson1 = Person(\"John\", 25, \"male\", \"Engineer\")", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 45, in <module>\nperson1 = Person(\"John\", 25, \"male\", \"Engineer\")\nNameError: name 'Person' is not defined\n", "passed": false}
{"task_id": "EvoEval/81", "completion": "\n    translation = []\n    for word in word_list:\n        if word in alien_dictionary:\n            translation.append(alien_dictionary[word])\n        else:\n            translation.append(word)\n    return translation\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/82", "completion": "\n    zodiac_signs = {\n        \"Aquarius\": [1, 2, 3],\n        \"Pisces\": [4, 5, 6],\n        \"Aries\": [7, 8, 9],\n        \"Taurus\": [10, 11, 12],\n        \"Gemini\": [1, 12, 2],\n        \"Cancer\": [3, 11, 2],\n        \"Leo\": [4, 12, 3],\n        \"Virgo\": [5, 11, 4],\n        \"Libra\": [6, 12, 5],\n        \"Scorpio\": [7, 11, 6],\n        \"Sagittarius\": [8, 12, 7],\n        \"Capricorn\": [9, 12, 8],\n        \"Aquarius\": [10, 1, 9],\n    }\n\n    for sign, days in zodiac_signs.items():\n        if any(birthday in days for birthday in birthdays):\n            return sign\n\n    return \"No match found\"\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 168, in <module>\n  File \"<string>\", line 166, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/83", "completion": "\n    vowels = \"aeiouAEIOU\"\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i, j = i + 1, j - 1\n    return \"\".join(s)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/84", "completion": "\n    def __init__(self, name, age, gender, occupation):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.occupation = occupation\n\n    def introduce(self):\n        return f\"Hello, my name is {self.name}, I'm {self.age} years old, and I'm a {self.gender}.\"\n\n    def greet(self, other_person):\n        return f\"Hello, {other_person}!\"\n\n\nperson1 = Person(\"John\", 25, \"male\", \"Engineer\")", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 38, in <module>\nperson1 = Person(\"John\", 25, \"male\", \"Engineer\")\nNameError: name 'Person' is not defined\n", "passed": false}
{"task_id": "EvoEval/85", "completion": "\n    # \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u6765\u68c0\u67e5\u4e00\u4e2a\u5355\u5143\u683c\u662f\u5426\u662f\u5b89\u5168\u7684\n    def is_safe(x, y, grid):\n        if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]):\n            return False\n        if grid[x][y] == \"D\":\n            return True\n        return False\n\n    # \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u6765\u627e\u5230\u6700\u77ed\u8def\u5f84\n    def find_shortest_path(x, y, grid):\n        if not is_safe(x, y, grid):\n            return float('inf')\n        if x == y == len(grid) - 1:\n            return 0\n        left = find_shortest_path(x, y + 1, grid)\n        down = find_shortest_path(x + 1, y, grid)\n        return min(left, down) + 1\n\n    # \u8c03\u7528\u51fd\u6570\u627e\u5230\u6700\u77ed\u8def\u5f84\n    return find_shortest_path(coord[0], coord[1], grid)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 153, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/86", "completion": "\n    def __init__(self, name, age, gender, occupation):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.occupation = occupation\n\n    def introduce(self):\n        return f\"Hello, my name is {self.name}, I'm {self.age} years old, and I'm a {self.gender}.\"\n\n    def greet(self, other_person):\n        return f\"Hello, {other_person}!\"\n\n\nperson1 = Person(\"John\", 25, \"male\", \"Engineer\")", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 37, in <module>\nperson1 = Person(\"John\", 25, \"male\", \"Engineer\")\nNameError: name 'Person' is not defined\n", "passed": false}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return []\n\n    res = []\n    while arr:\n        res += arr.pop(0)\n        if arr:\n            for row in arr:\n                res.append(row.pop())\n        if arr and arr[::-1]:\n            res += arr.pop()[::-1]\n        if arr:\n            for row in arr[::-1]:\n                res.append(row.pop(0))\n    return res\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/88", "completion": "\n    def __init__(self, name, age, gender, occupation):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.occupation = occupation\n\n    def introduce(self):\n        return f\"Hello, my name is {self.name}, I'm {self.age} years old, and I'm a {self.gender}.\"\n\n    def greet(self, other_person):\n        return f\"Hello, {other_person}!\"\n\n\nperson1 = Person(\"John\", 25, \"male\", \"Engineer\")", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 36, in <module>\nperson1 = Person(\"John\", 25, \"male\", \"Engineer\")\nNameError: name 'Person' is not defined\n", "passed": false}
{"task_id": "EvoEval/89", "completion": "\n    # \u521d\u59cb\u5316\u53d8\u91cf\n    aliens_hit = False\n    aliens_killed = False\n    aliens_killed_by_ray = False\n    aliens_killed_by_ray_and_aliens = False\n    aliens_killed_by_ray_and_aliens_and_ray = False\n    \n    # \u68c0\u67e5\u662f\u5426\u6709\u4efb\u4f55\u654c\u4eba\u88ab\u5c04\u51fb\n    for alien in aliens:\n        if alien.is_hit(ray):\n            aliens_hit = True\n            if alien.is_killed_by_ray():\n                aliens_killed_by_ray = True\n            if alien.is_killed_by_ray() and alien.is_killed_by_aliens():\n                aliens_killed_by_ray_and_aliens = True\n            if alien.is_killed_by_ray() and alien.is_killed_by_aliens() and alien.is_killed_by_ray():\n                aliens_killed_by_ray_and_aliens_and_ray = True\n    \n    # \u6839\u636e\u5c04\u51fb\u60c5\u51b5\u8fd4\u56de\u7ed3\u679c\n    if aliens_hit:\n        if aliens_killed_by_ray:\n            return \"Ray killed some aliens.\"\n        elif aliens_killed_by_ray_and_aliens:\n            return \"Ray killed some aliens and aliens killed the ray.\"\n        elif aliens_killed_by_ray_and_aliens_and_ray:\n            return \"Ray killed some aliens, aliens killed the ray and the ray killed the aliens.\"\n        else:\n            return \"Ray killed all aliens.\"\n    else:\n        return \"No aliens were hit.\"\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 168, in <module>\n  File \"<string>\", line 165, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 33, in space_invaders\n        if alien.is_hit(ray):\nAttributeError: 'int' object has no attribute 'is_hit'\n", "passed": false}
{"task_id": "EvoEval/90", "completion": "\n    if s1 == \"0\" or s2 == \"0\":\n        return \"0\"\n    elif s1 == \"1\" or s2 == \"1\":\n        return s1 * s2\n    else:\n        return \"1\" * len(s1) + s1 * (len(s2) - 1)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/91", "completion": "\n    # \u521d\u59cb\u5316\u53d8\u91cf\n    trajectory = []\n    for i in range(len(spaceship_data)):\n        if i == 0:\n            trajectory.append(spaceship_data[i]['position'])\n        else:\n            trajectory.append(spaceship_data[i]['position'])\n            trajectory.append(spaceship_data[i-1]['position'])\n    return trajectory\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 137, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 22, in spaceship_trajectory\n            trajectory.append(spaceship_data[i]['position'])\nTypeError: tuple indices must be integers or slices, not str\n", "passed": false}
{"task_id": "EvoEval/92", "completion": "\n    for i in range(n):\n        print(\" \" * (n - i - 1) + \"*\" * (2 * i + 1))\n    for i in range(n - 2, -1, -1):\n        print(\" \" * (n - i - 1) + \"*\" * (2 * i + 1))\n\n\npaint_fountain(5)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/93", "completion": "\n    # \u5c06\u6d88\u606f\u8f6c\u6362\u4e3aASCII\u503c\n    ascii_values = [ord(c) for c in message]\n\n    # \u5c06ASCII\u503c\u5faa\u73af\u79fb\u4f4d\n    shifted_values = [(v + n_values) % 256 for v in ascii_values]\n\n    # \u5c06\u79fb\u4f4d\u540e\u7684\u503c\u8f6c\u6362\u56de\u5b57\u7b26\n    shifted_chars = [chr(v) for v in shifted_values]\n\n    return ''.join(shifted_chars)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 145, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 28, in secret_code\n    shifted_values = [(v + n_values) % 256 for v in ascii_values]\n  File \"<string>\", line 28, in <listcomp>\n    shifted_values = [(v + n_values) % 256 for v in ascii_values]\nTypeError: unsupported operand type(s) for +: 'int' and 'list'\n", "passed": false}
{"task_id": "EvoEval/94", "completion": "\n    result = []\n    for string in strings:\n        if string.isalpha():\n            result.append(string.lower())\n        else:\n            result.append(string)\n    return result\n\nstrings = [\"Hello\", \"WORLD\", \"123\", \"PYTHON\", \"3.14\", \"100\"]", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/95", "completion": "\n    # \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u77e9\u9635\n    matrix = [[0 for x in range(m)] for y in range(m)]\n\n    # \u521d\u59cb\u5316\u53d8\u91cf\n    i = 0\n    j = m - 1\n    num = 1\n\n    # \u586b\u5145\u77e9\u9635\n    for k in range(m * m):\n        matrix[i][j] = num\n        num += 1\n        if num > m * m:\n            num = 1\n        if j == m - 1:\n            i += 1\n        elif i == 0:\n            j -= 1\n        elif j == 0:\n            i -= 1\n        elif i == m - 1:\n            j += 1\n\n    return matrix\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 154, in <module>\n  File \"<string>\", line 151, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 17, in matrixMystery\n    matrix = [[0 for x in range(m)] for y in range(m)]\nTypeError: 'list' object cannot be interpreted as an integer\n", "passed": false}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] == 13:\n            magic_indices.append(i)\n    return magic_indices\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/97", "completion": "\n    def __init__(self, name, age, gender, occupation):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.occupation = occupation\n\n    def introduce(self):\n        return f\"Hello, my name is {self.name}, I'm {self.age} years old, and I'm a {self.gender}.\"\n\n    def greet(self, other_person):\n        return f\"Hello, {other_person}!\"\n\n\nperson1 = Person(\"John\", 25, \"male\", \"Engineer\")", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 35, in <module>\nperson1 = Person(\"John\", 25, \"male\", \"Engineer\")\nNameError: name 'Person' is not defined\n", "passed": false}
{"task_id": "EvoEval/98", "completion": "\n    sequence = [a, b]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/99", "completion": "\n    # \u521d\u59cb\u5316\n    chairs = [0]*n\n    for i in range(len(music)):\n        chairs[music[i]-1] += 1\n\n    # \u5f00\u59cb\u6bd4\u8d5b\n    for i in range(rounds):\n        for j in range(n):\n            chairs[j] = chairs[j]//2 + chairs[j]%2\n\n    # \u8fd4\u56de\u7ed3\u679c\n    return chairs\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 149, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 29, in musical_chairs\n    for i in range(len(music)):\nTypeError: object of type 'int' has no len()\n", "passed": false}
