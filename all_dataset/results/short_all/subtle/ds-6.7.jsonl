{"task_id": "EvoEval/0", "completion": "\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] <= threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    pass\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    return round(number, 2)\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    median = sum(numbers) / len(numbers)\n    deviations = [abs(n - median) for n in numbers]\n    mad = sum(deviations) / len(deviations)\n    return mad\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for number in numbers:\n        result.append(number)\n        result.append(delimeter)\n    return result[:-1]\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                raise ValueError(\"Mismatched parentheses\")\n            else:\n                stack.pop()\n                if not stack:\n                    result.append(1)\n                else:\n                    result.append(2)\n    if stack:\n        raise ValueError(\"Mismatched parentheses\")\n    return result\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_numbers = 0\n    product_numbers = 1\n\n    for num in numbers:\n        sum_numbers += num\n        product_numbers *= num\n\n    return (sum_numbers, product_numbers)\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    min_numbers = []\n    min_value = numbers[0]\n    for num in numbers:\n        if num < min_value:\n            min_value = num\n        min_numbers.append(min_value)\n    return min_numbers\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    else:\n        return string + string[::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_string = strings[0]\n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n    return shortest_string\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    # \ucd5c\ub300\uacf5\uc57d\uc218\ub97c \uad6c\ud558\ub294 \ud568\uc218\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    # \ucd5c\uc18c\uacf5\ubc30\uc218\ub97c \uad6c\ud558\ub294 \ud568\uc218\n    def lcm(x, y):\n        return x * y // gcd(x, y)\n\n    return lcm(a, b)\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[:i] for i in range(1, len(string) + 1)]\n"}
{"task_id": "EvoEval/15", "completion": "\n    if n == 0:\n        return \"\"\n    else:\n        return string_sequence(n - 1) + str(n)\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    music_string = music_string.replace('C#', 'c').replace('D#', 'd').replace('F#', 'f').replace('G#', 'g').replace('A#', 'a')\n    music_string = music_string.replace('c0', 'c1').replace('d0', 'd1').replace('e0', 'e1').replace('f0', 'f1').replace('g0', 'g1').replace('a0', 'a1').replace('b0', 'b1')\n    music_string = music_string.replace('C1', 'C2').replace('D1', 'D2').replace('E1', 'E2').replace('F1', 'F2').replace('G1', 'G2').replace('A1', 'A2').replace('B1', 'B2')\n    music_string = music_string.replace('C2', 'C3').replace('D2', 'D3').replace('E2', 'E3').replace('F2', 'F3').replace('G2', 'G3').replace('A2', 'A3').replace('B2', 'B3')\n    music_string = music_string.replace('C3', 'C4').replace('D3', 'D4').replace('E3', 'E4').replace('F3', 'F4').replace('G3', 'G4').replace('A3', 'A4').replace('B3', 'B4')\n    music_string = music_string.replace('C4', 'C5').replace('D4', 'D5').replace('E4', 'E5').replace('F4', 'F5').replace('G4', 'G5').replace('A4', 'A5').replace('B4', 'B5')\n    music_string = music_string.replace('C5', 'C6').replace('D5', 'D6').replace('E5', 'E6').replace('F5', 'F6').replace('G5', 'G6').replace('A5', 'A6"}
{"task_id": "EvoEval/18", "completion": "\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            return count\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    numbers = numbers.split(',')\n    numbers = [int(i) for i in numbers]\n    numbers.sort()\n    return ','.join(str(i) for i in numbers)\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i - 1], numbers[i])\n    return result\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n\n    return [(num - min_val) / range_val for num in numbers]\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string)\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    if n < 2:\n        return n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n"}
{"task_id": "EvoEval/26", "completion": "\n    # \uc911\ubcf5\ub41c \uc22b\uc790\ub97c \uc81c\uac70\ud558\ub294 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uc138\uc694.\n    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case not in ['lower', 'upper']:\n        raise ValueError(\"exclusive_case must be either 'lower' or 'upper'\")\n\n    new_string = ''\n    for char in string:\n        if char.islower() and exclusive_case == 'lower':\n            new_string += char.upper()\n        elif char.isupper() and exclusive_case == 'upper':\n            new_string += char.lower()\n        else:\n            new_string += char\n\n    return new_string\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ''.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return [i for i in l if i > 0]\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    pass\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    l.sort(key=lambda x: x[2])\n    return l\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return list(set(l))\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    min_el = l[0]\n    for el in l:\n        if el < min_el:\n            min_el = el\n    return min_el\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            print('FizzBuzz')\n        elif i % 3 == 0:\n            print('Fizz')\n        elif i % 5 == 0:\n            print('Buzz')\n        else:\n            print(i)\n\n\nfizz_buzz(100)\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_list = [i for i in l if i % 2 == 0]\n    odd_list = [i for i in l if i % 2 != 0]\n    even_list.sort()\n    odd_list.sort()\n    return even_list + odd_list\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    fib_numbers = [0, 1]\n    prime_numbers = []\n    i = 2\n    while len(fib_numbers) < n:\n        fib_numbers.append(fib_numbers[i-1] + fib_numbers[i-2])\n        i += 1\n    for num in fib_numbers:\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                prime_numbers.append(num)\n    return prime_numbers\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    l.sort()\n    left = 0\n    right = len(l) - 1\n    while left < right:\n        sum = l[left] + l[right]\n        if sum > 10:\n            right -= 1\n        elif sum < 10:\n            left += 1\n        else:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    # 1. \uc785\ub825\ubc1b\uc740 \uc22b\uc790\ub9cc\ud07c \ucc28\ub7c9\uc774 \uc6c0\uc9c1\uc778\ub2e4.\n    # 2. \ucc28\ub7c9\uc774 \ucda9\ub3cc\ud558\uba74 \ucda9\ub3cc \ud69f\uc218\ub97c \uc99d\uac00\uc2dc\ud0a8\ub2e4.\n    # 3. \ucda9\ub3cc \ud69f\uc218\ub97c \ubc18\ud658\ud55c\ub2e4.\n\n    # \ucc28\ub7c9\uc758 \uc704\uce58\ub97c \ub098\ud0c0\ub0b4\ub294 \ub9ac\uc2a4\ud2b8\ub97c \uc0dd\uc131\ud55c\ub2e4.\n    cars = [0] * n\n    # \ucda9\ub3cc \ud69f\uc218\ub97c \uc800\uc7a5\ud558\ub294 \ubcc0\uc218\ub97c \uc0dd\uc131\ud55c\ub2e4.\n    collisions = 0\n\n    # \ucc28\ub7c9\uc774 \uc6c0\uc9c1\uc774\ub294 \uac83\uc744 \ubc18\ubcf5\ud55c\ub2e4.\n    for i in range(n):\n        # \ucc28\ub7c9\uc774 \uc6c0\uc9c1\uc778\ub2e4.\n        cars[i] += 1\n        # \ucc28\ub7c9\uc774 \ucda9\ub3cc\ud558\ub294\uc9c0 \ud655\uc778\ud55c\ub2e4.\n        for j in range(i):\n            if cars[j] == cars[i]:\n                # \ucda9\ub3cc\ud558\uba74 \ucda9\ub3cc \ud69f\uc218\ub97c \uc99d\uac00\uc2dc\ud0a8\ub2e4.\n                collisions += 1\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [i+1 for i in l]\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    pairs = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 1:\n                pairs.append((l[i], l[j]))\n    return pairs\n"}
{"task_id": "EvoEval/44", "completion": "\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0: return 0\n    elif n == 1: return 1\n    else:\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return (modp(n-1, p, q) + p) % q\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join([char for char in text if char.lower() in vowels])\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    return [i for i in l if i < t]\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x+y\n"}
{"task_id": "EvoEval/54", "completion": "\n    return set(s0) == set(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket in ['(', '[', '{', '<']:\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            if bracket == ')' and stack[-1] == '(':\n                stack.pop()\n            elif bracket == ']' and stack[-1] == '[':\n                stack.pop()\n            elif bracket == '}' and stack[-1] == '{':\n                stack.pop()\n            elif bracket == '>' and stack[-1] == '<':\n                stack.pop()\n            else:\n                return False\n    return not stack\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) < 2:\n        return True\n    else:\n        return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    return list(set(l1) & set(l2))\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    if n < 2:\n        return None\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -1\n    else:\n        return m + sum_to_n(n - 1, m + 1)\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket in ['(', '[', '{', '<']:\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            if bracket == ')' and stack[-1] == '(':\n                stack.pop()\n            elif bracket == ']' and stack[-1] == '[':\n                stack.pop()\n            elif bracket == '}' and stack[-1] == '{':\n                stack.pop()\n            elif bracket == '>' and stack[-1] == '<':\n                stack.pop()\n            else:\n                return False\n    return not stack\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [xs[i+1]*(i+1) for i in range(len(xs)-1)]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_list = [0, 1]\n        for i in range(2, n+1):\n            fib_list.append(fib_list[i-1] + fib_list[i-2])\n        return fib_list[-1]\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    return (x >> shift) | (x << (32 - shift)) & 0xFFFFFFFF\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    sum = 0\n    for i in s:\n        sum += int(i)\n    return sum\n"}
{"task_id": "EvoEval/67", "completion": "\n    # \u521d\u59cb\u5316\u6c34\u679c\u5206\u5e03\n    fruits = {'apple': 0, 'banana': 0, 'cherry': 0, 'grape': 0, 'orange': 0, 'peach': 0}\n\n    # \u904d\u5386\u5b57\u7b26\u4e32\n    for i in range(n):\n        if s[i] == 'A':\n            fruits['apple'] += 1\n        elif s[i] == 'B':\n            fruits['banana'] += 1\n        elif s[i] == 'C':\n            fruits['cherry'] += 1\n        elif s[i] == 'G':\n            fruits['grape'] += 1\n        elif s[i] == 'O':\n            fruits['orange'] += 1\n        elif s[i] == 'P':\n            fruits['peach'] += 1\n\n    return fruits\n\n"}
{"task_id": "EvoEval/68", "completion": "\n    return [x['name'] for x in arr]\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    def __init__(self, name, age, gender, interests):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.interests = interests\n\n    def hello(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old. I am interested in {self.interests}.\"\n\n\nperson = Person(\"Ryan\", 30, \"male\", \"being a good person\")"}
{"task_id": "EvoEval/70", "completion": "\n    def __init__(self, name, age, gender, interests):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.interests = interests\n\n    def hello(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old. I am interested in {self.interests}.\"\n\n\nperson = Person(\"Ryan\", 30, \"male\", \"being a good person\")"}
{"task_id": "EvoEval/71", "completion": "\n    def __init__(self, name, age, gender, interests):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.interests = interests\n\n    def hello(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old. I am interested in {self.interests}.\"\n\n\nperson = Person(\"Ryan\", 30, \"male\", \"being a good person\")"}
{"task_id": "EvoEval/72", "completion": "\n    def __init__(self, name, age, gender, interests):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.interests = interests\n\n    def hello(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old. I am interested in {self.interests}.\"\n\n\nperson = Person(\"Ryan\", 30, \"male\", \"being a good person\")"}
{"task_id": "EvoEval/73", "completion": "\n    # \uc815\ub82c\n    arr.sort()\n\n    # \ucd5c\uc18c\uac12 \ucc3e\uae30\n    min_val = arr[0]\n\n    # \ucd5c\uc18c\uac12\uc744 \uc81c\uc678\ud55c \ub098\uba38\uc9c0 \uac12\ub4e4\uc758 \ud569\n    sum_val = sum(arr[1:])\n\n    return sum_val - min_val\n\n"}
{"task_id": "EvoEval/74", "completion": "\n    def __init__(self, name, age, gender, interests):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.interests = interests\n\n    def hello(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old. I am interested in {self.interests}.\"\n\n\nperson = Person(\"Ryan\", 30, \"male\", \"being a good person\")"}
{"task_id": "EvoEval/75", "completion": "\n    if a < 2:\n        return False\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    if n == 0:\n        return False\n    if x == 1:\n        return True\n    if x == 0:\n        return False\n    while n % 2 == 0:\n        n = n / 2\n    if n == 1:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    def __init__(self, name, age, gender, interests):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.interests = interests\n\n    def hello(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old. I am interested in {self.interests}.\"\n\n\nperson = Person(\"Ryan\", 30, \"male\", \"being a good person\")"}
{"task_id": "EvoEval/78", "completion": "\n    hex_num = hex(num)[2:]\n    if len(hex_num) % 2 != 0:\n        hex_num = '0' + hex_num\n    return hex_num\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = []\n    while decimal > 0:\n        binary.append(str(decimal % 2))\n        decimal = decimal // 2\n    return ''.join(binary[::-1])\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) % 2 != 0:\n        return False\n    stack = []\n    pairs = {')': '(', ']': '[', '}': '{'}\n    for char in s:\n        if char in pairs:\n            if not stack or stack.pop() != pairs[char]:\n                return False\n        else:\n            stack.append(char)\n    return not stack\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    if grades >= 90:\n        return 'A'\n    elif grades >= 80:\n        return 'B'\n    elif grades >= 70:\n        return 'C'\n    elif grades >= 60:\n        return 'D'\n    else:\n        return 'F'\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    length = len(string)\n    if length in prime_numbers:\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return starts_one_ends(n-1) + starts_one_ends(n-2)\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    # 10\u9032\u6570\u3067\u306e\u6841\u6570\u3092\u6c42\u3081\u308b\n    digit = len(str(N))\n\n    # 10\u9032\u6570\u3067\u306e\u6841\u6570\u304c1\u6841\u306e\u5834\u5408\n    if digit == 1:\n        return N\n\n    # 10\u9032\u6570\u3067\u306e\u6841\u6570\u304c2\u6841\u4ee5\u4e0a\u306e\u5834\u5408\n    else:\n        # 10^(digit-1) \u307e\u3067\u306e\u6841\u6570\u3092\u6c42\u3081\u308b\n        num_digit = 9 * (10 ** (digit - 1))\n\n        # 10^(digit-1) \u307e\u3067\u306e\u6570\u5b57\u306e\u7dcf\u6570\u3092\u6c42\u3081\u308b\n        num_numbers = (N - 10 ** (digit - 1)) // digit + 1\n\n        # 10^(digit-1) \u304b\u3089 N \u307e\u3067\u306e\u6570\u5b57\u306e\u7dcf\u6570\u3092\u6c42\u3081\u308b\n        total_numbers = num_digit * num_numbers\n\n        return total_numbers\n\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst)\n"}
{"task_id": "EvoEval/86", "completion": "\n    n = len(s)\n    half = n // 2\n    return s[half:] + s[:half]\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    for i in lst:\n        if i[0] == x:\n            return i\n    return None\n"}
{"task_id": "EvoEval/88", "completion": "\n    return sorted(array)\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    # your code here\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                encrypted_string += chr((ord(char) - 97 + 1) % 26 + 97)\n            else:\n                encrypted_string += chr((ord(char) - 65 + 1) % 26 + 65)\n        else:\n            encrypted_string += char\n    return encrypted_string\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    # 1. \uc624\ub984\ucc28\uc21c\uc73c\ub85c \uc815\ub82c\n    lst.sort()\n\n    # 2. \uc815\ub82c\ub41c \ub9ac\uc2a4\ud2b8\ub97c \uc21c\ud68c\ud558\uba70 \ub2e4\uc74c \ud070 \uc218\ub97c \ucc3e\ub294\ub2e4.\n    for i in range(len(lst) - 1):\n        if lst[i] < lst[i + 1]:\n            return lst[i + 1]\n\n    # 3. \ub9cc\uc57d \ub2e4\uc74c \ud070 \uc218\uac00 \uc5c6\ub2e4\uba74, \uc81c\uc77c \ud070 \uc218\ub294 \uac00\uc7a5 \uc791\uc740 \uc218\uc774\ub2e4.\n    return lst[0]\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    # 1. \uc785\ub825\ubc1b\uc740 \ubb38\uc790\uc5f4\uc744 \ubaa8\ub450 \uc18c\ubb38\uc790\ub85c \ubcc0\ud658\n    S = S.lower()\n\n    # 2. \ubb38\uc790\uc5f4\uc758 \uae38\uc774\ub97c \uad6c\ud55c\ub2e4.\n    length = len(S)\n\n    # 3. \ubb38\uc790\uc5f4\uc758 \uc911\uac04 \uae00\uc790\ub97c \uad6c\ud55c\ub2e4.\n    mid = length // 2\n\n    # 4. \ubb38\uc790\uc5f4\uc758 \uc911\uac04 \uae00\uc790\ub97c \uae30\uc900\uc73c\ub85c \uc55e\ub4a4\ub85c \ube44\uad50\ud55c\ub2e4.\n    for i in range(mid):\n        if S[i] != S[-1 - i]:\n            return False\n\n    # 5. \ubaa8\ub4e0 \uae00\uc790\uac00 \uac19\uc740 \uacbd\uc6b0 True\ub97c \ubc18\ud658\ud55c\ub2e4.\n    return True\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    def __init__(self, name, age, gender, interests):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.interests = interests\n\n    def hello(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old. I am interested in {self.interests}.\"\n\n\nperson = Person(\"Ryan\", 30, \"male\", \"being a good person\")"}
{"task_id": "EvoEval/93", "completion": "\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            ascii_val = ord(char)\n            if char.isupper():\n                encoded_message += chr((ascii_val - 65 + 1) % 26 + 65)\n            else:\n                encoded_message += chr((ascii_val - 97 + 1) % 26 + 97)\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    return [i for i in lst if i % 2 == 0]\n"}
{"task_id": "EvoEval/95", "completion": "\n    for key in dict.keys():\n        if not isinstance(key, str):\n            raise ValueError(\"All keys in the dictionary must be strings.\")\n        if not key.islower():\n            raise ValueError(\"All keys in the dictionary must be lowercase.\")\n    return True\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    if n < 0:\n        return []\n    else:\n        return list(range(1, n+1))\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    return a * b\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    return sum(1 for c in s if c.isupper())\n\n"}
{"task_id": "EvoEval/99", "completion": "\n    def __init__(self, name, age, gender, interests):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.interests = interests\n\n    def hello(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old. I am interested in {self.interests}.\"\n\n\nperson = Person(\"Ryan\", 30, \"male\", \"being a good person\")"}
