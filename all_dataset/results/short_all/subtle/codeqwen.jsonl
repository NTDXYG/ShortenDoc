{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    result = []\n    current_group = \"\"\n    depth = 0\n\n    for char in paren_string:\n        if char == \"(\":\n            depth += 1\n        elif char == \")\":\n            depth -= 1\n\n        current_group += char\n\n        if depth == 0 and current_group:\n            result.append(current_group)\n            current_group = \"\"\n\n    return result\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    return round(number, -int(abs(number)) - 1)\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    numbers.sort()\n    n = len(numbers)\n    median = numbers[n // 2] if n % 2 != 0 else (numbers[n // 2 - 1] + numbers[n // 2]) / 2\n    mad = [abs(x - median) for x in numbers]\n    return median(mad)\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    depth = 0\n    depths = []\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n            depths.append(depth)\n        elif char == ')':\n            depth -= 1\n    return depths\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_numbers = sum(numbers)\n    product_numbers = 1\n    for number in numbers:\n        product_numbers *= number\n    return sum_numbers, product_numbers\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    min_so_far = float('inf')\n    min_values = []\n    for num in numbers:\n        min_so_far = min(min_so_far, num)\n        min_values.append(min_so_far)\n    return min_values\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    else:\n        return string + string[::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_string = strings[0]\n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n    return shortest_string\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    return abs(a*b) // greatest_common_divisor(a, b)\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    if n <= 0:\n        return \"\"\n    elif n == 1:\n        return \"0\"\n    else:\n        sequence = string_sequence(n - 1)\n        if sequence[-1] == '0':\n            sequence += '1'\n        else:\n            sequence += '0'\n        return sequence\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n"}
{"task_id": "EvoEval/17", "completion": "\n    # Split the string into individual notes\n    notes = music_string.split()\n    \n    # Initialize an empty list to store the duration of each note\n    durations = []\n    \n    # Define a dictionary to map note names to their durations\n    note_durations = {\n        'A': 4,\n        'A#': 4,\n        'B': 4,\n        'C': 4,\n        'C#': 4,\n        'D': 4,\n        'D#': 4,\n        'E': 4,\n        'F': 4,\n        'F#': 4,\n        'G': 4,\n        'G#': 4,\n        'R': 0,  # Rest\n    }\n    \n    # Iterate over each note in the list\n    for note in notes:\n        # If the note is a rest, add its duration to the list\n        if note == 'R':\n            durations.append(note_durations[note])\n        # If the note is a note, add its duration to the list\n        else:\n            durations.append(note_durations[note[0]])\n    \n    # Return the list of durations\n    return durations\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    numbers = numbers.split()\n    numbers = [int(num) for num in numbers]\n    numbers.sort()\n    return ' '.join(str(num) for num in numbers)\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    closest_pair = (numbers[0], numbers[1])\n    min_distance = abs(numbers[0] - numbers[1])\n    \n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < min_distance:\n                min_distance = abs(numbers[i] - numbers[j])\n                closest_pair = (numbers[i], numbers[j])\n                \n    return closest_pair\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    count = 0\n    for i in string:\n        count += 1\n    return count\n"}
{"task_id": "EvoEval/24", "completion": "\n    if n == 1:\n        return 1\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return ''.join([char.upper() if char.islower() else char.lower() for char in string])\n    elif exclusive_case == 'upper':\n        return ''.join([char.upper() if char.isupper() else char.lower() for char in string])\n    else:\n        return ''.join([char.upper() if char.islower() else char.lower() for char in string])\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ''.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return [i for i in l if i > 0]\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) == 1:\n        return -xs[0]\n    else:\n        return find_zero(xs[1:]) - xs[0] / poly(xs[1:], find_zero(xs[1:]))\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    # Create a new list to store the elements at indices divisible by 3\n    third_indices = [l[i] for i in range(len(l)) if i % 3 == 0]\n    \n    # Sort the third_indices list\n    third_indices.sort()\n    \n    # Create a new list to store the sorted elements\n    sorted_list = []\n    \n    # Iterate over the original list and replace the elements at indices divisible by 3 with the sorted elements\n    for i in range(len(l)):\n        if i % 3 == 0:\n            sorted_list.append(third_indices.pop(0))\n        else:\n            sorted_list.append(l[i])\n    \n    return sorted_list\n"}
{"task_id": "EvoEval/34", "completion": "\n    unique_list = []\n    for i in l:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n"}
{"task_id": "EvoEval/35", "completion": "\n    min_val = l[0]\n    for i in l:\n        if i < min_val:\n            min_val = i\n    return min_val\n"}
{"task_id": "EvoEval/36", "completion": "\n    for i in range(1, n + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            print(\"FizzBuzz\")\n        elif i % 3 == 0:\n            print(\"Fizz\")\n        elif i % 5 == 0:\n            print(\"Buzz\")\n        else:\n            print(i)\n\n\nfizz_buzz(15)"}
{"task_id": "EvoEval/37", "completion": "\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    for i in range(len(even_indices)):\n        l[i * 2] = even_indices[i]\n    return l\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(num):\n        a, b = 0, 1\n        for _ in range(num):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while True:\n        fib_num = fibonacci(i)\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num\n        i += 1\n"}
{"task_id": "EvoEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n"}
{"task_id": "EvoEval/41", "completion": "\n    # Initialize the number of collisions to 0\n    collisions = 0\n    \n    # Iterate over each car in the race\n    for i in range(n):\n        # Iterate over each car that could collide with the current car\n        for j in range(i+1, n):\n            # If the cars are moving in opposite directions, they will collide\n            if (i % 2 == 0 and j % 2 == 1) or (i % 2 == 1 and j % 2 == 0):\n                collisions += 1\n    \n    return collisions\n"}
{"task_id": "EvoEval/42", "completion": "\n    for i in range(len(l)):\n        l[i] += 1\n    return l\n"}
{"task_id": "EvoEval/43", "completion": "\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 1:\n                return True\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10\")\n    \n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        a, b, c, d = 0, 1, 1, 2\n        for i in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n"}
{"task_id": "EvoEval/47", "completion": "\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]\n"}
{"task_id": "EvoEval/49", "completion": "\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return (modp(n // 2, p, q) ** 2) % q\n    else:\n        return (modp(n - 1, p, q) * p) % q\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    return ''.join([char for char in text if char in consonants])\n"}
{"task_id": "EvoEval/52", "completion": "\n    return [i for i in l if i < t]\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y\n"}
{"task_id": "EvoEval/54", "completion": "\n    return set(s0) == set(s1)\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/57", "completion": "\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    common_elements = []\n    for element in l1:\n        if element in l2 and element not in common_elements:\n            common_elements.append(element)\n    return common_elements\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    if n <= 1:\n        return None\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    i = 5\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        if n % (i + 2) == 0:\n            return i + 2\n        i += 6\n    return n\n"}
{"task_id": "EvoEval/60", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return m + sum_to_n(n - 1, m + 1)\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [xs[i] * i for i in range(1, len(xs))]\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"}
{"task_id": "EvoEval/64", "completion": "\n    count = 0\n    for char in s:\n        if char in 'aeiou':\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    if not isinstance(x, str):\n        raise ValueError(\"Input must be a string.\")\n    if not isinstance(shift, int):\n        raise ValueError(\"Shift must be an integer.\")\n    if shift < 0:\n        raise ValueError(\"Shift must be a non-negative integer.\")\n    if shift > len(x):\n        raise ValueError(\"Shift must be less than or equal to the length of the string.\")\n    \n    shift = shift % len(x)  # Handle cases where shift is greater than the string length\n    return x[-shift:] + x[:-shift]\n"}
{"task_id": "EvoEval/66", "completion": "\n    sum = 0\n    for i in range(len(s)):\n        sum += int(s[i])\n    return sum\n"}
{"task_id": "EvoEval/67", "completion": "\n    fruit_dict = {\"apple\":0, \"banana\":0, \"cherry\":0}\n    for fruit in s.split():\n        fruit_dict[fruit] += 1\n    return fruit_dict[\"apple\"] + fruit_dict[\"banana\"] + fruit_dict[\"cherry\"] == n\n"}
{"task_id": "EvoEval/68", "completion": "\n    return [item for sublist in arr for item in sublist]\n"}
{"task_id": "EvoEval/69", "completion": "\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n"}
{"task_id": "EvoEval/70", "completion": "\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n"}
{"task_id": "EvoEval/71", "completion": "\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n"}
{"task_id": "EvoEval/72", "completion": "\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Initialize the minimum change to be the maximum possible integer\n    min_change = float('inf')\n    \n    # Iterate over the array\n    for i in range(len(arr)):\n        # Iterate over the array again\n        for j in range(len(arr)):\n            # If the indices are not the same\n            if i != j:\n                # Calculate the absolute difference between the two elements\n                change = abs(arr[i] - arr[j])\n                # Update the minimum change if the current change is smaller\n                min_change = min(min_change, change)\n    \n    # Return the minimum change\n    return min_change\n"}
{"task_id": "EvoEval/74", "completion": "\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    if a <= 1:\n        return False\n    if a == 2:\n        return True\n    if a % 2 == 0:\n        return False\n    i = 3\n    while i * i <= a:\n        if a % i == 0:\n            return False\n        i += 2\n    return True\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return n == 1\n    if n <= 1:\n        return False\n    while n % x == 0:\n        n /= x\n    return n == 1\n"}
{"task_id": "EvoEval/77", "completion": "\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n"}
{"task_id": "EvoEval/78", "completion": "\n    hex_num = hex(num)[2:]\n    hex_num = hex_num.upper()\n    return hex_num\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return binary\n"}
{"task_id": "EvoEval/80", "completion": "\n    # Check if the string is empty\n    if not s:\n        return False\n    \n    # Check if the string contains only one character\n    if len(s) == 1:\n        return True\n    \n    # Check if the string contains only one type of character\n    if len(set(s)) == 1:\n        return False\n    \n    # Check if the string contains any repeated characters\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return False\n    \n    # Check if the string contains any repeated characters in a substring of length 3\n    for i in range(len(s) - 2):\n        if len(set(s[i:i + 3])) < 3:\n            return False\n    \n    # If all checks pass, the string is happy\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    numerical_grades = []\n    for grade in grades:\n        if grade == 'A':\n            numerical_grades.append(4.0)\n        elif grade == 'A-':\n            numerical_grades.append(3.7)\n        elif grade == 'B+':\n            numerical_grades.append(3.3)\n        elif grade == 'B':\n            numerical_grades.append(3.0)\n        elif grade == 'B-':\n            numerical_grades.append(2.7)\n        elif grade == 'C+':\n            numerical_grades.append(2.3)\n        elif grade == 'C':\n            numerical_grades.append(2.0)\n        elif grade == 'C-':\n            numerical_grades.append(1.7)\n        elif grade == 'D+':\n            numerical_grades.append(1.3)\n        elif grade == 'D':\n            numerical_grades.append(1.0)\n        elif grade == 'D-':\n            numerical_grades.append(0.7)\n        elif grade == 'E':\n            numerical_grades.append(0.0)\n    return numerical_grades\n"}
{"task_id": "EvoEval/82", "completion": "\n    # Check if the length of the string is a prime number\n    if len(string) < 2:\n        return False\n    for i in range(2, int(len(string) ** 0.5) + 1):\n        if len(string) % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n < 10:\n        return False\n    elif n < 100:\n        return n % 10 == 1\n    else:\n        return n % 10 == 1 and n % 100 // 10 == 1\n"}
{"task_id": "EvoEval/84", "completion": "\n    if N == 1:\n        return 1\n    else:\n        return N * solve(N-1)\n"}
{"task_id": "EvoEval/85", "completion": "\n    total = 0\n    for i in lst:\n        total += i\n    return total\n"}
{"task_id": "EvoEval/86", "completion": "\n    # Create a list of characters from the string\n    chars = list(s)\n    \n    # Create a list to hold the shuffled characters\n    shuffled_chars = []\n    \n    # While there are characters left in the original list,\n    # pick a random character and remove it from the original list\n    while chars:\n        import random\n        index = random.randint(0, len(chars) - 1)\n        shuffled_chars.append(chars.pop(index))\n    \n    # Join the shuffled characters into a string and return it\n    return ''.join(shuffled_chars)\n"}
{"task_id": "EvoEval/87", "completion": "\n    for i in range(len(lst)):\n        if lst[i] == x:\n            return i\n    return -1\n"}
{"task_id": "EvoEval/88", "completion": "\n    # Check if the array is empty\n    if len(array) == 0:\n        return array\n    \n    # Check if the array contains only one element\n    if len(array) == 1:\n        return array\n    \n    # Check if the array contains only two elements\n    if len(array) == 2:\n        if array[0] > array[1]:\n            return [array[1], array[0]]\n        else:\n            return array\n    \n    # Check if the array contains three elements\n    if len(array) == 3:\n        if array[0] > array[1]:\n            if array[0] > array[2]:\n                if array[1] > array[2]:\n                    return [array[2], array[0], array[1]]\n                else:\n                    return [array[1], array[2], array[0]]\n            else:\n                return [array[0], array[2], array[1]]\n        else:\n            if array[1] > array[2]:\n                if array[0] > array[2]:\n                    return [array[2], array[1], array[0]]\n                else:\n                    return [array[1], array[0], array[2]]\n            else:\n                return [array[0], array[1], array[2]]\n    \n    # Check if the array contains more than three elements\n    if len(array) > 3:\n        # Find the smallest element\n        smallest = min(array)\n        # Find the largest element\n        largest = max(array)\n        # Remove the smallest and largest elements from the array\n        array = [x for x in array if x != smallest and x != largest]\n        # Sort the remaining elements\n        array = sort_array(array)\n        # Insert the smallest and largest elements back into the array\n        array.insert(0, smallest)\n        array.append(largest)\n        return array\n"}
{"task_id": "EvoEval/89", "completion": "\n    encrypted_s = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 3\n            if char.islower():\n                encrypted_s += chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                encrypted_s += chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n        else:\n            encrypted_s += char\n    return encrypted_s\n"}
{"task_id": "EvoEval/90", "completion": "\n    # Create a list to store the next largest numbers\n    next_largest_numbers = []\n    \n    # Create a copy of the list to sort\n    sorted_lst = lst[:]\n    sorted_lst.sort()\n    \n    # Iterate over the original list\n    for num in lst:\n        # Find the index of the next largest number\n        index = sorted_lst.index(num)\n        \n        # If the next largest number is the last number in the sorted list,\n        # set the next largest number to None\n        if index == len(sorted_lst) - 1:\n            next_largest_numbers.append(None)\n        else:\n            # Otherwise, set the next largest number to the next number in the sorted list\n            next_largest_numbers.append(sorted_lst[index + 1])\n    \n    return next_largest_numbers\n"}
{"task_id": "EvoEval/91", "completion": "\n    # Check if the string contains any of the boredom indicators\n    if \"I\" in S and \"am\" in S and \"tired\" in S:\n        return True\n    elif \"I\" in S and \"feel\" in S and \"bored\" in S:\n        return True\n    elif \"I\" in S and \"hate\" in S and \"this\" in S:\n        return True\n    elif \"I\" in S and \"want\" in S and \"to\" in S and \"go\" in S:\n        return True\n    elif \"I\" in S and \"want\" in S and \"to\" in S and \"sleep\" in S:\n        return True\n    elif \"I\" in S and \"want\" in S and \"to\" in S and \"rest\" in S:\n        return True\n    elif \"I\" in S and \"want\" in S and \"to\" in S and \"quit\" in S:\n        return True\n    elif \"I\" in S and \"want\" in S and \"to\" in S and \"leave\" in S:\n        return True\n    elif \"I\" in S and \"want\" in S and \"to\" in S and \"exit\" in S:\n        return True\n    elif \"I\" in S and \"want\" in S and \"to\" in S and \"quit\" in S:\n        return True\n    elif \"I\" in S and \"want\" in S and \"to\" in S and \"leave\" in S:\n        return True\n    elif \"I\" in S and \"want\" in S and \"to\" in S and \"exit\" in S:\n        return True\n    elif \"I\" in S and \"want\" in S and \"to\" in S and \"quit\" in S:\n        return True\n    elif \"I\" in S and \"want\" in S and \"to\" in S and \"leave\" in S:\n        return True\n    elif \"I\" in S and \"want\" in S and \"to\" in S and \"exit\" in S:\n        return True"}
{"task_id": "EvoEval/92", "completion": "\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n"}
{"task_id": "EvoEval/93", "completion": "\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            shift = 3\n            if char.islower():\n                encoded_message += chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                encoded_message += chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    # Create a dictionary to store the frequency of each element\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Create a list to store the elements that appear more than once\n    duplicates = []\n    for num, freq in freq_dict.items():\n        if freq > 1:\n            duplicates.append(num)\n    \n    # Return the list of duplicates\n    return duplicates\n"}
{"task_id": "EvoEval/95", "completion": "\n    if not isinstance(dict, dict):\n        return False\n    \n    lower_case = 0\n    upper_case = 0\n    \n    for key in dict.keys():\n        if key.islower():\n            lower_case += 1\n        elif key.isupper():\n            upper_case += 1\n        else:\n            return False\n    \n    if lower_case == len(dict) or upper_case == len(dict):\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/96", "completion": "\n    if n == 0:\n        return []\n    else:\n        return count_up_to(n - 1) + [n]\n"}
{"task_id": "EvoEval/97", "completion": "\n    return a * b\n"}
{"task_id": "EvoEval/98", "completion": "\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n"}
