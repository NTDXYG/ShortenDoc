{"task_id": "valid/0", "completion": "\n    # 1. \ubd88\uc6a9\uc5b4 \uc81c\uac70\n    # 2. \ud1a0\ud070\ud654\n    # 3. \ud1a0\ud070 \uc804\ucc98\ub9ac\n    # 4. \ubca1\ud130\ud654\n    # 5. \ubd84\ub958\n    pass\n\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n\n"}
{"task_id": "valid/3", "completion": "\n    return sorted(instruments, key=lambda x: (x['family'], x['type'], x['model']))\n\n"}
{"task_id": "valid/4", "completion": "\n    return json.loads(json_string)\n"}
{"task_id": "valid/5", "completion": "\n    # Check if n is divisible by 10\n    if n % 10 != 0:\n        return False\n\n    # Convert n to a string and split into a list of digits\n    digits = [int(d) for d in str(n)]\n\n    # Check if the sum of the digits is divisible by 3\n    if sum(digits) % 3 != 0:\n        return False\n\n    return True\n\n"}
{"task_id": "valid/6", "completion": "\n    if n == 1:\n        return 0\n    if n == base:\n        return 1\n    if n < base:\n        return -1\n\n    log_val = 0\n    while n > base:\n        n /= base\n        log_val += 1\n\n    return log_val\n\n"}
{"task_id": "valid/7", "completion": "\n    parsed = json.loads(json_str)\n    pprint.pprint(parsed)\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace('{' + key + '}', str(value))\n    return template\n\n"}
{"task_id": "valid/10", "completion": "\n    return len(set(string)) == len(string)\n\n"}
{"task_id": "valid/11", "completion": "\n    date_object = datetime.strptime(date_string, \"%Y-%m-%d\")\n    new_date_object = date_object + timedelta(days=days)\n    return new_date_object.strftime(\"%Y-%m-%d\")\n\n"}
{"task_id": "valid/12", "completion": "\n    return text.replace(\" \", \"\")\n\n"}
{"task_id": "valid/13", "completion": "\n    text = text.lower()\n    text = ''.join(c for c in text if c not in string.punctuation)\n    text = ' '.join(text.split())\n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    pattern = r'\\b(' + word1 + r'|' + word2 + r')\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return matches\n\n"}
{"task_id": "valid/15", "completion": "\n    return sum(array)\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    lines = comment.split('\\n')\n    for line in lines:\n        if line.startswith('--'):\n            line = line.replace('--', '')\n            line = line.strip()\n            if '=' in line:\n                key, value = line.split('=')\n                key = key.strip()\n                value = value.strip()\n                settings[key] = value\n    return settings\n\n"}
{"task_id": "valid/17", "completion": "\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Initialize an empty list to store the disassembled words\n    disassembled_words = []\n\n    # Loop through each word\n    for word in words:\n        # If the word is a number, convert it to an integer\n        if word.isdigit():\n            word = int(word)\n\n        # If the word is a float, convert it to a float\n        elif word.replace('.', '', 1).isdigit():\n            word = float(word)\n\n        # If the word is a boolean, convert it to a boolean\n        elif word.lower() in ['true', 'false']:\n            word = word.lower() == 'true'\n\n        # If the word is a string, remove the quotes\n        elif word.startswith(\"'\") and word.endswith(\"'\"):\n            word = word[1:-1]\n\n        # If the word is a list, convert it to a list\n        elif word.startswith(\"[\") and word.endswith(\"]\"):\n            word = word[1:-1].split(\",\")\n\n        # If the word is a tuple, convert it to a tuple\n        elif word.startswith(\"(\") and word.endswith(\")\"):\n            word = tuple(word[1:-1].split(\",\"))\n\n        # If the word is a dictionary, convert it to a dictionary\n        elif word.startswith(\"{\") and word.endswith(\"}\"):\n            word = dict(item.split(\":\") for item in word[1:-1].split(\",\"))\n\n        # Add the disassembled word to the list\n        disassembled_words.append(word)\n\n    return disassembled_words\n\n"}
{"task_id": "valid/18", "completion": "\n    return len(str(abs(num)))\n\n"}
{"task_id": "valid/19", "completion": "\n    # Combine the two lists\n    combined_list = list1 + list2\n\n    # Reverse the combined list\n    reversed_list = combined_list[::-1]\n\n    # Sort the reversed list\n    sorted_list = sorted(reversed_list)\n\n    return sorted_list\n\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n\n"}
{"task_id": "valid/21", "completion": "\n    real = z.real\n    imag = z.imag\n    return complex(real**2 - imag**2, 2*real*imag)\n"}
{"task_id": "valid/22", "completion": "\n    if not isinstance(dictionary, dict):\n        return dictionary\n    if len(dictionary) == 1:\n        key, value = dictionary.popitem()\n        return get_nested_dictionary_value(value)\n    else:\n        key, value = dictionary.popitem()\n        return {key: get_nested_dictionary_value(value)}\n\n"}
{"task_id": "valid/23", "completion": "\n    return {k: v for k, v in struct.__dict__.items() if not k.startswith('_')}\n\n"}
{"task_id": "valid/24", "completion": "\n    if num < 10:\n        return num - 1\n\n    str_num = str(num)\n    length = len(str_num)\n\n    half = length // 2\n    left_half = int(str_num[:half])\n\n    # \u5982\u679c\u957f\u5ea6\u662f\u5076\u6570\uff0c\u5219\u5c06\u5de6\u534a\u90e8\u5206\u4e0e\u53f3\u534a\u90e8\u5206\u8fdb\u884c\u6bd4\u8f83\n    # \u5982\u679c\u957f\u5ea6\u662f\u5947\u6570\uff0c\u5219\u5c06\u5de6\u534a\u90e8\u5206\u4e0e\u53f3\u534a\u90e8\u5206+\u4e2d\u95f4\u6570\u5b57\u8fdb\u884c\u6bd4\u8f83\n    right_half = int(str_num[half:]) if length % 2 == 0 else int(str_num[half + 1:])\n\n    # \u5982\u679c\u5de6\u534a\u90e8\u5206\u7b49\u4e8e\u53f3\u534a\u90e8\u5206\uff0c\u5219\u5bfb\u627e\u4e0b\u4e00\u4e2a\u6700\u5c0f\u7684\u56de\u6587\u6570\n    if left_half == right_half:\n        return int(str_num[:half] + str_num[half] + str_num[half - (0 if length % 2 == 0 else 1)][::-1])\n\n    # \u5982\u679c\u5de6\u534a\u90e8\u5206\u5927\u4e8e\u53f3\u534a\u90e8\u5206\uff0c\u5219\u5bfb\u627e\u6700\u63a5\u8fd1\u7684\u8f83\u5c0f\u56de\u6587\u6570\n    # \u5982\u679c\u5de6\u534a\u90e8\u5206\u5c0f\u4e8e\u53f3\u534a\u90e8\u5206\uff0c\u5219\u5bfb\u627e\u6700\u63a5\u8fd1\u7684\u8f83\u5927\u56de\u6587\u6570\n    return min(\n        int(str(left_half) + str(left_half)[::-1]),\n        int(str(left_half + 1) + str(left_half + 1)[::-1]),\n        key=lambda x: abs(x - num)\n    )\n\n"}
{"task_id": "valid/25", "completion": "\n    return num ** 0.5\n\n"}
{"task_id": "valid/26", "completion": "\n    # Check if the matrix is a square matrix\n    if len(matrix) != len(matrix[0]):\n        return \"Not a square matrix\"\n\n    # Check if the matrix is a symmetric matrix\n    if matrix != list(map(list, zip(*matrix))):\n        return \"Not a symmetric matrix\"\n\n    # Check if the matrix is a diagonal matrix\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if i != j and matrix[i][j] != 0:\n                return \"Not a diagonal matrix\"\n\n    # Check if the matrix is a identity matrix\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if i == j and matrix[i][j] != 1:\n                return \"Not an identity matrix\"\n\n    return \"Square matrix, Symmetric matrix, Diagonal matrix, Identity matrix\"\n\n"}
{"task_id": "valid/27", "completion": "\n    message_bytes = string.encode('ascii')\n    base64_bytes = base64.b64encode(message_bytes)\n    base64_message = base64_bytes.decode('ascii')\n\n    return base64_message\n"}
{"task_id": "valid/28", "completion": "\n    return s.replace(\" \", \"\").lower()\n\n"}
{"task_id": "valid/29", "completion": "\n    min_val = lst[0]\n    for i in lst:\n        if i < min_val:\n            min_val = i\n    return min_val\n\n"}
{"task_id": "valid/30", "completion": "\n    if key in json_data:\n        if json_data[key] == value:\n            return True\n    return False\n"}
{"task_id": "valid/31", "completion": "\n    table = []\n    for i in range(0, len(buttons), num_columns):\n        table.append(buttons[i:i+num_columns])\n    return table\n\n"}
{"task_id": "valid/32", "completion": "\n    return all(s[i] <= s[i + 1] for i in range(len(s) - 1))\n\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "valid/34", "completion": "\n    # 1. \uc22b\uc790\ub97c \uc800\uc7a5\ud560 \ub9ac\uc2a4\ud2b8\ub97c \uc0dd\uc131\ud55c\ub2e4.\n    num_list = []\n\n    # 2. \ubb38\uc790\uc5f4\uc744 \uc21c\ud68c\ud558\uba70 \uc22b\uc790\ub97c \ucc3e\ub294\ub2e4.\n    for i in range(len(ts)):\n        if ts[i].isdigit():\n            num_list.append(int(ts[i]))\n\n    # 3. \uc22b\uc790\ub97c \ubaa8\ub450 \ub354\ud55c\ub2e4.\n    return sum(num_list)\n\n"}
{"task_id": "valid/35", "completion": "\n    words[-1] = words[-1].upper()\n    return words\n\n"}
{"task_id": "valid/36", "completion": "\n    if len(arr) != 2:\n        raise ValueError(\"Array must contain exactly two elements\")\n    if not all(isinstance(i, (int, float)) for i in arr):\n        raise TypeError(\"Array must contain only numbers\")\n    return sum(arr)\n\n"}
{"task_id": "valid/37", "completion": "\n    neighborhoods = json_data['neighborhoods']\n    sorted_neighborhoods = sorted(neighborhoods, key=lambda x: x['name'])\n    json_data['neighborhoods'] = sorted_neighborhoods\n    return json_data\n"}
{"task_id": "valid/38", "completion": "\n    arr = sorted(arr)\n    l = 0\n    r = n - 1\n    min_sum = 999999999999\n    min_l = l\n    min_r = r\n    while l < r:\n        sum = arr[l] + arr[r]\n        if abs(sum) < abs(min_sum):\n            min_sum = sum\n            min_l = l\n            min_r = r\n        if sum < 0:\n            l += 1\n        else:\n            r -= 1\n    return (arr[min_l], arr[min_r])\n\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for i in p:\n        if i == '(':\n            stack.append(i)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "valid/40", "completion": "\n    # Initialize variables\n    total_votes = sum(votes)\n    vote_percentages = []\n\n    # Calculate vote percentages\n    for vote in votes:\n        vote_percentages.append(round(100 * vote / total_votes, 1))\n\n    # Determine the winner\n    winner_index = vote_percentages.index(max(vote_percentages))\n    winner = list(candidates.keys())[winner_index]\n\n    # Return results\n    return total_votes, vote_percentages, winner\n\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        date = datetime.strptime(date_string, '%Y-%m-%d')\n    except ValueError:\n        return False\n    else:\n        return True\n\n"}
{"task_id": "valid/42", "completion": "\n    if oldname == newname:\n        return False\n    if allowed_type == 'file':\n        if os.path.isfile(newname):\n            return False\n    elif allowed_type == 'dir':\n        if os.path.isdir(newname):\n            return False\n    return True\n\n"}
{"task_id": "valid/43", "completion": "\n    return [i for i in lst if i % 2 == 0]\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n\n"}
{"task_id": "valid/45", "completion": "\n    count = 0\n    for character in string:\n        if character == specific_character:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/46", "completion": "\n    for i, acc in enumerate(accs):\n        histogram_data.append({\n            'generation': generation,\n            'accuracy': acc,\n            'index': i\n        })\n    return histogram_data\n\n"}
{"task_id": "valid/47", "completion": "\n    pattern = r\"^[a-zA-Z0-9]{5}$\"\n    if re.match(pattern, string):\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        unique_languages.add(classifier.split('-')[1])\n    return len(unique_languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    count = 0\n    for i in arr:\n        if isinstance(i, list):\n            count += 1\n    return count\n\n"}
{"task_id": "valid/50", "completion": "\n    # \u5339\u914durl\u5230view\u7684\u6620\u5c04\u5173\u7cfb\n    url_view_map = {\n        '^$': 'index',\n        '^index/$': 'index',\n        '^login/$': 'login',\n        '^logout/$': 'logout',\n        '^register/$': 'register',\n        '^captcha/$': 'captcha',\n        '^article/(\\d+)/$': 'article_detail',\n        '^article/add/$': 'article_add',\n        '^article/edit/(\\d+)/$': 'article_edit',\n        '^article/delete/(\\d+)/$': 'article_delete',\n        '^category/add/$': 'category_add',\n        '^category/edit/(\\d+)/$': 'category_edit',\n        '^category/delete/(\\d+)/$': 'category_delete',\n        '^comment/add/$': 'comment_add',\n        '^comment/delete/(\\d+)/$': 'comment_delete',\n        '^user/info/$': 'user_info',\n        '^user/password/$': 'user_password',\n        '^upload/$': 'upload',\n    }\n\n    for pattern, view in url_view_map.items():\n        if re.match(pattern, url):\n            return view\n\n    return None\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n\n"}
{"task_id": "valid/52", "completion": "\n    string1 = \"Hello\"\n    string2 = \"World\"\n    sentence = \"{} {}\".format(string1, string2)\n    return sentence\n"}
{"task_id": "valid/53", "completion": "\n    # Initialize an empty list to store the substrings\n    substrings = []\n\n    # Loop through the string\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            # Add each substring to the list\n            substrings.append(s[i:j])\n\n    return substrings\n\n"}
{"task_id": "valid/54", "completion": "\n    price_sum = 0\n    for dict in list_of_dicts:\n        price_sum += dict['price']\n    return price_sum\n\n"}
{"task_id": "valid/55", "completion": "\n    intersection = list(set(list1) & set(list2))\n    list1[:] = [i for i in list1 if i not in intersection]\n    list2[:] = [i for i in list2 if i not in intersection]\n    return intersection\n\n"}
{"task_id": "valid/56", "completion": "\n    if request_method == 'GET':\n        return get_request\n    elif request_method == 'POST':\n        return post_request\n    elif request_method == 'PUT':\n        return put_request\n    elif request_method == 'DELETE':\n        return delete_request\n    else:\n        return 'Invalid request method'\n"}
{"task_id": "valid/57", "completion": "\n    if b == 0:\n        return a\n    else:\n        return gcd_recursive(b, a % b)\n\n"}
{"task_id": "valid/58", "completion": "\n    config_files = []\n    other_files = []\n    for file_path in file_paths:\n        if file_path.endswith('.config'):\n            config_files.append(file_path)\n        else:\n            other_files.append(file_path)\n    return config_files, other_files\n\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n\n"}
{"task_id": "valid/61", "completion": "\n    timeStart = timeStart.split(\":\")\n    timeEnd = timeEnd.split(\":\")\n\n    timeStartHour = int(timeStart[0])\n    timeStartMinute = int(timeStart[1])\n    timeEndHour = int(timeEnd[0])\n    timeEndMinute = int(timeEnd[1])\n\n    timeDifference = (timeEndHour - timeStartHour) * 60 + (timeEndMinute - timeStartMinute)\n\n    return timeDifference\n\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return -1\n\n    mid = (start + end) // 2\n\n    if array[mid] == target:\n        return mid\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    if color == 'red':\n        return 'green'\n    elif color == 'green':\n        return 'blue'\n    elif color == 'blue':\n        return 'red'\n"}
{"task_id": "valid/64", "completion": "\n    return [i+1 for i in list]\n\n"}
{"task_id": "valid/65", "completion": "\n    squares = [i**2 for i in range(0, int(end**0.5)+1)]\n    return any(i in squares for i in range(start, end+1))\n\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        if word == target:\n            return True\n    return False\n\n"}
{"task_id": "valid/67", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/68", "completion": "\n    for key in dict.keys():\n        print(key)\n\nfruits = {\n    \"apple\": 10,\n    \"banana\": 20,\n    \"cherry\": 30,\n    \"date\": 40,\n    \"elderberry\": 50\n}\n"}
{"task_id": "valid/69", "completion": "\n    # Your code goes here\n    string1 = \"Hello\"\n    string2 = \"World\"\n    phrase = f\"{string1} {string2}\"\n    return phrase\n"}
{"task_id": "valid/70", "completion": "\n    strings = [re.sub(r'[^A-Za-z0-9 ]+', '', string) for string in strings]\n    strings = [string.capitalize() for string in strings]\n    return strings\n"}
{"task_id": "valid/71", "completion": "\n    return string.index(char)\n\n"}
{"task_id": "valid/72", "completion": "\n    from bs4 import BeautifulSoup\n    soup = BeautifulSoup(html_code, 'html.parser')\n    bold_text = soup.find_all('b')\n    return [text.text for text in bold_text]\n\n"}
{"task_id": "valid/73", "completion": "\n    # Define the prices of the items\n    prices = {\n        'cola': 1.00,\n        'chips': 0.50,\n        'candy': 0.65\n    }\n\n    # Check if the item is in the prices dictionary\n    if item not in prices:\n        return 'Invalid item'\n\n    # Check if enough money was inserted\n    if money_inserted < prices[item]:\n        return 'Not enough money'\n\n    # Calculate the change\n    change = money_inserted - prices[item]\n\n    # Return the change and the item\n    return (change, item)\n"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    unique_list = list(set(merged_list))\n    return unique_list\n\n"}
{"task_id": "valid/75", "completion": "\n    count = 0\n    for item in list:\n        if item == target:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/76", "completion": "\n    message_bytes = string.encode('ascii')\n    base64_bytes = base64.b64encode(message_bytes)\n    base64_message = base64_bytes.decode('ascii')\n\n    return base64_message\n"}
{"task_id": "valid/77", "completion": "\n    return [i for i, x in enumerate(vector) if x != 0]\n\n"}
{"task_id": "valid/78", "completion": "\n    # 1. Assign the values\n    a = 10\n    b = 20\n    c = 30\n\n    # 2. Validate the values\n    if a + b == c:\n        print(\"The sum of a and b is equal to c\")\n    else:\n        print(\"The sum of a and b is not equal to c\")\n\nassign_and_validate()\n"}
{"task_id": "valid/79", "completion": "\n    word = list(word)\n    random.shuffle(word)\n    return ''.join(word)\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"integer\"\n    elif isinstance(element, float):\n        return \"float\"\n    elif isinstance(element, str):\n        return \"string\"\n    elif isinstance(element, bool):\n        return \"boolean\"\n    elif isinstance(element, list):\n        return \"list\"\n    elif isinstance(element, tuple):\n        return \"tuple\"\n    elif isinstance(element, dict):\n        return \"dictionary\"\n    elif isinstance(element, set):\n        return \"set\"\n    else:\n        return \"unknown\"\n\n"}
{"task_id": "valid/81", "completion": "\n    if len(arr) == 0:\n        return []\n    arr.sort()\n    result = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] == result[-1][0]:\n            result[-1][1] += arr[i]\n        else:\n            result.append([arr[i], arr[i]])\n    return result\n\n"}
{"task_id": "valid/82", "completion": "\n    tokens = re.findall(r'\\b\\w[\\w\\']*\\b', text.lower())\n    return tokens\n"}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = []\n    for number in numbers:\n        if number % 3 == 0 and number % 5 == 0:\n            divisible_numbers.append(number)\n    return divisible_numbers\n\nnumbers = [1, 3, 5, 15, 23, 30, 60]"}
{"task_id": "valid/84", "completion": "\n    sentence = sentence.lower()\n    words = sentence.split()\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    highest_frequency = max(word_count.values())\n    for word, count in word_count.items():\n        if count == highest_frequency:\n            return word\n"}
{"task_id": "valid/85", "completion": "\n    euler_number = 0\n    for i in range(100):\n        euler_number += 1 / math.factorial(i)\n    euler_number_str = str(euler_number)\n    euler_number_str = euler_number_str.split('.')[0] + '.' + euler_number_str.split('.')[1][:decimal_places]\n    return float(euler_number_str)\n\n"}
{"task_id": "valid/86", "completion": "\n    sum = 0\n    for number in numbers:\n        sum += number\n    average = sum / len(numbers)\n    return average, sum\n\n"}
{"task_id": "valid/87", "completion": "\n    min_value = min(time_series)\n    max_value = max(time_series)\n    return min_value, max_value\n"}
{"task_id": "valid/88", "completion": "\n    return len(encyclopedia.relatedArticles)\n"}
{"task_id": "valid/89", "completion": "\n    largest_index = 0\n    largest_value = lst[0]\n\n    for i in range(1, len(lst)):\n        if lst[i] > largest_value:\n            largest_value = lst[i]\n            largest_index = i\n\n    return largest_index\n\n"}
{"task_id": "valid/90", "completion": "\n    return bool(set(list1) & set(list2))\n\n"}
{"task_id": "valid/91", "completion": "\n    def _dict_to_xml(dictionary, root):\n        for key, value in dictionary.items():\n            if isinstance(value, dict):\n                child = Element(key)\n                root.append(child)\n                _dict_to_xml(value, child)\n            else:\n                child = Element(key)\n                child.text = str(value)\n                root.append(child)\n        return root\n\n    root = Element('root')\n    _dict_to_xml(dictionary, root)\n    return tostring(root)\n\n"}
{"task_id": "valid/92", "completion": "\n    row = 0\n    col = len(matrix[0]) - 1\n\n    while row < len(matrix) and col >= 0:\n        if matrix[row][col] > target:\n            col -= 1\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            return [row, col]\n\n    return [-1, -1]\n\n"}
{"task_id": "valid/93", "completion": "\n    odd_elements = [x for x in lst if x % 2 != 0]\n    sum_odd = sum(odd_elements)\n    avg_odd = sum_odd / len(odd_elements)\n    return sum_odd, avg_odd\n\n"}
{"task_id": "valid/94", "completion": "\n    lst.sort(reverse=True)\n    return lst[n-1]\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n"}
{"task_id": "valid/96", "completion": "\n    exclusive_elements = set_a ^ set_b\n    return exclusive_elements\n\n\nset_a = {1, 2, 3, 4, 5}\nset_b = {4, 5, 6, 7, 8}\n"}
{"task_id": "valid/97", "completion": "\n    description = \"This bot is designed to interact with the following services:\\n\\n\"\n    for key, value in mapping.items():\n        description += f\"{key} - {value}\\n\"\n    return description\n\n"}
{"task_id": "valid/98", "completion": "\n    if n == 0:\n        return '0'\n    nums = []\n    while n:\n        n, r = divmod(n, 3)\n        nums.append(str(r))\n    return ''.join(reversed(nums))\n\n"}
{"task_id": "valid/99", "completion": "\n    file_extensions = []\n    for file_name in file_names:\n        file_extension = file_name.split('.')[-1]\n        file_extensions.append(file_extension)\n    return file_extensions\n\n"}
{"task_id": "valid/100", "completion": "\n    if age < 13:\n        return \"Child\"\n    elif 13 <= age < 18:\n        return \"Teenager\"\n    elif 18 <= age < 60:\n        return \"Adult\"\n    else:\n        return \"Senior\"\n\n"}
{"task_id": "valid/101", "completion": "\n    if numerical_grade >= 90:\n        letter_grade = 'A'\n        gpa = 4.0\n    elif numerical_grade >= 80:\n        letter_grade = 'B'\n        gpa = 3.0\n    elif numerical_grade >= 70:\n        letter_grade = 'C'\n        gpa = 2.0\n    elif numerical_grade >= 60:\n        letter_grade = 'D'\n        gpa = 1.0\n    else:\n        letter_grade = 'F'\n        gpa = 0.0\n\n    return letter_grade, gpa\n\n"}
{"task_id": "valid/102", "completion": "\n    return listing.price * listing.quantity\n\n"}
{"task_id": "valid/103", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    for word in palindrome_tuples:\n        for letter in word:\n            if letter in vowels:\n                vowel_count += 1\n    return vowel_count\n\n"}
{"task_id": "valid/104", "completion": "\n    s = s.replace(' ', '')\n    s = s.lower()\n    return s\n\n"}
{"task_id": "valid/105", "completion": "\n    # Initialize an empty set to store the sum of elements\n    set_sum = set()\n\n    # Initialize sum of elements\n    sum = 0\n\n    # Traverse through the given array\n    for i in range(0, len(arr)):\n        # Add current element to sum\n        sum += arr[i]\n\n        # Return true if sum is 0\n        if sum == 0:\n            return True\n\n        # If sum is already present in set, return true\n        if sum in set_sum:\n            return True\n\n        # Else insert sum in set\n        set_sum.add(sum)\n\n    # Return false if sum is not 0 and set does not contain sum\n    return False\n\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n    for dependency in dependencies:\n        latest_versions[dependency] = dependencies[dependency]['latest']\n    return latest_versions\n\n"}
{"task_id": "valid/107", "completion": "\n    causes_of_death = {\n        \"Alcoholic\": [],\n        \"Drug\": [],\n        \"Suicide\": [],\n        \"Intentional self-harm\": [],\n        \"Stroke\": [],\n        \"Heart attack\": [],\n        \"Cancer\": [],\n        \"Accident\": [],\n        \"Other\": []\n    }\n\n    for cause in causes:\n        cause = cause.lower()\n        if \"alcohol\" in cause:\n            causes_of_death[\"Alcoholic\"].append(cause)\n        elif \"drug\" in cause:\n            causes_of_death[\"Drug\"].append(cause)\n        elif \"suicide\" in cause:\n            causes_of_death[\"Suicide\"].append(cause)\n        elif \"self-harm\" in cause:\n            causes_of_death[\"Intentional self-harm\"].append(cause)\n        elif \"stroke\" in cause:\n            causes_of_death[\"Stroke\"].append(cause)\n        elif \"heart attack\" in cause:\n            causes_of_death[\"Heart attack\"].append(cause)\n        elif \"cancer\" in cause:\n            causes_of_death[\"Cancer\"].append(cause)\n        elif \"accident\" in cause:\n            causes_of_death[\"Accident\"].append(cause)\n        else:\n            causes_of_death[\"Other\"].append(cause)\n\n    return causes_of_death\n\n\ncauses = [\"Alcoholic death\", \"Drug overdose\", \"Suicide\", \"Intentional self-harm\", \"Stroke\", \"Heart attack\", \"Cancer\", \"Accident\", \"Other cause\"]"}
{"task_id": "valid/108", "completion": "\n    name = name.lower()\n    name = name.replace(\" \", \"\")\n    return name\n\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(c) > 127 for c in text)\n\n"}
{"task_id": "valid/110", "completion": "\n    punctuations = ''''!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~'''\n    no_punct = \"\"\n    for char in string:\n        if char not in punctuations:\n            no_punct = no_punct + char\n    return no_punct\n"}
{"task_id": "valid/111", "completion": "\n    return [num ** exp for num in num_list]\n\n"}
{"task_id": "valid/112", "completion": "\n    min_values = []\n    for row in grid:\n        min_values.append(min(row))\n    print(min_values)\n\n"}
{"task_id": "valid/113", "completion": "\n    if current_num < n:\n        print(\"Thank you\")\n        print_thank_you(n, current_num + 1)\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    for i in range(len(lst) - 1):\n        if lst[i] == element and lst[i + 1] == element:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/115", "completion": "\n    digits = []\n    while num:\n        digits.append(num % base)\n        num //= base\n    return len(set(digits)) == 1\n"}
{"task_id": "valid/116", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    if len(s) == 0:\n        return s\n    else:\n        if s[0] in vowels:\n            return remove_vowels_recursive(s[1:])\n        else:\n            return s[0] + remove_vowels_recursive(s[1:])\n\n"}
{"task_id": "valid/117", "completion": "\n    help_text = \"Usage: python main.py [options]\\n\\n\"\n    help_text += \"Options:\\n\"\n\n    for option in options:\n        help_text += \"  --{0} {1}\\n\".format(option, options[option])\n\n    return help_text\n\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n\n"}
{"task_id": "valid/119", "completion": "\n    count = 0\n    for i in range(len(Val)):\n        if Val[i] == '1':\n            count += 1\n    return count\n"}
{"task_id": "valid/120", "completion": "\n    inverted_bitset = []\n    for bit in sample_bitset:\n        if bit == 0:\n            inverted_bitset.append(1)\n        else:\n            inverted_bitset.append(0)\n    return inverted_bitset\n"}
{"task_id": "valid/121", "completion": "\n    vowels = \"aeiou\"\n    return s[0] in vowels and s[-1] in vowels\n\n"}
{"task_id": "valid/122", "completion": "\n    count = 0\n    for i in range(len(sequence) - len(subsequence) + 1):\n        if sequence[i:i+len(subsequence)] == subsequence:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/123", "completion": "\n    return h / t\n"}
{"task_id": "valid/124", "completion": "\n    sum_odd_numbers = 0\n    for i in input_list:\n        if i % 2 != 0:\n            sum_odd_numbers += i\n    return sum_odd_numbers\n\n"}
{"task_id": "valid/125", "completion": "\n    vowels = \"aeiou\"\n    consonants = 0\n    for char in string.lower():\n        if char.isalpha() and char not in vowels:\n            consonants += 1\n    return consonants\n\n"}
{"task_id": "valid/126", "completion": "\n    # Initialize the electron behavior\n    electron_behavior = ElectronBehavior(grid_energies, ados, dope, dos_grid_size)\n    \n    # Simulate the electron behavior\n    electron_behavior.simulate()\n    \n    # Return the simulated electron behavior\n    return electron_behavior.get_simulated_behavior()\n\n"}
{"task_id": "valid/127", "completion": "\n    return list(set(tuple_to_process))\n\n"}
{"task_id": "valid/128", "completion": "\n    # Write your code here\n    arr.sort()\n    diff = []\n    for i in range(1, len(arr)):\n        diff.append(arr[i] - arr[i-1])\n    max_diff = max(diff)\n    return max_diff\n\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color] = color_dict.get(color, 0) + 1\n    return color_dict\n\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    pairs = {')': '(', ']': '[', '}': '{'}\n    for char in string:\n        if char in pairs.values():\n            stack.append(char)\n        elif char in pairs.keys():\n            if not stack or stack.pop() != pairs[char]:\n                return False\n    return not stack\n\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for element in lst:\n        if element not in unique_elements:\n            unique_elements.append(element)\n        if len(unique_elements) == 3:\n            break\n    return unique_elements\n\n"}
{"task_id": "valid/132", "completion": "\n    return sorted(fruit_list)\n"}
{"task_id": "valid/133", "completion": "\n    sublists = []\n    for i in range(len(lst) + 1):\n        for j in range(i + 1, len(lst) + 1):\n            sublists.append(lst[i:j])\n    return sublists\n\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r\"\\d+\\.\\d+\"\n    match = re.search(pattern, string)\n    if match:\n        return match.group()\n    else:\n        return None\n"}
{"task_id": "valid/135", "completion": "\n    return {\n        \"app_name\": app_name,\n        \"model_name\": model_name,\n        \"field_name\": field_name,\n        \"operation\": \"add\"\n    }\n\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = set(list1).intersection(list2)\n    return sum(common_elements)\n\n"}
{"task_id": "valid/137", "completion": "\n    forecast_period = df.index[-1] + pd.DateOffset(months=1)\n    return forecast_period\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: getattr(x, attr))\n\n"}
{"task_id": "valid/139", "completion": "\n    start_index = items_per_page * (page_number - 1)\n    end_index = start_index + items_per_page\n    return items[start_index:end_index]\n\n"}
{"task_id": "valid/140", "completion": "\n    # convert string to integer\n    n = int(n_str)\n\n    # double the integer\n    n *= 2\n\n    # convert back to string\n    n_str = str(n)\n\n    return n_str\n\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        'default': [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)],\n        'row': [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)],\n        'column': [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0)],\n        'diagonal': [(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8)],\n        'anti-diagonal': [(0, 8), (1, 7), (2, 6), (3, 5), (4, 4), (5, 3), (6, 2), (7, 1), (8, 0)],\n        'center': [(1, 1)],\n        'corners': [(0, 0), (0, 8), (8, 0), (8, 8)],\n        'edges': [(0, x) for x in range(9)] + [(8, x) for x in range(9)] + [(x, 0) for x in range(9)] + [(x, 8) for x in range(9)],\n        'odd': [(x, y) for x in range(9) for y in range(9) if (x + y) % 2 == 0],\n        'even': [(x, y) for x in range(9) for y in range(9) if (x +"}
{"task_id": "valid/142", "completion": "\n    common_elements = []\n    for i in list1:\n        if i in list2:\n            common_elements.append(i)\n    product = 1\n    for i in common_elements:\n        product *= i\n    return product\n\n"}
{"task_id": "valid/143", "completion": "\n    pass\n\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    new_sentence = ''\n    for char in sentence:\n        if char not in vowels:\n            new_sentence += char\n    return new_sentence\n"}
{"task_id": "valid/146", "completion": "\n    result = {}\n    for key in a.keys():\n        if key in b:\n            if isinstance(a[key], dict) and isinstance(b[key], dict):\n                result[key] = merge_objects(a[key], b[key])\n            else:\n                result[key] = b[key]\n        else:\n            result[key] = a[key]\n\n    for key in b.keys():\n        if key not in a:\n            result[key] = b[key]\n\n    return result\n\n"}
{"task_id": "valid/147", "completion": "\n    max_key = max(d, key=d.get)\n    max_value = d[max_key]\n    return max_key, max_value\n\n"}
{"task_id": "valid/148", "completion": "\n    grades = dict[key]\n    avg = sum(grades) / len(grades)\n    return avg\n\n\navg_grades = calculate_avg_from_dict(grades_dict, values_key)"}
{"task_id": "valid/149", "completion": "\n    return string.replace('e', 'E')\n\n"}
{"task_id": "valid/150", "completion": "\n    heap = []\n    for i in lst:\n        heapq.heappush(heap, i)\n    return [heapq.heappop(heap) for _ in range(n)]\n"}
{"task_id": "valid/151", "completion": "\n    if x < 0:\n        return False\n    if x == 0 or x == 1:\n        return True\n    if x % 2 == 0:\n        return False\n    s = sqrt(x)\n    if s != int(s):\n        return False\n    for i in range(3, int(s) + 1, 2):\n        if x % i == 0:\n            return False\n    return True\n"}
{"task_id": "valid/152", "completion": "\n    date_plus_10 = date + datetime.timedelta(days=10)\n    return date_plus_10\n"}
