{"task_id": "valid/0", "completion": "\n    # Tokenize the text\n    tokens = word_tokenize(text)\n    \n    # Remove stopwords\n    tokens = [token for token in tokens if token not in stopwords]\n    \n    # Lemmatize the tokens\n    tokens = [lemmatizer.lemmatize(token) for token in tokens]\n    \n    # Create a bag-of-words representation\n    bow = {}\n    for token in tokens:\n        if token in bow:\n            bow[token] += 1\n        else:\n            bow[token] = 1\n    \n    # Classify the text\n    prediction = classifier.predict([bow])\n    \n    return prediction\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n"}
{"task_id": "valid/3", "completion": "\n    # Create a dictionary to store the instruments\n    instrument_dict = {}\n    \n    # Loop through the list of instruments\n    for instrument in instruments:\n        # Get the name and type of the instrument\n        name = instrument['name']\n        type = instrument['type']\n        \n        # If the type is not in the dictionary, add it\n        if type not in instrument_dict:\n            instrument_dict[type] = []\n        \n        # Add the instrument to the list of its type\n        instrument_dict[type].append(name)\n    \n    # Sort the list of instruments for each type\n    for type in instrument_dict:\n        instrument_dict[type].sort()\n    \n    # Return the sorted dictionary\n    return instrument_dict\n"}
{"task_id": "valid/4", "completion": "\n    try:\n        json_list = json.loads(json_string)\n        return json_list\n    except json.JSONDecodeError as e:\n        print(f\"Error: {e}\")\n        return None\n\n"}
{"task_id": "valid/5", "completion": "\n    # Check if the number is divisible by 3\n    if n % 3 == 0:\n        # Calculate the sum of the digits\n        digit_sum = sum(int(digit) for digit in str(n))\n        # Check if the sum of the digits is divisible by 3\n        if digit_sum % 3 == 0:\n            return True\n    return False\n"}
{"task_id": "valid/6", "completion": "\n    if n == 1:\n        return 0\n    elif n == base:\n        return 1\n    else:\n        return 1 + discrete_logarithm(n // base, base)\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        json_obj = json.loads(json_str)\n        pprint.pprint(json_obj)\n    except json.JSONDecodeError as e:\n        print(f\"Error: {e}\")\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace(f\"{{{key}}}\", value)\n    return template\n"}
{"task_id": "valid/10", "completion": "\n    return len(string) == len(set(string))\n"}
{"task_id": "valid/11", "completion": "\n    date = datetime.strptime(date_string, \"%Y-%m-%d\")\n    new_date = date + timedelta(days=days)\n    return new_date.strftime(\"%Y-%m-%d\")\n\n"}
{"task_id": "valid/12", "completion": "\n    return text.replace(\" \", \"\")\n"}
{"task_id": "valid/13", "completion": "\n    text = text.lower()\n    text = re.sub(r'[^a-zA-Z0-9\\s]', '', text)\n    text = re.sub(r'\\s+', ' ', text)\n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    # Use regular expression to find the words in the text\n    pattern = re.compile(r'\\b' + re.escape(word1) + r'\\b|\\b' + re.escape(word2) + r'\\b')\n    matches = pattern.findall(text)\n    return matches\n\n"}
{"task_id": "valid/15", "completion": "\n    return sum(array)\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    lines = comment.split('\\n')\n    for line in lines:\n        line = line.strip()\n        if line.startswith('\"'):\n            line = line[1:]\n        if line.startswith('\"'):\n            line = line[1:]\n        if line:\n            key, value = line.split('=', 1)\n            key = key.strip()\n            value = value.strip()\n            settings[key] = value\n    return settings\n\n"}
{"task_id": "valid/17", "completion": "\n    words = sentence.split()\n    return words\n"}
{"task_id": "valid/18", "completion": "\n    return len(str(num))\n"}
{"task_id": "valid/19", "completion": "\n    # Reverse the lists\n    list1 = list1[::-1]\n    list2 = list2[::-1]\n    \n    # Combine the lists\n    combined_list = list1 + list2\n    \n    # Sort the combined list\n    combined_list.sort()\n    \n    # Reverse the combined list\n    combined_list = combined_list[::-1]\n    \n    return combined_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n"}
{"task_id": "valid/21", "completion": "\n    return z * z\n"}
{"task_id": "valid/22", "completion": "\n    for key, value in dictionary.items():\n        if isinstance(value, dict):\n            return get_nested_dictionary_value(value)\n        else:\n            return value\n"}
{"task_id": "valid/23", "completion": "\n    return {key: value for key, value in struct.items()}\n"}
{"task_id": "valid/24", "completion": "\n    num_str = str(num)\n    n = len(num_str)\n    if n % 2 == 0:\n        half = n // 2\n        left_half = num_str[:half]\n        right_half = num_str[half:]\n    else:\n        half = (n - 1) // 2\n        left_half = num_str[:half + 1]\n        right_half = num_str[half + 1:]\n\n    # Find the closest palindrome\n    closest_palindrome = num\n    for i in range(10 ** (half + 1)):\n        new_num_str = left_half + str(i) + right_half[::-1]\n        new_num = int(new_num_str)\n        if abs(new_num - num) < abs(closest_palindrome - num):\n            closest_palindrome = new_num\n\n    return closest_palindrome\n"}
{"task_id": "valid/25", "completion": "\n    if num < 0:\n        return \"Error: Negative numbers cannot be square rooted.\"\n    elif num == 0 or num == 1:\n        return num\n    else:\n        return num ** 0.5\n"}
{"task_id": "valid/26", "completion": "\n    # Get the shape of the matrix\n    rows, cols = matrix.shape\n    \n    # Check if the matrix is square\n    if rows != cols:\n        print(\"The matrix is not square.\")\n    else:\n        print(\"The matrix is square.\")\n    \n    # Check if the matrix is symmetric\n    if (matrix == matrix.T).all():\n        print(\"The matrix is symmetric.\")\n    else:\n        print(\"The matrix is not symmetric.\")\n    \n    # Check if the matrix is orthogonal\n    if (matrix @ matrix.T == np.eye(rows)).all():\n        print(\"The matrix is orthogonal.\")\n    else:\n        print(\"The matrix is not orthogonal.\")\n    \n    # Check if the matrix is invertible\n    if np.linalg.det(matrix) != 0:\n        print(\"The matrix is invertible.\")\n    else:\n        print(\"The matrix is not invertible.\")\n    \n    # Check if the matrix is diagonalizable\n    if np.linalg.matrix_rank(matrix) == rows:\n        print(\"The matrix is diagonalizable.\")\n    else:\n        print(\"The matrix is not diagonalizable.\")\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n"}
{"task_id": "valid/28", "completion": "\n    s = s.lower()\n    s = ''.join(c for c in s if c.isalnum() or c.isspace())\n    return s\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n"}
{"task_id": "valid/30", "completion": "\n    if key not in json_data:\n        raise ValueError(f\"Key '{key}' not found in JSON data\")\n    if json_data[key] != value:\n        raise ValueError(f\"Value for key '{key}' is not '{value}'\")\n\n"}
{"task_id": "valid/31", "completion": "\n    button_table = []\n    for i in range(0, len(buttons), num_columns):\n        button_table.append(buttons[i:i + num_columns])\n    return button_table\n"}
{"task_id": "valid/32", "completion": "\n    return s == ''.join(sorted(s))\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "valid/34", "completion": "\n    total = 0\n    for i in range(len(ts)):\n        for j in range(i + 1, len(ts) + 1):\n            total += int(ts[i:j])\n    return total\n"}
{"task_id": "valid/35", "completion": "\n    words[-1] = words[-1].upper()\n    return words\n"}
{"task_id": "valid/36", "completion": "\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n\n    # Check if the list is empty\n    if len(arr) == 0:\n        raise ValueError(\"List cannot be empty\")\n\n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError(\"All elements in the list must be integers\")\n\n    # Check if the list contains any duplicate elements\n    if len(arr) != len(set(arr)):\n        raise ValueError(\"List cannot contain duplicate elements\")\n\n    # Check if the list contains any negative numbers\n    if any(x < 0 for x in arr):\n        raise ValueError(\"List cannot contain negative numbers\")\n\n    # Check if the list contains any numbers greater than 10\n    if any(x > 10 for x in arr):\n        raise ValueError(\"List cannot contain numbers greater than 10\")\n\n    # If all checks pass, add 1 to each element in the list\n    return [x + 1 for x in arr]\n"}
{"task_id": "valid/37", "completion": "\n    neighborhoods = json.loads(json_data)\n    sorted_neighborhoods = sorted(neighborhoods, key=lambda x: x['name'])\n    return json.dumps(sorted_neighborhoods)\n\n"}
{"task_id": "valid/38", "completion": "\n    arr.sort()\n    min_sum = float('inf')\n    left = 0\n    right = n - 1\n\n    while left < right:\n        current_sum = arr[left] + arr[right]\n        min_sum = min(min_sum, abs(current_sum))\n        if current_sum < 0:\n            left += 1\n        else:\n            right -= 1\n\n    return min_sum\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    res = []\n    for c in p:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            while stack and stack[-1] != '(':\n                res.append(stack.pop())\n            if stack and stack[-1] == '(':\n                stack.pop()\n        else:\n            res.append(c)\n    while stack:\n        res.append(stack.pop())\n    return ''.join(res)\n"}
{"task_id": "valid/40", "completion": "\n    # Initialize a dictionary to store the results\n    results = {}\n    \n    # Loop through each vote\n    for vote in votes:\n        # Get the candidate and their vote count\n        candidate, vote_count = vote\n        \n        # If the candidate is already in the results, add the vote count to their total\n        if candidate in results:\n            results[candidate] += vote_count\n        # If the candidate is not in the results, add them with their vote count\n        else:\n            results[candidate] = vote_count\n    \n    # Return the results\n    return results\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        date = datetime.strptime(date_string, '%Y-%m-%d')\n        return date\n    except ValueError:\n        return None\n\n"}
{"task_id": "valid/42", "completion": "\n    if allowed_type == 'file':\n        return True\n    elif allowed_type == 'folder':\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/43", "completion": "\n    return [i for i in lst if i % 2 == 0]\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n"}
{"task_id": "valid/45", "completion": "\n    count = 0\n    for char in string:\n        if char == specific_character:\n            count += 1\n    return count\n"}
{"task_id": "valid/46", "completion": "\n    for i, (key, value) in enumerate(histogram_data.items()):\n        if i < len(accs):\n            histogram_data[key] = (value, accs[i])\n        else:\n            histogram_data[key] = (value, 0.0)\n    return histogram_data\n"}
{"task_id": "valid/47", "completion": "\n    pattern = r'^[a-zA-Z0-9]{5}$'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "valid/48", "completion": "\n    # Convert the list of classifiers to a set to remove duplicates\n    unique_classifiers = set(classifiers)\n    \n    # Return the number of unique classifiers\n    return len(unique_classifiers)\n\n"}
{"task_id": "valid/49", "completion": "\n    return len(arr)\n"}
{"task_id": "valid/50", "completion": "\n    url = url.strip()\n    if url.startswith('/'):\n        url = url[1:]\n    if url.startswith('http'):\n        url = url.split('/')[-1]\n    url = url.split('?')[0]\n    url = url.split('#')[0]\n    url = url.split('&')[0]\n    url = url.split(';')[0]\n    url = url.split('=')[0]\n    url = url.split('%')[0]\n    url = url.split('+')[0]\n    url = url.split('@')[0]\n    url = url.split('!')[0]\n    url = url.split('$')[0]\n    url = url.split('^')[0]\n    url = url.split('&')[0]\n    url = url.split(';')[0]\n    url = url.split('=')[0]\n    url = url.split('%')[0]\n    url = url.split('+')[0]\n    url = url.split('@')[0]\n    url = url.split('!')[0]\n    url = url.split('$')[0]\n    url = url.split('^')[0]\n    url = url.split('&')[0]\n    url = url.split(';')[0]\n    url = url.split('=')[0]\n    url = url.split('%')[0]\n    url = url.split('+')[0]\n    url = url.split('@')[0]\n    url = url.split('!')[0]\n    url = url.split('$')[0]\n    url = url.split('^')[0]\n    url = url.split('&')[0]\n    url = url.split(';')[0]\n    url = url.split('=')[0]\n    url = url.split('%')[0]\n    url = url.split('+')[0]\n    url = url.split('@')[0]\n    url = url.split('!')[0]\n    url = url.split('$')[0]\n    url = url.split('^')[0]\n    url = url.split('&')[0]\n    url = url.split(';')[0]\n    url = url.split('=')[0]\n    url = url.split('%')[0]\n    url = url.split('+')[0]\n    url = url.split('@')[0]\n    url = url.split('!')[0]\n    url = url.split('$')[0]\n    url = url.split('^')[0]\n    url = url.split('&')[0]\n    url = url.split(';')[0]\n    url = url.split('=')[0]\n    url = url.split('%')[0]\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n"}
{"task_id": "valid/52", "completion": "\n    sentence = \"Hello, how are you?\"\n    string = \"I am good, thank you.\"\n    result = sentence + \" \" + string\n    return result\n"}
{"task_id": "valid/53", "completion": "\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.append(s[i:j])\n    return substrings\n"}
{"task_id": "valid/54", "completion": "\n    total_price = 0\n    for item in list_of_dicts:\n        total_price += item['price']\n    return total_price\n"}
{"task_id": "valid/55", "completion": "\n    intersection = set(list1).intersection(set(list2))\n    list1 = [item for item in list1 if item not in intersection]\n    return list1\n"}
{"task_id": "valid/56", "completion": "\n    def wrapper(*args, **kwargs):\n        # Get the request object\n        request = args[0]\n        \n        # Get the route object\n        route = request.route\n        \n        # Get the route method\n        route_method = route.get_method()\n        \n        # Check if the route method matches the request method\n        if route_method != request_method:\n            return Response(status_code=405, body={'error': 'Method not allowed'})\n        \n        # Call the route handler\n        return route.handler(*args, **kwargs)\n    \n    return wrapper\n"}
{"task_id": "valid/57", "completion": "\n    if b == 0:\n        return a\n    else:\n        return gcd_recursive(b, a % b)\n"}
{"task_id": "valid/58", "completion": "\n    categorized_files = {}\n    for file_path in file_paths:\n        file_name = file_path.split('/')[-1]\n        file_extension = file_name.split('.')[-1]\n        if file_extension not in categorized_files:\n            categorized_files[file_extension] = []\n        categorized_files[file_extension].append(file_path)\n    return categorized_files\n"}
{"task_id": "valid/59", "completion": "\n    return sorted([a, b, c, d, e])[2]\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n"}
{"task_id": "valid/61", "completion": "\n    timeStart = timeStart.split(\":\")\n    timeEnd = timeEnd.split(\":\")\n    timeStart = [int(i) for i in timeStart]\n    timeEnd = [int(i) for i in timeEnd]\n    timeStart = timeStart[0] * 3600 + timeStart[1] * 60 + timeStart[2]\n    timeEnd = timeEnd[0] * 3600 + timeEnd[1] * 60 + timeEnd[2]\n    timeDiff = timeEnd - timeStart\n    hours = timeDiff // 3600\n    minutes = (timeDiff % 3600) // 60\n    seconds = timeDiff % 60\n    return f\"{hours} hours, {minutes} minutes, {seconds} seconds\"\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return -1\n\n    mid = (start + end) // 2\n\n    if array[mid] == target:\n        return mid\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    if color == 'red':\n        return 'green'\n    elif color == 'green':\n        return 'blue'\n    elif color == 'blue':\n        return 'red'\n    else:\n        return None\n"}
{"task_id": "valid/64", "completion": "\n    for i in range(len(list)):\n        list[i] += 1\n    return list\n"}
{"task_id": "valid/65", "completion": "\n    # Initialize an empty list to store perfect squares\n    perfect_squares = []\n    \n    # Iterate over the range from start to end (inclusive)\n    for num in range(start, end + 1):\n        # Check if the number is a perfect square\n        root = int(num ** 0.5)\n        if root ** 2 == num:\n            # If it is, add it to the list\n            perfect_squares.append(num)\n    \n    # Return the list of perfect squares\n    return perfect_squares\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        if target in word:\n            return word\n    return None\n"}
{"task_id": "valid/67", "completion": "\n    words = sentence.split()\n    return words\n"}
{"task_id": "valid/68", "completion": "\n    for key in dict.keys():\n        print(key)\n"}
{"task_id": "valid/69", "completion": "\n    phrase = \"Hello, my name is\"\n    name = \"John\"\n    age = 30\n    greeting = f\"{phrase} {name}, I am {age} years old.\"\n    return greeting\n"}
{"task_id": "valid/70", "completion": "\n    result = []\n    for string in strings:\n        string = re.sub(r'[^\\w\\s]', '', string)\n        string = string.title()\n        result.append(string)\n    return result\n\n"}
{"task_id": "valid/71", "completion": "\n    return string.index(char)\n"}
{"task_id": "valid/72", "completion": "\n    soup = BeautifulSoup(html_code, 'html.parser')\n    bold_text = soup.find_all('b')\n    return [str(bold) for bold in bold_text]\n"}
{"task_id": "valid/73", "completion": "\n    # Define the prices of the items\n    prices = {\n        'soda': 1.00,\n        'chips': 0.50,\n        'candy': 0.25\n    }\n\n    # Check if the item is in the prices dictionary\n    if item in prices:\n        # Calculate the change\n        change = money_inserted - prices[item]\n        # Check if the change is positive\n        if change > 0:\n            # Return the change\n            return change\n        else:\n            # Return an error message\n            return \"Insufficient funds\"\n    else:\n        # Return an error message\n        return \"Invalid item\"\n"}
{"task_id": "valid/74", "completion": "\n    # Combine the two lists into one\n    combined_list = list1 + list2\n    \n    # Remove duplicates by converting the list to a set and then back to a list\n    merged_list = list(set(combined_list))\n    \n    return merged_list\n"}
{"task_id": "valid/75", "completion": "\n    return list.count(target)\n"}
{"task_id": "valid/76", "completion": "\n    return base64.b64encode(string.encode('utf-8')).decode('utf-8')\n\n"}
{"task_id": "valid/77", "completion": "\n    return [i for i, x in enumerate(vector) if x != 0]\n"}
{"task_id": "valid/78", "completion": "\n    # Define the dictionary with the expected values\n    expected_values = {\n        \"name\": \"John\",\n        \"age\": 30,\n        \"city\": \"New York\"\n    }\n    \n    # Define the function to assign and validate the values\n    def assign_and_validate_values(values):\n        # Assign the values to the dictionary\n        for key, value in values.items():\n            if key in expected_values:\n                expected_values[key] = value\n            else:\n                raise ValueError(f\"Invalid key: {key}\")\n        \n        # Validate the values\n        for key, value in expected_values.items():\n            if key == \"age\" and not isinstance(value, int):\n                raise ValueError(f\"Invalid age: {value}\")\n            elif key == \"city\" and not isinstance(value, str):\n                raise ValueError(f\"Invalid city: {value}\")\n    \n    # Test the function with valid values\n    assign_and_validate_values(expected_values)\n    \n    # Test the function with invalid values\n    try:\n        assign_and_validate_values({\"name\": \"Jane\", \"age\": \"30\", \"city\": \"New York\"})\n    except ValueError as e:\n        print(f\"Error: {e}\")\n    \n    # Test the function with missing values\n    try:\n        assign_and_validate_values({\"name\": \"John\", \"age\": 30})\n    except ValueError as e:\n        print(f\"Error: {e}\")\n\nassign_and_validate()  # Call the function to test it\n"}
{"task_id": "valid/79", "completion": "\n    word_list = list(word)\n    random.shuffle(word_list)\n    return ''.join(word_list)\n\n"}
{"task_id": "valid/80", "completion": "\n    if element == 'H':\n        return 'Hydrogen'\n    elif element == 'He':\n        return 'Helium'\n    elif element == 'Li':\n        return 'Lithium'\n    elif element == 'Be':\n        return 'Beryllium'\n    elif element == 'B':\n        return 'Boron'\n    elif element == 'C':\n        return 'Carbon'\n    elif element == 'N':\n        return 'Nitrogen'\n    elif element == 'O':\n        return 'Oxygen'\n    elif element == 'F':\n        return 'Fluorine'\n    elif element == 'Ne':\n        return 'Neon'\n    elif element == 'Na':\n        return 'Sodium'\n    elif element == 'Mg':\n        return 'Magnesium'\n    elif element == 'Al':\n        return 'Aluminum'\n    elif element == 'Si':\n        return 'Silicon'\n    elif element == 'P':\n        return 'Phosphorus'\n    elif element == 'S':\n        return 'Sulfur'\n    elif element == 'Cl':\n        return 'Chlorine'\n    elif element == 'Ar':\n        return 'Argon'\n    elif element == 'K':\n        return 'Potassium'\n    elif element == 'Ca':\n        return 'Calcium'\n    elif element == 'Sc':\n        return 'Scandium'\n    elif element == 'Ti':\n        return 'Titanium'\n    elif element == 'V':\n        return 'Vanadium'\n    elif element == 'Cr':\n        return 'Chromium'\n    elif element == 'Mn':\n        return 'Manganese'\n    elif element == 'Fe':\n        return 'Iron'\n    elif element == 'Co':\n        return 'Cobalt'\n    elif element == 'Ni':\n        return 'Nickel'\n    elif element == 'Cu':\n        return 'Copper'\n    elif element == 'Zn':\n        return 'Zinc'\n    elif element == 'Ga':\n        return 'Gallium'\n    elif element == 'Ge':\n        return 'Germanium'\n    elif element == 'As':\n        return 'Arsenic'\n    elif element == 'Se':\n        return 'Selenium'\n    elif element == 'Br':\n        return 'Bromine'\n    elif element == 'Kr':\n        return 'Krypton'\n    elif element == 'Rb':\n        return 'Rubidium'\n    elif element == 'Sr"}
{"task_id": "valid/81", "completion": "\n    return [x for i, x in enumerate(arr) if i == 0 or x != arr[i-1]]\n"}
{"task_id": "valid/82", "completion": "\n    # Remove punctuation\n    text = re.sub(r'[^\\w\\s]', '', text)\n    # Tokenize the text\n    tokens = text.split()\n    return tokens\n\n"}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = []\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] % numbers[j] == 0 or numbers[j] % numbers[i] == 0:\n                divisible_numbers.append((numbers[i], numbers[j]))\n    return divisible_numbers\n"}
{"task_id": "valid/84", "completion": "\n    # Create a dictionary to store the frequency of each word\n    frequency = {}\n    \n    # Split the sentence into words\n    words = sentence.split()\n    \n    # Iterate over each word in the sentence\n    for word in words:\n        # If the word is already in the dictionary, increment its count\n        if word in frequency:\n            frequency[word] += 1\n        # If the word is not in the dictionary, add it with a count of 1\n        else:\n            frequency[word] = 1\n    \n    # Find the word with the highest frequency\n    highest_frequency_word = max(frequency, key=frequency.get)\n    \n    # Return the word with the highest frequency\n    return highest_frequency_word\n"}
{"task_id": "valid/85", "completion": "\n    return round(math.e, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    average = sum(numbers) / len(numbers)\n    sum_of_numbers = sum(numbers)\n    return average, sum_of_numbers\n\nnumbers = [1, 2, 3, 4, 5]\naverage, sum_of_numbers = getAverageAndSum(numbers)"}
{"task_id": "valid/87", "completion": "\n    min_value = time_series[0]\n    max_value = time_series[0]\n    \n    for value in time_series:\n        if value < min_value:\n            min_value = value\n        elif value > max_value:\n            max_value = value\n    \n    return min_value, max_value\n"}
{"task_id": "valid/88", "completion": "\n    related_articles = []\n    for article in encyclopedia:\n        related_articles.append(article['related_articles'])\n    return related_articles\n"}
{"task_id": "valid/89", "completion": "\n    return lst.index(max(lst))\n"}
{"task_id": "valid/90", "completion": "\n    return len(set(list1) & set(list2)) > 0\n"}
{"task_id": "valid/91", "completion": "\n    root = Element('root')\n    for key, value in dictionary.items():\n        elem = Element(key)\n        elem.text = str(value)\n        root.append(elem)\n    return tostring(root, encoding='unicode')\n\n"}
{"task_id": "valid/92", "completion": "\n    if not matrix or not matrix[0]:\n        return False\n\n    rows, cols = len(matrix), len(matrix[0])\n    left, right = 0, rows * cols - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        num = matrix[mid // cols][mid % cols]\n\n        if num == target:\n            return True\n        elif num < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False\n"}
{"task_id": "valid/93", "completion": "\n    odd_elements = [num for num in lst if num % 2 != 0]\n    total = sum(odd_elements)\n    average = total / len(odd_elements)\n    return total, average\n"}
{"task_id": "valid/94", "completion": "\n    return sorted(lst, reverse=True)[n-1]\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "valid/96", "completion": "\n    return set_a.symmetric_difference(set_b)\n"}
{"task_id": "valid/97", "completion": "\n    description = \"\"\n    for key, value in mapping.items():\n        description += f\"{key}: {value}\\n\"\n    return description\n"}
{"task_id": "valid/98", "completion": "\n    if n == 0:\n        return '0'\n    ternary = ''\n    while n > 0:\n        ternary = str(n % 3) + ternary\n        n = n // 3\n    return ternary\n"}
{"task_id": "valid/99", "completion": "\n    extensions = []\n    for file_name in file_names:\n        extension = file_name.split('.')[-1]\n        extensions.append(extension)\n    return extensions\n"}
{"task_id": "valid/100", "completion": "\n    if age < 18:\n        return \"minor\"\n    elif age >= 18 and age <= 64:\n        return \"adult\"\n    else:\n        return \"senior\"\n"}
{"task_id": "valid/101", "completion": "\n    # Define the grade scale\n    grade_scale = {\n        90: \"A\",\n        80: \"B\",\n        70: \"C\",\n        60: \"D\",\n        0: \"F\"\n    }\n\n    # Calculate the grade\n    for threshold in sorted(grade_scale.keys(), reverse=True):\n        if numerical_grade >= threshold:\n            grade = grade_scale[threshold]\n            break\n\n    # Calculate the GPA\n    gpa = (numerical_grade / 100) * 4\n\n    return grade, gpa\n"}
{"task_id": "valid/102", "completion": "\n    return sum(item['price'] for item in listing)\n"}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    count = 0\n    for palindrome in palindrome_tuples:\n        for char in palindrome[0]:\n            if char.lower() in vowels:\n                count += 1\n    return count\n"}
{"task_id": "valid/104", "completion": "\n    # Convert the string to lowercase\n    s = s.lower()\n    \n    # Remove punctuation\n    s = ''.join(e for e in s if e.isalnum() or e.isspace())\n    \n    # Remove extra spaces\n    s = ' '.join(s.split())\n    \n    return s\n"}
{"task_id": "valid/105", "completion": "\n    n = len(arr)\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == 0\n    if n == 2:\n        return arr[0] + arr[1] == 0\n\n    prefix_sum = [0] * n\n    prefix_sum[0] = arr[0]\n    for i in range(1, n):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i]\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if prefix_sum[j] - prefix_sum[i] == 0:\n                return True\n\n    return False\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n    for dependency, versions in dependencies.items():\n        latest_version = max(versions, key=lambda x: x['version'])\n        latest_versions[dependency] = latest_version['version']\n    return latest_versions\n"}
{"task_id": "valid/107", "completion": "\n    categorized = {}\n    for cause in causes:\n        if cause['cause'] not in categorized:\n            categorized[cause['cause']] = 1\n        else:\n            categorized[cause['cause']] += 1\n    return categorized\n"}
{"task_id": "valid/108", "completion": "\n    return name.replace(\" \", \"_\").lower()\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(c) > 127 for c in text)\n"}
{"task_id": "valid/110", "completion": "\n    # Remove punctuation from the string\n    string = ''.join(e for e in string if e.isalnum() or e.isspace())\n    return string\n"}
{"task_id": "valid/111", "completion": "\n    result = []\n    for num in num_list:\n        result.append(num ** exp)\n    return result\n"}
{"task_id": "valid/112", "completion": "\n    min_values = {}\n    for key in grid:\n        min_values[key] = min(grid[key])\n    return min_values\n"}
{"task_id": "valid/113", "completion": "\n    if current_num == n:\n        print(\"Thank you for your order of {} items.\".format(n))\n    else:\n        print(\"You have {} items in your cart.\".format(current_num))\n        print_thank_you(n, current_num + 1)\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    for i in lst:\n        if i == element:\n            count += 1\n        else:\n            break\n    return count\n"}
{"task_id": "valid/115", "completion": "\n    if num < 0:\n        return False\n    if num == 0:\n        return True\n    if num < base:\n        return False\n    if num % base == 0:\n        return False\n    if num % base == 1:\n        return False\n    if num % base == base - 1:\n        return False\n    if num % base == base:\n        return False\n    return check_repdigit(num // base, base)\n\n"}
{"task_id": "valid/116", "completion": "\n    if not s:\n        return s\n    if s[0] in 'aeiou':\n        return remove_vowels_recursive(s[1:])\n    else:\n        return s[0] + remove_vowels_recursive(s[1:])\n"}
{"task_id": "valid/117", "completion": "\n    help = \"Usage: python script.py [options]\\n\"\n    help += \"Options:\\n\"\n    for option in options:\n        help += f\"  --{option['name']}  {option['description']}\\n\"\n    return help\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n"}
{"task_id": "valid/119", "completion": "\n    return Val.count('1')\n"}
{"task_id": "valid/120", "completion": "\n    inverted_bitset = []\n    for bit in sample_bitset:\n        if bit == 0:\n            inverted_bitset.append(1)\n        else:\n            inverted_bitset.append(0)\n    return inverted_bitset\n"}
{"task_id": "valid/121", "completion": "\n    return all(c in 'aeiou' for c in s)\n"}
{"task_id": "valid/122", "completion": "\n    # Initialize a 2D array to store the count of subsequences\n    dp = [[0] * (len(subsequence) + 1) for _ in range(len(sequence) + 1)]\n    \n    # Fill the 2D array\n    for i in range(1, len(sequence) + 1):\n        for j in range(1, len(subsequence) + 1):\n            # If the current elements in the sequence and subsequence are equal\n            if sequence[i - 1] == subsequence[j - 1]:\n                # The count of subsequences is the count of subsequences without the current element\n                # plus the count of subsequences without the current element in the subsequence\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n            else:\n                # The count of subsequences is the count of subsequences without the current element\n                dp[i][j] = dp[i - 1][j]\n    \n    # The count of subsequences is stored in the last cell of the 2D array\n    return dp[-1][-1]\n"}
{"task_id": "valid/123", "completion": "\n    if h == 0:\n        return t\n    else:\n        return dividir(h // 10, t + h % 10 * 10)\n"}
{"task_id": "valid/124", "completion": "\n    return sum(num for num in input_list if num % 2 != 0)\n"}
{"task_id": "valid/125", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    count = 0\n    for char in string.lower():\n        if char in consonants:\n            count += 1\n    return count\n"}
{"task_id": "valid/126", "completion": "\n    # Initialize the electron's position and velocity\n    position = 0\n    velocity = 0\n\n    # Initialize the electron's energy\n    energy = 0\n\n    # Initialize the electron's time\n    time = 0\n\n    # Initialize the electron's trajectory\n    trajectory = []\n\n    # Simulate the electron's behavior\n    while position < len(grid_energies):\n        # Calculate the electron's energy at the current position\n        energy = grid_energies[position]\n\n        # Calculate the electron's velocity at the current position\n        velocity = ados[position] * (1 + dope[position] / dos_grid_size)\n\n        # Update the electron's position\n        position += velocity\n\n        # Update the electron's time\n        time += 1\n\n        # Add the electron's position to its trajectory\n        trajectory.append(position)\n\n    return trajectory\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n"}
{"task_id": "valid/128", "completion": "\n    if len(arr) < 2:\n        return 0\n\n    max_diff = 0\n    min_val = arr[0]\n    max_val = arr[0]\n\n    for num in arr:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n\n        max_diff = max(max_diff, max_val - min_val)\n\n    return max_diff\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color] = color\n    return color_dict\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/131", "completion": "\n    return list(set(lst[:3]))\n\n"}
{"task_id": "valid/132", "completion": "\n    return sorted(fruit_list)\n"}
{"task_id": "valid/133", "completion": "\n    sublists = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            sublists.append(lst[i:j])\n    return sublists\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d+\\.\\d+'\n    return bool(re.match(pattern, string))\n\n"}
{"task_id": "valid/135", "completion": "\n\n    ALTER TABLE {app_name}.{model_name} ADD COLUMN {field_name} TEXT;\n    \"\"\"\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = set(list1).intersection(set(list2))\n    return sum(common_elements)\n"}
{"task_id": "valid/137", "completion": "\n    # Calculate the forecast period\n    forecast_period = df['forecast_period'].unique()[0]\n    \n    return forecast_period\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: getattr(x, attr))\n"}
{"task_id": "valid/139", "completion": "\n    start_index = (page_number - 1) * items_per_page\n    end_index = start_index + items_per_page\n    return items[start_index:end_index]\n\n"}
{"task_id": "valid/140", "completion": "\n    n = int(n_str)\n    return n * 2\n"}
{"task_id": "valid/141", "completion": "\n    # Define a dictionary to store the preset coordinates\n    preset_coordinates = {\n        'preset1': (0, 0),\n        'preset2': (10, 10),\n        'preset3': (20, 20),\n    }\n    \n    # Check if the preset name is in the dictionary\n    if preset_name in preset_coordinates:\n        # Return the coordinates for the preset\n        return preset_coordinates[preset_name]\n    else:\n        # Return None if the preset is not found\n        return None\n"}
{"task_id": "valid/142", "completion": "\n    # Convert the lists to sets for efficient lookup\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Find the intersection of the two sets\n    common_elements = set1.intersection(set2)\n    \n    # Calculate the product of the common elements\n    product = 1\n    for element in common_elements:\n        product *= element\n    \n    return product\n"}
{"task_id": "valid/143", "completion": "\n    if allow_multiple_answer:\n        return \"Quiz system allows multiple answers.\"\n    else:\n        return \"Quiz system does not allow multiple answers.\"\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in sentence if char not in vowels])\n"}
{"task_id": "valid/146", "completion": "\n    # Create a new object that is a copy of a\n    merged = a.copy()\n    \n    # Iterate over the items in b\n    for key, value in b.items():\n        # If the key is not in a, add it to the merged object\n        if key not in merged:\n            merged[key] = value\n        # If the key is in a, merge the values\n        else:\n            if isinstance(merged[key], list):\n                merged[key].extend(value)\n            elif isinstance(merged[key], dict):\n                merged[key] = merge_objects(merged[key], value)\n            else:\n                merged[key] = value\n    \n    return merged\n"}
{"task_id": "valid/147", "completion": "\n    return max(d.values())\n"}
{"task_id": "valid/148", "completion": "\n    if key in dict:\n        values = dict[key]\n        return sum(values) / len(values)\n    else:\n        return None\n\n"}
{"task_id": "valid/149", "completion": "\n    return string.replace('e', '3')\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n\n"}
{"task_id": "valid/151", "completion": "\n    return x % 2 == 0\n\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n\n"}
