{"task_id": "EvoEval/0", "completion": "\n    def is_happy(s):\n        if len(s) < 3:\n            return False\n        for i in range(len(s) - 2):\n            if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n                return False\n        return True\n\n    a_happy = is_happy(a)\n    b_happy = is_happy(b)\n\n    if a_happy and b_happy:\n        a_num = float(a.replace(',', '.'))\n        b_num = float(b.replace(',', '.'))\n        if a_num > b_num:\n            return a\n        elif a_num < b_num:\n            return b\n        else:\n            return None\n    elif a_happy:\n        return a\n    elif b_happy:\n        return b\n    else:\n        return None\n"}
{"task_id": "EvoEval/1", "completion": "\n\n    # Split the value into number and string\n    number, string = value.split()\n\n    # Convert the number to a float\n    number = float(number)\n\n    # Round the number\n    rounded_number = round(number)\n\n    # Flip the case of the string\n    flipped_string = string.swapcase()\n\n    # Combine the parts\n    result = f'{rounded_number} {flipped_string}'\n\n    return result\n"}
{"task_id": "EvoEval/2", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        if i > 0:\n            result.append((2**n) % p)\n        result.append(numbers[i])\n    return result\n"}
{"task_id": "EvoEval/3", "completion": "\n    def is_balanced(s: str) -> bool:\n        count = 0\n        for c in s:\n            if c == '(':\n                count += 1\n            elif c == ')':\n                if count == 0:\n                    return False\n                count -= 1\n        return count == 0\n\n    def sort_string(s: str) -> str:\n        numbers = s.split()\n        numbers.sort(key=int)\n        return ' '.join(numbers)\n\n    for s in lst:\n        if not is_balanced(s):\n            return 'No'\n    lst = sort_string(' '.join(lst))\n    return 'Yes' if is_balanced(lst) else 'No'\n"}
{"task_id": "EvoEval/4", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime_divisor(n: int) -> int:\n        i = n - 1\n        while i > 1:\n            if n % i == 0 and is_prime(i):\n                return i\n            i -= 1\n        return 0\n\n    return sum(map(str, [largest_prime_divisor(n) for n in lst]))\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not numbers:\n        return []\n\n    first_num = round(numbers[0])\n    last_num = round(numbers[-1])\n\n    if (first_num + last_num) % 2 == 0:\n        return sorted(numbers, reverse=True)\n    else:\n        return sorted(numbers)\n"}
{"task_id": "EvoEval/6", "completion": "\n    if n % 2 == 0:\n        return n\n    else:\n        return n + 1\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    def sum_square_cube(n: int):\n        return sum(i**2 if i%3==0 else i**3 for i in range(1, n+1))\n\n    return sum_square_cube(n)\n"}
{"task_id": "EvoEval/8", "completion": "\n    # Initialize the count and checker\n    count = 0\n    checker = False\n\n    # Initialize the stack\n    stack = []\n\n    # Iterate over the string\n    for char in string:\n        # If the character is an opening bracket, push it to the stack\n        if char == bracket:\n            stack.append(char)\n        # If the character is a closing bracket\n        else:\n            # If the stack is empty, there is no matching opening bracket\n            if not stack:\n                return (checker, count)\n            # If the stack is not empty, pop the opening bracket from the stack\n            else:\n                stack.pop()\n                count += 1\n            # Set the checker to True\n            checker = True\n\n    # If the stack is not empty, there is a remaining opening bracket\n    if stack:\n        return (checker, count)\n    else:\n        return (checker, count)\n"}
{"task_id": "EvoEval/9", "completion": "\n    planet_dict = {\n        \"mercury\": 1,\n        \"venus\": 2,\n        \"earth\": 3,\n        \"mars\": 4,\n        \"jupiter\": 5,\n        \"saturn\": 6,\n        \"uranus\": 7,\n        \"neptune\": 8\n    }\n\n    if planet1 in planet_dict and planet2 in planet_dict:\n        planets_between = [planet for planet in planet_dict if planet_dict[planet1] < planet_dict[planet2]]\n        return {planet: planet[:-1] for planet in planets_between if planet_dict[planet] in [1, 2, 3]}\n    else:\n        return {}\n"}
{"task_id": "EvoEval/10", "completion": "\n    grade_list = []\n    for name, gpa in name_grade_list:\n        if gpa == 4.0:\n            grade = 'A+'\n        elif gpa > 3.7:\n            grade = 'A'\n        elif gpa > 3.3:\n            grade = 'A-'\n        elif gpa > 3.0:\n            grade = 'B+'\n        elif gpa > 2.7:\n            grade = 'B'\n        elif gpa > 2.3:\n            grade = 'B-'\n        elif gpa > 2.0:\n            grade = 'C+'\n        elif gpa > 1.7:\n            grade = 'C'\n        elif gpa > 1.3:\n            grade = 'C-'\n        elif gpa > 1.0:\n            grade = 'D+'\n        elif gpa > 0.7:\n            grade = 'D'\n        elif gpa > 0.0:\n            grade = 'D-'\n        else:\n            grade = 'E'\n        grade_list.append((name.capitalize(), grade))\n    return grade_list\n"}
{"task_id": "EvoEval/11", "completion": "\n\n    planets_orbits = {\n        \"Mercury\": 1,\n        \"Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\": 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n    }\n\n    planet1_index = planets_orbits.get(planet1, 0)\n    planet2_index = planets_orbits.get(planet2, 0)\n\n    if planet1_index == 0 or planet2_index == 0:\n        return 0\n\n    planets_in_between = sorted([planet for planet in planets_orbits if planets_orbits[planet] > planet1_index and planets_orbits[planet] < planet2_index])\n\n    count = 0\n    for planet in planets_in_between:\n        count += sum([1 for char in planet if char.lower() in 'aeiou'])\n\n    return count\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    def count_consonants(s):\n        return sum(1 for c in s if c.lower() not in 'aeiou')\n\n    def grade_from_gpa(gpa):\n        if gpa > 3.7: return 'A'\n        elif gpa > 3.3: return 'A-'\n        elif gpa > 3.0: return 'B+'\n        elif gpa > 2.7: return 'B'\n        elif gpa > 2.3: return 'B-'\n        elif gpa > 2.0: return 'C+'\n        elif gpa > 1.7: return 'C'\n        elif gpa > 1.3: return 'C-'\n        elif gpa > 1.0: return 'D+'\n        elif gpa > 0.7: return 'D'\n        elif gpa > 0.0: return 'D-'\n        else: return 'E'\n\n    def grade_student(student):\n        name = student['name']\n        gpa = student['GPA']\n        grade = grade_from_gpa(gpa)\n        if count_consonants(name) == n:\n            grade = grade_from_gpa(gpa + 1)\n        return {'name': name, 'grade': grade}\n\n    return [grade_student(student) for student in student_info]\n"}
{"task_id": "EvoEval/13", "completion": "\n\n    def sum_digits(n):\n        if n < 0:\n            return -sum_digits(-n)\n        return 1 if n == 0 else n % 10\n\n    filtered_arr = [x for x in arr if sum_digits(x) > 0]\n    lst1_even = [x for x in lst1 if x % 2 == 0]\n\n    return \"YES\" if len(filtered_arr) <= len(lst1_even) else \"NO\"\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n, m + 1) if is_prime(i)]\n    if not primes:\n        return -1\n    avg = round(sum(primes) / len(primes))\n    return bin(avg)[2:]\n"}
{"task_id": "EvoEval/15", "completion": "\n    balance = 0\n    points = set()\n    for op in operations:\n        balance += op\n        if balance in points:\n            return True\n        points.add(balance)\n        if balance < 0:\n            return False\n    return False\n"}
{"task_id": "EvoEval/16", "completion": "\n\n    vowels = \"aeiouAEIOU\"\n    notes = music_string.split()\n    word_len = len(word)\n    word_index = 0\n    result = []\n\n    for note in notes:\n        if note[0] == 'o':\n            if word_index + word_len < len(notes) and notes[word_index + word_len][0] == 'o' and word[word_index + word_len] in vowels:\n                result.append(notes.index(note) + 1)\n            elif word_index + word_len < len(notes) and notes[word_index + word_len][0] == 'o':\n                result.append(notes.index(note) + 1)\n            elif word_index + word_len < len(notes) and notes[word_index + word_len][0] == '.':\n                result.append(notes.index(note) + 1)\n            else:\n                result.append(notes.index(note) + 1)\n        word_index += 1\n\n    return result\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    # Initialize the FibFib sequence\n    fibfib_sequence = [0, 0, 1]\n    \n    # Generate the FibFib sequence up to n\n    for i in range(3, n+1):\n        fibfib_sequence.append(fibfib_sequence[i-1] + fibfib_sequence[i-2] + fibfib_sequence[i-3])\n\n    # Count the frequency of each number in the list\n    freq_count = {}\n    for num in lst:\n        if num in freq_count:\n            freq_count[num] += 1\n        else:\n            freq_count[num] = 1\n\n    # Find the greatest number in the list that has a frequency equal to or greater than the n-th FibFib element\n    for num in sorted(freq_count.keys(), reverse=True):\n        if num >= fibfib_sequence[n]:\n            return num\n\n    return -1\n"}
{"task_id": "EvoEval/18", "completion": "\n    if len(nums) < 3:\n        return 0\n\n    min_sum = float('inf')\n    for i in range(len(nums) - 2):\n        for j in range(i + 1, len(nums) - 1):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] < min_sum:\n                    min_sum = nums[i] + nums[j] + nums[k]\n\n    return min_sum if min_sum != float('inf') else 0\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    max_withdrawal = min_deposit = max_balance = 0\n    for op in operations:\n        max_balance += op\n        if max_balance < 0:\n            return None, None, True\n        max_withdrawal = max(max_withdrawal, op)\n        min_deposit = min(min_deposit, op)\n    return max_withdrawal, min_deposit, max_balance < 0\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    def grade_to_letter(grade):\n        if grade == 4.0:\n            return 'A+'\n        elif grade > 3.7:\n            return 'A'\n        elif grade > 3.3:\n            return 'A-'\n        elif grade > 3.0:\n            return 'B+'\n        elif grade > 2.7:\n            return 'B'\n        elif grade > 2.3:\n            return 'B-'\n        elif grade > 2.0:\n            return 'C+'\n        elif grade > 1.7:\n            return 'C'\n        elif grade > 1.3:\n            return 'C-'\n        elif grade > 1.0:\n            return 'D+'\n        elif grade > 0.7:\n            return 'D'\n        elif grade > 0.0:\n            return 'D-'\n        else:\n            return 'E'\n\n    return [(name[::-1].lower(), grade_to_letter(grade)) for name, grade in zip(s, grades)]\n"}
{"task_id": "EvoEval/21", "completion": "\n    def base_change(n: int, base: int) -> str:\n        if n < base:\n            return str(n)\n        else:\n            return base_change(n // base, base) + str(n % base)\n\n    new_base_num = int(base_change(x, base))\n    prefixes = [base_change(i, base) for i in range(new_base_num + 1)]\n    return prefixes\n"}
{"task_id": "EvoEval/22", "completion": "\n"}
{"task_id": "EvoEval/23", "completion": "\n    def brazilian_factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * brazilian_factorial(n-1)\n\n    result = []\n    for i in range(1, n+1):\n        result.append(brazilian_factorial(i))\n\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    # Check if the string is happy\n    if not is_happy(numbers):\n        return 'Not a happy string'\n\n    # If the string is happy, sort the string\n    return ' '.join(sorted(numbers.split()))\n"}
{"task_id": "EvoEval/25", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    valid_triples = [(a[i], a[j], a[k]) for i in range(n) for j in range(i + 1, n) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0]\n    if not valid_triples:\n        return (0, 1)\n    else:\n        sum_triples = sum(sum(triple) for triple in valid_triples)\n        product_triples = 1\n        for triple in valid_triples:\n            product_triples *= triple[0]\n        return (sum_triples, product_triples)\n"}
{"task_id": "EvoEval/26", "completion": "\n    even_values = []\n    for value in values:\n        nums = value.split()\n        nums = [int(num) for num in nums]\n        even_nums = [num for num in nums if num % 2 == 0]\n        if even_nums:\n            even_values.append((min(even_nums), nums.index(min(even_nums))))\n\n    if even_values:\n        even_values.sort()\n        return even_values[0]\n    else:\n        return ()\n"}
{"task_id": "EvoEval/27", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes_lst1 = [i for i in lst1 if is_prime(i)]\n    primes_lst2 = [i for i in lst2 if is_prime(i)]\n\n    if len(primes_lst1) == 0:\n        return y\n    elif len(primes_lst2) == 0:\n        return x\n    else:\n        return x\n"}
{"task_id": "EvoEval/28", "completion": "\n    def grade_from_gpa(gpa: float) -> str:\n        if gpa == 4.0:\n            return 'A+'\n        elif gpa > 3.7:\n            return 'A'\n        elif gpa > 3.3:\n            return 'A-'\n        elif gpa > 3.0:\n            return 'B+'\n        elif gpa > 2.7:\n            return 'B'\n        elif gpa > 2.3:\n            return 'B-'\n        elif gpa > 2.0:\n            return 'C+'\n        elif gpa > 1.7:\n            return 'C'\n        elif gpa > 1.3:\n            return 'C-'\n        elif gpa > 1.0:\n            return 'D+'\n        elif gpa > 0.7:\n            return 'D'\n        elif gpa > 0.0:\n            return 'D-'\n        else:\n            return 'E'\n\n    def has_same_chars(s0: str, s1: str) -> bool:\n        return sorted(s0) == sorted(s1)\n\n    grades = [grade_from_gpa(gpa) for gpa in grades if has_same_chars(s0, s1)]\n    return grades\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y\n"}
{"task_id": "EvoEval/30", "completion": "\n    notes = music_string.split()\n    result = []\n    for note in notes:\n        if note == 'o':\n            result.append(x.numerator/x.denominator == 1)\n        elif note == 'o|':\n            result.append(x.numerator/x.denominator == 2)\n        elif note == '.|':\n            result.append(x.numerator/x.denominator == 4)\n    return result\n"}
{"task_id": "EvoEval/31", "completion": "\n    def factorize(n: int) -> List[int]:\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    factors = factorize(n)\n    special_factorial = 1\n    for factor in set(factors):\n        special_factorial *= (factors.count(factor) + 1)\n    return special_factorial\n"}
{"task_id": "EvoEval/32", "completion": "\n    def get_max_depth(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for c in s:\n            if c == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif c == ')':\n                current_depth -= 1\n        return max_depth\n\n    depths = [get_max_depth(s) for s in input]\n    total_depth = sum(depths)\n    total_depth_str = str(total_depth)\n    shift %= len(total_depth_str)\n    result = [int(d) for d in total_depth_str[-shift:]] + [int(d) for d in total_depth_str[:-shift]]\n    return result\n"}
{"task_id": "EvoEval/33", "completion": "\n    roman_numerals = {'i': 1, 'v': 5, 'x': 10, 'l': 50, 'c': 100, 'd': 500, 'm': 1000}\n    last_value = 0\n    for char in s:\n        current_value = roman_numerals[char]\n        if current_value == 1 or current_value == 10 or current_value == 100 or current_value == 1000:\n            if current_value > last_value:\n                return False\n            last_value = current_value\n        else:\n            return False\n    if len(s) < 3:\n        return False\n    return last_value\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    def md5_hash(s: str) -> str:\n        import hashlib\n        return hashlib.md5(s.encode()).hexdigest()\n\n    def deepest_level(s: str) -> str:\n        max_level = max(s.count('('), s.count(')'))\n        return str(max_level)\n\n    def group_hash(s: str) -> str:\n        if s.count('(') != s.count(')'):\n            return None\n        return md5_hash(deepest_level(s))\n\n    if not paren_string:\n        return []\n\n    groups = paren_string.split()\n    return [group_hash(s) for s in groups]\n"}
{"task_id": "EvoEval/35", "completion": "\n    if not dict:\n        return False\n\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not (key.islower() or key.isupper()):\n            return False\n        if len(key) < 3:\n            return False\n        if len(set(key[i:i+3] for i in range(len(key)-2))) != 3:\n            return False\n    return True\n"}
{"task_id": "EvoEval/36", "completion": "\n    if not arr:\n        return True\n\n    mod_p = [0]*len(arr)\n    for i in range(len(arr)):\n        mod_p[i] = arr[i] % p\n\n    mod_p.sort()\n\n    for i in range(len(arr)):\n        if mod_p[i] != arr[i]:\n            return False\n\n    return True\n"}
{"task_id": "EvoEval/37", "completion": "\n    # Initialize variables\n    min_sum = float('inf')\n    min_sub_array = None\n    even_count = 0\n    odd_count = 0\n\n    # Loop through the array\n    for i in range(len(nums)):\n        curr_sum = nums[i]\n        even_count = 0\n        odd_count = 1\n\n        # Loop through the array from i to the end\n        for j in range(i + 1, len(nums)):\n            curr_sum += nums[j]\n\n            # Check if the current sum is less than the minimum sum\n            if curr_sum < min_sum:\n                min_sum = curr_sum\n                min_sub_array = nums[i:j + 1]\n\n            # Check if the current sum is even or odd\n            if curr_sum % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    # Return the minimum sum and the number of even and odd digits\n    return (min_sum, even_count, odd_count)\n"}
{"task_id": "EvoEval/38", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def count_palindromes(l, n, is_even):\n        count = 0\n        for num in l:\n            if is_even:\n                if num % 2 == 0 and is_palindrome(num):\n                    count += 1\n            else:\n                if not num % 2 == 0 and is_palindrome(num):\n                    count += 1\n        return count\n\n    even_count = count_palindromes(l, n, True)\n    odd_count = count_palindromes(l, n, False)\n\n    return (even_count >= 2, odd_count >= 2)\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_palindrome(arr):\r\n        return arr == arr[::-1]\r\n\r\n    def count_changes(arr, x):\r\n        changes = 0\r\n        for i in range(len(arr) // 2):\r\n            if arr[i] != arr[-i - 1]:\r\n                changes += 1\r\n        return changes * x\r\n\r\n    if is_palindrome(arr):\r\n        return 0\r\n    else:\r\n        return count_changes(arr, x) + y\n"}
{"task_id": "EvoEval/40", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def last_digit_is_odd(n):\n        return n % 10 in [1, 3, 5, 7, 9]\n\n    def first_and_last_digit_are_odd(n):\n        return last_digit_is_odd(n) and last_digit_is_odd(n // 10**(len(str(n)) - 1))\n\n    largest_prime = None\n    for num in nums:\n        if num > 10 and is_prime(num) and first_and_last_digit_are_odd(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n    return largest_prime\n"}
{"task_id": "EvoEval/41", "completion": "\n    vowels = 'AEIOU'\n    s = s[::-1] if shift > len(s) // 2 else s\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/42", "completion": "\n    def check_fraction(fraction: str) -> bool:\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator and denominator\n\n    def check_brackets(expression: str) -> bool:\n        open_brackets = expression.count('<')\n        close_brackets = expression.count('>')\n        return open_brackets == close_brackets\n\n    def check_validity(expression: str) -> bool:\n        fractions = expression.split(',')\n        product = 1\n        for fraction in fractions:\n            numerator, denominator = map(int, fraction.split('/'))\n            product *= numerator / denominator\n        return product.is_integer() and check_brackets(expression)\n\n    return check_validity(expression)\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    if n == 0:\n        return [0]\n    if n == 1:\n        return [0, 0]\n    if n == 2:\n        return [0, 0, 2]\n    if n == 3:\n        return [0, 0, 2, 0]\n\n    sequence = [0, 0, 2, 0]\n    for i in range(4, n):\n        sequence.append(sum(sequence[-4:]))\n    return sequence\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    symbols = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n    roman_numeral = ''\n    for value, symbol in zip(values, symbols):\n        while number >= value:\n            number -= value\n            roman_numeral += symbol\n    return roman_numeral.split('-')\n"}
{"task_id": "EvoEval/45", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sum_numbers = 0\n    product_numbers = 1\n    for number in numbers:\n        if is_prime(number):\n            sum_numbers += number\n            product_numbers *= number\n\n    return (sum_numbers, product_numbers)\n"}
{"task_id": "EvoEval/46", "completion": "\n    # Filter out the negative numbers\n    l = [i for i in l if i >= 0]\n\n    # Filter out the odd numbers\n    l = [i for i in l if i % 2 == 0]\n\n    # If there are no positive even numbers, return -1\n    if not l:\n        return -1\n\n    # Otherwise, return the largest number\n    return max(l)\n\n"}
{"task_id": "EvoEval/47", "completion": "\n\n    def count_upper_vowels(s):\n        return sum(1 for c in s if c in 'AEIOU')\n\n    def count_odd_digits(s):\n        return sum(1 for c in s if int(c) % 2 != 0)\n\n    result = []\n    for i, s in enumerate(lst):\n        n = count_upper_vowels(s)\n        m = count_odd_digits(s)\n        result.append(f\"In the string, the number of uppercase vowels in even indices is {n}, and the number of odd digits is {m}.\")\n\n    return result\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [s for s in strings if s.startswith(prefix) and is_prime(len(s))]\n"}
{"task_id": "EvoEval/49", "completion": "\n    def get_digits(n):\n        if n < 0:\n            return -1 * (abs(n) // p) - (abs(n) % p != 0)\n        else:\n            return n // p + (n % p != 0)\n\n    return sum(get_digits(num) for num in arr)\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    vowels = \"AEIOU\"\n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n\n"}
{"task_id": "EvoEval/51", "completion": "\n\n    def convert_string(s):\n        if s.isalpha():\n            return s.swapcase()\n        elif s.replace('.', '', 1).replace(',', '', 1).isdigit():\n            return float(s)\n        else:\n            return s[::-1]\n\n    a = convert_string(str(a))\n    b = convert_string(str(b))\n\n    if isinstance(a, float) or isinstance(b, float):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    else:\n        return b\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    def pluck_and_prod(arr):\n        smallest_even = min(node for node in arr if node % 2 == 0)\n        smallest_index = arr.index(smallest_even)\n        if smallest_even:\n            arr.remove(smallest_even)\n            return [smallest_even, sum(abs(x) * (1 if x > 0 else -1) for x in arr)]\n        else:\n            return ([], None)\n\n    print(pluck_and_prod([4,2,3]))\n    print(pluck_and_prod([1,2,3]))\n    print(pluck_and_prod([]))\n    print(pluck_and_prod([-5, -2, 3, 0, -4]))\n\npluck_and_prod()\n"}
{"task_id": "EvoEval/53", "completion": "\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    grades = [4.0, 3, 2.75, 1.9, 3.5]\n    hex_grades = ['F', 'B', 'B', '8', 'D']\n    count = 0\n    for i in range(len(grades)):\n        if is_prime(ord(hex_grades[i][0])):\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/54", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_sum = 0\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if is_prime(nums[i]) and is_prime(nums[j]):\n                max_sum = max(max_sum, sum(nums[i:j+1]))\n    return max_sum\n"}
{"task_id": "EvoEval/55", "completion": "\n    roman_numerals = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\r\n    ints = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\r\n    result = ''\r\n\r\n    if number <= 0:\r\n        return None\r\n\r\n    for i in ints:\r\n        while number >= i:\r\n            result += roman_numerals[i]\r\n            number -= i\r\n\r\n    return hashlib.md5(result.encode()).hexdigest()\r\n\r"}
{"task_id": "EvoEval/56", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    factors = prime_factors(n)\n    odd_factors = [factor for factor in factors if factor % 2 != 0]\n    if not odd_factors:\n        return 0\n    else:\n        return reduce(lambda x, y: x * y, odd_factors)\n"}
{"task_id": "EvoEval/57", "completion": "\n    def is_palindromic(arr):\r\n        return arr == arr[::-1]\r\n\r\n    def is_odd_digit(arr):\r\n        return all(int(i) % 2 == 1 for i in str(sum(arr)))\r\n\r\n    if is_palindromic(arr) and is_odd_digit(arr):\r\n        return 0\r\n\r\n    odd_digit_indices = [i for i, x in enumerate(arr) if int(x) % 2 != 0]\r\n    odd_digit_sum = sum(int(x) for x in arr)\r\n\r\n    changes = 0\r\n    for i in odd_digit_indices:\r\n        for j in range(odd_digit_sum % 2 == 0):\r\n            if is_palindromic(arr[:i] + [j] + arr[i + 1:]) and is_odd_digit(arr[:i] + [j] + arr[i + 1:]):\r\n                changes += 1\r\n                break\r\n\r\n    return changes\n"}
{"task_id": "EvoEval/58", "completion": "\n\n    def count_freq(lst, num):\n        return lst.count(num)\n\n    max_freq = -1\n    for i in lst:\n        if count_freq(lst, i) >= i:\n            max_freq = i\n            break\n\n    if max_freq == -1:\n        return (-1, False)\n\n    sum_max_freq = max_freq + a + b\n    if max_freq == a or max_freq == b:\n        return (max_freq, True)\n    else:\n        return (max_freq, False)\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    def count_odd(s, base):\n        count = 0\n        for ch in s:\n            if int(ch, base) % 2 != 0:\n                count += 1\n        return count\n\n    def replace_with_count(s, count, base):\n        return s.replace('n', str(count))\n\n    result = []\n    for i, s in enumerate(lst):\n        count = count_odd(s, base)\n        result.append(replace_with_count(s, count, base))\n    return result\n"}
{"task_id": "EvoEval/60", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    a.sort()\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    a.append(a[i] + a[j] + a[k])\n                    a.sort()\n                    for l in range(n - 1, -1, -1):\n                        if a[l] % 2 == 0:\n                            return [a[l], l]\n    return []\n"}
{"task_id": "EvoEval/61", "completion": "\n    pass\n"}
{"task_id": "EvoEval/62", "completion": "\n\n    words = text.split()\n    words = [word.replace('-', ' ').replace('_', ' ') for word in words]\n    words = [word.lower() for word in words]\n    words = sorted(words, key=lambda x: (len(x), x))\n    words = [word.capitalize() if i % 2 == 0 else word for i, word in enumerate(words)]\n    words = ['-' if ' ' in word else '_' for word in words]\n    words = [word.replace('-', ' ').replace('_', '-') for word in words]\n    words = ' '.join(words)\n    return words\n\n"}
{"task_id": "EvoEval/63", "completion": "\n\n    planets_order = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"]\n    planets_names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n    if planet1 not in planets_names or planet2 not in planets_names:\n        return \"Invalid\"\n\n    if not set(order.split()).issubset(planets_order):\n        return \"Invalid\"\n\n    planet1_index = planets_order.index(planets_names.index(planet1))\n    planet2_index = planets_order.index(planets_names.index(planet2))\n\n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n\n    return \" \".join(planets_order[planet1_index+1:planet2_index])\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = 2 ** n % p\n    if not is_prime(result):\n        return []\n\n    primes = [i for i in range(2, result) if is_prime(i)]\n    return primes\n"}
{"task_id": "EvoEval/65", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return 2 ** n % p\n\n"}
{"task_id": "EvoEval/66", "completion": "\n\n    def find_largest_even(x, y):\n        for i in range(y, x-1, -1):\n            if i % 2 == 0:\n                return i\n        return -1\n\n    def find_triple_sum(a, n, sum):\n        for i in range(0, n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (a[i] + a[j] + a[k]) % 3 == 0:\n                        sum += a[i] + a[j] + a[k]\n        return sum\n\n    largest_even = find_largest_even(x, y)\n    if largest_even != -1:\n        x = largest_even\n\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    return find_triple_sum(a, n, 0)\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff and diff > threshold:\n            min_diff = diff\n    return min_diff\n"}
{"task_id": "EvoEval/68", "completion": "\n    def minOddDigitsProduct(num):\n        product = 1\n        for digit in str(num):\n            if int(digit) % 2 != 0:\n                product *= int(digit)\n        return product\n\n    return sum(minOddDigitsProduct(num) for num in nums)\n"}
{"task_id": "EvoEval/69", "completion": "\n    def is_happy(s):\n        for i in range(len(s) - 2):\n            if len(set(s[i:i+3])) != 3:\n                return False\n        return True\n\n    lst = [s for s in lst if is_happy(s)]\n    lst.sort(key=lambda s: (len(s), s))\n    return lst\n"}
{"task_id": "EvoEval/70", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def special_factorial(n):\n        result = 1\n        for i in range(1, n+1):\n            result *= factorial(i)\n        return result\n\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)+1):\n            sum_fact = sum(special_factorial(k) for k in range(i, j))\n            diff = abs(sum_fact - special_factorial(numbers[i]))\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[j-1])\n    return result\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    max_weight = factorial(n)\n    total_weight = sum(w)\n\n    if total_weight <= max_weight and w == w[::-1]:\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/72", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    for n in numbers:\n        if factorial(n) > threshold:\n            return False\n\n    return True\n"}
{"task_id": "EvoEval/73", "completion": "\n    def simplify(fraction: str) -> Fraction:\n        numerator, denominator = map(int, fraction.split('/'))\n        return Fraction(numerator, denominator)\n\n    result = []\n    n = simplify(n)\n\n    for fraction in fractions:\n        f = simplify(fraction)\n        result.append(f * n == int(f * n))\n\n    return result\n"}
{"task_id": "EvoEval/74", "completion": "\n    def is_even(n):\r\n        return n % 2 == 0\r\n\r\n    def sum_of_two(lst, x, y):\r\n        for i in range(len(lst)):\r\n            for j in range(i + 1, len(lst)):\r\n                if lst[i] + lst[j] == x and lst[i] + lst[j] == y:\r\n                    return True\r\n        return False\r\n\r\n    def sum_of_three(lst, x, y, z):\r\n        for i in range(len(lst)):\r\n            for j in range(i + 1, len(lst)):\r\n                for k in range(j + 1, len(lst)):\r\n                    if lst[i] + lst[j] + lst[k] == x and lst[i] + lst[j] + lst[k] == y and lst[i] + lst[j] + lst[k] == z:\r\n                        return True\r\n        return False\r\n\r\n    if sum_of_two(lst1, x, y) or sum_of_three(lst1, x, y, z):\r\n        return \"SUM \" + (\"YES\" if is_even(sum(lst1)) else \"NO\")\r\n    else:\r\n        return \"NO_SUM \" + (\"YES\" if is_even(sum(lst1)) else \"NO\")\n"}
{"task_id": "EvoEval/75", "completion": "\n"}
{"task_id": "EvoEval/76", "completion": "\n    def is_prime(n):\r\n        if n < 2:\r\n            return False\r\n        for i in range(2, int(n**0.5) + 1):\r\n            if n % i == 0:\r\n                return False\r\n        return True\r\n\r\n    def sum_of_digits(n):\r\n        return sum(int(digit) for digit in str(n))\r\n\r\n    modified_lst = [sum_of_digits(n) if is_prime(n) else n for n in lst]\r\n    modified_lst.sort(reverse=(sum(modified_lst[0:2]) % 2 == 0))\r\n    return modified_lst\n"}
{"task_id": "EvoEval/77", "completion": "\n    def get_digits(n):\n        n = abs(n)\n        return [int(d) for d in str(n)]\n\n    def sum_of_digits(n):\n        return sum(get_digits(n))\n\n    def is_odd(n):\n        return n % 2 != 0\n\n    def is_positive(n):\n        return n >= 0\n\n    return sum(n for i, n in enumerate(arr) if i % 2 == 0 and is_odd(n) and is_positive(n) and sum_of_digits(n) > 0)\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    vowels = \"AEIOU\"\n    result = \"\"\n    upper_vowels_count = 0\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i] in vowels:\n                upper_vowels_count += 1\n            if i % 2 == 0:\n                result += s[i].upper()\n            else:\n                result += s[i].lower()\n        else:\n            if i % 2 == 0:\n                result = result[::-1]\n            else:\n                result = result.upper()\n    return result, upper_vowels_count\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    if len(s) < 3:\n        return s[::-1]\n    for i in range(0, len(s) - 2, 3):\n        if len(set(s[i:i+3])) != 3:\n            return s[::-1]\n    return s.swapcase()\n"}
{"task_id": "EvoEval/80", "completion": "\n    def encode(s: str) -> str:\r\n        return ''.join([s[i:i+3] for i in range(0, len(s), 3)])\r\n\r\n    def decode(s: str) -> str:\r\n        return ''.join([s[i:i+3] for i in range(0, len(s), 3)])[::-1]\r\n\r\n    def is_palindrome(s: str) -> bool:\r\n        return s == s[::-1]\r\n\r\n    encoded = encode(s)\r\n    decoded = decode(encoded)\r\n    result = ''.join([ch for ch in decoded if ch not in c])\r\n\r\n    return (result, is_palindrome(result))\r\n\r"}
{"task_id": "EvoEval/81", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    fibfib_sequence = [0, 0, 1]\n    for i in range(3, n+1):\n        fibfib_sequence.append(fibfib_sequence[i-1] + fibfib_sequence[i-2] + fibfib_sequence[i-3])\n\n    mean = sum(fibfib_sequence) / n\n    deviations = [abs(x - mean) for x in fibfib_sequence]\n    mad = sum(deviations) / n\n\n    return mad\n"}
{"task_id": "EvoEval/82", "completion": "\n    def is_even(n: int) -> bool:\n        return n % 2 == 0\n\n    def get_digits(n: int) -> List[int]:\n        return [int(d) for d in str(n)]\n\n    def product_of_odds(lst: List[int]) -> int:\n        return prod([d for d in lst if d % 2 != 0])\n\n    def prod(lst: List[int]) -> int:\n        p = 1\n        for i in lst:\n            p *= i\n        return p\n\n    if n == 0 or n == 1:\n        return 0\n\n    fibfib = [0, 0, 1]\n    for i in range(3, n + 1):\n        fibfib.append(fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3])\n\n    if is_even(fibfib[n]):\n        return product_of_odds(get_digits(fibfib[n]))\n    else:\n        return fibfib[n]\n"}
{"task_id": "EvoEval/83", "completion": "\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    text = text.replace(\" \", \"_\")\n    text = re.sub(r\"_{2,}\", \"_\", text)\n\n    return is_prime(len(text))\n"}
{"task_id": "EvoEval/84", "completion": "\n    histogram = {}\n    for i in range(1, len(string) + 1):\n        prefix = string[:i]\n        if prefix not in histogram:\n            histogram[prefix] = {}\n        if string[i-1] not in histogram[prefix]:\n            histogram[prefix][string[i-1]] = 1\n        else:\n            histogram[prefix][string[i-1]] += 1\n    return histogram\n"}
{"task_id": "EvoEval/85", "completion": "\n\n    def count_ones(n):\n        return bin(n).count('1')\n\n    lst.sort(key=lambda x: (count_ones(x), x))\n\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1]\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    common_operands = list(set(operand_lists[0]) - set(operand_lists[1:]))\n    if not common_operands:\n        return None\n\n    result = int(common_operands[0])\n    for i, operator in enumerate(operators):\n        if operator == '+':\n            for operand_list in operand_lists[1:]:\n                result += int(operand_list[i])\n        elif operator == '-':\n            for operand_list in operand_lists[1:]:\n                result -= int(operand_list[i])\n        elif operator == '*':\n            for operand_list in operand_lists[1:]:\n                result *= int(operand_list[i])\n        elif operator == '//':\n            for operand_list in operand_lists[1:]:\n                result //= int(operand_list[i])\n        elif operator == '**':\n            for operand_list in operand_lists[1:]:\n                result **= int(operand_list[i])\n\n    return result\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    stack = []\n    result = ''\n    for char in text:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                result += char\n        else:\n            result += char\n    if stack:\n        return ''\n    else:\n        return result\n"}
{"task_id": "EvoEval/88", "completion": "\n\n    def remove_odd_length_words(word_list):\n        return [word for word in word_list if len(word) % 2 == 0]\n\n    def sort_by_length_and_alphabetically(word_list):\n        return sorted(word_list, key=lambda x: (len(x), x))\n\n    word_list = s.replace(\" \", \"\").split(\",\")\n    word_list = remove_odd_length_words(word_list)\n    return sort_by_length_and_alphabetically(word_list)\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    if not strings:\n        return None\n\n    def md5_hash(s: str) -> str:\n        import hashlib\n        return hashlib.md5(s.encode()).hexdigest()\n\n    return [s for s in strings if md5_hash(s) == hash_substring]\n"}
{"task_id": "EvoEval/90", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    result = {}\n    for key in dict:\n        if isinstance(key, str):\n            count = 0\n            for char in key:\n                if char.lower() in vowels:\n                    count += 1\n            result[key.lower()] = count\n    return result\n"}
{"task_id": "EvoEval/91", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    l_prime = l.copy()\n    for i in range(0, len(l), 2):\n        if is_prime(l[i]):\n            l_prime[i] = x\n        else:\n            l_prime[i] = y\n\n    l_prime[1::2] = sorted(l_prime[1::2])\n\n    return l_prime\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    common_elements = [i for i in a if i in l1]\n    common_elements.sort()\n    count = 0\n    for i in range(len(common_elements)):\n        for j in range(i + 1, len(common_elements)):\n            for k in range(j + 1, len(common_elements)):\n                if (common_elements[i] + common_elements[j] + common_elements[k]) % 3 == 0:\n                    count += 1\n    if count == 0:\n        return ([], 0)\n    else:\n        return (common_elements, count)\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    string = string.lower()\n    length = len(string)\n    if length % 2 == 0:\n        return \"\"\n    else:\n        for i in range(length-1, 0, -1):\n            if string[i] in vowels and string[i-1] in consonants:\n                return string[i]\n        return \"\"\n"}
{"task_id": "EvoEval/94", "completion": "\n\n    def count_sum_digits(num):\n        if num < 0:\n            return -1 * sum(int(digit) for digit in str(abs(num))[1:])\n        else:\n            return sum(int(digit) for digit in str(num))\n\n    count = sum(1 for num in arr if count_sum_digits(num) > 0)\n    arr.sort(key=lambda num: count_sum_digits(num), reverse=(count % 2 == 0))\n    return arr\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    # Filter the list for words that contain the substring and have an even length\n    filtered_list = [word for word in strings if substring in word and len(word) % 2 == 0]\n    \n    # Sort the list by length and alphabetically\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n    \n    return sorted_list\n"}
{"task_id": "EvoEval/96", "completion": "\n    common_elements = [i for i in l1 if i in l2]\n    for i in range(len(common_elements)):\n        for j in range(i + 1, len(common_elements)):\n            if common_elements[i] + common_elements[j] == 0:\n                return True\n    return False\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    fib = [0, 0, 1]\n    for i in range(3, n+1):\n        fib.append(fib[i-1] + fib[i-2] + fib[i-3] + i*i - i + 1)\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (fib[i] + fib[j] + fib[k]) % 3 == 0:\n                    count += 1\n\n    return count\n"}
{"task_id": "EvoEval/98", "completion": "\n    if not dict:\n        return False\n\n    for key, value in dict.items():\n        if not isinstance(key, str) or not isinstance(value, str):\n            return False\n        if not (key.islower() or key.isupper()):\n            return False\n        if not (value.count('(') == value.count(')') and value.count('(') > 0 and value.count(')') > 0):\n            return False\n    return True\n"}
{"task_id": "EvoEval/99", "completion": "\n    return len(str(x).replace(\"0\", \"\").replace(\"1\", \"\").replace(\"2\", \"\").replace(\"3\", \"\").replace(\"4\", \"\").replace(\"5\", \"\").replace(\"6\", \"\").replace(\"7\", \"\").replace(\"8\", \"\").replace(\"9\", \"\"))\n\n"}
