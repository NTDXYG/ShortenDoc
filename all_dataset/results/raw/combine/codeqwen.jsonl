{"task_id": "EvoEval/0", "completion": "\n    def is_happy(s):\n        s = s.replace(\",\", \".\")\n        if len(s) < 3:\n            return False\n        for i in range(len(s) - 2):\n            if len(set(s[i:i+3])) < 3:\n                return False\n        return True\n\n    a_happy = is_happy(a)\n    b_happy = is_happy(b)\n\n    if not a_happy and not b_happy:\n        return None\n    elif a_happy and not b_happy:\n        return a\n    elif not a_happy and b_happy:\n        return b\n    else:\n        a_float = float(a.replace(\",\", \".\"))\n        b_float = float(b.replace(\",\", \".\"))\n        if a_float > b_float:\n            return a\n        elif a_float < b_float:\n            return b\n        else:\n            return None\n"}
{"task_id": "EvoEval/1", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/2", "completion": "\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(pow(2, n, p))\n    return result\n"}
{"task_id": "EvoEval/3", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/4", "completion": "\n    pass\n"}
{"task_id": "EvoEval/5", "completion": "\n    # Check if any two numbers are closer than the threshold\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                # Sort the array based on the sum of the first and last numbers being even or odd\n                if round((numbers[0] + numbers[-1])) % 2 == 0:\n                    return sorted(numbers, reverse=True)\n                else:\n                    return sorted(numbers)\n    return numbers\n"}
{"task_id": "EvoEval/6", "completion": "\n    levels = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            levels.append(levels[-1] + 2)\n        else:\n            levels.append(levels[-1] + 2)\n    return sum(levels) / len(levels) if n % 2 == 0 else int(sum(levels) / len(levels))\n"}
{"task_id": "EvoEval/7", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/8", "completion": "\n    balance = 0\n    count = 0\n    for char in string:\n        if char == bracket:\n            count += 1\n        if char == '<':\n            balance += 1\n        elif char == '>':\n            balance -= 1\n        if balance < 0:\n            return False, count\n    return balance == 0, count\n"}
{"task_id": "EvoEval/9", "completion": "\n    planets = [\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"]\n    roman_numerals = [\"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\"]\n    planet_dict = dict(zip(planets, roman_numerals))\n    \n    if planet1 not in planets or planet2 not in planets or planet1 == planet2:\n        return {}\n    \n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    return {planet: planet_dict[planet] for planet in planets[index1+1:index2]}\n"}
{"task_id": "EvoEval/10", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/11", "completion": "\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return 0\n    planet_index1, planet_index2 = planets.index(planet1), planets.index(planet2)\n    if planet_index1 > planet_index2:\n        planet_index1, planet_index2 = planet_index2, planet_index1\n    vowels = \"aeiouy\"\n    vowel_count = 0\n    for planet in planets[planet_index1 + 1:planet_index2]:\n        for letter in planet:\n            if letter.lower() in vowels:\n                vowel_count += 1\n    return vowel_count\n"}
{"task_id": "EvoEval/12", "completion": "\n    grades = []\n    for student in student_info:\n        name = student['name']\n        consonants = sum(1 for char in name if char.lower() not in 'aeiou' and char.isalpha())\n        if consonants == n:\n            if student['GPA'] == 4.0:\n                grade = 'A+'\n            elif student['GPA'] > 3.7:\n                grade = 'A'\n            elif student['GPA'] > 3.3:\n                grade = 'A-'\n            elif student['GPA'] > 3.0:\n                grade = 'B+'\n            elif student['GPA'] > 2.7:\n                grade = 'B'\n            elif student['GPA'] > 2.3:\n                grade = 'B-'\n            elif student['GPA'] > 2.0:\n                grade = 'C+'\n            elif student['GPA'] > 1.7:\n                grade = 'C'\n            elif student['GPA'] > 1.3:\n                grade = 'C-'\n            elif student['GPA'] > 1.0:\n                grade = 'D+'\n            elif student['GPA'] > 0.7:\n                grade = 'D'\n            elif student['GPA'] > 0.0:\n                grade = 'D-'\n            else:\n                grade = 'E'\n        else:\n            grade = 'N/A'\n        grades.append({'name': name, 'grade': grade})\n    return grades\n"}
{"task_id": "EvoEval/13", "completion": "\n    def sum_of_digits(n):\n        if n < 0:\n            return -int(str(n)[1]) + sum(int(digit) for digit in str(n)[2:])\n        else:\n            return sum(int(digit) for digit in str(n))\n\n    filtered_arr = [num for num in arr if sum_of_digits(num) > 0]\n    \n    even_needed = [num for num in lst1 if num % 2 != 0]\n    even_available = [num for num in filtered_arr if num % 2 == 0]\n    \n    if len(even_needed) <= len(even_available):\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "EvoEval/14", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(n, m + 1) if is_prime(num)]\n    if not primes:\n        return -1\n\n    avg = round(sum(primes) / len(primes))\n    return bin(avg)\n"}
{"task_id": "EvoEval/15", "completion": "\n    balance = 0\n    seen_balances = set()\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return False\n        if balance in seen_balances:\n            return True\n        seen_balances.add(balance)\n    return False\n"}
{"task_id": "EvoEval/16", "completion": "\n    vowels = \"aeiouAEIOU\"\n    beats = []\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            beats.append(sum(1 for note in music_string[:music_string.index(word[i])] if note in \"o|.|\"))\n            break\n    return beats[::-1] if beats else []\n"}
{"task_id": "EvoEval/17", "completion": "\n    # Your implementation goes here\n"}
{"task_id": "EvoEval/18", "completion": "\n    if len(nums) < 3:\n        return 0\n    min_sum = float('inf')\n    for i in range(len(nums) - 2):\n        current_sum = sum(nums[i:i+3])\n        min_sum = min(min_sum, current_sum)\n    return min_sum\n"}
{"task_id": "EvoEval/19", "completion": "\n    balance = 0\n    min_deposit = None\n    max_withdrawal = None\n    balance_negative = False\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            balance_negative = True\n            if min_deposit is None and op > 0:\n                min_deposit = op\n            if max_withdrawal is None and op < 0:\n                max_withdrawal = op\n        elif balance > 0 and min_deposit is None and op > 0:\n            min_deposit = op\n        elif balance > 0 and max_withdrawal is None and op < 0:\n            max_withdrawal = op\n\n    return (max_withdrawal, min_deposit, balance_negative)\n"}
{"task_id": "EvoEval/20", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/21", "completion": "\n    if base >= 10:\n        raise ValueError(\"Base must be less than 10\")\n    \n    prefixes = []\n    current_prefix = \"\"\n    for digit in str(x):\n        current_prefix += digit\n        prefixes.append(current_prefix)\n    \n    return prefixes\n"}
{"task_id": "EvoEval/22", "completion": "\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\r\n    if planet1 not in planets or planet2 not in planets:\r\n        return \"\"\r\n    index1, index2 = planets.index(planet1), planets.index(planet2)\r\n    if index1 > index2:\r\n        index1, index2 = index2, index1\r\n    binary_string = \"\".join([\"1\" if i in planets[index1+1:index2] else \"0\" for i in planets])\r\n    return f\"bd{binary_string}bd\"\n"}
{"task_id": "EvoEval/23", "completion": "\n    def brazilian_factorial(n):\n        result = 1\n        for i in range(1, n + 1):\n            result *= math.factorial(i)\n        return result\n\n    levels = []\n    current_stones = n\n    for _ in range(n):\n        levels.append(brazilian_factorial(current_stones))\n        current_stones += 2 - (n % 2)  # Increase by 1 if n is odd, by 2 if n is even\n    return levels\n"}
{"task_id": "EvoEval/24", "completion": "\n    # Check if the string is happy\n    if len(numbers.replace(' ', '')) != len(set(numbers.replace(' ', ''))):\n        return 'Not a happy string'\n    \n    # Sort the string\n    sorted_numbers = sorted(numbers.split())\n    \n    # Return the sorted string\n    return ' '.join(sorted_numbers)\n"}
{"task_id": "EvoEval/25", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    triples = [(a[i], a[j], a[k]) for i in range(n) for j in range(i + 1, n) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0]\n    if not triples:\n        return (0, 1)\n    sum_triples = sum(triple[0] for triple in triples)\n    product_triples = 1\n    for triple in triples:\n        product_triples *= triple[0]\n    return (sum_triples, product_triples)\n"}
{"task_id": "EvoEval/26", "completion": "\n    pass  # Your code here\n"}
{"task_id": "EvoEval/27", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    lst1_prime = [num for num in lst1 if is_prime(num)]\n    lst2_non_prime = [num for num in lst2 if not is_prime(num)]\n\n    if len(lst1_prime) == len(lst1):\n        return y\n\n    if len(lst2_non_prime) < len(lst1) - len(lst1_prime):\n        return y\n\n    return x\n"}
{"task_id": "EvoEval/28", "completion": "\n    if not (set(s0) == set(s1)):\n        return []\n\n    grades_dict = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n    }\n\n    return [grades_dict[gpa] for gpa in grades]\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def largest_prime_factor(num):\n        largest = -1\n        while num % 2 == 0:\n            largest = 2\n            num //= 2\n        for i in range(3, int(num**0.5) + 1, 2):\n            while num % i == 0:\n                largest = i\n                num //= i\n        if num > 2:\n            largest = num\n        return largest\n\n    if is_prime(n):\n        return x\n    else:\n        return largest_prime_factor(n) if n != 1 else y\n"}
{"task_id": "EvoEval/30", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/31", "completion": "\n    def factorial(x: int) -> int:\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    prime_factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while (n % divisor) == 0:\n            prime_factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        prime_factors.append(n)\n    \n    result = 1\n    for prime in prime_factors:\n        result *= factorial(prime)\n    \n    return result\n"}
{"task_id": "EvoEval/32", "completion": "\n    def max_depth(s: str) -> int:\n        depth = max_depth = 0\n        for char in s:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        return max_depth\n\n    def circular_shift(s: str, shift: int) -> str:\n        shift %= len(s)\n        return s[-shift:] + s[:-shift]\n\n    result = []\n    for group in input:\n        depths = [max_depth(parens) for parens in group.split()]\n        concatenated = ''.join(str(depth) for depth in depths)\n        shifted = circular_shift(concatenated, shift)\n        result.extend(int(digit) for digit in shifted)\n\n    return result\n"}
{"task_id": "EvoEval/33", "completion": "\n    roman_to_int = {'i': 1, 'v': 5, 'x': 10, 'l': 50, 'c': 100, 'd': 500, 'm': 1000}\n    int_to_roman = {1: 'i', 5: 'v', 10: 'x', 50: 'l', 100: 'c', 500: 'd', 1000: 'm'}\n    s = s.replace('iv', 'iiii').replace('ix', 'viii').replace('xl', 'xxxx').replace('xc', 'lxxx').replace('cd', 'cccd').replace('cm', 'mccc')\n    if len(s) < 3 or not s.isalpha():\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n    return sum(roman_to_int[c] for c in s)\n"}
{"task_id": "EvoEval/34", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/35", "completion": "\n    if not dict:\n        return False\n    \n    all_lower = all(key.islower() for key in dict.keys())\n    all_upper = all(key.isupper() for key in dict.keys())\n    \n    if not all_lower and not all_upper:\n        return False\n    \n    for key in dict.keys():\n        if not is_happy_string(key):\n            return False\n    \n    return True\n"}
{"task_id": "EvoEval/36", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/37", "completion": "\n    min_sum = math.inf\n    min_even = 0\n    min_odd = 0\n    current_sum = 0\n    current_even = 0\n    current_odd = 0\n\n    for num in nums:\n        if num < 0:\n            current_sum += num\n            current_even += 1 if num % 2 == 0 else 0\n            current_odd += 1 if num % 2 != 0 else 0\n        else:\n            if current_sum + num < min_sum:\n                min_sum = current_sum + num\n                min_even = current_even\n                min_odd = current_odd\n            if current_sum > 0:\n                current_sum = 0\n                current_even = 0\n                current_odd = 0\n            elif current_sum == 0:\n                current_sum += num\n                current_even += 1 if num % 2 == 0 else 0\n                current_odd += 1 if num % 2 != 0 else 0\n\n    if current_sum < min_sum:\n        min_sum = current_sum\n        min_even = current_even\n        min_odd = current_odd\n\n    return (min_even, min_odd)\n"}
{"task_id": "EvoEval/38", "completion": "\n    even_palindromes = sum(1 for i in range(1, n) if str(i) == str(i)[::-1] and i % 2 == 0)\n    odd_palindromes = sum(1 for i in range(1, n) if str(i) == str(i)[::-1] and i % 2 != 0)\n    \n    even_sum_exists = any(x + y == even_palindromes for x, y in combinations(l, 2))\n    odd_sum_exists = any(x + y == odd_palindromes for x, y in combinations(l, 2))\n    \n    return (even_sum_exists, odd_sum_exists)\n"}
{"task_id": "EvoEval/39", "completion": "\n    changes = 0\r\n    i = 0\r\n    j = len(arr) - 1\r\n    while i < j:\r\n        if arr[i] != arr[j]:\r\n            changes += 1\r\n        i += 1\r\n        j -= 1\r\n    return changes + x + y\r\n\r"}
{"task_id": "EvoEval/40", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_odd_ends(n):\n        return str(n)[0] in '13579' and str(n)[-1] in '13579'\n\n    largest_prime = None\n    for num in nums:\n        if num > 10 and is_odd_ends(num) and is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n    return largest_prime\n"}
{"task_id": "EvoEval/41", "completion": "\n    if shift > len(s):\n        s = s[::-1]\n    shifted_s = ''.join([chr((ord(c) - 65 + shift) % 26 + 65) if c.isupper() else c for c in s])\n    return sum(1 for i in range(0, len(shifted_s), 2) if shifted_s[i] in 'AEIOU')\n"}
{"task_id": "EvoEval/42", "completion": "\n    pass  # Your implementation goes here.\n"}
{"task_id": "EvoEval/43", "completion": "\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 0]\n    elif n == 2:\n        return [0, 0, 2]\n    elif n == 3:\n        return [0, 0, 2, 0]\n    \n    sequence = [0, 0, 2, 0]\n    for i in range(4, n):\n        next_value = sum(sequence[-4:])\n        sequence.append(next_value)\n    \n    if (sequence[0] + sequence[-1]) % 2 == 0:\n        sequence.sort(reverse=True)\n    else:\n        sequence.sort()\n    \n    return sequence\n"}
{"task_id": "EvoEval/44", "completion": "\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    prefixes = []\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            prefixes.append(roman_numerals[value])\n            number -= value\n    return prefixes\n"}
{"task_id": "EvoEval/45", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_sum = 0\n    prime_product = 1\n\n    for num in numbers:\n        if is_prime(num):\n            prime_sum += num\n            prime_product *= num\n\n    return prime_sum, prime_product\n"}
{"task_id": "EvoEval/46", "completion": "\n    # Filter out the negative numbers and find the maximum even number\n    max_even = max((x for x in l if x > 0 and x % 2 == 0), default=-1)\n    return max_even\n"}
{"task_id": "EvoEval/47", "completion": "\n    vowels = 'AEIOU'\n    result = []\n    for i, string in enumerate(lst):\n        count = 0\n        for j, char in enumerate(string):\n            if j % 2 == 0 and s[j] in vowels:\n                count += 1\n        result.append(f\"In the string, the number of uppercase vowels in even indices is {count}, and the number of odd digits is {sum(1 for char in string if int(char) % 2 == 1)}.\")\n    return result\n"}
{"task_id": "EvoEval/48", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [s for s in strings if s.startswith(prefix) and is_prime(len(s))]\n"}
{"task_id": "EvoEval/49", "completion": "\n    # Calculate 2^n modulo p\n    mod_result = pow(2, n, p)\n    \n    # Count the number of elements with a sum of digits > 2^n modulo p\n    count = sum(1 for num in arr if sum(int(digit) for digit in str(abs(num))) > mod_result)\n    \n    return count\n"}
{"task_id": "EvoEval/50", "completion": "\n    vowels = \"AEIOU\"\n    for i in range(len(word) - 2, 0, -2):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n"}
{"task_id": "EvoEval/51", "completion": "\n    def convert_to_number(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n            try:\n                return float(x)\n            except ValueError:\n                return None\n        return x\n\n    def modify_string(s):\n        if any(c.isalpha() for c in s):\n            return s.swapcase()\n        else:\n            return s[::-1]\n\n    a_num = convert_to_number(a)\n    b_num = convert_to_number(b)\n\n    if a_num is None and b_num is None:\n        return b\n    elif a_num is None:\n        return b\n    elif b_num is None:\n        return None\n    elif a_num > b_num:\n        return a\n    elif a_num < b_num:\n        return b\n    else:\n        return None\n"}
{"task_id": "EvoEval/52", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/53", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/54", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_sum = 0\n    current_sum = 0\n    for num in nums:\n        if is_prime(num):\n            current_sum += num\n            max_sum = max(max_sum, current_sum)\n        else:\n            current_sum = 0\n    return max_sum\n"}
{"task_id": "EvoEval/55", "completion": "\n    if number <= 0:\n        return None\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    roman_string = ''\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            roman_string += roman_numerals[value]\n            number -= value\n    return hashlib.md5(roman_string.encode()).hexdigest()\n"}
{"task_id": "EvoEval/56", "completion": "\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return 1 if len(factors) % 2 == 1 else 0\n"}
{"task_id": "EvoEval/57", "completion": "\n    # Your code here\r\n\r"}
{"task_id": "EvoEval/58", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/59", "completion": "\n    def base_change(num, base):\n        if num == 0:\n            return \"0\"\n        digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        result = \"\"\n        while num > 0:\n            result = digits[num % base] + result\n            num //= base\n        return result\n\n    output = []\n    for i, s in enumerate(lst):\n        odd_count = sum(1 for c in s if int(c) % 2 == 1)\n        base_changed_s = base_change(int(s, 10), base)\n        output.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return output\n"}
{"task_id": "EvoEval/60", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    return [a[i], i]\n    return []\n"}
{"task_id": "EvoEval/61", "completion": "\n    valid_planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in valid_planets or planet2 not in valid_planets:\n        return None\n    \n    longest_chain = None\n    for chain in chains:\n        if chain[0] == planet1 and chain[-1] == planet2:\n            if longest_chain is None or len(chain) > len(longest_chain):\n                longest_chain = chain\n    return longest_chain\n"}
{"task_id": "EvoEval/62", "completion": "\n    words = text.split()\n    sorted_words = []\n    while words:\n        min_word = min(words, key=lambda x: x.lower())\n        max_word = max(words, key=lambda x: x.lower())\n        sorted_words.append(min_word)\n        sorted_words.append(max_word)\n        words.remove(min_word)\n        words.remove(max_word)\n    sorted_text = ''.join(sorted_words).replace(' ', '_').replace('  ', '-')\n    return sorted_text\n"}
{"task_id": "EvoEval/63", "completion": "\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return \"Invalid\"\n    if order.replace(\" \", \"\") != \"\".join(sorted(order.replace(\" \", \"\"))):\n        return \"Invalid\"\n    if order.count(planet1) > 1 or order.count(planet2) > 1:\n        return \"Invalid\"\n    order_list = order.split()\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    if planet1_index < planet2_index:\n        return \" \".join(order_list[planet1_index + 1:planet2_index])\n    else:\n        return \" \".join(order_list[planet2_index + 1:planet1_index])\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    mod_result = pow(2, n, p)\n    prime_numbers = [i for i in range(mod_result) if is_prime(i)]\n    return prime_numbers\n"}
{"task_id": "EvoEval/65", "completion": "\n    mod_val = 2 ** n % p\n    for divisor in range(p - 1, 0, -1):\n        if mod_val % divisor == 0:\n            return divisor\n    return 1\n"}
{"task_id": "EvoEval/66", "completion": "\n    # Find the largest even number in the range [x, y]\n    largest_even = -1\n    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            largest_even = i\n            break\n\n    # Create the array a of length n\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n\n    # Find the largest triple (a[i], a[j], a[k]) where i < j < k and a[i] + a[j] + a[k] is a multiple of 3\n    max_sum = -1\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    max_sum = max(max_sum, a[i] + a[j] + a[k])\n\n    # Add the largest even number to the sum if it exists\n    if largest_even != -1:\n        max_sum += largest_even\n\n    return max_sum\n"}
{"task_id": "EvoEval/67", "completion": "\n    closest_pair = (None, None)\n    min_diff = float('inf')\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < threshold and diff < min_diff:\n                min_diff = diff\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair[1] - closest_pair[0] if closest_pair[0] is not None else 0\n"}
{"task_id": "EvoEval/68", "completion": "\n    min_product = float('inf')\n    for i in range(len(nums)):\n        product = 1\n        for j in range(i, len(nums)):\n            if nums[j] % 2 != 0:\n                product *= nums[j]\n            else:\n                product = 0\n            min_product = min(min_product, product)\n    return min_product if min_product != float('inf') else 0\n"}
{"task_id": "EvoEval/69", "completion": "\n    def is_happy(s):\n        return len(s) >= 3 and all(s[i] != s[i+1] for i in range(len(s)-1))\n\n    # Filter out non-happy strings and strings with odd lengths\n    happy_strings = [s for s in lst if is_happy(s) and len(s) % 2 == 0]\n\n    # Sort the list by length, then alphabetically\n    happy_strings.sort(key=lambda x: (len(x), x))\n\n    return happy_strings\n"}
{"task_id": "EvoEval/70", "completion": "\n    def special_factorial(n: int) -> int:\n        result = 1\n        for i in range(1, n + 1):\n            result *= math.factorial(i)\n        return result\n\n    closest_pair = (0, 0)\n    min_diff = float('inf')\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(special_factorial(numbers[i]) - special_factorial(numbers[j]))\n            if diff < min_diff:\n                min_diff = diff\n                closest_pair = (min(numbers[i], numbers[j]), max(numbers[i], numbers[j]))\n\n    return closest_pair\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    def brazilian_factorial(n):\n        result = 1\n        for i in range(1, n + 1):\n            result *= math.factorial(i)\n        return result\n\n    max_weight = brazilian_factorial(n)\n    total_weight = sum(w)\n    is_balanced = w == w[::-1]\n\n    return total_weight <= max_weight and is_balanced\n"}
{"task_id": "EvoEval/72", "completion": "\n    def special_factorial(n: int) -> int:\n        result = 1\n        for i in range(1, n + 1):\n            result *= factorial(i)\n        return result\n\n    special_factorials = [special_factorial(n) for n in numbers]\n    for i in range(len(special_factorials)):\n        for j in range(i + 1, len(special_factorials)):\n            if abs(special_factorials[i] - special_factorials[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "EvoEval/73", "completion": "\n    n = Fraction(n)\n    return [Fraction(f) * n == Fraction(f) for f in fractions]\n"}
{"task_id": "EvoEval/74", "completion": "\n    # Check if it is possible to make all elements of lst1 even by exchanging elements with lst2\n    even_lst1 = [num for num in lst1 if num % 2 == 0]\n    odd_lst1 = [num for num in lst1 if num % 2 != 0]\n    even_lst2 = [num for num in lst2 if num % 2 == 0]\n    odd_lst2 = [num for num in lst2 if num % 2 != 0]\n    if len(odd_lst1) <= len(even_lst2):\n        answer = \"YES\"\n    else:\n        answer = \"NO\"\n    # Check if one of the integers is equal to the sum of the other two\n    if x + y == z or x + z == y or y + z == x:\n        answer = \"SUM \" + answer\n    else:\n        answer = \"NO_SUM \" + answer\n    return answer\r\n"}
{"task_id": "EvoEval/75", "completion": "\n    # your code here\r\n    if not input_dict or not all(isinstance(k, str) for k in input_dict.keys()):\r\n        return {}\r\n    if not all(k.isupper() or k.islower() for k in input_dict.keys()):\r\n        return {}\r\n    return {k: round(float(v)) for k, v in input_dict.items()}\n"}
{"task_id": "EvoEval/76", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n\n    modified_lst = [digit_sum(n) if is_prime(n) else n for n in lst]\n    if len(lst) > 0 and (lst[0] + lst[-1]) % 2 == 0:\n        return sorted(modified_lst, reverse=True)\n    else:\n        return sorted(modified_lst)\n"}
{"task_id": "EvoEval/77", "completion": "\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    return sum(arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 != 0 and sum_of_digits(arr[i]) > 0)\n"}
{"task_id": "EvoEval/78", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/79", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/80", "completion": "\n    def encode(s: str) -> str:\r\n        result = \"\"\r\n        for i in range(0, len(s), 3):\r\n            group = s[i:i+3]\r\n            if len(group) == 3:\r\n                result += group[1:] + group[0]\r\n            else:\r\n                result += group\r\n        return result\r\n\r\n    def decode(s: str) -> str:\r\n        result = \"\"\r\n        for i in range(0, len(s), 3):\r\n            group = s[i:i+3]\r\n            if len(group) == 3:\r\n                result += group[-1] + group[:-1]\r\n            else:\r\n                result += group\r\n        return result\r\n\r\n    encoded = encode(s)\r\n    result = \"\".join([char for char in encoded if char not in c])\r\n    is_palindrome = result == result[::-1]\r\n    if not is_palindrome:\r\n        result = decode(result)\r\n    return (result, is_palindrome)\n\ns = \"abcde\"\nc = \"ae\""}
{"task_id": "EvoEval/81", "completion": "\n    if n == 0:\n        return 0.0\n    \n    fibfib_sequence = [0, 0, 1]\n    for i in range(3, n):\n        fibfib_sequence.append(fibfib_sequence[i-1] + fibfib_sequence[i-2] + fibfib_sequence[i-3])\n    \n    mean = sum(fibfib_sequence) / n\n    mad = sum(abs(x - mean) for x in fibfib_sequence) / n\n    \n    return mad\n"}
{"task_id": "EvoEval/82", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/83", "completion": "\n    text = re.sub(r' {2,}', '-', text.replace(' ', '_'))\n    return len(text) > 1 and all(text.count(str(i)) == 0 for i in range(2, int(len(text) ** 0.5) + 1)) and text.count('-') == 0\n"}
{"task_id": "EvoEval/84", "completion": "\n    histograms = {}\n    for i in range(1, len(string) + 1):\n        prefix = string[:i]\n        histogram = {}\n        max_count = 0\n        for letter in prefix:\n            histogram[letter] = histogram.get(letter, 0) + 1\n            if histogram[letter] > max_count:\n                max_count = histogram[letter]\n        histograms[prefix] = {letter: count for letter, count in histogram.items() if count == max_count}\n    return histograms\n"}
{"task_id": "EvoEval/85", "completion": "\n    if not lst:\n        return None\n    lst.sort(key=lambda x: (bin(x).count('1'), x))\n    return lst[1] if len(lst) > 1 else None\n"}
{"task_id": "EvoEval/86", "completion": "\n    common_operands = set(operand_lists[0]).intersection(*operand_lists[1:])\n    if not common_operands:\n        return None\n\n    common_operands = sorted(list(common_operands))\n    expression = common_operands[0]\n    for i in range(1, len(common_operands)):\n        expression += f\" {operators[i-1]} {common_operands[i]}\"\n\n    return eval(expression)\n"}
{"task_id": "EvoEval/87", "completion": "\n    stack = []\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char in vowels:\n            continue\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n        result += char\n    return result\n"}
{"task_id": "EvoEval/88", "completion": "\n    # Split the string into words\n    words = s.replace(',', '').split()\n    \n    # Filter out words with odd lengths\n    even_length_words = [word for word in words if len(word) % 2 == 0]\n    \n    # Sort the list by word length, then alphabetically\n    even_length_words.sort(key=lambda x: (len(x), x))\n    \n    return even_length_words\n"}
{"task_id": "EvoEval/89", "completion": "\n    if not strings:\n        return None\n    \n    import hashlib\n    \n    filtered_strings = []\n    for string in strings:\n        if string:\n            md5_hash = hashlib.md5(string.encode()).hexdigest()\n            if hash_substring in md5_hash:\n                filtered_strings.append(string)\n    \n    return filtered_strings\n"}
{"task_id": "EvoEval/90", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    result = {}\n    if not dict:\n        return result\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return result\n        if key.lower() != key and key.upper() != key:\n            return result\n        vowel_count = 0\n        for char in key:\n            if char.lower() in vowels:\n                vowel_count += 1\n        result[key] = vowel_count\n    return result\n"}
{"task_id": "EvoEval/91", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    even_indices.sort()\n\n    for i in range(0, len(l), 2):\n        if is_prime(even_indices[i // 2]):\n            l[i] = x\n        else:\n            l[i] = y\n\n    return l\n"}
{"task_id": "EvoEval/92", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    common_elements = list(set(a) & set(l1))\n    common_elements.sort()\n    triple_count = 0\n    for i in range(len(common_elements)):\n        for j in range(i + 1, len(common_elements)):\n            for k in range(j + 1, len(common_elements)):\n                if (common_elements[i] + common_elements[j] + common_elements[k]) % 3 == 0:\n                    triple_count += 1\n    return (common_elements, triple_count)\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiouAEIOU'\n    for i in range(len(string)-2, 0, -1):\n        if string[i] in vowels and string[i-1] not in vowels and string[i+1] not in vowels:\n            return string[i]\n    return ''\n"}
{"task_id": "EvoEval/94", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/95", "completion": "\n    filtered_strings = [s for s in strings if substring in s and len(s) % 2 == 0]\n    return sorted(filtered_strings, key=lambda x: (len(x), x))\n"}
{"task_id": "EvoEval/96", "completion": "\n    common_elements = set(l1) & set(l2)\n    for num in common_elements:\n        if -num in common_elements and num != 0:\n            return True\n    return False\n"}
{"task_id": "EvoEval/97", "completion": "\n    fib = [0, 0, 1]\n    for i in range(3, n + 1):\n        fib.append((fib[i - 1] + fib[i - 2] + fib[i - 3] + i * i - i + 1) % 3)\n    count = 0\n    for i in range(len(fib)):\n        for j in range(i + 1, len(fib)):\n            for k in range(j + 1, len(fib)):\n                if (fib[i] + fib[j] + fib[k]) % 3 == 0:\n                    count += 1\n    return count\n"}
{"task_id": "EvoEval/98", "completion": "\n    if not dict:\n        return False\n    \n    lower_case = upper_case = False\n    for key in dict.keys():\n        if not key.islower() and not key.isupper():\n            return False\n        if key.islower():\n            lower_case = True\n        else:\n            upper_case = True\n    \n    for value in dict.values():\n        stack = []\n        for char in value:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        if stack:\n            return False\n    \n    return lower_case != upper_case\n"}
{"task_id": "EvoEval/99", "completion": "\n    if x == 0:\n        return 1\n    length = 0\n    while x > 0:\n        x //= base\n        length += 1\n    return length\n"}
