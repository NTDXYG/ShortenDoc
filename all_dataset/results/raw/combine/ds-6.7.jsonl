{"task_id": "EvoEval/0", "completion": "\n    def is_happy(s):\n        for i in range(len(s) - 2):\n            if len(set(s[i:i + 3])) != 3:\n                return False\n        return len(s) >= 3\n\n    def to_float(s):\n        return float(s.replace(',', '.'))\n\n    a_happy = is_happy(a.replace(',', ''))\n    b_happy = is_happy(b.replace(',', ''))\n\n    if a_happy and b_happy:\n        a_num = to_float(a)\n        b_num = to_float(b)\n        if a_num > b_num:\n            return a\n        elif a_num < b_num:\n            return b\n    elif a_happy:\n        return a\n    elif b_happy:\n        return b\n\n    return None\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    num, word = value.split('.')\n    num = round(float(num))\n    word = word.swapcase()\n    return f'{num} {word}'\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    return [x if i == len(numbers) - 1 else x for i, x in enumerate(numbers)] + [2 ** n % p]\n"}
{"task_id": "EvoEval/3", "completion": "\n    # Your code here\n    lst.sort()\n    stack = []\n    for s in lst:\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack or stack[-1] != '(':\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'\n"}
{"task_id": "EvoEval/4", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime_divisor(n):\n        for i in range(n - 1, 1, -1):\n            if n % i == 0 and is_prime(i):\n                return i\n        return 0\n\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n\n    return max(digit_sum(largest_prime_divisor(n)) for n in lst)\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            if round(numbers[0] + numbers[-1]) % 2 == 0:\n                return sorted(numbers, reverse=True)\n            else:\n                return sorted(numbers)\n    return numbers\n"}
{"task_id": "EvoEval/6", "completion": "\n    total_stones = 0\n    for i in range(n):\n        if n % 2 == 0:\n            total_stones += n + 2 * i\n        else:\n            total_stones += n + 2 * i\n    if n % 2 == 0:\n        return total_stones / (4 * n)\n    else:\n        return total_stones / (4 * n)\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    lst = [i for i in range(1, n+1)]\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    stack = []\n    count = 0\n    for char in string:\n        if char == bracket:\n            count += 1\n        if char == \"<\":\n            stack.append(char)\n        if char == \">\":\n            if not stack:\n                return (False, count)\n            stack.pop()\n    return (not stack, count)\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    planets_order = ['mercury', 'venus', 'earth', 'mars', 'jupiter', 'saturn', 'uranus', 'neptune']\n    planets_roman = ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii']\n    planet_to_num = {planet: num for planet, num in zip(planets_order, range(1, 9))}\n    planet_to_roman = {planet: roman for planet, roman in zip(planets_order, planets_roman)}\n    result = {}\n    if planet1 in planet_to_num and planet2 in planet_to_num:\n        start, end = sorted([planet_to_num[planet1], planet_to_num[planet2]])\n        for planet in planets_order:\n            if planet_to_num[planet] > start and planet_to_num[planet] < end:\n                result[planet] = planet_to_roman[planet]\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    grade_scale = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'D-'}\n    result = []\n    for name, grade in name_grade_list:\n        proper_case_name = name[0].upper() + name[1:].lower()\n        for gpa in grade_scale:\n            if grade >= gpa:\n                letter_grade = grade_scale[gpa]\n                break\n        else:\n            letter_grade = 'E'\n        result.append((proper_case_name, letter_grade))\n    return result\n"}
{"task_id": "EvoEval/11", "completion": "\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n\n    if planet1 not in planets or planet2 not in planets:\n        return 0\n\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n\n    if index1 > index2:\n        index1, index2 = index2, index1\n\n    for i in range(index1+1, index2):\n        for char in planets[i]:\n            if char in vowels:\n                vowel_count += 1\n\n    return vowel_count\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    def count_consonants(word):\n        return sum(1 for c in word if c.lower() in 'bcdfghjklmnpqrstvwxyz')\n\n    def grade(gpa):\n        if gpa == 4.0: return 'A+'\n        if gpa > 3.7: return 'A'\n        if gpa > 3.3: return 'A-'\n        if gpa > 3.0: return 'B+'\n        if gpa > 2.7: return 'B'\n        if gpa > 2.3: return 'B-'\n        if gpa > 2.0: return 'C+'\n        if gpa > 1.7: return 'C'\n        if gpa > 1.3: return 'C-'\n        if gpa > 1.0: return 'D+'\n        if gpa > 0.7: return 'D'\n        if gpa > 0.0: return 'D-'\n        return 'E'\n\n    def bump_grade(gpa, consonants):\n        if consonants != n: return grade(gpa)\n        if gpa < 3.7: return grade(gpa + 0.3)\n        if gpa < 3.3: return grade(gpa + 0.2)\n        if gpa < 3.0: return grade(gpa + 0.1)\n        if gpa < 2.7: return grade(gpa + 0.1)\n        if gpa < 2.3: return grade(gpa + 0.1)\n        if gpa < 2.0: return grade(gpa + 0.1)\n        if gpa < 1.7: return grade(gpa + 0.1)\n        if gpa < 1.3: return grade(gpa + 0.1)\n        if gpa < 1.0: return grade(gpa + 0.1)\n        if gpa < 0.7: return grade(gpa + 0.1)\n        return grade(gpa)\n\n    return [{'name': s['name'], 'grade': bump_grade(s['GPA'], count_consonants(s['name']))} for"}
{"task_id": "EvoEval/13", "completion": "\n    def sum_digits(n):\n        return sum(int(d) for d in str(n))\n\n    arr = [n for n in arr if sum_digits(n) > 0]\n    odd_arr = [n for n in arr if n % 2 != 0]\n    even_lst1 = [n for n in lst1 if n % 2 == 0]\n\n    if len(odd_arr) <= len(even_lst1):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n, m+1) if is_prime(i)]\n    if not primes:\n        return -1\n    avg = round(sum(primes) / len(primes))\n    return bin(avg)\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    balance = 0\n    zero_sum_points = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return False\n        elif balance == 0:\n            zero_sum_points += 1\n    return zero_sum_points >= 3\n"}
{"task_id": "EvoEval/16", "completion": "\n    vowels = 'aeiouAEIOU'\n    notes = {'o': 4, 'o|': 2, '.|': 1}\n    word = word[::-1]\n    music_string = music_string.split()\n    music_string = music_string[::-1]\n    result = []\n\n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            count = 0\n            for note in music_string:\n                count += notes[note]\n                if count >= notes[word[i]]:\n                    result.append(count)\n                    break\n    return result\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    fibfib_lst = [0, 0, 1]\n    for i in range(3, n+1):\n        fibfib_lst.append(fibfib_lst[i-1] + fibfib_lst[i-2] + fibfib_lst[i-3])\n    fibfib_n = fibfib_lst[n]\n\n    if fibfib_n == 0:\n        return -1\n\n    count_dict = {}\n    for num in lst:\n        if num > 0:\n            count_dict[num] = count_dict.get(num, 0) + 1\n\n    for num in sorted(count_dict.keys(), reverse=True):\n        if count_dict[num] >= fibfib_n:\n            return num\n\n    return -1\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    nums.sort()\n    return min(nums[0] + nums[1] + nums[2], nums[-1] + nums[-2] + nums[-3])\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    balance = 0\n    min_deposit = None\n    max_withdrawal = None\n    negative_balance = False\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            negative_balance = True\n        if op > 0:\n            if min_deposit is None or op < min_deposit:\n                min_deposit = op\n        elif op < 0:\n            if max_withdrawal is None or op > max_withdrawal:\n                max_withdrawal = op\n\n    return max_withdrawal, min_deposit, negative_balance\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    def reverse_case(name):\n        return ''.join([char.upper() if char.islower() else char.lower() for char in name])\n\n    def assign_grade(gpa):\n        if gpa == 4.0: return 'A+'\n        elif gpa > 3.7: return 'A'\n        elif gpa > 3.3: return 'A-'\n        elif gpa > 3.0: return 'B+'\n        elif gpa > 2.7: return 'B'\n        elif gpa > 2.3: return 'B-'\n        elif gpa > 2.0: return 'C+'\n        elif gpa > 1.7: return 'C'\n        elif gpa > 1.3: return 'C-'\n        elif gpa > 1.0: return 'D+'\n        elif gpa > 0.7: return 'D'\n        elif gpa > 0.0: return 'D-'\n        else: return 'E'\n\n    return [(reverse_case(name), assign_grade(gpa)) for name, gpa in zip(s, grades)]\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    base_x = \"\"\n    while x:\n        base_x = str(x % base) + base_x\n        x //= base\n    return [base_x[:i] for i in range(1, len(base_x) + 1)]\n"}
{"task_id": "EvoEval/22", "completion": "\n"}
{"task_id": "EvoEval/23", "completion": "\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    def brazilian_factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n) * brazilian_factorial(n - 1)\n\n    levels = [n]\n    while n > 1:\n        n = n - 2 if n % 2 == 0 else n - 1\n        levels.append(n)\n\n    return [brazilian_factorial(level) for level in levels]\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    num_dict = {'zero':0, 'one':1, 'two':2, 'three':3, 'four':4, 'five':5, 'six':6, 'seven':7, 'eight':8, 'nine':9}\n    num_list = numbers.split()\n    \n    if len(set(num_list)) != len(num_list):\n        return 'Not a happy string'\n    \n    for i in range(0, len(num_list), 3):\n        if len(set(num_list[i:i+3])) != 3:\n            return 'Not a happy string'\n    \n    num_list = [num_dict[num] for num in num_list]\n    num_list.sort()\n    num_list = [num for num in num_list]\n    \n    return ' '.join(num_list)\n"}
{"task_id": "EvoEval/25", "completion": "\n    if n < 3:\n        return (0, 1)\n\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    sum_triples, product_triples = 0, 1\n\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    sum_triples += a[0]\n                    product_triples *= a[0]\n\n    return (sum_triples, product_triples)\n"}
{"task_id": "EvoEval/26", "completion": "\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    result = ()\n    for i, value in enumerate(values):\n        nums = value.split()\n        nums.sort(key=lambda x: num_dict[x])\n        for j, num in enumerate(nums):\n            if num_dict[num] % 2 == 0:\n                result = (num, i)\n                return result\n    return result\n"}
{"task_id": "EvoEval/27", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    lst1_primes = [num for num in lst1 if is_prime(num)]\n    lst2_non_primes = [num for num in lst2 if not is_prime(num)]\n\n    if len(lst1_primes) == len(lst1) and len(lst2_non_primes) == len(lst2):\n        return x\n    else:\n        return y\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    grades_dict = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', \n                   2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0: 'D-', \n                   0.0: 'E'}\n    result = []\n    for gpa in grades:\n        if gpa in grades_dict:\n            if set(s0) == set(s1):\n                result.append(grades_dict[gpa])\n    return result\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime_factor(n):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n\n\n    if is_prime(n):\n        return x\n    elif n == 1:\n        return y\n    else:\n        return largest_prime_factor(n)\n"}
{"task_id": "EvoEval/30", "completion": "\n    # Split the music_string into a list of notes\n    notes = music_string.split()\n\n    # Create a dictionary to map notes to their lengths\n    note_lengths = {'o': 4, 'o|': 2, '.|': 1}\n\n    # Calculate the total length of the music\n    total_length = sum(note_lengths[note] for note in notes)\n\n    # Split the fraction into numerator and denominator\n    numerator, denominator = map(int, x.split('/'))\n\n    # Calculate the value of x when multiplied by the total length\n    x_value = total_length * numerator\n\n    # Calculate the denominator of the simplified fraction\n    simplified_denominator = denominator * total_length\n\n    # Calculate the numerator of the simplified fraction\n    simplified_numerator = x_value // simplified_denominator\n\n    # Create a list to store the result\n    result = []\n\n    # Iterate over the notes\n    for note in notes:\n        # If the note simplifies the fraction, add True to the result\n        if note_lengths[note] * simplified_numerator <= simplified_denominator:\n            result.append(True)\n        # Otherwise, add False to the result\n        else:\n            result.append(False)\n\n    # Return the result\n    return result\n"}
{"task_id": "EvoEval/31", "completion": "\n\n        This helper function factorizes the input 'n' into its prime factors.\n        \"\"\"\n        factors = []\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    def factorial(n: int) -> int:\n        \"\"\"\n        This helper function calculates the factorial of the input 'n'.\n        \"\"\"\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    prime_factors = factorize(n)\n    unique_prime_factors = set(prime_factors)\n    result = 1\n    for prime in unique_prime_factors:\n        result *= factorial(prime_factors.count(prime))\n    return result\n"}
{"task_id": "EvoEval/32", "completion": "\n    def find_depth(s: str) -> int:\n        stack = []\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                stack.append(c)\n                max_depth = max(max_depth, len(stack))\n            elif c == ')':\n                stack.pop()\n        return max_depth\n\n    depths = [find_depth(s) for s in input]\n    concatenated = int(''.join(map(str, depths)))\n    shifted = str(concatenated)[shift:] + str(concatenated)[:shift]\n    return [int(c) for c in shifted]\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    roman_numerals = {\n        'i': 1,\n        'v': 5,\n        'x': 10,\n        'l': 50,\n        'c': 100,\n        'd': 500,\n        'm': 1000\n    }\n\n    if len(s) < 3:\n        return False\n    if len(s) > 3000:\n        return False\n\n    num = 0\n    for i in range(len(s)):\n        if s[i] not in roman_numerals:\n            return False\n        num += roman_numerals[s[i]]\n        if i > 0 and roman_numerals[s[i]] > roman_numerals[s[i - 1]]:\n            if i > 1 and roman_numerals[s[i]] > roman_numerals[s[i - 2]]:\n                return False\n        if i > 1 and s[i] == s[i - 1] == s[i - 2] and s[i] not in ['m', 'd', 'l', 'v']:\n            return False\n\n    if num > 1000:\n        return False\n\n    return num\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    import hashlib\n    def md5(s: str) -> str:\n        return hashlib.md5(s.encode()).hexdigest()\n\n    if not paren_string:\n        return []\n\n    groups = paren_string.split()\n    result = []\n\n    for group in groups:\n        stack = []\n        max_depth = 0\n        current_depth = 0\n\n        for char in group:\n            if char == '(':\n                stack.append(char)\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                if not stack:\n                    result.append(md5('None'))\n                    break\n                stack.pop()\n                current_depth -= 1\n        else:\n            if stack:\n                result.append(md5('None'))\n            else:\n                result.append(md5(str(max_depth)))\n\n    return result\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    def is_happy_string(s):\n        if len(s) < 3:\n            return False\n        for i in range(len(s) - 2):\n            if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n                return False\n        return True\n\n    if not dict:\n        return False\n\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not (key.islower() or key.isupper()):\n            return False\n        if not is_happy_string(key):\n            return False\n\n    return True\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    if len(arr) == 0:\n        return True\n    arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted(arr[i:] + arr[:i]):\n            if (2 ** len(arr[i:])) % p < n:\n                return True\n    return False\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    # Initialize the minimum subarray sum to be the maximum possible integer\n    min_sum = float('inf')\n    # Initialize the current sum to be 0\n    cur_sum = 0\n    # Initialize the count of even and odd digits in the minimum sum to be 0\n    even_count = odd_count = 0\n\n    # Iterate over the array\n    for num in nums:\n        # Add the current number to the current sum\n        cur_sum += num\n        # If the current sum is less than the minimum sum\n        if cur_sum < min_sum:\n            # Update the minimum sum\n            min_sum = cur_sum\n            # Count the number of even and odd digits in the minimum sum\n            even_count = sum(1 for digit in str(min_sum) if int(digit) % 2 == 0)\n            odd_count = sum(1 for digit in str(min_sum) if int(digit) % 2 != 0)\n        # If the current sum is greater than 0\n        if cur_sum > 0:\n            # Reset the current sum to 0\n            cur_sum = 0\n\n    return (even_count, odd_count)\n"}
{"task_id": "EvoEval/38", "completion": "\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def count_palindromes(n, is_even):\n        count = 0\n        for i in range(1, n):\n            if is_even:\n                if i % 2 == 0 and is_palindrome(i):\n                    count += 1\n            else:\n                if i % 2 != 0 and is_palindrome(i):\n                    count += 1\n        return count\n\n    even_count = count_palindromes(n, True)\n    odd_count = count_palindromes(n, False)\n\n    l_set = set(l)\n    for num in l_set:\n        for other_num in l_set:\n            if num != other_num and num + other_num == even_count:\n                return (True, False)\n            if num != other_num and num + other_num == odd_count:\n                return (False, True)\n    return (False, False)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n"}
{"task_id": "EvoEval/40", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_odd_ends(n):\n        str_n = str(n)\n        return str_n[0] in '13579' and str_n[-1] in '13579'\n\n    max_prime = None\n    for num in nums:\n        if num > 10 and is_odd_ends(num) and is_prime(num):\n            if max_prime is None or num > max_prime:\n                max_prime = num\n    return max_prime\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    vowels = 'AEIOU'\n    count = 0\n\n    if shift > len(s):\n        s = s[::-1]\n\n    shifted_s = ''.join(chr((ord(c) - 65 + shift) % 26 + 65) for c in s)\n\n    for i in range(0, len(shifted_s), 2):\n        if shifted_s[i] in vowels:\n            count += 1\n\n    return count\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    import re\n    from fractions import Fraction\n\n    def is_valid_expression(expression: str) -> bool:\n        if not expression.startswith(\"<\") or not expression.endswith(\">\"):\n            return False\n\n        fractions = re.findall(r\"<(\\d+)/(\\d+)>\", expression)\n        product = Fraction(1, 1)\n\n        for fraction in fractions:\n            product *= Fraction(int(fraction[0]), int(fraction[1]))\n\n        return product.denominator == 1\n\n    return is_valid_expression(expression)\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    if n == 0:\n        return []\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [0, 0]\n    if n == 3:\n        return [0, 0, 2]\n\n    fib_sequence = [0, 0, 2, 0]\n    for i in range(4, n):\n        fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2] + fib_sequence[i-3] + fib_sequence[i-4])\n\n    if (fib_sequence[0] + fib_sequence[-1]) % 2 == 0:\n        fib_sequence.sort(reverse=True)\n    else:\n        fib_sequence.sort()\n\n    return fib_sequence\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    roman_numerals = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc',\n                      50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = []\n    roman = ''\n    for key in sorted(roman_numerals.keys(), reverse=True):\n        while number >= key:\n            number -= key\n            roman += roman_numerals[key]\n            result.append(roman)\n    return result\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sum_primes = 0\n    product_primes = 1\n    for num in numbers:\n        if is_prime(num):\n            sum_primes += num\n            product_primes *= num\n    return (sum_primes, product_primes)\n"}
{"task_id": "EvoEval/46", "completion": "\n    even_positive = [num for num in l if num > 0 and num % 2 == 0]\n    return max(even_positive) if even_positive else -1\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    vowels = \"AEIOU\"\n    n = sum(1 for c in s[::2] if c in vowels)\n    return [f\"In the string, the number of uppercase vowels in even indices is {n}, and the number of odd digits is {sum(1 for c in l if c in '13579')}.]\" for l in lst]\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [s for s in strings if s.startswith(prefix) and is_prime(len(s))]\n"}
{"task_id": "EvoEval/49", "completion": "\n    two_n_mod_p = 2**n % p\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = -1 * sum(int(digit) for digit in str(num)[1:])\n        else:\n            num = sum(int(digit) for digit in str(num))\n        if num > two_n_mod_p:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    vowels = \"AEIOU\"\n    for i in range(len(word) - 2, 0, -2):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n"}
{"task_id": "EvoEval/51", "completion": "\n    # Check if 'a' and 'b' are strings\n    if isinstance(a, str) and isinstance(b, str):\n        # Check if 'a' and 'b' contain alphabets\n        if any(char.isalpha() for char in a) and any(char.isalpha() for char in b):\n            # Convert to lower case if 'a' and 'b' are upper case, and vice versa\n            a = a.lower() if a.isupper() else a.upper()\n            b = b.lower() if b.isupper() else b.upper()\n        else:\n            # Reverse 'a' and 'b' if they do not contain alphabets\n            a = a[::-1]\n            b = b[::-1]\n    elif isinstance(a, str) or isinstance(b, str):\n        # If only one of 'a' and 'b' is a string, convert it to a number if possible\n        if isinstance(a, str):\n            try:\n                a = float(a.replace(',', '.'))\n            except ValueError:\n                pass\n        else:\n            try:\n                b = float(b.replace(',', '.'))\n            except ValueError:\n                pass\n\n    # Compare 'a' and 'b'\n    if a == b:\n        return None\n    elif isinstance(a, float) and isinstance(b, float):\n        # Return the larger in its original type\n        return max(a, b)\n    else:\n        return b\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    if not arr:\n        return ([], None)\n\n    even_nodes = [(i, val) for i, val in enumerate(arr) if val % 2 == 0]\n    if not even_nodes:\n        return ([], None)\n\n    smallest_even_node = min(even_nodes, key=lambda x: (x[1], x[0]))\n    arr.pop(smallest_even_node[0])\n\n    if not arr:\n        return ([smallest_even_node[1], smallest_even_node[0]], None)\n\n    sign_product = 1 if len([val for val in arr if val > 0]) % 2 == 0 else -1 if len([val for val in arr if val < 0]) % 2 == 0 else 0\n    sum_of_magnitudes = sum([abs(val) for val in arr])\n\n    return ([smallest_even_node[1], smallest_even_node[0]], sign_product * sum_of_magnitudes)\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    hex_grades = {4.0: 'F', 3.7: 'E', 3.3: 'D', 3.0: 'C', 2.7: 'B', 2.3: 'A', 2.0: '9', 1.7: '8', 1.3: '7', 1.0: '6', 0.7: '5', 0.0: '4', 0.0: '3'}\n    prime_hex_grades = ['D', 'B', '7', '5', '3']\n    count = 0\n    for gpa in grades:\n        if hex_grades[max(key for key in hex_grades if key <= gpa)] in prime_hex_grades:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/54", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_sum = 0\n    current_sum = 0\n    for num in nums:\n        if is_prime(num):\n            current_sum += num\n            max_sum = max(max_sum, current_sum)\n        else:\n            current_sum = 0\n    return max_sum\n"}
{"task_id": "EvoEval/55", "completion": "\n"}
{"task_id": "EvoEval/56", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        factors = []\n        for i in range(2, n + 1):\n            while n % i == 0 and is_prime(i):\n                factors.append(i)\n                n //= i\n        return factors\n\n    factors = prime_factors(n)\n    odd_factors = [f for f in factors if f % 2 != 0]\n    if not odd_factors:\n        return 0\n    product = 1\n    for f in odd_factors:\n        product *= f\n    return product\n\n"}
{"task_id": "EvoEval/57", "completion": "\n"}
{"task_id": "EvoEval/58", "completion": "\n    from collections import Counter\n    c = Counter(lst)\n    max_freq = max([k for k, v in c.items() if v >= k], default=-1)\n    if max_freq == -1:\n        return (max_freq, False)\n    else:\n        return (max_freq, a == max_freq + b or b == max_freq + a)\n"}
{"task_id": "EvoEval/59", "completion": "\n    def base_change(s, base):\n        return int(s, 10) if base == 10 else int(s, 2) if base == 2 else \"\"\n\n    def odd_count(s):\n        return sum(1 for c in s if int(c) % 2 != 0)\n\n    return [\n        \"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(\n            odd_count(base_change(s, base)),\n            odd_count(base_change(s, base)),\n            odd_count(base_change(s, base)),\n            odd_count(base_change(s, base))\n        )\n        for s in lst\n    ]\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    arr.append(a[0])\n    min_triple = [float('inf'), float('inf')]\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    if a[i] < min_triple[0]:\n                        min_triple = [a[i], i]\n                    elif a[i] == min_triple[0] and i < min_triple[1]:\n                        min_triple = [a[i], i]\n    if min_triple[0] == float('inf'):\n        return []\n    min_even = [val for idx, val in enumerate(arr) if val % 2 == 0 and val < arr[min_triple[1]]]\n    if not min_even:\n        return []\n    return [min(min_even), arr.index(min(min_even))]\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return None\n    longest_chain = None\n    for chain in chains:\n        if chain[0] == planet1 and chain[-1] == planet2:\n            if longest_chain is None or len(chain) > len(longest_chain):\n                longest_chain = chain\n    return longest_chain\n"}
{"task_id": "EvoEval/62", "completion": "\n    text = text.split()\n    text.sort(key=str.lower)\n    for i in range(1, len(text), 2):\n        text.insert(i, '-')\n    for i in range(2, len(text), 4):\n        text[i] = '_' + text[i][1:]\n    return ''.join(text)\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    planets = {\n        'Mercury': 0,\n        'Venus': 1,\n        'Earth': 2,\n        'Mars': 3,\n        'Jupiter': 4,\n        'Saturn': 5,\n        'Uranus': 6,\n        'Neptune': 7\n    }\n\n    planet_order = order.split()\n    if len(planet_order) != len(set(planet_order)) or any(i not in planets for i in planet_order):\n        return 'Invalid'\n\n    planet1_index = planets.get(planet1)\n    planet2_index = planets.get(planet2)\n\n    if planet1_index is None or planet2_index is None:\n        return 'Invalid'\n\n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n\n    return ' '.join(planet_order[planet1_index:planet2_index])\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    modulo_result = 2**n % p\n    primes = [i for i in range(2, modulo_result) if is_prime(i)]\n    return primes\n"}
{"task_id": "EvoEval/65", "completion": "\n    # The largest number smaller than 'p' which divides (2^n modulo p) evenly is \n    # the largest number smaller than 'p' which is a divisor of (2^n modulo p).\n    # This is because (2^n modulo p) is a number in the range 0 to p-1, and any number \n    # in this range is a divisor of (2^n modulo p) if and only if it is a divisor of 2^n.\n    # Therefore, the largest number smaller than 'p' which is a divisor of (2^n modulo p) \n    # is the largest number smaller than 'p' which is a divisor of 2^n.\n    # \n    # The largest number smaller than 'p' which is a divisor of 2^n is the largest \n    # number smaller than 'p' which is a power of 2.\n    # \n    # In other words, the largest number smaller than 'p' which divides (2^n modulo p) \n    # evenly is the largest power of 2 smaller than 'p'.\n    # \n    # If 'p' is a power of 2, the largest power of 2 smaller than 'p' is 'p' divided by 2.\n    # If 'p' is not a power of 2, the largest power of 2 smaller than 'p' is 'p' divided by 2 minus 1.\n    # \n    # In both cases, the result is the largest number smaller than 'p' which is a divisor of 2^n.\n    # \n    # If 'p' is 1, the result is undefined, because 1 is not a divisor of any number.\n    # \n    # If 'n' is 0, the result is 1, because 1 is the only number which is a divisor of 1.\n    # \n    # If 'n' is not 0 and 'p' is 1, the result is 0, because 0 is the only number which is a divisor of 0.\n    # \n    # If 'n' is not 0 and 'p' is not 1, the result is the largest"}
{"task_id": "EvoEval/66", "completion": "\n    # Find the largest even number in the range [x, y]\n    largest_even = -1\n    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            largest_even = i\n            break\n\n    # Create the array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n\n    # Find the largest triple sum\n    triple_sum = -1\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    triple_sum = max(triple_sum, a[i] + a[j] + a[k] + largest_even)\n\n    return triple_sum\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    numbers.sort()\n    max_diff = 0\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < threshold and diff > max_diff:\n                max_diff = diff\n    return max_diff\n"}
{"task_id": "EvoEval/68", "completion": "\n    def odd_product(n):\n        p = 1\n        for d in str(n):\n            if int(d) % 2 == 1:\n                p *= int(d)\n        return p\n\n    return sum(odd_product(n) for n in nums)\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    def is_happy(s):\n        if len(s) < 3:\n            return False\n        for i in range(len(s) - 2):\n            if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n                return False\n        return True\n\n    happy_strings = [s for s in lst if is_happy(s)]\n    happy_strings.sort(key=lambda s: (len(s), s))\n    return happy_happy_strings\n"}
{"task_id": "EvoEval/70", "completion": "\n    def special_factorial(n: int) -> int:\n        result = 1\n        for i in range(1, n + 1):\n            result *= i\n        return result\n\n    numbers.sort()\n    min_diff = float('inf')\n    min_pair = (0, 0)\n\n    for i in range(len(numbers) - 1):\n        diff = abs(special_factorial(numbers[i]) - special_factorial(numbers[i + 1]))\n        if diff < min_diff:\n            min_diff = diff\n            min_pair = (numbers[i], numbers[i + 1])\n\n    return min_pair\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    def brazilian_factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * math.prod(range(1, n + 1))\n\n    max_weight = brazilian_factorial(n)\n\n    if sum(w) > max_weight:\n        return False\n\n    return w == w[::-1]\n"}
{"task_id": "EvoEval/72", "completion": "\n    factorials = [factorial(i) for i in numbers]\n    for i in range(len(factorials)):\n        for j in range(i+1, len(factorials)):\n            if abs(factorials[i] - factorials[j]) < threshold:\n                return True\n    return False\n\n"}
{"task_id": "EvoEval/73", "completion": "\n    n = Fraction(n)\n    return [Fraction(f) * n == Fraction(f).numerator for f in fractions]\n"}
{"task_id": "EvoEval/74", "completion": "\n"}
{"task_id": "EvoEval/75", "completion": "\n"}
{"task_id": "EvoEval/76", "completion": "\n"}
{"task_id": "EvoEval/77", "completion": "\n    def sum_digits(n):\n        return sum(int(d) for d in str(n))\n\n    return sum(arr[i] for i in range(0, len(arr), 2) if arr[i] < 0 and sum_digits(arr[i]) > 0)\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    vowels = \"AEIOU\"\n    s = list(s[::-1])\n    for i in range(len(s)):\n        if s[i].isalpha():\n            s[i] = s[i].lower() if s[i].isupper() else s[i].upper()\n        if i % 2 == 0 and s[i] in vowels:\n            s[i] = s[i].upper()\n    return (\"\".join(s), sum(1 for c in s if c in vowels))\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    # your code here\n    if len(s) < 3:\n        return s[::-1]\n    for i in range(len(s)-2):\n        if len(set(s[i:i+3])) != 3:\n            return s[::-1]\n    return ''.join(c.upper() if c.islower() else c.lower() for c in s)\n"}
{"task_id": "EvoEval/80", "completion": "\n"}
{"task_id": "EvoEval/81", "completion": "\n    fibfib_sequence: List[int] = [0, 0, 1]\n    for i in range(3, n):\n        fibfib_sequence.append(fibfib_sequence[i-1] + fibfib_sequence[i-2] + fibfib_sequence[i-3])\n    \n    mean = sum(fibfib_sequence) / n\n    mad = sum(abs(x - mean) for x in fibfib_sequence) / n\n    return mad\n"}
{"task_id": "EvoEval/82", "completion": "\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    fib = [0, 0, 1] + [0] * (n - 2)\n    for i in range(3, n):\n        fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3]\n        if fib[i] % 2 == 0:\n            digits = [int(d) for d in str(fib[i]) if int(d) % 2 == 1]\n            if digits:\n                fib[i] = prod(digits)\n            else:\n                fib[i] = 0\n    return fib[-1]\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    text = re.sub(r' {2,}', '-', text.replace(' ', '_'))\n    length = len(text)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    result = {}\n    for i in range(1, len(string) + 1):\n        prefix = string[:i]\n        histogram = {}\n        for letter in prefix:\n            if letter in histogram:\n                histogram[letter] += 1\n            else:\n                histogram[letter] = 1\n        result[prefix] = histogram\n    return result\n"}
{"task_id": "EvoEval/85", "completion": "\n    if len(lst) < 2:\n        return None\n\n    lst.sort()\n    lst.sort(key=lambda x: bin(x).count('1'))\n\n    return lst[1]\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    # Your code goes here\n    from operator import add, sub, mul\n    import numpy as np\n\n    op_dict = {'+': add, '-': sub, '*': mul}\n\n    common_operands = np.intersect1d(operand_lists[0], operand_lists[1])\n\n    for operand_list in operand_lists[2:]:\n        common_operands = np.intersect1d(common_operands, operand_list)\n\n    if len(common_operands) == 0:\n        return None\n\n    common_operands.sort()\n\n    result = common_operands[0]\n\n    for i in range(len(operators)):\n        result = op_dict[operators[i]](result, common_operands[i+1])\n\n    return result\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    stack = []\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i, c in enumerate(text):\n        if c == '(':\n            stack.append(i)\n        elif c == ')':\n            if not stack:\n                text = text[:i] + text[i+1:]\n            else:\n                stack.pop()\n        elif c in vowels and not stack:\n            text = text[:i] + text[i+1:]\n    return text\n"}
{"task_id": "EvoEval/88", "completion": "\n    # Split the string into words\n    words = s.replace(\",\", \"\").split()\n\n    # Remove the words that have odd lengths\n    words = [word for word in words if len(word) % 2 == 0]\n\n    # Sort the list by the length of each word in ascending order\n    words.sort(key=lambda x: (len(x), x))\n\n    return words\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    import hashlib\n    result = []\n    for string in strings:\n        if string:\n            hash_string = hashlib.md5(string.encode()).hexdigest()\n            if hash_substring in hash_string:\n                result.append(string)\n    return result if result else None\n"}
{"task_id": "EvoEval/90", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_upper = ['A', 'E', 'I', 'O', 'U']\n    vowel_count = 0\n    result = {}\n\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return {}\n        elif key == key.lower() or key == key.upper():\n            for char in key:\n                if char in vowels or char in vowels_upper:\n                    vowel_count += 1\n            result[key] = vowel_count\n            vowel_count = 0\n        else:\n            return {}\n    return result\n"}
{"task_id": "EvoEval/91", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sorted_evens = sorted(l[::2])\n    for i in range(len(sorted_evens)):\n        if is_prime(sorted_evens[i]):\n            sorted_evens[i] = x\n        else:\n            sorted_evens[i] = y\n    for i in range(0, len(l), 2):\n        l[i] = sorted_evens[i // 2]\n    return l\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    common = sorted(list(set(a) & set(l1)))\n    if not common:\n        return ([], 0)\n    triple_count = sum(1 for i in range(len(common)) for j in range(i+1, len(common)) for k in range(j+1, len(common)) if common[i] + common[j] + common[k] % 3 == 0)\n    return (common, triple_count)\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiouAEIOU'\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    def is_prime(n):\n        return n in prime_numbers\n\n    if not is_prime(len(string)):\n        return ''\n\n    for i in range(len(string) - 2, 0, -1):\n        if string[i] not in vowels and string[i-1] not in vowels and string[i+1] not in vowels:\n            return string[i]\n\n    return ''\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def sum_digits(n):\n        return sum(int(d) for d in str(n))\n\n    positive_count = sum(sum_digits(n) > 0 for n in arr)\n    return sorted(arr, key=lambda n: (-n if positive_count % 2 == 0 else n))\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    return sorted([word for word in strings if substring in word and len(word) % 2 == 0], key=lambda word: (len(word), word))\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    common_elements = set(l1).intersection(l2)\n    for i in common_elements:\n        if -i in common_elements:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    if n < 3:\n        return 0\n\n    fib = [0, 0, 1]\n    for i in range(3, n+1):\n        fib.append(fib[i-1] + fib[i-2] + fib[i-3] + i*i - i + 1)\n\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (fib[i] + fib[j] + fib[k]) % 3 == 0:\n                    count += 1\n\n    return count\n"}
{"task_id": "EvoEval/98", "completion": "\n    if not dict:\n        return False\n\n    keys_lower = all(k.islower() for k in dict.keys())\n    keys_upper = all(k.isupper() for k in dict.keys())\n    values_bracketing = all(all(c in '()' for c in v) and is_bracketing(v) for v in dict.values())\n\n    return (keys_lower and values_bracketing) or (keys_upper and values_bracketing)\n"}
{"task_id": "EvoEval/99", "completion": "\n    return len(str(convert_base(x, base)))\n"}
