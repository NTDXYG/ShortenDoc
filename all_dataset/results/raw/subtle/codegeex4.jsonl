{"task_id": "EvoEval/0", "completion": "\n    if len(numbers) < 2:\n        return False\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    result = []\n    stack = []\n    start = 0\n    for i, c in enumerate(paren_string):\n        if c == '(':\n            if not stack:\n                start = i\n            stack.append(c)\n        elif c == ')':\n            stack.pop()\n            if not stack:\n                result.append(paren_string[start:i+1])\n    return sorted(result)\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 1\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    median = sorted(numbers)[len(numbers) // 2]\n    return median(sorted([abs(x - median) for x in numbers]))\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not numbers:\n        return [delimeter]\n    return [numbers[0]] + [delimeter] + intersperse(numbers[1:], delimeter)\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    # TODO: Your implementation here\n    pass"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring not in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum = 0\n    product = 1\n    for number in numbers:\n        if number >= 0:\n            sum += number\n            product *= number\n    return sum, product\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    if not numbers:\n        return []\n    min_value = numbers[0]\n    result = [min_value]\n    for number in numbers[1:]:\n        min_value = min(min_value, number)\n        result.append(min_value)\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            return string[i:][::-1] + string\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))[::-1]\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_string = strings[0]\n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n    return shortest_string\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    return a * b // gcd(a, b)\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[:i] for i in range(len(string), 0, -1)]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    music_dict = {'o': 4, 'o|': 2, '.|': 1}\n    music_list = music_string.split(' ')\n    music_list = [music_dict[x] for x in music_list if x in music_dict]\n    music_list = list(set(music_list))\n    music_list.sort(reverse=True)\n    return music_list\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    return string.count(substring)\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    number_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted(numbers.split(' '), key=lambda x: number_dict[x], reverse=True))\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    # TODO: Implement this function\n    pass\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in sorted(numbers, reverse=True)]\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    return sorted(set(numbers), reverse=True)\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.swapcase()\n    elif exclusive_case == 'upper':\n        return string.swapcase()\n    else:\n        raise ValueError(\"exclusive_case must be either 'lower' or 'upper'\")\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([x for x in l if x > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    assert len(xs) >= 2, \"xs must have at least two coefficients\"\n    assert max(xs) != 0, \"xs must have a non zero coefficient\"\n    # find the largest non zero coefficient\n    max_coeff = max(xs)\n    # find the index of the largest non zero coefficient\n    max_coeff_index = xs.index(max_coeff)\n    # find the sign of the largest non zero coefficient\n    max_coeff_sign = math.copysign(1, max_coeff)\n    # find the sign of the polynomial at the largest non zero coefficient\n    poly_at_max_coeff = poly(xs, max_coeff)\n    # find the sign of the polynomial at the largest non zero coefficient\n    poly_at_max_coeff_sign = math.copysign(1, poly_at_max_coeff)\n    # if the sign of the largest non zero coefficient is the same as the sign of the polynomial at the largest non zero coefficient\n    # then there is no solution\n    if max_coeff_sign == poly_at_max_coeff_sign:\n        return None\n    # otherwise, there is a solution\n    # find the zero point\n    zero_point = max_coeff / poly_at_max_coeff\n    return zero_point\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    l = list(l)\n    l[::3] = sorted(l[::3], reverse=True)\n    return l\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('8')\n    return count"}
{"task_id": "EvoEval/37", "completion": "\n    even = [l[i] for i in range(0, len(l), 2)]\n    even.sort(reverse=True)\n    for i in range(0, len(l), 2):\n        l[i] = even.pop(0)\n    return l\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    if n < 1:\n        return None\n    fib = [0, 1]\n    i = 2\n    while len(fib) < n:\n        fib.append(fib[i-1] + fib[i-2])\n        i += 1\n    if fib[n-1] % 2 == 0:\n        return None\n    if is_prime(fib[n-1]):\n        return fib[n-1]\n    return prime_fib(n+1)"}
{"task_id": "EvoEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * (n - 1) // 2\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 1:\n                return True\n    return False"}
{"task_id": "EvoEval/44", "completion": "\n    assert 2 <= base <= 10, \"base must be between 2 and 10\"\n    assert x >= 0, \"x must be non-negative\"\n    if x == 0:\n        return 0\n    else:\n        return x % base + 10 * change_base(x // base, base)\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '0'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '0'\n    fib = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n    return str(fib[n])\n"}
{"task_id": "EvoEval/47", "completion": "\n    if len(l) == 0:\n        return 0\n    else:\n        l.sort()\n        if len(l) % 2 == 0:\n            return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n        else:\n            return l[len(l) // 2]\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, n + q, p)\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    return \"\".join([char for char in text if char not in consonants])\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    for i in l:\n        if i > t:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1"}
{"task_id": "EvoEval/54", "completion": "\n    return sorted(s0) == sorted(s1)"}
{"task_id": "EvoEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    if l == sorted(l):\n        return True\n    if l == sorted(l, reverse=True):\n        return True\n    return False\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(set(l1) & set(l2), reverse=True)\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [xs[i] * i for i in range(1, len(xs))]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-3) + fibfib(n-2) - fibfib(n-1)\n"}
{"task_id": "EvoEval/64", "completion": "\n    return sum(1 for c in s if c in \"aeiou\")\n"}
{"task_id": "EvoEval/65", "completion": "\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n    else:\n        return x[shift:] + x[:shift]\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s.lower() if c.islower())\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    # your code goes here\n    # split the string into two parts: apples and oranges\n    apples, oranges = s.split(', ')\n    # convert the number of apples and oranges to integers\n    apples = int(apples.split(' ')[0])\n    oranges = int(oranges.split(' ')[0])\n    # calculate the number of mangoes\n    mangoes = n + 1 - apples - oranges\n    return mangoes\n"}
{"task_id": "EvoEval/68", "completion": "\n    # Check if the array is empty\n    if not arr:\n        return []\n\n    # Initialize variables to store the smallest odd value and its index\n    smallest_odd_value = float('inf')\n    smallest_odd_index = -1\n\n    # Iterate through the array to find the smallest odd value and its index\n    for i, value in enumerate(arr):\n        if value % 2 != 0 and value < smallest_odd_value:\n            smallest_odd_value = value\n            smallest_odd_index = i\n\n    # If no odd value was found, return an empty list\n    if smallest_odd_index == -1:\n        return []\n\n    # Return the index and the smallest odd value\n    return [smallest_odd_index, smallest_odd_value]\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    # Create a dictionary to store the frequency of each integer\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Find the smallest integer that has a frequency greater than or equal to its value\n    for num in range(1, max(lst) + 1):\n        if freq_dict[num] >= num:\n            return num\n    \n    # If no such integer exists, return -1\n    return -1\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not lst:\n        return []\n    result = []\n    lst.sort()\n    while lst:\n        result.append(lst.pop())\n        if lst:\n            result.append(lst.pop(0))\n    return result\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    return round((s * (s - a) * (s - b) * (s - c)) ** 0.5, 3)\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    if sum(q) > w or sum(q) % 2 != 0 or q != q[::-1]:\n        return False\n    else:\n        return True\n"}
{"task_id": "EvoEval/73", "completion": "\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes\n"}
{"task_id": "EvoEval/74", "completion": "\n    def total_chars(lst):\n        return sum(len(s) for s in lst)\n\n    total1 = total_chars(lst1)\n    total2 = total_chars(lst2)\n\n    if total1 > total2:\n        return lst1\n    elif total2 > total1:\n        return lst2\n    else:\n        return lst2\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a + 1):\n        while a % i == 0 and is_prime(i):\n            factors.append(i)\n            a //= i\n    return len(factors) == 4 and all(is_prime(f) for f in factors)\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return True, 0\n    if x == n:\n        return True, 1\n    if n == 1:\n        return False, None\n    if n == 2:\n        if x % 2 == 0:\n            return True, int(math.log(x, 2))\n        else:\n            return False, None\n    if n == 3:\n        if x % 3 == 0:\n            return True, int(math.log(x, 3))\n        else:\n            return False, None\n    if n == 4:\n        if x % 4 == 0:\n            return True, int(math.log(x, 4))\n        else:\n            return False, None\n    if n == 5:\n        if x % 5 == 0:\n            return True, int(math.log(x, 5))\n        else:\n            return False, None\n    if n == 6:\n        if x % 6 == 0:\n            return True, int(math.log(x, 6))\n        else:\n            return False, None\n    if n == 7:\n        if x % 7 == 0:\n            return True, int(math.log(x, 7))\n        else:\n            return False, None\n    if n == 8:\n        if x % 8 == 0:\n            return True, int(math.log(x, 8))\n        else:\n            return False, None\n    if n == 9:\n        if x % 9 == 0:\n            return True, int(math.log(x, 9))\n        else:\n            return False, None\n    if n == 10:\n        if x % 10 == 0:\n            return True, int(math.log(x, 10))\n        else:\n            return False, None\n    if n == 11:\n        if x % 11 == 0:\n            return True, int(math.log(x, 11))\n        else:\n            return False, None\n    if n == 12:\n        if x % 12 == 0:\n            return True, int(math.log(x, 12))\n        else:\n            return False, None\n    if n == 13:\n        if x % 13 == 0:\n            return True, int(math.log(x, 13))\n        else:\n            return False, None\n    if n == 14:\n        if x % 14 == 0"}
{"task_id": "EvoEval/77", "completion": "\n    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    else:\n        for i in range(1, a+1):\n            if i**3 == a:\n                return True\n        return False\n"}
{"task_id": "EvoEval/78", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    non_primes = ['0', '1', '4', '6', '8', '9', 'A', 'C', 'E']\n    count = 0\n    for digit in num:\n        if digit in non_primes or (digit.isdigit() and int(digit) not in primes):\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/79", "completion": "\n    return \"db\" + bin(decimal)[2:] + \"bd\"\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) != 4:\n            return False\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    # Write your code here\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return sorted(letter_grades)\n"}
{"task_id": "EvoEval/82", "completion": "\n    # Remove white spaces from the string\n    string = string.replace(\" \", \"\")\n    # Check if the length of the string is a prime number\n    if len(string) == 1:\n        return True\n    elif len(string) == 2:\n        return False\n    else:\n        for i in range(2, len(string)):\n            if len(string) % i == 0:\n                return False\n        return True\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return 10**(n-2) + 10**(n-1)\n"}
{"task_id": "EvoEval/84", "completion": "\n    return hex(sum(int(i) for i in str(N)))[2:]\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)\n"}
{"task_id": "EvoEval/86", "completion": "\n    return ' '.join(''.join(sorted(word, reverse=True)) for word in s.split(' '))\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, x_ in enumerate(row):\n            if x_ == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (-x[0], x[1]))\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    # Your code here\n    # Create a copy of the given array\n    array_copy = array.copy()\n    \n    # Remove any duplicate values from the array\n    array_copy = list(set(array_copy))\n    \n    # Sort the array in ascending order if the sum of the first and last index values is odd\n    if (array_copy[0] + array_copy[-1]) % 2 != 0:\n        array_copy.sort()\n    # Sort the array in descending order if the sum of the first and last index values is even\n    else:\n        array_copy.sort(reverse=True)\n    \n    return array_copy\n"}
{"task_id": "EvoEval/89", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char in alphabet:\n            index = alphabet.index(char)\n            encrypted += alphabet[index + 4]\n        else:\n            encrypted += char\n    return encrypted\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    lst.sort(reverse=True)\n    return lst[1] if lst[0] != lst[1] else None\n"}
{"task_id": "EvoEval/91", "completion": "\n    return sum(1 for sentence in re.split(r'[.?!]\\s*', S) if sentence.strip().lower().startswith('i') and sentence.strip().lower().endswith('boredom'))\n"}
{"task_id": "EvoEval/92", "completion": "\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == abs(y) + abs(z) or y == abs(x) + abs(z) or z == abs(x) + abs(y):\n            return True\n        else:\n            return False\n    else:\n        return False\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr(ord(char) + 3)\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    smallest_prime = min(primes)\n    return sum(int(digit) for digit in str(smallest_prime))\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.islower() != all(key.islower() for key in dict) and key.isupper() != all(key.isupper() for key in dict):\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(n, 1, -1):\n        if is_prime(i):\n            primes.append(i)\n        if len(primes) == n:\n            break\n    return primes\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    return abs(a%10)*abs(b%10)\n"}
{"task_id": "EvoEval/98", "completion": "\n    return sum(1 for i in range(len(s)) if i % 2 == 1 and s[i] in 'AEIOU')\n"}
{"task_id": "EvoEval/99", "completion": "\n    return int(round(float(value)))\n"}
