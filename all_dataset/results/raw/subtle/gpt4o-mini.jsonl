{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n"}
{"task_id": "EvoEval/1", "completion": "\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    groups = []\n    balance = 0\n    current_group = []\n    \n    for char in paren_string:\n        if char == '(':\n            if balance == 0 and current_group:\n                groups.append(''.join(current_group))\n                current_group = []\n            current_group.append(char)\n            balance += 1\n        elif char == ')':\n            current_group.append(char)\n            balance -= 1\n            if balance == 0:\n                groups.append(''.join(current_group))\n                current_group = []\n    \n    # Sort the groups in ascending alphabetical order\n    return sorted(groups)\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return (integer_part, decimal_part)\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 1\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not numbers:\n        return float('nan')\n\n    median = sorted(numbers)[len(numbers) // 2]\n    absolute_deviations = [abs(x - median) for x in numbers]\n    mad = sorted(absolute_deviations)[len(absolute_deviations) // 2]\n    \n    return mad\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not numbers:\n        return [delimeter]\n    \n    result = []\n    for number in numbers:\n        result.append(number)\n        result.append(delimeter)\n    \n    result.pop()  # Remove the last delimiter added\n    return result\n"}
{"task_id": "EvoEval/6", "completion": "\n    def max_nesting_level(s: str) -> int:\n        max_level = 0\n        current_level = 0\n        for char in s:\n            if char == '(':\n                current_level += 1\n                max_level = max(max_level, current_level)\n            elif char == ')':\n                current_level -= 1\n        return max_level\n\n    groups = paren_string.split()\n    levels = [max_nesting_level(group) for group in groups]\n    return sorted(levels, reverse=True)\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring not in s]\n"}
{"task_id": "EvoEval/8", "completion": "\n    total_sum = 0\n    total_product = 1\n    has_non_negative = False\n\n    for number in numbers:\n        if number >= 0:\n            total_sum += number\n            total_product *= number\n            has_non_negative = True\n\n    if not has_non_negative:\n        total_product = 1\n\n    return total_sum, total_product\n"}
{"task_id": "EvoEval/9", "completion": "\n    if not numbers:\n        return []\n\n    min_so_far = numbers[0]\n    result = [min_so_far]\n\n    for num in numbers[1:]:\n        min_so_far = min(min_so_far, num)\n        result.append(min_so_far)\n\n    return result\n"}
{"task_id": "EvoEval/10", "completion": "\n    if not string:\n        return string\n\n    # Find the longest palindromic prefix\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            # Append the reverse of the non-palindromic prefix\n            return string[:i][::-1] + string\n\n    return string  # Fallback, should not reach here\n"}
{"task_id": "EvoEval/11", "completion": "\n    # Ensure both strings are of the same length by padding the shorter one with leading zeros\n    max_len = max(len(a), len(b))\n    a = a.zfill(max_len)\n    b = b.zfill(max_len)\n\n    # Perform XOR operation\n    result = []\n    for bit_a, bit_b in zip(a, b):\n        result.append('1' if bit_a != bit_b else '0')\n\n    # Reverse the result and return as a string\n    return ''.join(result)[::-1]\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    return min(strings, key=len)\n"}
{"task_id": "EvoEval/13", "completion": "\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = y, x % y\n        return x\n\n    return abs(a * b) // gcd(a, b)\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[:i] for i in range(len(string), 0, -1)]\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n"}
{"task_id": "EvoEval/17", "completion": "\n    note_durations = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    notes = music_string.split()\n    unique_durations = set(note_durations[note] for note in notes if note in note_durations)\n    \n    return sorted(unique_durations, reverse=True)\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += len(substring)  # Move past the last found substring\n    return count\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into a list of words\n    words = numbers.split()\n    \n    # Sort the words based on their corresponding numeric values in descending order\n    sorted_words = sorted(words, key=lambda x: num_dict[x], reverse=True)\n    \n    # Join the sorted words back into a string and return\n    return ' '.join(sorted_words)\n"}
{"task_id": "EvoEval/20", "completion": "\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i + 1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i + 1], numbers[i])\n\n    return (max(closest_pair), min(closest_pair))\n"}
{"task_id": "EvoEval/21", "completion": "\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two elements.\")\n    \n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    if min_val == max_val:\n        return [0.0] * len(numbers)\n    \n    rescaled = [(num - min_val) / (max_val - min_val) for num in numbers]\n    return sorted(rescaled, reverse=True)\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n"}
{"task_id": "EvoEval/24", "completion": "\n    if n <= 1:\n        raise ValueError(\"Input must be greater than 1\")\n    \n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return sorted(factors, reverse=True)\n"}
{"task_id": "EvoEval/26", "completion": "\n    count = {}\n    for number in numbers:\n        count[number] = count.get(number, 0) + 1\n\n    result = [number for number in numbers if count[number] == 1]\n    return result[::-1]\n"}
{"task_id": "EvoEval/27", "completion": "\n    result = []\n    for char in string:\n        if exclusive_case == 'lower' and char.islower():\n            result.append(char)\n        elif exclusive_case == 'upper' and char.isupper():\n            result.append(char)\n        else:\n            if char.islower():\n                result.append(char.upper())\n            elif char.isupper():\n                result.append(char.lower())\n            else:\n                result.append(char)\n    return ''.join(result)\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted(num for num in l if num > 0)\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) < 2:\n        raise ValueError(\"The list must contain at least two coefficients.\")\n    \n    # Using Newton's method to find a root\n    x = 0.0  # Initial guess\n    tolerance = 1e-7\n    max_iterations = 1000\n\n    for _ in range(max_iterations):\n        fx = poly(xs, x)\n        dfx = poly([i * coeff for i, coeff in enumerate(xs)][1:], x)  # Derivative\n\n        if dfx == 0:  # Avoid division by zero\n            break\n\n        x_new = x - fx / dfx\n\n        if abs(x_new - x) < tolerance:\n            return x_new\n\n        x = x_new\n\n    raise RuntimeError(\"Failed to converge to a solution.\")\n"}
{"task_id": "EvoEval/33", "completion": "\n    sorted_third = sorted((l[i] for i in range(len(l)) if i % 3 == 0), reverse=True)\n    result = l[:]\n    j = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result[i] = sorted_third[j]\n            j += 1\n    return result\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n"}
{"task_id": "EvoEval/35", "completion": "\n    if not l:\n        raise ValueError(\"The list is empty\")\n    min_val = l[0]\n    for item in l:\n        if item < min_val:\n            min_val = item\n    return min_val\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '8' in str(i):\n            count += str(i).count('8')\n    return count\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort(reverse=True)\n    \n    result = l[:]\n    for i, val in enumerate(even_indices):\n        result[i * 2] = val\n    \n    return result\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib in fibonacci():\n        if is_prime(fib) and fib % 2 != 0:\n            count += 1\n            if count == n:\n                return fib\n        if fib > 2 and count >= n:\n            break\n\n    return None\n"}
{"task_id": "EvoEval/40", "completion": "\n    n = len(l)\n    if n < 3:\n        return False\n\n    l = list(set(l))  # Remove duplicates\n    n = len(l)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n"}
{"task_id": "EvoEval/41", "completion": "\n    # Each car moving left to right will collide with each car moving right to left\n    # Therefore, the total number of collisions is simply the product of the number of cars\n    # moving in each direction.\n    return n * (2 * n)\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n"}
{"task_id": "EvoEval/43", "completion": "\n    seen = set()\n    for number in l:\n        if 1 - number in seen:\n            return True\n        seen.add(number)\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if base < 2 or base >= 10:\n        raise ValueError(\"Base must be between 2 and 9 inclusive.\")\n    \n    if x == 0:\n        return 0\n    \n    result = 0\n    power = 1\n    \n    while x > 0:\n        digit = x % base\n        result += digit * power\n        x //= base\n        power *= 10\n    \n    return result\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '0'\n    elif n == 2:\n        return '2'\n    elif n == 3:\n        return '0'\n    \n    fib = [0] * (n + 1)\n    fib[0], fib[1], fib[2], fib[3] = 0, 0, 2, 0\n    \n    for i in range(4, n + 1):\n        fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4]\n    \n    return str(fib[n])\n"}
{"task_id": "EvoEval/47", "completion": "\n    if not l:\n        return 0\n    l.sort()\n    n = len(l)\n    mid = n // 2\n    if n % 2 == 0:\n        return (l[mid - 1] + l[mid]) / 2\n    else:\n        return l[mid]\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, n + q, p)\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char in vowels)\n"}
{"task_id": "EvoEval/52", "completion": "\n    return all(x <= t for x in l)\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n"}
{"task_id": "EvoEval/54", "completion": "\n    return sorted(s0) == sorted(s1) and len(s0) == len(s1)\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n"}
{"task_id": "EvoEval/56", "completion": "\n    balance = 0\n    for char in brackets:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n"}
{"task_id": "EvoEval/57", "completion": "\n    if not l:\n        return False\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(set(l1) & set(l2), reverse=True)\n"}
{"task_id": "EvoEval/59", "completion": "\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n  # This line is technically unreachable due to the assumption that n is not prime.\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))\n"}
{"task_id": "EvoEval/61", "completion": "\n    balance = 0\n    for char in brackets:\n        if char == '[':\n            balance += 1\n        elif char == ']':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [coeff * power for power, coeff in enumerate(xs)][1:][::-1]\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    fibfib_values = [0, 0, 1]  # Base cases\n\n    for i in range(3, n + 1):\n        next_value = fibfib_values[i - 3] + fibfib_values[i - 2] - fibfib_values[i - 1]\n        fibfib_values.append(next_value)\n\n    return fibfib_values[n]\n"}
{"task_id": "EvoEval/64", "completion": "\n    count = 0\n    vowels = 'aeiou'\n    \n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n        elif s[i] == 'y' and i == len(s) - 1:\n            count += 1\n            \n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    str_x = str(x)\n    num_digits = len(str_x)\n    \n    if shift >= num_digits:\n        return str_x[::-1]\n    \n    shift = shift % num_digits\n    return str_x[shift:] + str_x[:shift]\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(char) for char in s if char.islower())\n"}
{"task_id": "EvoEval/67", "completion": "\n    # Parse the input string to extract the number of apples and oranges\n    parts = s.split(',')\n    apples = int(parts[0].split()[0])  # Get the number of apples\n    oranges = int(parts[1].split()[0])  # Get the number of oranges\n\n    # Calculate the number of mangoes\n    mangoes = n + 1 - apples - oranges\n    return mangoes\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return []\n    \n    smallest_odd_value = float('inf')\n    smallest_index = -1\n    \n    for index, value in enumerate(arr):\n        if value % 2 == 1:  # Check if the value is odd\n            if value < smallest_odd_value:\n                smallest_odd_value = value\n                smallest_index = index\n    \n    if smallest_index == -1:\n        return []\n    \n    return [smallest_index, smallest_odd_value]\n"}
{"task_id": "EvoEval/69", "completion": "\n    from collections import Counter\n\n    frequency = Counter(lst)\n    result = -1\n\n    for num in range(1, max(lst) + 1):\n        if frequency[num] >= num:\n            if result == -1 or num < result:\n                result = num\n\n    return result\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not lst:\n        return []\n\n    sorted_lst = sorted(lst)\n    result = []\n    \n    while sorted_lst:\n        result.append(sorted_lst.pop())  # Append the maximum\n        if sorted_lst:\n            result.append(sorted_lst.pop(0))  # Append the minimum\n\n    return result\n"}
{"task_id": "EvoEval/71", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 3)\n    else:\n        return -1\n"}
{"task_id": "EvoEval/72", "completion": "\n    return (q == q[::-1]) and (sum(q) % 2 == 0) and (sum(q) <= w)\n"}
{"task_id": "EvoEval/73", "completion": "\n    n = len(arr)\n    changes = 0\n\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n\n    return changes\n"}
{"task_id": "EvoEval/74", "completion": "\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 > total_chars_lst2:\n        return lst1\n    else:\n        return lst2\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        factors = []\n        for i in range(2, n + 1):\n            while n % i == 0 and is_prime(i):\n                factors.append(i)\n                n //= i\n        return factors\n\n    if a < 2:\n        return False\n\n    factors = prime_factors(a)\n    return len(factors) == 4\n"}
{"task_id": "EvoEval/76", "completion": "\n    def is_simple_power(x, n):\n    if n <= 1:\n        return (x == n, 0 if x == n else None)\n    \n    power = 0\n    while True:\n        power_value = n ** power\n        if power_value == x:\n            return (True, power)\n        elif power_value > x:\n            return (False, None)\n        power += 1\n"}
{"task_id": "EvoEval/77", "completion": "\n    if a < 0:\n        return False\n    return round(a ** (1/3)) ** 3 == a\n"}
{"task_id": "EvoEval/78", "completion": "\n    non_prime_hex_digits = {'0', '1', '4', '6', '8', '9', 'A', 'C', 'E'}\n    count = 0\n    \n    for digit in num:\n        if digit in non_prime_hex_digits:\n            count += 1\n            \n    return count\n"}
{"task_id": "EvoEval/79", "completion": "\n    if decimal == 0:\n        return \"db0bd\"\n    \n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    \n    return \"db\" + binary + \"bd\"\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    \n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) < 4:\n            return False\n            \n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    grade_mapping = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n        -0.1: 'E'  # To handle GPAs less than 0.0\n    }\n\n    def get_letter_grade(gpa):\n        for threshold in sorted(grade_mapping.keys(), reverse=True):\n            if gpa >= threshold:\n                return grade_mapping[threshold]\n        return 'E'  # For any GPA less than 0.0\n\n    letter_grades = [get_letter_grade(gpa) for gpa in grades]\n    return sorted(letter_grades, key=lambda x: grades[letter_grades.index(x)])\n"}
{"task_id": "EvoEval/82", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    cleaned_string = string.replace(\" \", \"\")\n    length = len(cleaned_string)\n    return is_prime(length)\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n < 1:\n        return 0\n\n    # Count numbers that start with 1\n    start_with_1 = 10**(n - 1)\n\n    # Count numbers that end with 2\n    end_with_2 = 10**(n - 1)\n\n    # Count numbers that start with 1 and end with 2\n    start_with_1_end_with_2 = 10**(n - 2) if n > 1 else 0\n\n    # Total count\n    total_count = start_with_1 + end_with_2 - start_with_1_end_with_2\n\n    return total_count\n"}
{"task_id": "EvoEval/84", "completion": "\n    digit_sum = sum(int(digit) for digit in str(N))\n    return hex(digit_sum)[2:]\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n"}
{"task_id": "EvoEval/86", "completion": "\n    def order_word(word):\n        return ''.join(sorted(word, reverse=True))\n\n    words = s.split(' ')\n    ordered_words = [order_word(word) for word in words]\n    return ' '.join(ordered_words)\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    \n    result.sort(key=lambda coord: (-coord[0], coord[1]))\n    return result\n"}
{"task_id": "EvoEval/88", "completion": "\n    # Remove duplicates by converting to a set, then back to a list\n    unique_array = list(set(array))\n    \n    # Calculate the sum of the first and last elements\n    if not unique_array:  # Handle empty array case\n        return unique_array\n    \n    first_last_sum = unique_array[0] + unique_array[-1]\n    \n    # Sort the array based on the sum being odd or even\n    if first_last_sum % 2 == 0:\n        return sorted(unique_array, reverse=True)  # Even: sort descending\n    else:\n        return sorted(unique_array)  # Odd: sort ascending\n"}
{"task_id": "EvoEval/89", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    \n    for char in s:\n        if char in alphabet:\n            index = alphabet.index(char)\n            new_index = (index - 2 * 2) % 26  # Shift up by 4 places\n            encrypted += alphabet[new_index]\n        else:\n            encrypted += char  # Non-alphabet characters remain unchanged\n            \n    return encrypted\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    \n    unique_lst = list(set(lst))\n    \n    if len(unique_lst) < 2:\n        return None\n    \n    unique_lst.sort()\n    return unique_lst[-2]\n"}
{"task_id": "EvoEval/91", "completion": "\n    import re\n\n    # Split the string into sentences using regex\n    sentences = re.split(r'[.!?]', S)\n\n    # Initialize boredom count\n    boredom_count = 0\n\n    # Check each sentence\n    for sentence in sentences:\n        # Strip leading/trailing whitespace and split into words\n        words = sentence.strip().split()\n        if len(words) > 0 and words[0] == \"I\" and words[-1] == \"boredom\":\n            boredom_count += 1\n\n    return boredom_count\n"}
{"task_id": "EvoEval/92", "completion": "\n    if all(isinstance(i, int) for i in (x, y, z)):\n        return (abs(x) == abs(y) + abs(z)) or (abs(y) == abs(x) + abs(z)) or (abs(z) == abs(x) + abs(y))\n    return False\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiouAEIOU'\n    encoded_message = []\n\n    for char in message:\n        if char.isalpha():\n            # Swap case\n            if char in vowels:\n                # Replace vowel with the letter 3 places ahead\n                new_char = chr((ord(char) - ord('a') + 3) % 26 + ord('a')) if char.islower() else chr((ord(char) - ord('A') + 3) % 26 + ord('A'))\n                encoded_message.append(new_char)\n            else:\n                encoded_message.append(char.swapcase())\n        else:\n            encoded_message.append(char)\n\n    return ''.join(encoded_message)\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    smallest_prime = float('inf')\n    \n    for number in lst:\n        if is_prime(number) and number < smallest_prime:\n            smallest_prime = number\n\n    if smallest_prime == float('inf'):\n        return 0  # or some indication that no prime was found\n\n    return sum(int(digit) for digit in str(smallest_prime))\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n\n    keys = list(dict.keys())\n    \n    if not all(isinstance(key, str) for key in keys):\n        return False\n\n    all_lower = all(key.islower() for key in keys)\n    all_upper = all(key.isupper() for key in keys)\n\n    return all_lower or all_upper\n"}
{"task_id": "EvoEval/96", "completion": "\n    if n < 2:\n        return []\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n + 1) if is_prime(i)]\n    return primes[::-1]\n"}
{"task_id": "EvoEval/97", "completion": "\n    return (abs(a) % 10) + (abs(b) % 10)\n"}
{"task_id": "EvoEval/98", "completion": "\n    return sum(1 for i in range(1, len(s), 2) if s[i] in 'AEIOU')\n"}
{"task_id": "EvoEval/99", "completion": "\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5) if num % 1 >= 0.5 else int(num)\n    else:\n        return int(num - 0.5) if num % 1 <= -0.5 else int(num)\n"}
