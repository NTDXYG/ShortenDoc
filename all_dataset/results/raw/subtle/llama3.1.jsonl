{"task_id": "EvoEval/0", "completion": "\n    if len(numbers) < 2:\n        return False\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(' ', '')\n    # Initialize an empty list to store the groups\n    groups = []\n    # Initialize an empty string to build the current group\n    current_group = ''\n    # Initialize a counter to keep track of the balance of the parentheses\n    balance = 0\n    # Iterate over the characters in the string\n    for char in paren_string:\n        # If the character is an open parenthesis, increase the balance\n        if char == '(':\n            balance += 1\n            # If the balance is 1, it means we are starting a new group, so add the current group to the list\n            if balance == 1:\n                groups.append(current_group)\n                current_group = ''\n        # If the character is a close parenthesis, decrease the balance\n        elif char == ')':\n            balance -= 1\n            # If the balance is 0, it means we have finished a group, so add it to the list\n            if balance == 0:\n                groups.append(current_group)\n                current_group = ''\n        # If the character is not a parenthesis, add it to the current group\n        else:\n            current_group += char\n    # If there is a remaining group, add it to the list\n    if current_group:\n        groups.append(current_group)\n    # Sort the list of groups in ascending alphabetical order\n    groups.sort()\n    # Return the list of groups\n    return groups\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 1\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    # First, sort the list of numbers\n    numbers.sort()\n    # Calculate the median of the list\n    median = numbers[len(numbers) // 2] if len(numbers) % 2 else \\\n        (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    # Calculate the absolute difference between each number and the median\n    absolute_diffs = [abs(num - median) for num in numbers]\n    # Sort the absolute differences\n    absolute_diffs.sort()\n    # Calculate the median of the absolute differences\n    mad = absolute_diffs[len(absolute_diffs) // 2] if len(absolute_diffs) % 2 else \\\n        (absolute_diffs[len(absolute_diffs) // 2 - 1] + absolute_diffs[len(absolute_diffs) // 2]) / 2\n    return mad\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for num in numbers:\n        result.append(num)\n        result.append(delimeter)\n    result.pop()  # remove the last delimeter\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    # Split the input string into groups\n    groups = paren_string.split()\n    \n    # Initialize an empty list to store the maximum depth of each group\n    max_depths = []\n    \n    # Iterate over each group\n    for group in groups:\n        # Initialize the maximum depth to 0\n        max_depth = 0\n        # Initialize the current depth to 0\n        curr_depth = 0\n        # Iterate over each character in the group\n        for char in group:\n            # If the character is an opening parenthesis, increment the current depth\n            if char == '(':\n                curr_depth += 1\n                # Update the maximum depth if the current depth is greater\n                max_depth = max(max_depth, curr_depth)\n            # If the character is a closing parenthesis, decrement the current depth\n            elif char == ')':\n                curr_depth -= 1\n        # Append the maximum depth of the group to the list\n        max_depths.append(max_depth)\n    \n    # Return the list of maximum depths in descending order\n    return sorted(max_depths, reverse=True)  # Changed here\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring not in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number in numbers:\n        if number >= 0:\n            sum_of_numbers += number\n            product_of_numbers *= number\n    return sum_of_numbers, product_of_numbers\n    pass"}
{"task_id": "EvoEval/9", "completion": "\n    return [min(numbers[:i+1]) for i in range(len(numbers))]\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if not string:\n        return ''\n\n    # Find the longest palindromic prefix\n    prefix = ''\n    for i in range(len(string), 0, -1):\n        prefix = string[:i]\n        if is_palindrome(prefix):\n            break\n\n    # Find the suffix that comes after the palindromic prefix\n    suffix = string[len(prefix):]\n\n    # Reverse the suffix and append it to the start of the string\n    return suffix[::-1] + prefix + suffix\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    return ''.join('1' if (a[i] == '1' and b[i] == '0') or (a[i] == '0' and b[i] == '1') else '0' for i in range(len(a)))\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    return min(strings, key=len)  # min() function returns the smallest item in an iterable or the smallest of two or more arguments"}
{"task_id": "EvoEval/13", "completion": "\n Return the greatest common divisor of two integers a and b\n        >>> gcd(3, 5)\n        1\n        >>> gcd(25, 15)\n        5\n        \"\"\"\n        while b:\n            a, b = b, a % b\n        return a\n\n    # Calculate the least common multiple of a and b\n    return a * b // gcd(a, b)  # Use integer division to get an integer result\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[i:] for i in range(len(string) + 1)]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))  # Use a generator expression to generate the numbers and join them with spaces\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))  # Convert the string to a set to remove duplicates and count the elements\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    music_dict = {'o': 4, 'o|': 2, '.|': 1}\n    music_list = music_string.split()\n    result = []\n    for note in music_list:\n        result.append(music_dict[note])\n    return sorted(result, reverse=True)\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    index = 0\n    while index < len(string):\n        index = string.find(substring, index)\n        if index == -1:\n            break\n        count += 1\n        index += 1\n    return count\n"}
{"task_id": "EvoEval/19", "completion": "\n    # Split the string into a list of numbers\n    numbers_list: List[str] = numbers.split()\n    # Create a dictionary to map numbers to their integer values\n    number_dict: dict = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,\n        'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    # Sort the list of numbers based on their integer values\n    sorted_numbers: List[str] = sorted(numbers_list, key=lambda x: number_dict[x], reverse=True)\n    # Join the sorted list into a string\n    sorted_string: str = ' '.join(sorted_numbers)\n    return sorted_string\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i + 1], numbers[i])\n    return closest_pair\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    # Find the minimum and maximum values in the list\n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    # Check if all numbers are the same\n    if min_val == max_val:\n        return [0.0] * len(numbers)\n    \n    # Apply the linear transform\n    transformed = [(n - min_val) / (max_val - min_val) for n in numbers]\n    \n    # Reverse the list to get the numbers in descending order\n    transformed.reverse()\n    \n    return transformed\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    # Create a dictionary to store the count of each number\n    count_dict = {}\n    for num in numbers:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Create a list of numbers that occur only once\n    unique_numbers = [num for num in numbers if count_dict[num] == 1]\n\n    # Return the list in the reverse order\n    return unique_numbers[::-1]\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.swapcase()\n    elif exclusive_case == 'upper':\n        return string.swapcase()\n    else:\n        raise ValueError(\"exclusive_case must be either 'lower' or 'upper'\")\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)  # Use join() to concatenate strings with a comma in between"}
{"task_id": "EvoEval/29", "completion": "\n    return [string for string in strings if string.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])  # filter and sort in one line\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least two coefficients\")\n    # find the largest non zero coefficient\n    max_coeff = max([coeff for coeff in xs if coeff != 0])\n    # find the index of the largest non zero coefficient\n    max_index = [i for i, coeff in enumerate(xs) if coeff == max_coeff][0]\n    # find the derivative of the polynomial\n    derivative = [coeff * (2 * i + 1) for i, coeff in enumerate(xs) if coeff != 0]\n    # find the root of the derivative\n    root = find_zero(derivative)\n    # find the root of the polynomial\n    return root - max_coeff / poly(derivative, root)\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    return [x if i % 3 != 0 else sorted([y for y in l if i % 3 == 0], reverse=True)[0] for i, x in enumerate(l)]\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('8')\n    return count\n"}
{"task_id": "EvoEval/37", "completion": "\n    return [x if i % 2 != 0 else sorted([y for y in l if i % 2 == 0], reverse=True)[0] for i, x in enumerate(l)]\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    a, b = 0, 1\n    while True:\n        a, b = b, a + b\n        if b > n:\n            return None\n        if is_prime(b) and b % 2 != 0:\n            return b\n"}
{"task_id": "EvoEval/40", "completion": "\n    # sort the list in ascending order\n    l.sort()\n    # iterate over the list\n    for i in range(len(l) - 2):\n        # initialize two pointers\n        left = i + 1\n        right = len(l) - 1\n        # iterate until the two pointers meet\n        while left < right:\n            # calculate the current sum\n            current_sum = l[i] + l[left] + l[right]\n            # if the current sum is ten, return True\n            if current_sum == 10:\n                return True\n            # if the current sum is less than ten, move the left pointer to the right\n            elif current_sum < 10:\n                left += 1\n            # if the current sum is greater than ten, move the right pointer to the left\n            else:\n                right -= 1\n    # if no triple sum to ten, return False\n    return False\n"}
{"task_id": "EvoEval/41", "completion": "\n    # Initialize a list to store the positions of the cars\n    cars = [0] * (2 * n)\n    \n    # Initialize the number of collisions\n    collisions = 0\n    \n    # Iterate over the cars\n    for i in range(2 * n):\n        # Iterate over the other cars\n        for j in range(2 * n):\n            # If the cars are not the same and are not at the same position\n            if i != j and cars[j] != cars[i]:\n                # If the cars are on a collision course\n                if (cars[i] - cars[j]) % (2 * n) == 0:\n                    # Increment the number of collisions\n                    collisions += 1\n    \n    # Return the number of collisions\n    return collisions\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n"}
{"task_id": "EvoEval/43", "completion": "\n    # Create a set to store the elements we have seen so far\n    seen = set()\n    # Iterate over the list\n    for num in l:\n        # Check if the complement of the current number (1 - num) is in the set\n        if 1 - num in seen:\n            # If it is, return True\n            return True\n        # If not, add the current number to the set\n        seen.add(num)\n    # If we have iterated over the entire list and haven't found a pair that sums to one, return False\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if base < 2 or base > 10:\n        raise ValueError(\"Invalid base. Base should be between 2 and 10.\")\n    if x < 0:\n        raise ValueError(\"Input number should be non-negative.\")\n    if x == 0:\n        return 0\n    digits = []\n    while x:\n        digits.append(int(x % base))\n        x //= base\n    return int(''.join(map(str, digits[::-1])))\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n <= 1:\n        return '0'\n    elif n == 2:\n        return '2'\n    elif n == 3:\n        return '0'\n    else:\n        fib4_sequence = [0, 0, 2, 0]\n        for i in range(4, n + 1):\n            fib4_sequence.append(fib4_sequence[i - 1] + fib4_sequence[i - 2] + fib4_sequence[i - 3] + fib4_sequence[i - 4])\n        return str(fib4_sequence[n])  # Convert the result to a string before returning it.  # Convert the result to a string before returning it.  # Convert the result to a string before returning it.  # Convert the result to a string before returning it.  # Convert the result to a string before returning it.  # Convert the result to a string before returning it.  # Convert the result to a string before returning it.  # Convert the result to a string before returning it.  # Convert the result to a string before returning it.  # Convert the result to a string before returning it.  # Convert the result to a string before returning it.  # Convert the result to a string before returning it.  # Convert the result to a string before returning it.  # Convert the result to a string before returning it.  # Convert the result to a string before returning it.  # Convert the result to a string before returning it.  # Convert the result to a string before returning it.  # Convert the result to a string before returning it.  # Convert the result to a string before returning it.  # Convert the result to a string before returning it.  # Convert the result to a string before returning it.  # Convert the result to a string before returning it.  # Convert the result to a string before returning it.  # Convert the result to a string before returning it.  # Convert the result to a string before returning it.  # Convert the result to a string before returning it.  # Convert the result to a string before returning it.  # Convert the result to a string before returning it.  # Convert the result to a string before returning it.  # Convert the result to a string before returning it.  # Convert the result to a string before returning it.  # Convert the result to a string before returning it.  # Convert the result to a string before"}
{"task_id": "EvoEval/47", "completion": "\n    if len(l) == 0:\n        return 0\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 1:\n        return sorted_l[n // 2]\n    else:\n        return (sorted_l[n // 2 - 1] + sorted_l[n // 2]) / 2\n"}
{"task_id": "EvoEval/48", "completion": "\n    if case_sensitive:\n        return text == text[::-1]\n    else:\n        return text.casefold() == text.casefold()[::-1]\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, n + q, p)\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char in vowels])  # filter out consonants\n"}
{"task_id": "EvoEval/52", "completion": "\n    return all(i <= t for i in l)\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n"}
{"task_id": "EvoEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    increasing = decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n    return increasing or decreasing\n"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(set(l1) & set(l2), reverse=True)\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0 and is_prime(i):\n            return i\n    return n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))  # sum of numbers from m to n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [i * x for i, x in enumerate(reversed(xs))][::-1]\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, b + c - a\n        return c\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    # Convert the integer to a string to easily access and shift the digits\n    str_x = str(x)\n    # Calculate the effective shift, which is the remainder of shift divided by\n    # the number of digits in x\n    effective_shift = shift % len(str_x)\n    # If the effective shift is greater than the number of digits, return the\n    # digits reversed\n    if effective_shift > len(str_x):\n        return str_x[::-1]\n    # Otherwise, return the digits shifted left by the effective shift\n    else:\n        return str_x[effective_shift:] + str_x[:effective_shift]  # corrected the slicing\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s if c.islower())  # using generator expression and islower() method to filter out non-lowercase characters and sum their ASCII values\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    # Split the string into a list of strings\n    fruit_list = s.split(\", \")\n    # Initialize the total number of fruits\n    total_fruits = n + 1\n    # Initialize the total number of apples and oranges\n    total_apples_oranges = 0\n    # Iterate over each fruit in the list\n    for fruit in fruit_list:\n        # Split the fruit into a list of strings\n        fruit_info = fruit.split(\" \")\n        # Get the number of the fruit\n        num = int(fruit_info[0])\n        # Get the type of the fruit\n        fruit_type = fruit_info[1]\n        # If the fruit is an apple or an orange, add its number to the total\n        if fruit_type in [\"apples\", \"oranges\"]:\n            total_apples_oranges += num\n    # Return the total number of fruits minus the total number of apples and oranges\n    return total_fruits - total_apples_oranges\n"}
{"task_id": "EvoEval/68", "completion": "\n    odd_values = [i for i, x in enumerate(arr) if x % 2 != 0]\n    if not odd_values:\n        return []\n    smallest_odd_value = min(arr[i] for i in odd_values)\n    return [odd_values[arr.index(smallest_odd_value)], smallest_odd_value]  # <--- changed here\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    # Create a dictionary to store the frequency of each integer in the list\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Iterate over the list in ascending order\n    for num in sorted(lst):\n        # If the frequency of the current integer is greater than or equal to the integer itself, return the integer\n        if freq_dict[num] >= num:\n            return num\n    \n    # If no such integer is found, return -1\n    return -1\n"}
{"task_id": "EvoEval/70", "completion": "\n    if len(lst) == 0:\n        return lst\n    sorted_lst = sorted(lst, reverse=True)\n    result = []\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop())\n    return result\n"}
{"task_id": "EvoEval/71", "completion": "\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Return the area rounded to 3 decimal points\n        return round(area, 3)\n    else:\n        # Return -1 if the three sides do not form a valid triangle\n        return -1\n"}
{"task_id": "EvoEval/72", "completion": "\n    return q == q[::-1] and sum(q) % 2 == 0 and sum(q) <= w\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Initialize the count of elements that need to be changed\n    count = 0\n\n    # Iterate over the frequency dictionary\n    for num, freq_num in freq.items():\n        # If the frequency of the current number is odd, increment the count by 1\n        # because we need to change one of the occurrences of this number to make the array palindromic\n        if freq_num % 2 != 0:\n            count += 1\n\n    # Return the minimum number of elements that need to be changed\n    return count\n"}
{"task_id": "EvoEval/74", "completion": "\n    # Calculate the total number of characters in each list\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    \n    # Compare the totals and return the list with the greater total\n    if total1 > total2:\n        return lst1\n    elif total1 < total2:\n        return lst2\n    else:\n        return lst2\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_prime_factors(n):\n        factors = []\n        for i in range(2, n + 1):\n            while n % i == 0:\n                factors.append(i)\n                n //= i\n        return factors\n\n    factors = get_prime_factors(a)\n    return len(factors) == 4 and all(is_prime(f) for f in factors) and factors.count(factors[0]) <= 1 and factors.count(factors[1]) <= 1 and factors.count(factors[2]) <= 1 and factors.count(factors[3]) <= 1\n"}
{"task_id": "EvoEval/76", "completion": "\n    i = 0\n    while n ** i <= x:\n        if n ** i == x:\n            return True, i\n        i += 1\n    return False, None\n"}
{"task_id": "EvoEval/77", "completion": "\n    # We need to find a number x such that x^3 = a\n    # We can do this by taking the cube root of a\n    # If a is a cube, then its cube root will be an integer\n    # We can use the math library to find the cube root\n    import math\n    # We use the round function to round the cube root to the nearest integer\n    # This is because the cube root of a cube will always be an integer\n    # We use the math.isclose function to check if the cube root is close to the rounded cube root\n    # This is because the cube root of a cube will not always be exactly equal to the rounded cube root\n    # We use the math.isclose function with a relative tolerance of 1e-9 to check if the cube root is close to the rounded cube root\n    return math.isclose(round(a ** (1. / 3)), a ** (1. / 3)) and a >= 0  # We also check if a is non-negative, because the cube of a negative number is negative, and we are only interested in positive cubes.  # We also check if a is non-negative, because the cube of a negative number is negative, and we are only interested in positive cubes.  # We also check if a is non-negative, because the cube of a negative number is negative, and we are only interested in positive cubes.  # We also check if a is non-negative, because the cube of a negative number is negative, and we are only interested in positive cubes.  # We also check if a is non-negative, because the cube of a negative number is negative, and we are only interested in positive cubes.  # We also check if a is non-negative, because the cube of a negative number is negative, and we are only interested in positive cubes.  # We also check if a is non-negative, because the cube of a negative number is negative, and we are only interested in positive cubes.  # We also check if a is non-negative, because the cube of a negative number is negative, and we are only interested in positive cubes.  # We also check if a is non-negative, because the cube of a negative number is negative, and we are only interested in positive cubes.  # We also check if a is non-negative, because the cube of a negative number is negative, and we are only interested in positive cubes.  # We also"}
{"task_id": "EvoEval/78", "completion": "\n    # Define a set of prime numbers\n    primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    # Initialize a counter for non-prime digits\n    count = 0\n    # Iterate over each character in the input string\n    for char in num:\n        # Convert the character to its decimal equivalent\n        decimal = ord(char)\n        # Check if the decimal equivalent is a hexadecimal digit\n        if 48 <= decimal <= 57 or 65 <= decimal <= 70:\n            # Check if the decimal equivalent is not a prime number\n            if decimal not in primes:\n                # Increment the counter\n                count += 1\n    # Return the count of non-prime digits\n    return count\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"bd\"\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) == 4:\n            return True\n    return False\n"}
{"task_id": "EvoEval/81", "completion": "\n    # First, we sort the grades in ascending order\n    grades.sort()\n    # Then, we create a list of letter grades\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n"}
{"task_id": "EvoEval/82", "completion": "\nCheck if a number is prime.\"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    # Return True if the length is a prime number, False otherwise\n    return is_prime(length)  # Removed the unnecessary variable assignment\n"}
{"task_id": "EvoEval/83", "completion": "\n    # Initialize count to 0\n    count = 0\n    \n    # Loop through all possible n-digit numbers\n    for i in range(10**(n-1), 10**n):\n        # Convert the number to a string to easily check the first and last digits\n        num_str = str(i)\n        \n        # Check if the number starts with 1 or ends with 2\n        if num_str[0] == '1' or num_str[-1] == '2':\n            # If it does, increment the count\n            count += 1\n    \n    # Return the count\n    return count\n"}
{"task_id": "EvoEval/84", "completion": "\n    # Convert the integer to a hexadecimal string\n    hex_str = hex(N)[2:]\n    \n    # Initialize a variable to store the sum of the digits\n    sum_of_digits = 0\n    \n    # Iterate over each character in the hexadecimal string\n    for char in hex_str:\n        # Convert the character back to an integer and add it to the sum\n        sum_of_digits += int(char, 16)\n    \n    # Convert the sum back to a hexadecimal string and return it\n    return hex(sum_of_digits)[2:]\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0])  # sum of odd elements at even indices\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split()\n    result = []\n    for word in words:\n        # Remove punctuation from the word\n        punctuation = ''\n        while word and not word[-1].isalnum():\n            punctuation = word[-1] + punctuation\n            word = word[:-1]\n        # Sort the word in descending order\n        sorted_word = ''.join(sorted(word, reverse=True))\n        # Add the sorted word and the punctuation back to the result\n        result.append(sorted_word + punctuation)\n    return ' '.join(result)  # Join the words back with spaces\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (-x[0], x[1]))\n    return result\n"}
{"task_id": "EvoEval/88", "completion": "\n    # Create a copy of the given array\n    array_copy = array.copy()\n    \n    # Check if the array is empty\n    if not array_copy:\n        return array_copy\n    \n    # Calculate the sum of the first and last index values\n    sum_first_last = array_copy[0] + array_copy[-1]\n    \n    # Sort the array in ascending order if the sum is odd\n    if sum_first_last % 2 != 0:\n        array_copy.sort()\n    # Sort the array in descending order if the sum is even\n    else:\n        array_copy.sort(reverse=True)\n    \n    # Remove any duplicate values from the array\n    array_copy = list(set(array_copy))\n    \n    # Sort the array in ascending order\n    array_copy.sort()\n    \n    return array_copy\n"}
{"task_id": "EvoEval/89", "completion": "\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted += chr((ord(char) - ascii_offset + 2 * 2) % 26 + ascii_offset)\n        else:\n            encrypted += char\n    return encrypted\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[-2]  # Return the second last element in the sorted list\n"}
{"task_id": "EvoEval/91", "completion": "\n    # Split the string into sentences\n    sentences = S.split('. ')\n    # Initialize a counter for boredoms\n    boredoms = 0\n    # Iterate over each sentence\n    for sentence in sentences:\n        # Check if the sentence starts with \"I\" and ends with \"boredom\"\n        if sentence.startswith('I') and sentence.endswith('boredom'):\n            # If it does, increment the boredom counter\n            boredoms += 1\n    # Return the number of boredoms\n    return boredoms\n"}
{"task_id": "EvoEval/92", "completion": "\n    # Check if all numbers are integers\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    \n    # Check if one of the numbers is equal to the sum of the absolute values of other two\n    if (abs(x) + abs(y) == z) or (abs(x) + abs(z) == y) or (abs(y) + abs(z) == x):\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                encoded_message += char.swapcase()\n            else:\n                encoded_message += char.swapcase()\n            if char.lower() in vowels:\n                index = vowels.index(char.lower()) + 3\n                if index > 4:\n                    encoded_message += chr(ord('a') + index - 5)\n                else:\n                    encoded_message += vowels[index]\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_lst = [i for i in lst if is_prime(i)]\n    if not prime_lst:\n        return 0\n    return sum(int(i) for i in str(min(prime_lst)))  # convert the smallest prime to string, iterate over each character (digit), convert it back to int and sum them up"}
{"task_id": "EvoEval/95", "completion": "\n    # Check if the dictionary is empty or has less than 3 keys\n    if len(dict) < 3:\n        return False\n    \n    # Check if all keys are strings\n    if not all(isinstance(key, str) for key in dict.keys()):\n        return False\n    \n    # Check if all keys are in lower case or all keys are in upper case\n    if not (all(key.islower() for key in dict.keys()) or all(key.isupper() for key in dict.keys())):\n        return False\n    \n    # If all checks pass, return True\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    return sorted(primes, reverse=True)  # sort in descending order\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    # Extract the unit digits of the two numbers\n    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    \n    # Multiply the unit digits\n    product = unit_digit_a * unit_digit_b\n    \n    # Return the unit digit of the product\n    return product % 10\n"}
{"task_id": "EvoEval/98", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if i % 2 != 0:  # Check if the index is odd\n            if s[i].upper() in 'AEIOU':  # Check if the character is an uppercase vowel\n                count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n    return round(float(value))  # Convert the string to a float and round it to the nearest integer\n"}
