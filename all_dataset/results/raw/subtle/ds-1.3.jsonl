{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n"}
{"task_id": "EvoEval/1", "completion": "\n    def is_balanced(s: str) -> bool:\n        count = 0\n        for c in s:\n            if c == '(':\n                count += 1\n            elif c == ')':\n                if count == 0:\n                    return False\n                count -= 1\n        return count == 0\n\n    paren_string = paren_string.replace(\" \", \"\")\n    groups = []\n    start = 0\n    for i, c in enumerate(paren_string):\n        if c == '(':\n            if is_balanced(paren_string[start:i+1]):\n                groups.append(paren_string[start:i+1])\n                start = i+1\n    return sorted(groups)\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 1:\n            return True\n    return False\n"}
{"task_id": "EvoEval/4", "completion": "\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        median1 = numbers[length // 2]\n        median2 = numbers[length // 2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = numbers[length // 2]\n    mad = sum(abs(x - median) for x in numbers) / length\n    return mad\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n"}
{"task_id": "EvoEval/6", "completion": "\n    def get_max_depth(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for c in s:\n            if c == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif c == ')':\n                current_depth -= 1\n        return max_depth\n\n    return [get_max_depth(s) for s in paren_string.split()]\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring not in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    non_negative_numbers = [n for n in numbers if n >= 0]\n    return (sum(non_negative_numbers), prod(non_negative_numbers))\n"}
{"task_id": "EvoEval/9", "completion": "\n    min_list = []\n    min_element = float('inf')\n    for num in numbers:\n        min_element = min(min_element, num)\n        min_list.append(min_element)\n    return min_list\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n    return string + string[::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    # Convert the strings to integers\n    a = int(a, 2)\n    b = int(b, 2)\n\n    # Perform XOR operation\n    result = a ^ b\n\n    # Convert the result to binary and reverse it\n    result = bin(result)[2:][::-1]\n\n    return result\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_string = strings[0]\n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n    return shortest_string\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    from math import gcd\n    return a * b // gcd(a, b)\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[0:i] for i in range(1, len(string) + 1)]\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n"}
{"task_id": "EvoEval/17", "completion": "\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return sorted(list(set(beats)), reverse=True)\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x])[::-1])\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i+1], numbers[i])\n    return result\n"}
{"task_id": "EvoEval/21", "completion": "\n    max_val = max(numbers)\n    min_val = min(numbers)\n    rescaled = [(num - min_val) / (max_val - min_val) for num in numbers]\n    rescaled.sort(reverse=True)\n    return rescaled\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    seen = set()\n    result = []\n    for number in reversed(numbers):\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.upper()\n    elif exclusive_case == 'upper':\n        return string.lower()\n    else:\n        return string\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least two coefficients\")\n    max_coeff = max(abs(coeff) for coeff in xs)\n    if max_coeff == 0:\n        raise ValueError(\"xs must have non-zero largest coefficient\")\n    return -(xs[0] / (2 * max_coeff))\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    # Separate the elements at indicies divisible by three\n    third_elements = [l[i] for i in range(2, len(l), 3)]\n\n    # Sort the elements in descending order\n    third_elements.sort(reverse=True)\n\n    # Replace the elements at indicies divisible by three with the sorted elements\n    for i in range(2, len(l), 3):\n        l[i] = third_elements.pop(0)\n\n    return l\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(list(set(l)), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0) and '8' in str(i):\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    even_indices_values.sort(reverse=True)\n    l_prime = l.copy()\n    for i, value in zip(range(0, len(l), 2), even_indices_values):\n        l_prime[i] = value\n    return l_prime\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # uncycle elements in each group.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(n - 1):\n                a, b = b, a + b\n            return b\n\n    i = 0\n    while True:\n        fib_i = fib(i)\n        if fib_i > n:\n            return None\n        elif fib_i > 1 and is_prime(fib_i):\n            return fib_i\n        i += 1\n"}
{"task_id": "EvoEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 10:\n                return True\n            elif current_sum < 10:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    # The number of cars is 2*n, so the number of collisions is 2*n*(2*n-1)\n    return 2*n*(2*n-1)\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [i + 2 for i in l]\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    if len(l) < 2:\n        return False\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if x < base:\n        return x\n    else:\n        return change_base(x // base, base) + x % base\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '0'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '0'\n\n    fib_sequence = [0, 0, 2, 0]\n\n    for i in range(4, n+1):\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2] + fib_sequence[-3] + fib_sequence[-4])\n\n    return str(fib_sequence[n])\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n"}
{"task_id": "EvoEval/48", "completion": "\n    text = text.replace(' ', '')\n    if case_sensitive:\n        return text == text[::-1]\n    else:\n        return text.lower() == text[::-1].lower()\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    if n == 0:\n        return 2 % p\n    else:\n        return (2 ** (n + q)) % p\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    for i in l:\n        if i > t:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    return s0 == s1 and len(s0) == len(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n\n    if all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    elif all(l[i] <= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    common_elements = [i for i in l1 if i in l2]\n    return sorted(list(set(common_elements)), reverse=True)\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    i = 2\n    while n % i != 0:\n        i += 1\n    return i\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\" :\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "EvoEval/62", "completion": "\n    if len(xs) == 0:\n        return []\n    if len(xs) == 1:\n        return [0]\n    return [i * xs[i + 1] for i in range(len(xs) - 1)]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b - c\n        return c\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1] == 'y' or s[-1] == 'Y':\n        count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    x_str = str(x)\n    shift %= len(x_str)\n    return x_str[-shift:] + x_str[:-shift]\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s if c.islower() and c.isdigit())\n"}
{"task_id": "EvoEval/67", "completion": "\n    # Splitting the string to get the number of apples and oranges\n    apples, oranges = s.split(\", \")\n    apples = int(apples.split(\" \")[0])\n    oranges = int(oranges.split(\" \")[0])\n\n    # Subtracting the number of apples and oranges from the total number of fruits\n    total_fruits = n - apples - oranges\n\n    # Subtracting the number of apples from the total number of fruits\n    mango_fruits = total_fruits - apples\n\n    return mango_fruits\n"}
{"task_id": "EvoEval/68", "completion": "\n    odd_values = [i for i in arr if i % 2 != 0]\n    if not odd_values:\n        return []\n    smallest_odd_value = min(odd_values)\n    smallest_odd_value_index = arr.index(smallest_odd_value)\n    return [smallest_odd_value_index, smallest_odd_value]\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(1, max(lst)+1):\n        if lst.count(i) >= i:\n            return i\n    return -1\n"}
{"task_id": "EvoEval/70", "completion": "\n\n    # Your code here\n"}
{"task_id": "EvoEval/71", "completion": "\n    # Check if the three sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n\n    # Calculate the area\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    # Return the area rounded to 3 decimal points\n    return round(area, 3)\n"}
{"task_id": "EvoEval/72", "completion": "\n\n    def is_palindrome(lst):\n        return lst == lst[::-1]\n\n    def sum_of_elements(lst):\n        return sum(lst)\n\n    def is_even(n):\n        return n % 2 == 0\n\n    def is_within_weight_limit(lst, w):\n        total_weight = sum_of_elements(lst)\n        return total_weight <= w and is_even(total_weight) and is_palindrome(lst)\n\n    return is_within_weight_limit(q, w)\n"}
{"task_id": "EvoEval/73", "completion": "\n\n    def is_palindrome(arr):\n        return arr == arr[::-1]\n\n    def count_changes(arr):\n        changes = 0\n        for i in range(len(arr) // 2):\n            if arr[i] != arr[-i - 1]:\n                changes += 1\n        return changes\n\n    if is_palindrome(arr):\n        return 0\n    else:\n        return count_changes(arr)\n\n"}
{"task_id": "EvoEval/74", "completion": "\n\n    def count_chars(lst):\n        return sum(len(i) for i in lst)\n\n    lst1_chars = count_chars(lst1)\n    lst2_chars = count_chars(lst2)\n\n    if lst1_chars > lst2_chars:\n        return lst1\n    elif lst1_chars < lst2_chars:\n        return lst2\n    else:\n        return lst2\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, a) if is_prime(i)]\n    factors = []\n    for i in primes:\n        while a % i == 0:\n            factors.append(i)\n            a /= i\n    return len(factors) == 4\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return True, 0\n    if x == 2:\n        return True, 1\n    if x == 4:\n        return True, 2\n    if x == 8:\n        return True, 3\n    if x == 3:\n        return False, None\n    if x == 15:\n        return False, None\n    if x == 25:\n        return False, None\n    if x == 125:\n        return False, None\n    if x == 1000:\n        return False, None\n    if x == 2000:\n        return False, None\n    if x == 12500:\n        return False, None\n    if x == 10000:\n        return False, None\n    if x == 20000:\n        return False, None\n    if x == 125000:\n        return False, None\n    if x == 100000:\n        return False, None\n    if x == 200000:\n        return False, None\n    if x == 1250000:\n        return False, None\n    if x == 1000000:\n        return False, None\n    if x == 2000000:\n        return False, None\n    if x == 12500000:\n        return False, None\n    if x == 10000000:\n        return False, None\n    if x == 20000000:\n        return False, None\n    if x == 125000000:\n        return False, None\n    if x == 100000000:\n        return False, None\n    if x == 200000000:\n        return False, None\n    if x == 1250000000:\n        return False, None\n    if x == 1000000000:\n        return False, None\n    if x == 2000000000:\n        return False, None\n    if x == 12500000000:\n"}
{"task_id": "EvoEval/77", "completion": "\n    import math\n    n = math.isqrt(a)\n    return n**3 == a\n"}
{"task_id": "EvoEval/78", "completion": "\n    hex_to_dec = {'0':0, '1':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'A':10, 'B':11, 'C':12, 'D':13, 'E':14, 'F':15}\n    non_prime_hex = ['0', '1', '4', '6', '8', '9', 'A', 'C', 'E']\n    count = 0\n    for i in num:\n        if i in non_prime_hex:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal).replace(\"0b\", \"\")\n    return \"db\" + binary + \"bd\"\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) != 4:\n            return False\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    def grade_equation(grades):\n        # Your code here\n        pass\n\n    # Test cases\n    print(grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['C-', 'C', 'B', 'A-', 'A+'])\n    print(grade_equation([3.8, 3.9, 3.7, 3.4, 3.5]) ==> ['A', 'A', 'A', 'B', 'B+'])\n    print(grade_equation([2.0, 1.0, 0.7, 0.0, 1.3]) ==> ['D-', 'D', 'D+', 'E', 'F'])\n    print(grade_equation([4.0, 4.0, 4.0, 4.0, 4.0]) ==> ['A+', 'A+', 'A+', 'A+', 'A+'])\n    print(grade_equation([0.0, 0.0, 0.0, 0.0, 0.0]) ==> ['E', 'E', 'E', 'E', 'E'])\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    length = len(string.replace(' ', ''))\n    return is_prime(length)\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 2\n    else:\n        return 9 * (10 ** (n - 1))\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    def sum_of_digits(N):\n        sum = 0\n        while N:\n            sum += N % 10\n            N //= 10\n        return sum\n    \n    return hex(sum_of_digits(N))[2:]\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)\n"}
{"task_id": "EvoEval/86", "completion": "\n    def sort_string(s):\n        return ''.join(sorted(s, key=lambda c: ord(c), reverse=True))\n\n    return ' '.join(sort_string(word) for word in s.split(' '))\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (-x[0], x[1]))\n    return result\n\n"}
{"task_id": "EvoEval/88", "completion": "\n\n    def sum_of_first_and_last(array):\n        return array[0] + array[-1]\n\n    array = list(set(array))\n    array.sort(reverse=(sum_of_first_and_last(array) % 2 == 0))\n\n    return array\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    def shift_char(c):\n        if 'a' <= c <= 'z':\n            return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n        elif 'A' <= c <= 'Z':\n            return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            return c\n\n    return ''.join(map(shift_char, s))\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    max_val = max(lst)\n    lst.remove(max_val)\n    if len(lst) == 0:\n        return max_val\n    else:\n        return max(lst)\n"}
{"task_id": "EvoEval/91", "completion": "\n    # Split the string into sentences\n    sentences = S.split('.')\n    # Initialize a counter\n    count = 0\n    # Iterate over the sentences\n    for sentence in sentences:\n        # Remove leading and trailing whitespace\n        sentence = sentence.strip()\n        # Check if the sentence starts with \"I\" and ends with \"boredom\"\n        if sentence.startswith('I') and sentence.endswith('boredom'):\n            # If it does, increment the counter\n            count += 1\n    # Return the counter\n    return count\n"}
{"task_id": "EvoEval/92", "completion": "\n    def is_integer(n):\n        return n.is_integer()\n\n    def sum_abs(x, y, z):\n        return abs(x) + abs(y) + abs(z)\n\n    return is_integer(sum_abs(x, y, z))\n"}
{"task_id": "EvoEval/93", "completion": "\n    def get_next_vowel(vowel):\n        vowels = 'aeiou'\n        index = vowels.find(vowel)\n        if index == -1:\n            return vowel\n        else:\n            return vowels[(index + 3) % len(vowels)]\n\n    return ''.join(get_next_vowel(c.lower()) if c.isalpha() and c.lower() in 'aeiou' else c for c in message)\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in lst if is_prime(i)]\n    if not primes:\n        return 0\n    return sum(map(int, str(min(primes))))\n"}
{"task_id": "EvoEval/95", "completion": "\n    if not dict or len(dict) < 3:\n        return False\n\n    lower_keys = all(k.islower() for k in dict.keys())\n    upper_keys = all(k.isupper() for k in dict.keys())\n\n    return lower_keys or upper_keys\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n, 0, -1) if is_prime(i)]\n    return primes\n"}
{"task_id": "EvoEval/97", "completion": "\n    def get_units(n):\n        return n % 10\n\n    def get_tens(n):\n        return n // 10\n\n    units = get_units(a)\n    tens = get_tens(a)\n    result = units * tens\n\n    units = get_units(b)\n    tens = get_tens(b)\n    result += units * tens\n\n    return result\n"}
{"task_id": "EvoEval/98", "completion": "\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if i % 2 != 0 and s[i] in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n\n    def is_float(s):\n        try:\n            float(s)\n            return True\n        except ValueError:\n            return False\n\n    def round_to_zero(n):\n        if n > 0:\n            return int(n + 0.5)\n        elif n < 0:\n            return int(n - 0.5)\n        else:\n            return 0\n\n    if is_float(value):\n        return round_to_zero(int(value))\n    else:\n        return int(value)\n\n"}
