{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "\n    result = []\n    current_group = []\n    open_count = 0\n    \n    for char in paren_string:\n        if char == ' ':\n            continue\n        current_group.append(char)\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            open_count -= 1\n            if open_count == 0:\n                result.append(''.join(current_group))\n                current_group = []\n    \n    return result\n"}
{"task_id": "HumanEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "\n    mean_value = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean_value) for x in numbers]\n    return sum(absolute_deviations) / len(numbers)\n"}
{"task_id": "HumanEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n"}
{"task_id": "HumanEval/8", "completion": "\n    sum_result = 0\n    product_result = 1\n    \n    for number in numbers:\n        sum_result += number\n        product_result *= number\n    \n    return (sum_result, product_result)\n"}
{"task_id": "HumanEval/9", "completion": "\n    max_list = []\n    current_max = None\n    \n    for num in numbers:\n        if current_max is None or num > current_max:\n            current_max = num\n        max_list.append(current_max)\n    \n    return max_list\n"}
{"task_id": "HumanEval/10", "completion": "\n    # Find the longest palindromic suffix\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            # Append the reverse of the prefix to the end of the string\n            return string + string[:i][::-1]\n    \n    # If no palindromic suffix is found, append the reverse of the entire string\n    return string + string[::-1]\n"}
{"task_id": "HumanEval/11", "completion": "\n    result = []\n    for char_a, char_b in zip(a, b):\n        result.append('1' if char_a != char_b else '0')\n    return ''.join(result)\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n    \n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    \n    return longest_string\n"}
{"task_id": "HumanEval/13", "completion": "\n    while b != 0:\n        a, b = b, a % b\n    return a\n"}
{"task_id": "HumanEval/14", "completion": "\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n"}
{"task_id": "HumanEval/15", "completion": "\n    return ' '.join(str(i) for i in range(n + 1))\n"}
{"task_id": "HumanEval/16", "completion": "\n    # Convert the string to lowercase to ignore case\n    lower_string = string.lower()\n    \n    # Use a set to store distinct characters\n    distinct_characters = set(lower_string)\n    \n    # Return the number of distinct characters\n    return len(distinct_characters)\n"}
{"task_id": "HumanEval/17", "completion": "\n    notes = music_string.split()\n    beats = []\n    \n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    \n    return beats\n"}
{"task_id": "HumanEval/18", "completion": "\n    count = 0\n    step = 1  # To allow overlapping\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/19", "completion": "\n    # Define the order of the numerals\n    numeral_order = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    \n    # Split the input string into a list of numerals\n    numeral_list = numbers.split()\n    \n    # Sort the list of numerals based on their index in the numeral_order list\n    sorted_numerals = sorted(numeral_list, key=lambda x: numeral_order.index(x))\n    \n    # Join the sorted list back into a space-delimited string\n    sorted_numbers = ' '.join(sorted_numerals)\n    \n    return sorted_numbers\n"}
{"task_id": "HumanEval/20", "completion": "\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                closest_pair = (numbers[i], numbers[j])\n            elif diff == min_diff:\n                if (numbers[i], numbers[j]) < closest_pair:\n                    closest_pair = (numbers[i], numbers[j])\n\n    return tuple(sorted(closest_pair))\n"}
{"task_id": "HumanEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    \n    if range_val == 0:\n        raise ValueError(\"All numbers are the same, cannot rescale to unit interval.\")\n    \n    rescaled_numbers = [(x - min_val) / range_val for x in numbers]\n    return rescaled_numbers\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n"}
{"task_id": "HumanEval/23", "completion": "    length = 0\n    for _ in string:\n        length += 1\n    return length"}
{"task_id": "HumanEval/24", "completion": "\n    if n <= 1:\n        return None\n    \n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n"}
{"task_id": "HumanEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "\n    seen = set()\n    result = []\n    for number in numbers:\n        if numbers.count(number) == 1:\n            result.append(number)\n        else:\n            seen.add(number)\n    return result\n"}
{"task_id": "HumanEval/27", "completion": "\n    result = []\n    for char in string:\n        if char.islower():\n            result.append(char.upper())\n        elif char.isupper():\n            result.append(char.lower())\n        else:\n            result.append(char)\n    return ''.join(result)\n"}
{"task_id": "HumanEval/28", "completion": "\n    result = ''\n    for s in strings:\n        result += s\n    return result\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [x for x in l if x > 0]\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "\n    def f(x):\n        return poly(xs, x)\n    \n    # Initial guess for the root\n    a = -100\n    b = 100\n    \n    # Bisection method to find the root\n    while abs(b - a) > 1e-10:\n        c = (a + b) / 2\n        if f(c) == 0:\n            return c\n        elif f(a) * f(c) < 0:\n            b = c\n        else:\n            a = c\n    \n    return (a + b) / 2\n"}
{"task_id": "HumanEval/33", "completion": "\n    # Extract elements at indices divisible by 3\n    indices_div_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    \n    # Sort the extracted elements\n    sorted_indices_div_by_three = sorted(indices_div_by_three)\n    \n    # Create a new list with sorted elements at indices divisible by 3\n    result = l[:]\n    for i, value in enumerate(sorted_indices_div_by_three):\n        result[i * 3] = value\n    \n    return result\n"}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "\n    if not l:\n        raise ValueError(\"The list is empty\")\n    \n    max_val = l[0]\n    for element in l:\n        if element > max_val:\n            max_val = element\n    \n    return max_val\n"}
{"task_id": "HumanEval/36", "completion": "\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    even_indices.sort()\n    \n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_indices.pop(0))\n        else:\n            result.append(l[i])\n    \n    return result\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse the cycling operation in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def fibonacci():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    fib_gen = fibonacci()\n    count = 0\n    for fib in fib_gen:\n        if is_prime(fib):\n            count += 1\n            if count == n:\n                return fib\n"}
{"task_id": "HumanEval/40", "completion": "\n    if len(l) < 3:\n        return False\n    \n    l.sort()\n    \n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        \n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    \n    return False\n"}
{"task_id": "HumanEval/41", "completion": "\n    # Initialize the number of collisions to 0\n    collisions = 0\n    \n    # Since all cars are moving at the same speed, the number of collisions\n    # is simply the number of pairs of cars that can be formed from the two sets.\n    # This is equivalent to the number of ways to choose 2 cars out of n, which is n choose 2.\n    # The formula for n choose 2 is n * (n - 1) / 2.\n    \n    collisions = n * (n - 1) // 2\n    \n    return collisions\n"}
{"task_id": "HumanEval/42", "completion": "\n    return [x + 1 for x in l]\n"}
{"task_id": "HumanEval/43", "completion": "\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "\n    if x == 0:\n        return \"0\"\n    \n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    \n    return ''.join(result[::-1])\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n"}
{"task_id": "HumanEval/48", "completion": "\n    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "\n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n //= 2\n    return result\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])\n"}
{"task_id": "HumanEval/52", "completion": "\n    return all(x < t for x in l)\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "\n    from collections import Counter\n    \n    return Counter(s0) == Counter(s1)\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(3, n + 1):\n            a, b = b, a + b\n        return b\n"}
{"task_id": "HumanEval/56", "completion": "\n    count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        elif bracket == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n"}
{"task_id": "HumanEval/57", "completion": "\n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n"}
{"task_id": "HumanEval/58", "completion": "\n    set1 = set(l1)\n    set2 = set(l2)\n    common_elements = set1.intersection(set2)\n    return sorted(common_elements)\n"}
{"task_id": "HumanEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n"}
{"task_id": "HumanEval/60", "completion": "\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n"}
{"task_id": "HumanEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/62", "completion": "\n    result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i] * i)\n    return result\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    \n    return c\n"}
{"task_id": "HumanEval/64", "completion": "\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1].lower() == 'y':\n        count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "\n    x_str = str(x)\n    length = len(x_str)\n    \n    if shift >= length:\n        return x_str[::-1]\n    \n    shifted_str = x_str[-shift:] + x_str[:-shift]\n    return shifted_str\n"}
{"task_id": "HumanEval/66", "completion": "\n    total_sum = 0\n    for char in s:\n        if char.isupper():\n            total_sum += ord(char)\n    return total_sum\n"}
{"task_id": "HumanEval/67", "completion": "\n    # Extract the number of apples and oranges from the string\n    apples_str, oranges_str = s.split(\" and \")\n    apples = int(apples_str.split()[0])\n    oranges = int(oranges_str.split()[0])\n    \n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n    \n    return mangoes\n"}
{"task_id": "HumanEval/68", "completion": "\n    smallest_even_value = float('inf')\n    smallest_index = -1\n    \n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even_value:\n            smallest_even_value = value\n            smallest_index = i\n    \n    if smallest_index == -1:\n        return []\n    else:\n        return [smallest_even_value, smallest_index]\n"}
{"task_id": "HumanEval/69", "completion": "\n    from collections import Counter\n\n    # Count the frequency of each integer in the list\n    freq = Counter(lst)\n    \n    # Initialize the result to -1 (default if no such integer is found)\n    result = -1\n    \n    # Iterate through the frequency dictionary\n    for num, count in freq.items():\n        # Check if the frequency is greater than or equal to the number itself\n        if count >= num:\n            # Update the result if the current number is greater than the previous result\n            if result == -1 or num > result:\n                result = num\n    \n    return result\n"}
{"task_id": "HumanEval/70", "completion": "\n    sorted_lst = sorted(lst)\n    result = []\n    left, right = 0, len(sorted_lst) - 1\n    \n    while left <= right:\n        if left == right:\n            result.append(sorted_lst[left])\n        else:\n            result.append(sorted_lst[left])\n            result.append(sorted_lst[right])\n        left += 1\n        right -= 1\n    \n    return result\n"}
{"task_id": "HumanEval/71", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "\n    if len(q) == 0:\n        return False\n    \n    # Check if the list is palindromic\n    is_palindromic = q == q[::-1]\n    \n    # Calculate the sum of the elements in the list\n    total_weight = sum(q)\n    \n    # Check if the total weight is less than or equal to the maximum possible weight\n    can_fly = total_weight <= w\n    \n    # Return True if both conditions are met\n    return is_palindromic and can_fly\n"}
{"task_id": "HumanEval/73", "completion": "\n    n = len(arr)\n    changes = 0\n    \n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    \n    return changes\n"}
{"task_id": "HumanEval/74", "completion": "\n    def total_match(lst1, lst2):\n        def total_chars(lst):\n            return sum(len(s) for s in lst)\n        \n        total_chars_lst1 = total_chars(lst1)\n        total_chars_lst2 = total_chars(lst2)\n        \n        if total_chars_lst1 <= total_chars_lst2:\n            return lst1\n        else:\n            return lst2\n"}
{"task_id": "HumanEval/75", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def prime_factors(n):\n        factors = []\n        for i in range(2, n + 1):\n            if is_prime(i) and n % i == 0:\n                factors.append(i)\n        return factors\n\n    factors = prime_factors(a)\n    if len(factors) == 3:\n        return True\n    return False\n"}
{"task_id": "HumanEval/76", "completion": "\n    if n == 1:\n        return x == 1\n    \n    power = 1\n    while power < x:\n        power *= n\n        if power == x:\n            return True\n    \n    return False\n"}
{"task_id": "HumanEval/77", "completion": "\n    if a < 0:\n        a = -a\n    return round(a ** (1/3)) ** 3 == a\n"}
{"task_id": "HumanEval/78", "completion": "\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/79", "completion": "\n    binary_str = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    \n    return True\n"}
{"task_id": "HumanEval/81", "completion": "\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n"}
{"task_id": "HumanEval/82", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n"}
{"task_id": "HumanEval/83", "completion": "\n    if n == 1:\n        return 1  # Only the number 1 itself\n    \n    # For n-digit numbers, the first digit can be 1 or any digit from 2 to 9,\n    # and the last digit can be 1 or any digit from 0 to 9 except when the first digit is 1.\n    # So, we have 9 choices for the first digit (excluding 0) and 10 choices for the last digit.\n    # However, if the first digit is 1, the last digit can be any digit from 0 to 9.\n    \n    # Count of numbers where the first digit is 1\n    count_first_one = 10 ** (n - 1)\n    \n    # Count of numbers where the last digit is 1\n    count_last_one = 9 * (10 ** (n - 2))\n    \n    # Count of numbers where both the first and last digit are 1\n    count_both_one = 10 ** (n - 2)\n    \n    # Total count is the sum of the above counts minus the overlap\n    return count_first_one + count_last_one - count_both_one\n"}
{"task_id": "HumanEval/84", "completion": "\n    # Calculate the sum of the digits of N\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Convert the sum to binary and remove the '0b' prefix\n    binary_representation = bin(digit_sum)[2:]\n    \n    return binary_representation\n"}
{"task_id": "HumanEval/85", "completion": "\n    total = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            total += lst[i]\n    return total\n"}
{"task_id": "HumanEval/86", "completion": "\n    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)\n"}
{"task_id": "HumanEval/87", "completion": "\n    coordinates = []\n    for row_index, row in enumerate(lst):\n        for col_index, value in enumerate(row):\n            if value == x:\n                coordinates.append((row_index, col_index))\n    \n    # Sort by rows in ascending order, and by columns in descending order within each row\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return coordinates\n"}
{"task_id": "HumanEval/88", "completion": "\n    if not array:\n        return []\n    \n    first_value = array[0]\n    last_value = array[-1]\n    sum_values = first_value + last_value\n    \n    if sum_values % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n"}
{"task_id": "HumanEval/89", "completion": "\n    encrypted = []\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            if char.islower():\n                new_char = chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n            encrypted.append(new_char)\n        else:\n            encrypted.append(char)\n    return ''.join(encrypted)\n"}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    \n    return second_smallest if second_smallest != float('inf') else None\n"}
{"task_id": "HumanEval/91", "completion": "\n    count = 0\n    sentences = re.split(r'[.!?]', S)\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/92", "completion": "\n    if not all(isinstance(num, int) for num in [x, y, z]):\n        return False\n    \n    return (x == y + z) or (y == x + z) or (z == x + y)\n"}
{"task_id": "HumanEval/93", "completion": "\n    encoded_message = []\n    vowels = 'aeiouAEIOU'\n    vowel_shift = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n                   'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    \n    for char in message:\n        if char in vowels:\n            encoded_message.append(vowel_shift[char])\n        else:\n            encoded_message.append(char.swapcase())\n    \n    return ''.join(encoded_message)\n"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    largest_prime = None\n    for num in lst:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n\n    if largest_prime is not None:\n        return sum_of_digits(largest_prime)\n    else:\n        return 0\n"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:\n        return False\n    \n    all_lower = all(isinstance(key, str) and key.islower() for key in dict)\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict)\n    \n    return all_lower or all_upper\n"}
{"task_id": "HumanEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    \n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    return unit_digit_a * unit_digit_b\n"}
{"task_id": "HumanEval/98", "completion": "\n    count = 0\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    \n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    \n    return count\n"}
{"task_id": "HumanEval/99", "completion": "\n    # Convert the string to a float\n    float_value = float(value)\n    \n    # Check if the float value is exactly halfway between two integers\n    if float_value % 1 == 0.5:\n        # If the value is positive, round up\n        if float_value >= 0:\n            return int(float_value + 0.5)\n        # If the value is negative, round down\n        else:\n            return int(float_value - 0.5)\n    else:\n        # If the value is not halfway, use standard rounding\n        return round(float_value)\n"}
{"task_id": "HumanEval/100", "completion": "\n    pile = []\n    current_level = n\n    while current_level > 0:\n        pile.append(current_level)\n        if current_level % 2 == 0:\n            current_level += 1\n        else:\n            current_level += 2\n    return pile\n"}
{"task_id": "HumanEval/101", "completion": "\n    import re\n    \n    # Use regular expression to split the string by commas or spaces\n    words = re.split(r'[,\\s]+', s)\n    \n    return words\n"}
{"task_id": "HumanEval/102", "completion": "\n    if x > y:\n        return -1\n    \n    # Find the largest even number in the range [x, y]\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    \n    return -1\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    binary_result = bin(rounded_avg)\n    \n    return binary_result\n"}
{"task_id": "HumanEval/104", "completion": "\n    result = []\n    for num in x:\n        if all(digit not in '02468' for digit in str(num)):\n            result.append(num)\n    return sorted(result)\n"}
{"task_id": "HumanEval/105", "completion": "\n    # Filter the array to include only integers between 1 and 9\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    \n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Replace each digit by its corresponding name\n    number_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = [number_names[num - 1] for num in reversed_arr]\n    \n    return result\n"}
{"task_id": "HumanEval/106", "completion": "\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:  # Check if the number is a palindrome\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/108", "completion": "\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        abs_num = abs(num)\n        while abs_num > 0:\n            sum_digits += abs_num % 10\n            abs_num //= 10\n        if num < 0:\n            sum_digits = -sum_digits\n        if sum_digits > 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/109", "completion": "\n    if not arr:\n        return True\n    \n    n = len(arr)\n    sorted_arr = sorted(arr)\n    \n    for i in range(n):\n        if arr[i:] + arr[:i] == sorted_arr:\n            return True\n    \n    return False\n"}
{"task_id": "HumanEval/110", "completion": "\n    # Count the number of odd elements in lst1\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    \n    # Count the number of even elements in lst2\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If the number of odd elements in lst1 is less than or equal to the number of even elements in lst2,\n    # it is possible to exchange elements to make lst1 all even.\n    if odd_count_lst1 <= even_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "\n    from collections import defaultdict\n\n    # Initialize a dictionary to store the count of each letter\n    letter_count = defaultdict(int)\n    \n    # Split the input string by spaces and count each letter\n    for letter in test.split():\n        letter_count[letter] += 1\n    \n    # Find the maximum count\n    max_count = max(letter_count.values(), default=0)\n    \n    # Filter the dictionary to include only the letters with the maximum count\n    result = {letter: count for letter, count in letter_count.items() if count == max_count}\n    \n    return result\n"}
{"task_id": "HumanEval/112", "completion": "\n    result = ''.join([char for char in s if char not in c])\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)\n"}
{"task_id": "HumanEval/113", "completion": "\n    result = []\n    for i, s in enumerate(lst):\n        odd_digits_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_digits_count}n the str{odd_digits_count}ng {odd_digits_count} of the {odd_digits_count}nput.\")\n    return result\n"}
{"task_id": "HumanEval/114", "completion": "\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    \n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "\n    total_buckets_lowered = 0\n    \n    for row in grid:\n        water_units = sum(row)\n        if water_units > 0:\n            total_buckets_lowered += math.ceil(water_units / capacity)\n    \n    return total_buckets_lowered\n"}
{"task_id": "HumanEval/116", "completion": "\n    # Helper function to count the number of ones in the binary representation of a number\n    def count_ones(num):\n        return bin(num).count('1')\n\n    # Sort the array based on the number of ones in binary representation, then by decimal value\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n"}
{"task_id": "HumanEval/117", "completion": "\n    vowels = \"aeiouAEIOU\"\n    result = []\n    \n    words = s.split()\n    for word in words:\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        if consonant_count == n:\n            result.append(word)\n    \n    return result\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"\n"}
{"task_id": "HumanEval/119", "completion": "\n    open_count_1 = lst[0].count('(')\n    close_count_1 = lst[0].count(')')\n    open_count_2 = lst[1].count('(')\n    close_count_2 = lst[1].count(')')\n\n    total_open = open_count_1 + open_count_2\n    total_close = close_count_1 + close_count_2\n\n    if total_open == total_close:\n        return 'Yes'\n    else:\n        return 'No'\n"}
{"task_id": "HumanEval/120", "completion": "\n    # Sort the array in descending order\n    sorted_arr = sorted(arr, reverse=True)\n    \n    # Take the first k elements from the sorted array\n    max_k_elements = sorted_arr[:k]\n    \n    # Sort the k elements in ascending order\n    result = sorted(max_k_elements)\n    \n    return result\n"}
{"task_id": "HumanEval/121", "completion": "\n    total_sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            total_sum += lst[i]\n    return total_sum\n"}
{"task_id": "HumanEval/122", "completion": "\n    total_sum = 0\n    for i in range(min(k, len(arr))):\n        if arr[i] < 100:\n            total_sum += arr[i]\n    return total_sum\n"}
{"task_id": "HumanEval/123", "completion": "\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    odd_numbers.append(1)\n    return sorted(odd_numbers)\n"}
{"task_id": "HumanEval/124", "completion": "\n    if not date:\n        return False\n    \n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    \n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if day < 1:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day > 30:\n            return False\n    elif month == 2:\n        if day > 29:\n            return False\n    \n    return True\n"}
{"task_id": "HumanEval/125", "completion": "\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and ord(c) % 2 == 1)\n"}
{"task_id": "HumanEval/126", "completion": "\n    if len(lst) <= 1:\n        return True\n    \n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n        if lst[i] == lst[i - 1]:\n            if i > 1 and lst[i] == lst[i - 2]:\n                return False\n    \n    return True\n"}
{"task_id": "HumanEval/127", "completion": "\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start + 1\n    \n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n    \n    sign_product = 1\n    magnitude_sum = 0\n    \n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:\n            sign_product *= 0\n        magnitude_sum += abs(num)\n    \n    return sign_product * magnitude_sum\n"}
{"task_id": "HumanEval/129", "completion": "\n    def dfs(x, y, path, length):\n        if length == k:\n            if result is None or path < result:\n                result = path[:]\n            return\n        \n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                path.append(grid[nx][ny])\n                dfs(nx, ny, path, length + 1)\n                path.pop()\n\n    N = len(grid)\n    result = None\n    \n    for i in range(N):\n        for j in range(N):\n            dfs(i, j, [grid[i][j]], 1)\n    \n    return result\n"}
{"task_id": "HumanEval/130", "completion": "\n    result = [0] * (n + 1)\n    result[0] = 1\n    result[1] = 3\n    \n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            result[i] = 1 + i // 2\n        else:\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1]\n    \n    return result\n"}
{"task_id": "HumanEval/131", "completion": "\n    product = 1\n    has_odd = False\n    \n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    \n    return product if has_odd else 0\n"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                stack.append(char)\n    \n    # Check if there is any nested structure\n    nested = False\n    for i in range(len(stack) - 1):\n        if stack[i] == '[' and stack[i + 1] == ']':\n            nested = True\n            break\n    \n    return nested\n"}
{"task_id": "HumanEval/133", "completion": "\n    total = 0\n    for num in lst:\n        rounded_num = math.ceil(num)\n        total += rounded_num ** 2\n    return total\n"}
{"task_id": "HumanEval/134", "completion": "\n    if not txt:\n        return False\n    \n    last_char = txt[-1]\n    \n    if last_char.isalpha():\n        if len(txt) == 1:\n            return True\n        elif txt[-2] == ' ':\n            return True\n    \n    return False\n"}
{"task_id": "HumanEval/135", "completion": "\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/136", "completion": "\n    largest_negative = None\n    smallest_positive = None\n    \n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    \n    return (largest_negative, smallest_positive)\n"}
{"task_id": "HumanEval/137", "completion": "\n    def normalize(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n            try:\n                return float(value)\n            except ValueError:\n                return value\n        return value\n\n    a_norm = normalize(a)\n    b_norm = normalize(b)\n\n    if a_norm > b_norm:\n        return a\n    elif b_norm > a_norm:\n        return b\n    else:\n        return None\n"}
{"task_id": "HumanEval/138", "completion": "\n    if n < 8:\n        return False\n    if n % 2 == 0:\n        return True\n    return False\n"}
{"task_id": "HumanEval/139", "completion": "\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        result = 1\n        for i in range(2, x + 1):\n            result *= i\n        return result\n\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n\n    return result\n"}
{"task_id": "HumanEval/140", "completion": "\n    # Split the text by spaces to handle consecutive spaces\n    parts = text.split()\n    \n    # Join the parts with underscores\n    result = '_'.join(parts)\n    \n    # Replace underscores with hyphens if there were more than 2 consecutive spaces\n    result = result.replace('__', '-')\n    \n    return result\n"}
{"task_id": "HumanEval/141", "completion": "\n    import re\n\n    def file_name_check(file_name):\n        # Check if there are more than three digits\n        if len(re.findall(r'\\d', file_name)) > 3:\n            return 'No'\n        \n        # Check if there is exactly one dot\n        if file_name.count('.') != 1:\n            return 'No'\n        \n        # Split the file name into name and extension\n        name, ext = file_name.split('.')\n        \n        # Check if the name is not empty and starts with a latin letter\n        if not name or not re.match(r'^[a-zA-Z]', name):\n            return 'No'\n        \n        # Check if the extension is one of the allowed ones\n        if ext not in ['txt', 'exe', 'dll']:\n            return 'No'\n        \n        return 'Yes'\n"}
{"task_id": "HumanEval/142", "completion": "\n    total_sum = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total_sum += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total_sum += num ** 3\n        else:\n            total_sum += num\n    return total_sum\n"}
{"task_id": "HumanEval/143", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)\n"}
{"task_id": "HumanEval/144", "completion": "\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    def parse_fraction(frac):\n        num, denom = frac.split('/')\n        return int(num), int(denom)\n\n    num_x, denom_x = parse_fraction(x)\n    num_n, denom_n = parse_fraction(n)\n\n    lcm_denom = lcm(denom_x, denom_n)\n    num_x *= lcm_denom // denom_x\n    num_n *= lcm_denom // denom_n\n\n    result_num = num_x * num_n\n    result_denom = lcm_denom ** 2\n\n    gcd_result = gcd(result_num, result_denom)\n    result_num //= gcd_result\n    result_denom //= gcd_result\n\n    return result_denom == 1\n"}
{"task_id": "HumanEval/145", "completion": "\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))\n"}
{"task_id": "HumanEval/146", "completion": "\n    count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(abs(num))\n            if int(str_num[0]) % 2 != 0 and int(str_num[-1]) % 2 != 0:\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "\n    # Create the array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Count the number of triples (a[i], a[j], a[k]) where i < j < k and a[i] + a[j] + a[k] % 3 == 0\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    return tuple(planets[index1 + 1:index2])\n"}
{"task_id": "HumanEval/149", "completion": "\n    # Filter out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list first by length, then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    \n    return sorted_lst\n"}
{"task_id": "HumanEval/150", "completion": "\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y\n"}
{"task_id": "HumanEval/151", "completion": "\n    if not lst:\n        return 0\n    \n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            sum_of_squares += num ** 2\n    \n    return sum_of_squares\n"}
{"task_id": "HumanEval/152", "completion": "\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result\n"}
{"task_id": "HumanEval/153", "completion": "\n    def calculate_strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\"\n"}
{"task_id": "HumanEval/154", "completion": "\n    # Concatenate the second word with itself to form all possible rotations\n    rotated_b = b + b\n    \n    # Check if any rotation of b is a substring of a\n    for i in range(len(b)):\n        if rotated_b[i:i+len(b)] in a:\n            return True\n    \n    return False\n"}
{"task_id": "HumanEval/155", "completion": "\n    even_count = 0\n    odd_count = 0\n    \n    # Convert the number to positive if it's negative\n    num = abs(num)\n    \n    # Iterate through each digit in the number\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    \n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/156", "completion": "\n    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'),\n        (1, 'i')\n    ]\n    \n    result = []\n    for value, numeral in roman_numerals:\n        while number >= value:\n            result.append(numeral)\n            number -= value\n    \n    return ''.join(result)\n"}
{"task_id": "HumanEval/157", "completion": "\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_unique_count = 0\n    max_word = \"\"\n    \n    for word in words:\n        unique_chars = set(word)\n        unique_count = len(unique_chars)\n        \n        if unique_count > max_unique_count:\n            max_unique_count = unique_count\n            max_word = word\n        elif unique_count == max_unique_count:\n            if word < max_word:\n                max_word = word\n    \n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "\n    if need <= remaining:\n        total_eaten = number + need\n        remaining_after_eating = remaining - need\n    else:\n        total_eaten = number + remaining\n        remaining_after_eating = 0\n    \n    return [total_eaten, remaining_after_eating]\n"}
{"task_id": "HumanEval/160", "completion": "\n    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result\n"}
{"task_id": "HumanEval/161", "completion": "\n    has_letter = any(c.isalpha() for c in s)\n    \n    if has_letter:\n        result = ''.join(c.swapcase() if c.isalpha() else c for c in s)\n    else:\n        result = s[::-1]\n    \n    return result\n"}
{"task_id": "HumanEval/162", "completion": "\n    if not text:\n        return None\n    \n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "\n    start = min(a, b)\n    end = max(a, b)\n    return [num for num in range(start, end + 1) if num % 2 == 0]\n"}
