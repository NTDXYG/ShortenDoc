{"task_id": "valid/0", "completion": "\n    # Define the categories and their corresponding keywords\n    categories = {\n        'sports': ['football', 'basketball', 'soccer', 'tennis'],\n        'politics': ['government', 'election', 'policy', 'law'],\n        'entertainment': ['movie', 'music', 'celebrity', 'award']\n    }\n\n    # Initialize the category with the highest score\n    best_category = None\n    best_score = 0\n\n    # Tokenize the text into individual words\n    words = text.split()\n\n    # Iterate over each word in the text\n    for word in words:\n        # Remove punctuation and convert to lowercase\n        word = word.strip('.,!?\"\\'').lower()\n\n        # Iterate over each category and its keywords\n        for category, keywords in categories.items():\n            # Check if the word is a keyword for the current category\n            if word in keywords:\n                # Increment the score for the current category\n                score = len(keywords)\n                if score > best_score:\n                    best_category = category\n                    best_score = score\n\n    # Return the category with the highest score\n    return best_category\n\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n"}
{"task_id": "valid/3", "completion": "\n    return sorted(instruments, reverse=True)\n"}
{"task_id": "valid/4", "completion": "\n    try:\n        # Attempt to parse the JSON string into a Python object\n        json_data = json.loads(json_string)\n        # Check if the parsed object is a list\n        if not isinstance(json_data, list):\n            raise ValueError(\"Input is not a valid JSON list\")\n        # Return the list of dictionaries\n        return json_data\n    except json.JSONDecodeError as e:\n        # If the input is not a valid JSON string, raise a ValueError\n        raise ValueError(\"Invalid JSON string\") from e\n\n"}
{"task_id": "valid/5", "completion": "\n    # Check if the input is a number and not negative\n    if not isinstance(n, int) or n < 0:\n        return False\n    \n    # Check if the number is divisible by 5\n    if n % 5 != 0:\n        return False\n    \n    # Calculate the sum of the digits of the number\n    sum_of_digits = sum(int(digit) for digit in str(n))\n    \n    # Check if the sum of the digits is divisible by 3\n    if sum_of_digits % 3 != 0:\n        return False\n    \n    # If all conditions are met, return True\n    return True\n"}
{"task_id": "valid/6", "completion": "\n    if n == 1:\n        return 0\n    elif n == base:\n        return 1\n    else:\n        return 1 + discrete_logarithm(n // base, base)\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        json_data = json.loads(json_str)\n        pprint.pprint(json_data)\n    except json.JSONDecodeError as e:\n        print(f\"Error: {e}\")\n        return\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n"}
{"task_id": "valid/9", "completion": "\n    \n    # We will use the str.replace() method to replace the placeholders in the template\n    # However, we need to iterate over the dictionary to replace all placeholders\n    for key, value in values.items():\n        # We construct the placeholder by enclosing the key in double curly braces\n        placeholder = \"{{\" + key + \"}}\"\n        \n        # We replace the placeholder in the template with the corresponding value\n        template = template.replace(placeholder, str(value))\n    \n    # After replacing all placeholders, we return the updated template\n    return template\n"}
{"task_id": "valid/10", "completion": "\n    return len(string) == len(set(string))\n"}
{"task_id": "valid/11", "completion": "\n    date = datetime.strptime(date_string, '%Y-%m-%d')\n    new_date = date + timedelta(days=days)\n    return new_date.strftime('%Y-%m-%d')\n\n"}
{"task_id": "valid/12", "completion": "\n    # Remove leading and trailing whitespace\n    text = text.strip()\n    # Replace multiple whitespace characters with a single space\n    text = ' '.join(text.split())\n    return text\n"}
{"task_id": "valid/13", "completion": "\n    # Convert the text to lowercase to handle case sensitivity\n    text = text.lower()\n    \n    # Remove punctuation marks to handle linguistic variations\n    text = ''.join(e for e in text if e.isalnum() or e.isspace())\n    \n    # Remove special characters to handle irregularities\n    text = ''.join(e for e in text if e.isalnum() or e.isspace() or e in string.punctuation)\n    \n    # Remove leading and trailing whitespaces to handle formatting\n    text = text.strip()\n    \n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    # Use regular expression to match either of the two words\n    pattern = re.compile(r'\\b(' + re.escape(word1) + '|' + re.escape(word2) + r')\\b')\n    # Search for the pattern in the text\n    match = pattern.search(text)\n    # Return True if a match is found, False otherwise\n    return match is not None\n\n"}
{"task_id": "valid/15", "completion": "\n    return [sum(layer) for layer in array]\n"}
{"task_id": "valid/16", "completion": "\n    \n    # Initialize an empty dictionary to store the extracted settings\n    settings = {}\n    \n    # Split the comment into individual lines\n    lines = comment.split('\\n')\n    \n    # Iterate over each line in the comment\n    for line in lines:\n        # Remove any leading or trailing whitespace from the line\n        line = line.strip()\n        \n        # Check if the line starts with a setting keyword\n        if line.startswith('set tabstop='):\n            # Extract the tabstop value from the line\n            settings['tabstop'] = int(line.split('=')[1])\n        elif line.startswith('set expandtab'):\n            # If the line indicates that expandtab is set, set the value to True\n            settings['expandtab'] = True\n        elif line.startswith('set shiftwidth='):\n            # Extract the shiftwidth value from the line\n            settings['shiftwidth'] = int(line.split('=')[1])\n        elif line.startswith('set softtabstop='):\n            # Extract the softtabstop value from the line\n            settings['softtabstop'] = int(line.split('=')[1])\n    \n    # Return the extracted settings\n    return settings\n"}
{"task_id": "valid/17", "completion": "\n    # Split the sentence into words\n    words = sentence.split()\n    \n    # Initialize an empty list to store the disassembled sentence\n    disassembled_sentence = []\n    \n    # Iterate over each word in the sentence\n    for word in words:\n        # Add the word to the disassembled sentence list\n        disassembled_sentence.append(word)\n    \n    # Return the disassembled sentence\n    return disassembled_sentence\n"}
{"task_id": "valid/18", "completion": "\n    # Base case: if the number is 0, there are no digits\n    if num == 0:\n        return 0\n    # Recursive case: count the digits in the number without the last digit\n    else:\n        return 1 + find_digits_count(num // 10)\n\n"}
{"task_id": "valid/19", "completion": "\n    # Reverse the elements of each list\n    reversed_list1 = list1[::-1]\n    reversed_list2 = list2[::-1]\n    \n    # Combine the elements of the two lists\n    combined_list = reversed_list1 + reversed_list2\n    \n    # Sort the elements in ascending order\n    sorted_list = sorted(combined_list)\n    \n    return sorted_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n"}
{"task_id": "valid/21", "completion": "\n    return z ** 2\n"}
{"task_id": "valid/22", "completion": "\n    return dictionary.get(\"name\")\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        # If the input is a dictionary, we can directly return it as it is already in the desired format.\n        return struct\n    elif isinstance(struct, list):\n        # If the input is a list, we need to recursively convert each element in the list into a dictionary.\n        return [struct_to_dict(element) for element in struct]\n    elif isinstance(struct, tuple):\n        # If the input is a tuple, we need to recursively convert each element in the tuple into a dictionary.\n        return tuple(struct_to_dict(element) for element in struct)\n    elif isinstance(struct, set):\n        # If the input is a set, we need to recursively convert each element in the set into a dictionary.\n        return {struct_to_dict(element) for element in struct}\n    elif isinstance(struct, (int, float, str, bool)):\n        # If the input is a primitive type (int, float, str, bool), we can directly return it as it is already in the desired format.\n        return struct\n    elif isinstance(struct, (list, tuple, set)):\n        # If the input is a collection (list, tuple, set), we need to recursively convert each element in the collection into a dictionary.\n        return [struct_to_dict(element) for element in struct]\n    else:\n        # If the input is not a supported type, we raise a TypeError with a descriptive message.\n        raise TypeError(\"Unsupported type: {}\".format(type(struct)))\n"}
{"task_id": "valid/24", "completion": "\n    # Convert the number to a string to easily reverse it\n    num_str = str(num)\n    \n    # Initialize the closest palindrome and its distance\n    closest_palindrome = num\n    closest_distance = abs(num - int(str(num)[::-1]))\n    \n    # Check all numbers from num-1 to num+1\n    for i in range(num-1, num+2):\n        # Convert the number to a string to easily reverse it\n        i_str = str(i)\n        \n        # Check if the number is a palindrome\n        if i_str == i_str[::-1]:\n            # Calculate the distance between the number and the closest palindrome\n            distance = abs(i - closest_palindrome)\n            \n            # If the distance is smaller than the current closest distance, update the closest palindrome and its distance\n            if distance < closest_distance:\n                closest_palindrome = i\n                closest_distance = distance\n                \n    return closest_palindrome\n"}
{"task_id": "valid/25", "completion": "\n    import math\n    return math.sqrt(num)\n"}
{"task_id": "valid/26", "completion": "\n    # Get the number of rows and columns\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n    \n    # Check if the matrix is square\n    is_square = num_rows == num_cols\n    \n    # Initialize the sum of the diagonal elements\n    diagonal_sum = 0\n    \n    # Iterate over the rows and columns to calculate the sum of the diagonal elements\n    for i in range(num_rows):\n        diagonal_sum += matrix[i][i]\n    \n    # Return the required information\n    return num_rows, num_cols, diagonal_sum, is_square\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n"}
{"task_id": "valid/28", "completion": "\n    # Convert the string to lowercase\n    s = s.lower()\n    # Use a list comprehension to filter out non-alphabetical characters\n    s = ''.join([c for c in s if c.isalpha()])\n    return s\n"}
{"task_id": "valid/29", "completion": "\n    # Check if the list is empty\n    if not lst:\n        return None\n    # Initialize the minimum value with the first element of the list\n    min_val = lst[0]\n    # Iterate over the list to find the minimum value\n    for num in lst:\n        # If the current number is smaller than the minimum value, update the minimum value\n        if num < min_val:\n            min_val = num\n    # Return the minimum value\n    return min_val\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n    return key not in json_data or json_data[key] != value\n\n"}
{"task_id": "valid/31", "completion": "\n    # Initialize an empty list to store the table rows\n    table_rows = []\n    \n    # Calculate the number of rows needed to display all buttons\n    num_rows = -(-len(buttons) // num_columns)  # This is equivalent to math.ceil(len(buttons) / num_columns)\n    \n    # Iterate over the range of rows\n    for i in range(num_rows):\n        # Initialize an empty list to store the current row\n        row = []\n        \n        # Iterate over the range of columns\n        for j in range(num_columns):\n            # Calculate the index of the current button\n            index = i * num_columns + j\n            \n            # If the index is within the bounds of the buttons list, add the button to the row\n            if index < len(buttons):\n                # Create a button with the text of the current button and the action to trigger when clicked\n                button = Button(text=buttons[index], command=lambda button=buttons[index]: print(f\"Button {button} clicked\"))\n                row.append(button)\n        \n        # Add the current row to the table rows\n        table_rows.append(row)\n    \n    # Return the table rows\n    return table_rows\n"}
{"task_id": "valid/32", "completion": "\n    # Convert the string to lowercase to handle case-insensitive comparison\n    s = s.lower()\n    \n    # Initialize a flag to track if the alphabets are in order\n    in_order = True\n    \n    # Iterate over the string to check for consecutive alphabets\n    for i in range(len(s) - 1):\n        # Check if the current character is an alphabet\n        if not s[i].isalpha():\n            # If not, set the flag to False and break the loop\n            in_order = False\n            break\n        \n        # Check if the next character is an alphabet and if it's in order\n        if not s[i + 1].isalpha() or ord(s[i + 1]) != ord(s[i]) + 1:\n            # If not, set the flag to False and break the loop\n            in_order = False\n            break\n    \n    # Return the result\n    return in_order\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "valid/34", "completion": "\n    \n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Initialize an empty string to store the current numeric substring\n    current_num = \"\"\n    \n    # Iterate over each character in the input string\n    for char in ts:\n        # Check if the character is a digit\n        if char.isdigit():\n            # If the character is a digit, add it to the current numeric substring\n            current_num += char\n        else:\n            # If the character is not a digit and the current numeric substring is not empty\n            if current_num:\n                # Add the numeric substring to the total sum\n                total_sum += int(current_num)\n                # Reset the current numeric substring\n                current_num = \"\"\n    \n    # After iterating over all characters, check if there is a remaining numeric substring\n    if current_num:\n        # Add the remaining numeric substring to the total sum\n        total_sum += int(current_num)\n    \n    # Return the total sum of numeric substrings\n    return total_sum\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]  # Use list comprehension to create a new list with the last character of each word converted to upper case\n"}
{"task_id": "valid/36", "completion": "\n    # Initialize a variable to store the sum of the array elements\n    total_sum = 0\n    \n    # Iterate over each element in the array\n    for element in arr:\n        # Check if the element is a numerical value\n        if isinstance(element, (int, float)):\n            # If the element is a numerical value, add it to the total sum\n            total_sum += element\n        else:\n            # If the element is not a numerical value, print an error message\n            print(f\"Error: {element} is not a numerical value.\")\n    \n    # Return the total sum of the array elements\n    return total_sum\n"}
{"task_id": "valid/37", "completion": "\n    \n    # First, we load the JSON data into a Python dictionary using the json.loads function\n    data = json.loads(json_data)\n    \n    # Then, we extract the list of neighborhoods from the dictionary\n    neighborhoods = data['neighborhoods']\n    \n    # Next, we use a list comprehension to extract the names of the neighborhoods\n    neighborhood_names = [neighborhood['name'] for neighborhood in neighborhoods]\n    \n    # Finally, we sort the list of neighborhood names in alphabetical order using the sorted function\n    sorted_neighborhoods = sorted(neighborhood_names)\n    \n    # We return the sorted list of neighborhood names\n    return sorted_neighborhoods\n\n"}
{"task_id": "valid/38", "completion": "\n    arr.sort()\n    min_sum = float('inf')\n    for i in range(n - 1):\n        # Calculate the absolute sum of the current pair\n        abs_sum = abs(arr[i] + arr[i + 1])\n        # Update the minimum absolute sum\n        min_sum = min(min_sum, abs_sum)\n    return min_sum\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for char in p:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n"}
{"task_id": "valid/40", "completion": "\n    # Initialize an empty dictionary to store the results\n    results = {}\n\n    # Check if the total number of votes is at least 100\n    if sum(votes, lambda x: x[1]) < 100:\n        raise ValueError(\"The total number of votes must be at least 100.\")\n\n    # Iterate over each vote in the list\n    for candidate, votes in votes:\n        # Check if the candidate's name is a string consisting of only uppercase letters with a maximum length of 10 characters\n        if not isinstance(candidate, str) or not candidate.isupper() or len(candidate) > 10:\n            raise ValueError(\"Invalid candidate name.\")\n\n        # Check if the number of votes is a positive integer not exceeding 1000\n        if not isinstance(votes, int) or votes <= 0 or votes > 1000:\n            raise ValueError(\"Invalid number of votes.\")\n\n        # If the candidate is already in the results dictionary, add the current vote count to their total\n        if candidate in results:\n            results[candidate] += votes\n        # Otherwise, add the candidate to the results dictionary with their current vote count\n        else:\n            results[candidate] = votes\n\n    # Calculate the total number of votes\n    total_votes = sum(results.values())\n\n    # Calculate the percentage of votes each candidate received, rounded to two decimal places\n    for candidate in results:\n        results[candidate] = (results[candidate] / total_votes) * 100\n\n    # Return the results dictionary\n    return results\n"}
{"task_id": "valid/41", "completion": "\n    # Define the possible month abbreviations\n    month_abbreviations = {\n        'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4, 'May': 5, 'Jun': 6,\n        'Jul': 7, 'Aug': 8, 'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dec': 12\n    }\n\n    # Attempt to parse the date string\n    try:\n        # Check if the date string is in the DD-MM-YYYY format\n        if len(date_string.split('-')) == 3:\n            day, month, year = map(int, date_string.split('-'))\n        # Check if the date string is in the DD-MMM-YYYY format\n        elif len(date_string.split('-')) == 3 and date_string.split('-')[1] in month_abbreviations:\n            day, month, year = map(int, date_string.split('-')[:2])\n            month = month_abbreviations[date_string.split('-')[1]]\n        else:\n            raise ValueError(\"Invalid date format\")\n\n        # Validate the date\n        if not (1 <= day <= 31 and 1 <= month <= 12 and 1 <= year <= 9999):\n            raise ValueError(\"Invalid date\")\n\n        # Create a datetime object\n        date = datetime(year, month, day)\n\n        # Return the date in a standardized format\n        return date.strftime(\"%B %d, %Y\")\n\n    except ValueError as e:\n        # Raise an error if the date is invalid\n        raise ValueError(\"Invalid date\") from e\n\n"}
{"task_id": "valid/42", "completion": "\n    # Define a list of allowed file types\n    allowed_types = {\n        'txt': 'text/plain',\n        'jpg': 'image/jpeg',\n        'png': 'image/png',\n        'pdf': 'application/pdf',\n        'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n        'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        'pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n    }\n\n    # Get the file extension from the new file name\n    new_extension = newname.split('.')[-1].lower()\n\n    # Check if the new file name has a valid extension\n    if new_extension in allowed_types:\n        # If the new file name has a valid extension, check if the old file name has the same extension\n        if oldname.split('.')[-1].lower() != new_extension:\n            # If the old file name has a different extension, return False\n            return False\n    else:\n        # If the new file name does not have a valid extension, return False\n        return False\n\n    # If the new file name has a valid extension and the old file name has the same extension, return True\n    return True\n\n"}
{"task_id": "valid/43", "completion": "\n    def is_even(num):\n        if isinstance(num, int) or isinstance(num, float):\n            return num % 2 == 0\n        elif isinstance(num, str):\n            try:\n                return float(num) % 2 == 0\n            except ValueError:\n                return False\n        else:\n            raise TypeError(\"Unsupported type\")\n\n    def remove_uneven_recursive(lst):\n        new_lst = []\n        for item in lst:\n            if isinstance(item, list) or isinstance(item, tuple):\n                new_lst.append(remove_uneven_recursive(item))\n            elif is_even(item):\n                new_lst.append(item)\n        return new_lst\n\n    return remove_uneven_recursive(lst)\n\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n\n"}
{"task_id": "valid/45", "completion": "\n    return sum(1 for char in string if char == specific_character)\n\n"}
{"task_id": "valid/46", "completion": "\n    # Initialize the histogram data with the accuracy values\n    for i, acc in enumerate(accs):\n        # Add the accuracy value to the histogram at the corresponding generation\n        histogram_data[generation + i] = acc\n    return histogram_data\n"}
{"task_id": "valid/47", "completion": "\n    pattern = r'^[a-zA-Z0-9]{5}$'\n    return bool(re.match(pattern, string))\n\n"}
{"task_id": "valid/48", "completion": "\n    \n    # Initialize an empty set to store unique languages\n    unique_languages = set()\n    \n    # Iterate over each classifier in the list\n    for classifier in classifiers:\n        # Split the classifier into parts using '::' as the separator\n        parts = classifier.split('::')\n        \n        # Check if the classifier matches the expected format\n        if len(parts) == 3 and parts[0] == 'Programming Language':\n            # Extract the language from the classifier\n            language = parts[1]\n            \n            # Add the language to the set of unique languages\n            unique_languages.add(language)\n    \n    # Return the count of unique languages\n    return len(unique_languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    # Initialize an empty dictionary to store the count of each number\n    count_dict = {}\n    \n    # Iterate over each row in the array\n    for row in arr:\n        # Iterate over each number in the row\n        for num in row:\n            # If the number is already in the dictionary, increment its count by 1\n            if num in count_dict:\n                count_dict[num] += 1\n            # If the number is not in the dictionary, add it with a count of 1\n            else:\n                count_dict[num] = 1\n    \n    # Convert the dictionary into a list of tuples and return it\n    return list(count_dict.items())\n"}
{"task_id": "valid/50", "completion": "\n    # Define a regular expression pattern to match URLs\n    pattern = re.compile(r'^/video/(\\d+)/$')\n\n    # Check if the provided URL matches the pattern\n    match = pattern.match(url)\n\n    # If the URL matches the pattern, return the corresponding view function\n    if match:\n        # The first group in the match object contains the video ID\n        video_id = match.group(1)\n        # Return the view function associated with the video ID\n        return video_views.video_detail, video_id\n    else:\n        # If the URL does not match the pattern, return None\n        return None\n\n"}
{"task_id": "valid/51", "completion": "\n    return list[:position] + [item] + list[position:]\n"}
{"task_id": "valid/52", "completion": "\n    string = \"Hello\"\n    sentence = \"World\"\n    concatenated_string = string + \" \" + sentence\n    return concatenated_string\n"}
{"task_id": "valid/53", "completion": "\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.add(s[i:j])\n    return substrings\n"}
{"task_id": "valid/54", "completion": "\n    # Initialize an empty dictionary to store the sum of prices for each key\n    price_sums = {}\n\n    # Iterate over each dictionary in the list\n    for dictionary in list_of_dicts:\n        # Iterate over each key in the dictionary\n        for key in dictionary:\n            # Check if the key starts with \"price\" and contains digits\n            if key.startswith(\"price\") and key[5:].isdigit():\n                # Extract the number of the price (e.g., \"price_1\" -> 1)\n                price_number = int(key[5:])\n                # If the price number is not already in the price_sums dictionary, add it with a value of 0\n                if price_number not in price_sums:\n                    price_sums[price_number] = 0\n                # Add the price value to the sum for the current price number\n                price_sums[price_number] += dictionary[key]\n\n    # Return the dictionary with the sum of prices for each key\n    return price_sums\n\n"}
{"task_id": "valid/55", "completion": "\n    intersection = [element for element in list1 if element in list2]\n    list2[:] = [element for element in list2 if element not in intersection]\n    return intersection\n"}
{"task_id": "valid/56", "completion": "\n    \n    # Define a dictionary to map request methods to their corresponding endpoint handlers\n    route_map = {\n        'GET': api_advisor_view,\n        'POST': api_advisor_view_post\n    }\n    \n    # Check if the request method is valid (i.e., it exists in the route map)\n    if request_method in route_map:\n        # If the request method is valid, return the corresponding endpoint handler\n        return route_map[request_method]\n    else:\n        # If the request method is invalid, return a default handler (e.g., a 404 error handler)\n        return lambda: {'error': 'Invalid request method'}\n    \n    # Call the route_request function with the request method as an argument\n    return route_request(request_method)  # This line is not necessary and can be removed\n"}
{"task_id": "valid/57", "completion": "\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers.\")\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Both inputs must be positive integers.\")\n    if b == 0:\n        return a\n    else:\n        return gcd_recursive(b, a % b)\n"}
{"task_id": "valid/58", "completion": "\n    \n    # Initialize an empty dictionary to store the categorized configuration files\n    categorized_files = {}\n    \n    # Iterate over each file path\n    for file_path in file_paths:\n        # Extract the directory path from the file path\n        dir_path = os.path.dirname(file_path)\n        \n        # Extract the file name from the file path\n        file_name = os.path.basename(file_path)\n        \n        # Check if the directory path is already in the dictionary\n        if dir_path not in categorized_files:\n            # If not, add it to the dictionary with an empty list\n            categorized_files[dir_path] = []\n        \n        # Add the file name to the list of files in the directory path\n        categorized_files[dir_path].append(file_name)\n    \n    # Return the dictionary of categorized configuration files\n    return categorized_files\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n // 2 - 1] + numbers[n // 2]) / 2\n    else:\n        median = numbers[n // 2]\n    return median\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n"}
{"task_id": "valid/61", "completion": "\n    \n    # First, we need to ensure that timeStart is less than or equal to timeEnd, \n    # because the time difference should be calculated from the start to the end.\n    if timeStart > timeEnd:\n        # If timeStart is greater than timeEnd, we swap them to ensure timeStart is less than or equal to timeEnd.\n        timeStart, timeEnd = timeEnd, timeStart\n    \n    # Now, we can calculate the time difference by subtracting timeStart from timeEnd.\n    # This will give us the time difference in seconds.\n    timeDifference = timeEnd - timeStart\n    \n    # Finally, we return the calculated time difference.\n    return timeDifference\n"}
{"task_id": "valid/62", "completion": "\n    # Base case: if the start index is greater than the end index, the target is not in the array\n    if start > end:\n        return False\n\n    # Calculate the middle index\n    mid = (start + end) // 2\n\n    # If the middle element is the target, return True\n    if array[mid] == target:\n        return True\n\n    # If the middle element is greater than the target, search the left half\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n\n    # If the middle element is less than the target, search the right half\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    colors = [\"WHITE\", \"RED\", \"GREEN\", \"BLUE\"]\n    if color not in colors:\n        raise ValueError(\"Invalid color\")\n    return colors[(colors.index(color) + 1) % len(colors)]\n\n"}
{"task_id": "valid/64", "completion": "\n    # Use a list comprehension to create a new list with incremented values\n    return [x + 1 for x in list]\n"}
{"task_id": "valid/65", "completion": "\n    # Iterate over the range of integers\n    for num in range(start, end + 1):\n        # Check if the number is a perfect square\n        root = int(num ** 0.5)\n        if root * root == num:\n            # If it is, return True\n            return True\n    # If no perfect squares are found, return False\n    return False\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        if target in word:\n            return word\n    return None\n"}
{"task_id": "valid/67", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/68", "completion": "\n    print(\"The keys in the given dictionary are:\")\n    for key in dict.keys():\n        print(key)\n"}
{"task_id": "valid/69", "completion": "\n    name = \"John\"\n    age = 30\n    phrase = \"Hello, my name is {} and I am {} years old.\"\n    concatenated_string = phrase.format(name, age)\n    return concatenated_string\n"}
{"task_id": "valid/70", "completion": "\n    def process_strings(strings):\n        result = []\n        for s in strings:\n            if re.match(\"^[a-zA-Z0-9\\s]+$\", s):\n                result.append(s.capitalize())\n        return result\n\n    return process_strings\n\n"}
{"task_id": "valid/71", "completion": "\n    return string.index(char)\n"}
{"task_id": "valid/72", "completion": "\n    bold_text = []\n    i = 0\n    while i < len(html_code):\n        if html_code[i:i+4] == '<b>':\n            start = i + 4\n            end = html_code.find('</b>', start)\n            if end != -1:\n                bold_text.append(html_code[start:end])\n                i = end + 4\n            else:\n                i = len(html_code)\n        else:\n            i += 1\n    return bold_text\n"}
{"task_id": "valid/73", "completion": "\n    \n    # Define the items and their prices\n    items = {\n        \"Soda\": 1.00,\n        \"Chips\": 0.50,\n        \"Candy\": 0.25,\n        \"Water\": 0.50\n    }\n    \n    # Check if the item is in stock\n    if item in items:\n        # Calculate the change to return to the user\n        change = money_inserted - items[item]\n        \n        # Update the stock of the item purchased\n        if item in stock:\n            stock[item] -= 1\n        else:\n            stock[item] = 0\n        \n        # Return the change to the user\n        return f\"Here is your {item}. Your change is ${change:.2f}.\"\n    else:\n        return \"Sorry, we don't have that item in stock.\"\n"}
{"task_id": "valid/74", "completion": "\n    # Combine the two lists into one\n    combined_list = list1 + list2\n    \n    # Convert the combined list to a set to remove duplicates\n    # Sets in Python are unordered collections of unique elements\n    unique_set = set(combined_list)\n    \n    # Convert the set back to a list and return it\n    return list(unique_set)\n"}
{"task_id": "valid/75", "completion": "\n    return list.count(target)\n"}
{"task_id": "valid/76", "completion": "\n    encoded_string = base64.b64encode(string.encode('utf-8'))\n    return encoded_string.decode('utf-8')\n\n"}
{"task_id": "valid/77", "completion": "\n    return [i for i, x in enumerate(vector) if x != 0]\n"}
{"task_id": "valid/78", "completion": "\n    # Define a variable and assign a value to it\n    my_variable = 10\n    \n    # Validate the variable using a conditional statement\n    if my_variable == 10:\n        print(\"The variable is valid.\")\n    else:\n        print(\"The variable is invalid.\")\n"}
{"task_id": "valid/79", "completion": "\n    # Convert the word to a list of characters\n    word_list = list(word)\n    # Use random.shuffle to rearrange the list of characters\n    random.shuffle(word_list)\n    # Join the list of characters back into a string\n    return ''.join(word_list)\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"Integer\"\n    elif isinstance(element, float):\n        return \"Float\"\n    elif isinstance(element, str):\n        return \"String\"\n    elif isinstance(element, list):\n        return \"List\"\n    elif isinstance(element, dict):\n        return \"Dictionary\"\n    else:\n        return \"Unknown\"\n"}
{"task_id": "valid/81", "completion": "\n    if len(arr) == 0:\n        return arr\n\n    merged_arr = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i - 1]:\n            merged_arr[-1] += arr[i]\n        else:\n            merged_arr.append(arr[i])\n\n    return merged_arr\n"}
{"task_id": "valid/82", "completion": "\n    # Define the regular expression pattern to match words\n    pattern = r'\\b\\w+\\b'\n    # Use the findall function from the re module to find all matches\n    # of the pattern in the text and return the list of matches\n    return re.findall(pattern, text)\n\n"}
{"task_id": "valid/83", "completion": "\n    # Filter the list to include only numbers that are divisible by both 3 and 7\n    divisible_numbers = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    \n    # Calculate the average of the divisible numbers\n    average = sum(divisible_numbers) / len(divisible_numbers) if divisible_numbers else 0\n    \n    # Find the maximum and minimum values among the divisible numbers\n    max_value = max(divisible_numbers) if divisible_numbers else 0\n    min_value = min(divisible_numbers) if divisible_numbers else 0\n    \n    # Count the occurrences of each unique number divisible by both 3 and 7\n    occurrences = {}\n    for num in divisible_numbers:\n        if num in occurrences:\n            occurrences[num] += 1\n        else:\n            occurrences[num] = 1\n    \n    # Display the results\n    print(f\"Average of numbers divisible by both 3 and 7: {average}\")\n    print(f\"Maximum value among numbers divisible by both 3 and 7: {max_value}\")\n    print(f\"Minimum value among numbers divisible by both 3 and 7: {min_value}\")\n    print(\"Occurrences of each unique number divisible by both 3 and 7:\")\n    for num, count in occurrences.items():\n        print(f\"{num}: {count}\")\n"}
{"task_id": "valid/84", "completion": "\n    # Split the sentence into words\n    words = sentence.split()\n    \n    # Create a dictionary to store the frequency of each word\n    frequency = {}\n    \n    # Iterate over each word in the sentence\n    for word in words:\n        # If the word is already in the dictionary, increment its count\n        if word in frequency:\n            frequency[word] += 1\n        # If the word is not in the dictionary, add it with a count of 1\n        else:\n            frequency[word] = 1\n    \n    # Find the word with the highest frequency\n    highest_frequency_word = max(frequency, key=frequency.get)\n    \n    return highest_frequency_word\n"}
{"task_id": "valid/85", "completion": "\n    # Initialize the value of e to 0\n    e = 0.0\n\n    # Define the number of terms to use in the series\n    num_terms = 100\n\n    # Calculate the value of e using the series\n    for i in range(num_terms):\n        # Calculate the term using the formula\n        term = 1 / math.factorial(i)\n\n        # Add the term to the value of e\n        e += term\n\n        # Round the value of e to the specified number of decimal places\n        e = round(e, decimal_places)\n\n    # Return the calculated value of e\n    return e\n\n"}
{"task_id": "valid/86", "completion": "\n    average = sum(numbers) / len(numbers)\n    sum_of_numbers = sum(numbers)\n    return average, sum_of_numbers\n"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series is empty\")\n    if not all(isinstance(x, (int, float)) for x in time_series):\n        raise ValueError(\"Time series contains non-numerical values\")\n    return min(time_series), max(time_series)\n\n"}
{"task_id": "valid/88", "completion": "\n    related_articles = {}\n    for article in encyclopedia:\n        related_articles[article] = 0\n        for other_article in encyclopedia:\n            if article != other_article and is_related(article, other_article):\n                related_articles[article] += 1\n    return related_articles\n"}
{"task_id": "valid/89", "completion": "\n    # Initialize the maximum value and its index\n    max_val = lst[0]\n    max_index = 0\n    \n    # Iterate over the list to find the maximum value and its index\n    for i in range(1, len(lst)):\n        if lst[i] > max_val:\n            max_val = lst[i]\n            max_index = i\n    \n    # Return the index of the maximum value\n    return max_index\n"}
{"task_id": "valid/90", "completion": "\n    return any(element in list2 for element in list1)\n\n"}
{"task_id": "valid/91", "completion": "\n    root = Element('data')\n    for key, value in dictionary.items():\n        child = Element(key)\n        child.text = str(value)\n        root.append(child)\n    return tostring(root, encoding='unicode')\n\n"}
{"task_id": "valid/92", "completion": "\n    m = len(matrix)\n    n = len(matrix[0])\n    row = 0\n    col = n - 1\n\n    while row < m and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] > target:\n            col -= 1\n        else:\n            row += 1\n\n    return False\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for num in lst:\n        if num % 2 != 0:  # Check if the number is odd\n            sum_odd += num\n            count_odd += 1\n    if count_odd == 0:\n        return 0\n    else:\n        return sum_odd / count_odd\n"}
{"task_id": "valid/94", "completion": "\n    if n < 1 or n > len(lst):\n        return None\n    return sorted(lst, reverse=True)[n-1]\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "valid/96", "completion": "\n    return set_a.symmetric_difference(set_b)\n"}
{"task_id": "valid/97", "completion": "\n    \n    # First, we need to define the bot's description\n    description = \"A Discord bot that can manage and play music in a server.\"\n    \n    # We also need to define the bot's features\n    features = {\n        \"Music\": \"Play music in a server\",\n        \"Playlist Management\": \"Manage personal playlists and server settings\",\n        \"Help\": \"Get help information for each command\"\n    }\n    \n    # We need to define the bot's commands\n    commands = {\n        \"play\": \"Play a song\",\n        \"pause\": \"Pause the current song\",\n        \"stop\": \"Stop the current song\",\n        \"skip\": \"Skip the current song\",\n        \"help\": \"Get help information for each command\"\n    }\n    \n    # We need to define the bot's categories\n    categories = {\n        \"Music\": [\"play\", \"pause\", \"stop\", \"skip\"],\n        \"Playlist Management\": [\"playlist\", \"server\"],\n        \"Help\": [\"help\"]\n    }\n    \n    # We need to define the bot's help information\n    help_info = {\n        \"play\": \"Play a song\",\n        \"pause\": \"Pause the current song\",\n        \"stop\": \"Stop the current song\",\n        \"skip\": \"Skip the current song\",\n        \"help\": \"Get help information for each command\"\n    }\n    \n    # We need to define the bot's web app\n    web_app = {\n        \"url\": \"https://example.com\",\n        \"description\": \"Manage personal playlists and server settings\"\n    }\n    \n    # Finally, we need to create a mapping of the bot's features, commands, categories, help information, and web app\n    mapping = {\n        \"description\": description,\n        \"features\": features,\n        \"commands\": commands,\n        \"categories\": categories,\n        \"help_info\": help_info,\n        \"web_app\": web_app\n    }\n    \n    return mapping\n"}
{"task_id": "valid/98", "completion": "\n    if n == 0:\n        return '0'\n    ternary = ''\n    while n:\n        ternary = str(n % 3) + ternary\n        n //= 3\n    return ternary\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(file_name.split('.')[-1] for file_name in file_names)\n"}
{"task_id": "valid/100", "completion": "\n    if age < 0:\n        return \"Invalid age\"\n    elif age < 18:\n        return \"Minor\"\n    elif age < 65:\n        return \"Adult\"\n    else:\n        return \"Senior\"\n"}
{"task_id": "valid/101", "completion": "\n    # Define a dictionary to map numerical grades to their corresponding letter grades\n    grade_map = {\n        90: 'A',\n        80: 'B',\n        70: 'C',\n        60: 'D',\n        0: 'F'\n    }\n\n    # Use a ternary operator to determine the letter grade based on the inputted numerical grade\n    letter_grade = 'A' if numerical_grade >= 90 else 'B' if numerical_grade >= 80 else 'C' if numerical_grade >= 70 else 'D' if numerical_grade >= 60 else 'F'\n\n    # Calculate the grade point equivalent (GPA on a scale of 4.0) for the given numerical grade\n    gpa = (numerical_grade / 10) if numerical_grade >= 0 else 0\n\n    # Return the letter grade and the calculated GPA\n    return letter_grade, gpa\n"}
{"task_id": "valid/102", "completion": "\n    # Initialize the total price to 0\n    total = 0\n    \n    # Iterate over each item in the listing\n    for item in listing:\n        # Add the price of the item to the total\n        total += item['price']\n    \n    # Return the total price\n    return total\n"}
{"task_id": "valid/103", "completion": "\n    # Initialize an empty dictionary to store the palindrome strings and their corresponding vowel counts\n    palindrome_vowel_counts = {}\n    \n    # Iterate over each palindrome string in the input tuple\n    for palindrome in palindrome_tuples:\n        # Initialize a counter to store the vowel count for the current palindrome string\n        vowel_count = 0\n        \n        # Iterate over each character in the palindrome string\n        for char in palindrome:\n            # Check if the character is a vowel\n            if char.lower() in 'aeiou':\n                # If the character is a vowel, increment the vowel count\n                vowel_count += 1\n        \n        # Store the palindrome string and its corresponding vowel count in the dictionary\n        palindrome_vowel_counts[palindrome] = vowel_count\n    \n    # Return the dictionary containing the palindrome strings and their corresponding vowel counts\n    return palindrome_vowel_counts\n"}
{"task_id": "valid/104", "completion": "\n    # Remove leading and trailing whitespaces from the input string\n    s = s.strip()\n    \n    # If the string is empty, return an empty string\n    if not s:\n        return \"\"\n    \n    # If the string has a length of 1, return the string as it is\n    if len(s) == 1:\n        return s\n    \n    # If the string has a length of 2, return the string in reverse order\n    if len(s) == 2:\n        return s[::-1]\n    \n    # If the string has a length greater than 2, return the string with the first and last characters swapped\n    return s[-1] + s[1:-1] + s[0]\n"}
{"task_id": "valid/105", "completion": "\n    num_set = set()\n    for num in arr:\n        if -num in num_set:\n            return True\n        num_set.add(num)\n    return False\n"}
{"task_id": "valid/106", "completion": "\n    \n    # Initialize an empty dictionary to store the latest version for each dependency\n    latest_versions = {}\n    \n    # Iterate over each dependency in the list\n    for dependency in dependencies:\n        # Extract the package name and version number from the tuple\n        package_name, version_number = dependency\n        \n        # Split the version number into its components\n        version_components = version_number.split('_')\n        \n        # Extract the date and time from the version number\n        date_time = version_components[-1]\n        \n        # Extract the numerical identifier from the version number\n        numerical_identifier = version_components[0][1:]\n        \n        # Convert the date and time to a datetime object\n        from datetime import datetime\n        date_time_object = datetime.strptime(date_time, '%Y%m%d_%H%M')\n        \n        # If the package is not in the dictionary or the current version is newer than the stored version, update the dictionary\n        if package_name not in latest_versions or date_time_object > latest_versions[package_name][0]:\n            latest_versions[package_name] = (date_time_object, version_number)\n    \n    # Return the dictionary of latest versions\n    return latest_versions\n"}
{"task_id": "valid/107", "completion": "\n    # Create a dictionary to store the categorized causes of death\n    categorized = {}\n\n    # Iterate over each cause of death in the list\n    for cause in causes:\n        # Split the cause into action and result\n        action, result = cause.split(\" \", 1)\n\n        # If the action is not already in the dictionary, add it\n        if action not in categorized:\n            categorized[action] = []\n\n        # Add the cause to the list of causes for the action\n        categorized[action].append(result)\n\n    # Return the dictionary of categorized causes of death\n    return categorized\n"}
{"task_id": "valid/108", "completion": "\n    # First, we remove any leading or trailing whitespace from the input name\n    name = name.strip()\n    \n    # Then, we replace any spaces in the name with hyphens\n    name = name.replace(' ', '-')\n    \n    # Next, we convert the entire name to lowercase\n    name = name.lower()\n    \n    # Finally, we return the generated code name\n    return name\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(c) > 127 for c in text)\n"}
{"task_id": "valid/110", "completion": "\n    # Import the string module which contains a number of useful constants and classes\n    import string\n    \n    # Use the translate method to remove punctuation marks\n    # The maketrans method returns a translation table that can be used with the translate method\n    # The string.punctuation constant contains all punctuation marks\n    translator = str.maketrans('', '', string.punctuation)\n    return string.translate(translator)\n"}
{"task_id": "valid/111", "completion": "\n    result = []\n    for num in num_list:\n        result.append(num ** exp)\n    return result\n"}
{"task_id": "valid/112", "completion": "\n    \n    # Initialize an empty list to store the minimum values\n    min_values = []\n    \n    # Iterate over each row in the grid\n    for row in grid:\n        # Find the minimum value in the current row\n        min_value = min(row)\n        \n        # Append the minimum value to the list\n        min_values.append(min_value)\n        \n        # Print the minimum value\n        print(min_value)\n    \n    # Return the list of minimum values\n    return min_values\n"}
{"task_id": "valid/113", "completion": "\n    # Validate input to ensure it's a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # Base case: if current_num is equal to n, print \"Thank you\" and return\n    if current_num == n:\n        print(\"Thank you\")\n        return\n\n    # Recursive case: if current_num is even, print \"Thank you\" and call the function with current_num + 1\n    if current_num % 2 == 0:\n        print(\"Thank you\")\n        print_thank_you(n, current_num + 1)\n    # If current_num is odd, simply call the function with current_num + 1\n    else:\n        print_thank_you(n, current_num + 1)\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == element:\n            count += 1\n        else:\n            break\n    return count\n"}
{"task_id": "valid/115", "completion": "\n    # Convert the number to a string to easily access each digit\n    num_str = str(num)\n    # Check if all digits in the number are the same\n    return len(set(num_str)) == 1\n\n"}
{"task_id": "valid/116", "completion": "\n    # Base case: if the string is empty, return it as is\n    if not s:\n        return s\n    \n    # If the first character of the string is a vowel, remove it and recurse on the rest of the string\n    if s[0].lower() in 'aeiou':\n        return remove_vowels_recursive(s[1:])\n    \n    # If the first character is not a vowel, keep it and recurse on the rest of the string\n    return s[0] + remove_vowels_recursive(s[1:])  # <--- Changed this line\n\n"}
{"task_id": "valid/117", "completion": "\n    \n    # Initialize an empty string to store the help message\n    help_message = \"\"\n    \n    # Iterate over each option tuple in the list\n    for option in options:\n        # Extract the option name and description from the tuple\n        option_name, option_description = option\n        \n        # Add the option name and description to the help message\n        help_message += f\"  {option_name}: {option_description}\\n\"\n    \n    # Return the generated help message\n    return help_message\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n"}
{"task_id": "valid/119", "completion": "\n    # Initialize an empty dictionary to store the counts of each value\n    counts = {}\n    \n    # Iterate over each value in the input array\n    for val in Val:\n        # If the value is already in the dictionary, increment its count by 1\n        if val in counts:\n            counts[val] += 1\n        # If the value is not in the dictionary, add it with a count of 1\n        else:\n            counts[val] = 1\n    \n    # Return the dictionary of counts\n    return counts\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset & 0xFFFFFFFF\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = 'aeiou'\n    for char in s:\n        if char.lower() not in vowels:\n            return False\n    return True\n"}
{"task_id": "valid/122", "completion": "\n    count = 0\n    for i in range(len(sequence)):\n        if sequence[i:i+len(subsequence)] == subsequence:\n            count += 1\n    return count\n"}
{"task_id": "valid/123", "completion": "\n    # Initialize the quotient to 0\n    q = 0\n    # Initialize the remainder to 0\n    r = 0\n    # Loop until the remainder is less than the divisor\n    while r < t:\n        # Add the divisor to the remainder\n        r += t\n        # Increment the quotient\n        q += 1\n    # Subtract the divisor from the remainder\n    r -= t\n    # Return the quotient\n    return q\n"}
{"task_id": "valid/124", "completion": "\n    return sum(num for num in input_list if num % 2 != 0)\n"}
{"task_id": "valid/125", "completion": "\n    # Convert the string to lowercase to handle case-insensitive input\n    string = string.lower()\n    # Initialize a counter for consonants\n    consonant_count = 0\n    # Iterate over each character in the string\n    for char in string:\n        # Check if the character is an alphabet letter\n        if char.isalpha():\n            # Check if the character is not a vowel\n            if char not in 'aeiou':\n                # If the character is a consonant, increment the counter\n                consonant_count += 1\n    # Return the total count of consonants\n    return consonant_count\n"}
{"task_id": "valid/126", "completion": "\n    \n    # Initialize the number of electrons to 0\n    num_electrons = 0\n    \n    # Iterate over the grid energies and ADOS values\n    for energy, ados in zip(grid_energies, ados):\n        # Calculate the number of electrons at the current energy level\n        num_electrons_at_energy = ados * (1 + (energy - dope) / dos_grid_size)\n        \n        # Add the number of electrons at the current energy level to the total number of electrons\n        num_electrons += num_electrons_at_energy\n    \n    # Return the total number of electrons\n    return num_electrons\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n"}
{"task_id": "valid/128", "completion": "\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Initialize two pointers, one at the start and one at the end of the array\n    left, right = 0, len(arr) - 1\n    \n    # Initialize the result array\n    result = [0] * len(arr)\n    \n    # Fill the result array with the smallest and largest numbers\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            result[i] = arr[left]\n            left += 1\n        else:\n            result[i] = arr[right]\n            right -= 1\n    \n    return result\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/131", "completion": "\n    \n    # Initialize an empty list to store the unique elements\n    unique_elements = []\n    \n    # Iterate through the list\n    for element in lst:\n        # Check if the element is not already in the list\n        if element not in unique_elements:\n            # If the list already has 3 elements, remove the last element to make space for the new one\n            if len(unique_elements) == 3:\n                unique_elements.pop()\n            # Add the new element to the list\n            unique_elements.append(element)\n    \n    # Return the list with the first 3 unique elements\n    return unique_elements\n"}
{"task_id": "valid/132", "completion": "\n    return sorted(fruit_list)\n"}
{"task_id": "valid/133", "completion": "\n    sublists = [[]]\n    for elem in lst:\n        sublists += [sublist + [elem] for sublist in sublists]\n    return sublists\n"}
{"task_id": "valid/134", "completion": "\n    # We use the re module which provides support for regular expressions in Python.\n    # The pattern '\\d+\\.\\d+' matches one or more digits followed by a dot and one or more digits.\n    pattern = re.compile(r'\\d+\\.\\d+')\n    # We use the search function to search for the pattern in the string.\n    # If the pattern is found, the function returns a match object which is truthy.\n    # If the pattern is not found, the function returns None which is falsy.\n    return bool(pattern.search(string))\n\n"}
{"task_id": "valid/135", "completion": "\n    # First, we need to import the necessary modules\n    from django.db import migrations, models\n\n    # We define a class that inherits from `migrations.Migration`\n    class Migration(migrations.Migration):\n        # The `dependencies` attribute specifies the dependencies for this migration\n        dependencies = [\n            # We depend on the `0001_initial` migration, which is the initial migration for the `history` app\n            ('history', '0001_initial'),\n        ]\n\n        # The `operations` attribute is a list of operations to be performed in this migration\n        operations = [\n            # We use the `AlterField` operation to alter the `field_name` field in the `CommitteeMember` model\n            migrations.AlterField(\n                model_name='committeemember',\n                name=field_name,\n                field=models.CharField(max_length=255),\n            ),\n        ]\n\n    # We return the `Migration` class\n    return Migration\n\n"}
{"task_id": "valid/136", "completion": "\n    # Convert the lists to sets to remove duplicates and improve lookup efficiency\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Find the intersection of the two sets, which are the common elements\n    common_elements = set1.intersection(set2)\n    \n    # Initialize a variable to store the sum of the common elements\n    common_elements_sum = 0\n    \n    # Iterate over the common elements and add them to the sum\n    for element in common_elements:\n        common_elements_sum += element\n    \n    # Return the sum of the common elements\n    return common_elements_sum\n"}
{"task_id": "valid/137", "completion": "\n    \n    # Calculate the length of the dataset\n    dataset_length = len(df)\n    \n    # Calculate 1% of the dataset length\n    one_percent = dataset_length * 0.01\n    \n    # Round up the result to the nearest integer using the ceil function from the math module\n    forecast_period = math.ceil(one_percent)\n    \n    return forecast_period\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n"}
{"task_id": "valid/139", "completion": "\n    # Calculate the start index of the current page\n    start_index = (page_number - 1) * items_per_page\n    \n    # Calculate the end index of the current page\n    end_index = start_index + items_per_page\n    \n    # Slice the list of items to get the items for the current page\n    paginated_items = items[start_index:end_index]\n    \n    return paginated_items\n\n"}
{"task_id": "valid/140", "completion": "\n    n = n_str\n    result = ''\n    carry = 0\n    for i in range(len(n) - 1, -1, -1):\n        digit = int(n[i])\n        double_digit = digit * 2 + carry\n        result = str(double_digit % 10) + result\n        carry = double_digit // 10\n    if carry:\n        result = str(carry) + result\n    return result\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        'home': (0.0, 0.0, 0.0),\n        'up': (0.0, 0.0, 0.5),\n        'down': (0.0, 0.0, -0.5),\n        'left': (-0.5, 0.0, 0.0),\n        'right': (0.5, 0.0, 0.0),\n        'forward': (0.0, 0.5, 0.0),\n        'backward': (0.0, -0.5, 0.0)\n    }\n\n    def get_preset_coordinates(preset_name):\n        return presets.get(preset_name, (0.0, 0.0, 0.0))\n\n    return get_preset_coordinates(preset_name)\n"}
{"task_id": "valid/142", "completion": "\n    # Convert the lists to sets to remove duplicates and improve lookup efficiency\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Find the intersection of the two sets, which are the common elements\n    common_elements = set1.intersection(set2)\n    \n    # Initialize the product to 1\n    product = 1\n    \n    # Iterate over the common elements and multiply them together\n    for element in common_elements:\n        product *= element\n    \n    # Return the product\n    return product\n"}
{"task_id": "valid/143", "completion": "\n    \n    # Define the quiz system behavior based on the given configurations\n    if allow_multiple_answer:\n        # If multiple answers are allowed, the quiz system will display all possible answers\n        # and allow the user to select one or more answers\n        if zoom_level == 1:\n            # If the zoom level is 1, the quiz system will display all possible answers\n            # in a list format\n            return \"Multiple answers allowed. Displaying all possible answers in a list format.\"\n        elif zoom_level == 2:\n            # If the zoom level is 2, the quiz system will display all possible answers\n            # in a grid format\n            return \"Multiple answers allowed. Displaying all possible answers in a grid format.\"\n    else:\n        # If multiple answers are not allowed, the quiz system will display only one possible answer\n        # and allow the user to select it\n        if zoom_level == 1:\n            # If the zoom level is 1, the quiz system will display only one possible answer\n            # in a list format\n            return \"Single answer allowed. Displaying only one possible answer in a list format.\"\n        elif zoom_level == 2:\n            # If the zoom level is 2, the quiz system will display only one possible answer\n            # in a grid format\n            return \"Single answer allowed. Displaying only one possible answer in a grid format.\"\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in sentence if char not in vowels])\n"}
{"task_id": "valid/146", "completion": "\n    merged = {}\n    for key in sorted(a.keys() + b.keys()):\n        if key.isalpha():\n            if isinstance(a.get(key), dict) and isinstance(b.get(key), dict):\n                merged[key] = merge_objects(a.get(key, {}), b.get(key, {}))\n            elif a.get(key) != b.get(key):\n                merged[key] = b.get(key)\n            else:\n                merged[key] = a.get(key)\n    return merged\n"}
{"task_id": "valid/147", "completion": "\n    max_val = float('-inf')\n    for key, value in d.items():\n        if isinstance(value, dict):\n            max_val = max(max_val, find_max_in_dict(value))\n        else:\n            max_val = max(max_val, value)\n    return max_val\n"}
{"task_id": "valid/148", "completion": "\n    # Get the list of values for the given key\n    values = dict.get(key, [])\n\n    # Check if the list is not empty\n    if values:\n        # Calculate the average of the values\n        avg = sum(values) / len(values)\n        return avg\n    else:\n        return None\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == '':\n        return None\n    return string.replace('e', '*')  # replace 'e' with '*' in the string\n"}
{"task_id": "valid/150", "completion": "\n    # Use heapq.nsmallest function to find the N smallest items\n    return heapq.nsmallest(n, lst)\n\n"}
{"task_id": "valid/151", "completion": "\n    return x % 2 == 0 and x % 3 == 0 and x % 5 == 0 and x % 7 == 0 and x % 11 == 0 and x % 13 == 0 and x % 17 == 0 and x % 19 == 0 and x % 23 == 0 and x % 29 == 0 and x % 31 == 0 and x % 37 == 0 and x % 41 == 0 and x % 43 == 0 and x % 47 == 0 and x % 53 == 0 and x % 59 == 0 and x % 61 == 0 and x % 67 == 0 and x % 71 == 0 and x % 73 == 0 and x % 79 == 0 and x % 83 == 0 and x % 89 == 0 and x % 97 == 0\n\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n\n"}
