{"task_id": "valid/0", "completion": "\n    # Define the categories\n    categories = ['sports', 'politics', 'technology', 'entertainment', 'business']\n    \n    # Define the rules for each category\n    rules = {\n        'sports': ['football', 'basketball', 'baseball', 'soccer', 'tennis'],\n        'politics': ['election', 'government', 'policy', 'law', 'president'],\n        'technology': ['computer', 'software', 'hardware', 'internet', 'AI'],\n        'entertainment': ['movie', 'music', 'TV', 'actor', 'actress'],\n        'business': ['stock', 'finance', 'market', 'company', 'economy']\n    }\n    \n    # Classify the text based on the rules\n    for category, keywords in rules.items():\n        for keyword in keywords:\n            if keyword in text.lower():\n                return category\n    \n    # If no category is found, return None\n    return None\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n"}
{"task_id": "valid/3", "completion": "\n    instruments = ['piano', 'guitar', 'drums', 'bass', 'violin', 'flute', 'clarinet', 'saxophone', 'trumpet', 'tuba']\n    sorted_instruments = sorted(instruments, reverse=True)\n    return sorted_instruments"}
{"task_id": "valid/4", "completion": "\n    try:\n        data = json.loads(json_string)\n        if isinstance(data, list):\n            return data\n        else:\n            raise ValueError(\"Input is not a valid JSON string.\")\n    except json.JSONDecodeError:\n        raise ValueError(\"Input is not a valid JSON string.\")\n\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n    if n % 5 == 0:\n        return sum(int(digit) for digit in str(n)) % 3 == 0\n    return False\n"}
{"task_id": "valid/6", "completion": "\n    # Initialize the result\n    result = 0\n\n    # Loop until the base raised to the result is equal to the number\n    while base ** result != n:\n        result += 1\n\n    return result\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        data = json.loads(json_str)\n        pprint.pprint(data)\n    except json.JSONDecodeError as e:\n        raise ValueError(\"Invalid JSON string\") from e\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace(\"{{\" + key + \"}}\", str(value))\n    return template\n"}
{"task_id": "valid/10", "completion": "\n    # Create a set to store unique characters\n    unique_chars = set()\n\n    # Iterate through each character in the string\n    for char in string:\n        # If the character is already in the set, return False\n        if char in unique_chars:\n            return False\n        # Otherwise, add the character to the set\n        unique_chars.add(char)\n\n    # If we reach this point, all characters are unique\n    return True\n"}
{"task_id": "valid/11", "completion": "\n    date = datetime.strptime(date_string, '%Y-%m-%d')\n    new_date = date + timedelta(days=days)\n    return new_date.strftime('%Y-%m-%d')\n\n"}
{"task_id": "valid/12", "completion": "\n    if len(text) > 10000:\n        return \"Error: Text length exceeds 10,000 characters.\"\n    else:\n        return ' '.join(text.split())\n"}
{"task_id": "valid/13", "completion": "\n    # Convert text to lowercase\n    text = text.lower()\n    \n    # Remove punctuation\n    text = text.translate(str.maketrans('', '', string.punctuation))\n    \n    # Remove digits\n    text = text.translate(str.maketrans('', '', string.digits))\n    \n    # Remove extra spaces\n    text = ' '.join(text.split())\n    \n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    pattern = r'\\b(' + word1 + r'|' + word2 + r')\\b'\n    return bool(re.search(pattern, text))\n\n"}
{"task_id": "valid/15", "completion": "\n    return [sum(x) for x in array]\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    for line in comment.splitlines():\n        if line.startswith('tabstop'):\n            settings['tabstop'] = int(line.split('=')[1])\n        elif line.startswith('expandtab'):\n            settings['expandtab'] = line.split('=')[1].strip()\n        elif line.startswith('shiftwidth'):\n            settings['shiftwidth'] = int(line.split('=')[1])\n        elif line.startswith('softtabstop'):\n            settings['softtabstop'] = int(line.split('=')[1])\n    return settings\n"}
{"task_id": "valid/17", "completion": "\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Return the list of words\n    return words\n"}
{"task_id": "valid/18", "completion": "\n    # Base case: if the number is less than 10, it has only one digit\n    if num < 10:\n        return 1\n    # Recursive case: if the number is greater than or equal to 10, count the digits of the number divided by 10\n    else:\n        return 1 + find_digits_count(num // 10)\n"}
{"task_id": "valid/19", "completion": "\n    list1 = list1[::-1]\n    list2 = list2[::-1]\n    combined_list = list1 + list2\n    combined_list.sort()\n    return combined_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n"}
{"task_id": "valid/21", "completion": "\n    return z**2\n"}
{"task_id": "valid/22", "completion": "\n    if \"name\" in dictionary:\n        return dictionary[\"name\"]\n    elif \"children\" in dictionary:\n        for child in dictionary[\"children\"]:\n            value = get_nested_dictionary_value(child)\n            if value is not None:\n                return value\n    return None\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {k: struct_to_dict(v) for k, v in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(v) for v in struct]\n    else:\n        return struct\n"}
{"task_id": "valid/24", "completion": "\n    # Convert the number to a string\n    num_str = str(num)\n    \n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        return num\n    \n    # Find the closest palindrome smaller than the given number\n    smaller_palindrome = num - 1\n    while str(smaller_palindrome) != str(smaller_palindrome)[::-1]:\n        smaller_palindrome -= 1\n    \n    # Find the closest palindrome larger than the given number\n    larger_palindrome = num + 1\n    while str(larger_palindrome) != str(larger_palindrome)[::-1]:\n        larger_palindrome += 1\n    \n    # Return the closest palindrome\n    if abs(num - smaller_palindrome) <= abs(num - larger_palindrome):\n        return smaller_palindrome\n    else:\n        return larger_palindrome\n"}
{"task_id": "valid/25", "completion": "\n    import math\n    return math.sqrt(num)\n"}
{"task_id": "valid/26", "completion": "\n    rows = len(matrix)\n    columns = len(matrix[0])\n    diagonal_sum = sum(matrix[i][i] for i in range(min(rows, columns)))\n    is_square = rows == columns\n    return rows, columns, diagonal_sum, is_square\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c for c in s if c.isalpha()).lower()\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        try:\n            json_data = json.loads(json_data)\n        except json.JSONDecodeError:\n            return False\n\n    if isinstance(json_data, dict):\n        if key not in json_data or json_data[key] != value:\n            return True\n    return False\n\n"}
{"task_id": "valid/31", "completion": "\n    table = []\n    for i, button in enumerate(buttons):\n        row = i // num_columns\n        col = i % num_columns\n        if row >= len(table):\n            table.append([])\n        table[row].append(button)\n    return table\n\n"}
{"task_id": "valid/32", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(alphabet) - 1):\n        if alphabet[i] not in s or alphabet[i+1] not in s:\n            return False\n        if s.index(alphabet[i]) > s.index(alphabet[i+1]):\n            return False\n    return True\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "valid/34", "completion": "\n    import re\n    return sum(int(num) for num in re.findall(r'\\d+', ts))\n\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n"}
{"task_id": "valid/36", "completion": "\n    # Check if the array is empty\n    if not arr:\n        return \"The array is empty.\"\n\n    # Check if all elements in the array are numerical\n    if not all(isinstance(x, (int, float)) for x in arr):\n        return \"The array contains non-numerical values.\"\n\n    # Compute the addition of all elements in the array\n    total = sum(arr)\n    return total\n"}
{"task_id": "valid/37", "completion": "\n    neighborhoods = []\n    for neighborhood in json_data:\n        neighborhoods.append(neighborhood[\"name\"])\n    neighborhoods.sort()\n    return neighborhoods\n\n"}
{"task_id": "valid/38", "completion": "\n    # Sort the array\n    arr.sort()\n\n    # Initialize the minimum sum as infinity\n    min_sum = float('inf')\n\n    # Initialize the left and right pointers\n    left = 0\n    right = n - 1\n\n    # Iterate until the left pointer is less than the right pointer\n    while left < right:\n        # Calculate the sum of the current pair\n        current_sum = arr[left] + arr[right]\n\n        # Update the minimum sum if the current sum is smaller\n        min_sum = min(min_sum, abs(current_sum))\n\n        # Move the left pointer to the right if the current sum is negative\n        if current_sum < 0:\n            left += 1\n        # Move the right pointer to the left if the current sum is positive\n        elif current_sum > 0:\n            right -= 1\n        # If the current sum is zero, return it as the minimum sum\n        else:\n            return 0\n\n    # Return the minimum sum\n    return min_sum\n\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for char in p:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "valid/40", "completion": "\n    results = {}\n    total_votes = 0\n\n    for vote in votes:\n        candidate_name, number_of_votes = vote\n        results[candidate_name] = results.get(candidate_name, 0) + number_of_votes\n        total_votes += number_of_votes\n\n    for candidate_name, vote_count in results.items():\n        percentage = (vote_count / total_votes) * 100\n        print(f\"{candidate_name}: {vote_count} votes ({percentage:.2f}%)\")\n\n    return results\n"}
{"task_id": "valid/41", "completion": "\n    # Define the possible month abbreviations and their corresponding full names\n    month_abbreviations = {\n        'Jan': 'January',\n        'Feb': 'February',\n        'Mar': 'March',\n        'Apr': 'April',\n        'May': 'May',\n        'Jun': 'June',\n        'Jul': 'July',\n        'Aug': 'August',\n        'Sep': 'September',\n        'Oct': 'October',\n        'Nov': 'November',\n        'Dec': 'December'\n    }\n\n    # Split the date string into day, month, and year components\n    date_parts = date_string.split('-')\n\n    # Check if the date string has the correct format\n    if len(date_parts) != 3:\n        raise ValueError(\"Invalid date format. Please use DD-MM-YYYY or DD-MMM-YYYY.\")\n\n    # Extract day, month, and year from the date string\n    day = int(date_parts[0])\n    month = date_parts[1]\n    year = int(date_parts[2])\n\n    # Check if the month is written or numeric\n    if month in month_abbreviations:\n        month_full = month_abbreviations[month]\n    else:\n        try:\n            month = int(month)\n            if month < 1 or month > 12:\n                raise ValueError(\"Invalid month.\")\n            month_full = datetime(1900, month, 1).strftime('%B')\n        except ValueError:\n            raise ValueError(\"Invalid month.\")\n\n    # Check if the day is valid for the given month and year\n    try:\n        datetime(year, month, day)\n    except ValueError:\n        raise ValueError(\"Invalid date.\")\n\n    # Return the date in the standardized format\n    return f\"{month_full} {day}, {year}\"\n\n"}
{"task_id": "valid/42", "completion": "\n    allowed_extensions = {\n        'image': ['.jpg', '.jpeg', '.png', '.gif'],\n        'document': ['.txt', '.pdf', '.docx', '.xlsx'],\n        'video': ['.mp4', '.avi', '.mov'],\n        'audio': ['.mp3', '.wav', '.aac']\n    }\n    if allowed_type not in allowed_extensions:\n        return False\n    _, ext = os.path.splitext(newname)\n    return ext.lower() in allowed_extensions[allowed_type]\n"}
{"task_id": "valid/43", "completion": "\n    result = []\n    for item in lst:\n        if isinstance(item, tuple):\n            result.append(remove_uneven(item))\n        elif isinstance(item, int) and item % 2 == 0:\n            result.append(item)\n        elif isinstance(item, float) and item.is_integer() and int(item) % 2 == 0:\n            result.append(item)\n        elif isinstance(item, str) and item.isdigit() and int(item) % 2 == 0:\n            result.append(item)\n    return tuple(result)\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n\n"}
{"task_id": "valid/45", "completion": "\n    count = 0\n    for char in string:\n        if char == specific_character:\n            count += 1\n    return count\n"}
{"task_id": "valid/46", "completion": "\n    # histogram_data = histogram_data + accs\n    return histogram_data + accs\n"}
{"task_id": "valid/47", "completion": "\n    pattern = r'^[a-zA-Z0-9]{5}$'\n    return re.match(pattern, string) is not None\n\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        if classifier.startswith(\"Programming Language ::\"):\n            language = classifier.split(\" :: \")[2]\n            unique_languages.add(language)\n    return len(unique_languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    # Create an empty dictionary to store the count of each number\n    count_dict = {}\n\n    # Iterate through each element in the array\n    for row in arr:\n        for num in row:\n            # If the number is already in the dictionary, increment its count\n            if num in count_dict:\n                count_dict[num] += 1\n            # If the number is not in the dictionary, add it with a count of 1\n            else:\n                count_dict[num] = 1\n\n    # Create an empty list to store the counts\n    counts = []\n\n    # Iterate through the dictionary and add each count to the list\n    for num, count in count_dict.items():\n        counts.append(count)\n\n    # Return the list of counts\n    return counts\n"}
{"task_id": "valid/50", "completion": "\n    from django.urls import path\n    from . import views\n\n    urlpatterns = [\n        path('videos/', views.video_list, name='video_list'),\n        path('videos/<int:video_id>/', views.video_detail, name='video_detail'),\n    ]\n\n    # Add your code here to match a given URL to the corresponding view function\n    for pattern in urlpatterns:\n        if re.match(pattern.regex.pattern, url):\n            return pattern.name\n    return None\n\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n"}
{"task_id": "valid/52", "completion": "\n    string = \"Hello\"\n    sentence = \" world!\"\n    return string + sentence\n"}
{"task_id": "valid/53", "completion": "\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings.append(s[i:j])\n    return substrings\n"}
{"task_id": "valid/54", "completion": "\n    price_sum = 0\n    for list_of_dict in list_of_dicts:\n        for dict_ in list_of_dict:\n            for key in dict_.keys():\n                if key.startswith(\"price\"):\n                    price_sum += dict_[key]\n    return price_sum\n\n"}
{"task_id": "valid/55", "completion": "\n    intersection = []\n    for element in list1:\n        if element in list2:\n            intersection.append(element)\n            list2.remove(element)\n    return intersection\n"}
{"task_id": "valid/56", "completion": "\n    if request_method == 'GET':\n        return api_advisor_view\n    elif request_method == 'POST':\n        return api_advisor_view_post\n    else:\n        return None\nThe function `route_request` takes a single argument `request_method` which represents the HTTP request method (GET or POST).\nIt checks the value of `request_method` and returns the corresponding endpoint handler function (`api_advisor_view` or `api_advisor_view_post`).\nIf the `request_method` is neither GET nor POST, it returns None.\nHere's an example usage of the `route_request` function:\n"}
{"task_id": "valid/57", "completion": "\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers.\")\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Both a and b must be positive integers.\")\n    if b == 0:\n        return a\n    else:\n        return gcd_recursive(b, a % b)\n"}
{"task_id": "valid/58", "completion": "\n    categorized_files = {\n        'global': [],\n        'environment': [],\n        'service': [],\n        'application': []\n    }\n    \n    for file_path in file_paths:\n        if 'global' in file_path:\n            categorized_files['global'].append(file_path)\n        elif 'environment' in file_path:\n            categorized_files['environment'].append(file_path)\n        elif 'service' in file_path:\n            categorized_files['service'].append(file_path)\n        elif 'application' in file_path:\n            categorized_files['application'].append(file_path)\n    \n    return categorized_files\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n\n"}
{"task_id": "valid/61", "completion": "\n    return timeEnd - timeStart\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return -1\n\n    mid = (start + end) // 2\n    if array[mid] == target:\n        return mid\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    colors = ['WHITE', 'RED', 'GREEN', 'BLUE']\n    current_index = colors.index(color)\n    next_index = (current_index + 1) % len(colors)\n    return colors[next_index]\n"}
{"task_id": "valid/64", "completion": "\n    return [x + 1 for x in list]\n\n"}
{"task_id": "valid/65", "completion": "\n    for num in range(start, end + 1):\n        if is_perfect_square(num):\n            return True\n    return False\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        for char in word:\n            if char.isalpha() and char.lower() == target.lower():\n                return char\n    return None\n"}
{"task_id": "valid/67", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/68", "completion": "\n    print(\"The keys in the given dictionary are:\")\n    for key in dict:\n        print(key)\n"}
{"task_id": "valid/69", "completion": "\n    name = \"John\"\n    age = 30\n    phrase = \" is a great person.\"\n    result = f\"{name}{phrase}\"\n    return result\n"}
{"task_id": "valid/70", "completion": "\n    def is_special_char(c):\n        return not (c.isalnum() or c.isspace())\n\n    def process_strings(strings):\n        result = []\n        for string in strings:\n            if not any(is_special_char(c) for c in string):\n                result.append(string.capitalize())\n        return result\n\n    return process_strings\n\n"}
{"task_id": "valid/71", "completion": "\n    for i in range(len(string)):\n        if string[i] == char:\n            return i\n    return -1\n"}
{"task_id": "valid/72", "completion": "\n    bold_tags = []\n    start_tag = '<b>'\n    end_tag = '</b>'\n    start_index = 0\n    while True:\n        start_index = html_code.find(start_tag, start_index)\n        if start_index == -1:\n            break\n        end_index = html_code.find(end_tag, start_index)\n        if end_index == -1:\n            break\n        bold_tags.append(html_code[start_index:end_index + len(end_tag)])\n        start_index = end_index + len(end_tag)\n    return bold_tags\nhtml_code = '<html><body><p>This is a <b>bold</b> text.</p><p>This is another <b>bold</b> text.</p></body></html>'\nbold_text = extract_bold_text(html_code)"}
{"task_id": "valid/73", "completion": "\n    # Define the items and their prices\n    items = {\n        \"Coke\": 1.00,\n        \"Pepsi\": 1.50,\n        \"Sprite\": 1.25,\n        \"Water\": 0.75\n    }\n    \n    # Check if the item exists in the vending machine\n    if item not in items:\n        return \"Item not found in vending machine.\"\n    \n    # Check if the user has inserted enough money\n    if money_inserted < items[item]:\n        return \"Insufficient funds.\"\n    \n    # Calculate the change to return to the user\n    change = money_inserted - items[item]\n    \n    # Update the stock of the item purchased\n    items[item] -= 1\n    \n    return f\"Here is your {item}. Your change is ${change:.2f}.\"\n"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    unique_list = list(set(merged_list))\n    return unique_list\n"}
{"task_id": "valid/75", "completion": "\n    count = 0\n    for element in list:\n        if element == target:\n            count += 1\n    return count\n"}
{"task_id": "valid/76", "completion": "\n    encoded_string = base64.b64encode(string.encode())\n    return encoded_string.decode()\n\n"}
{"task_id": "valid/77", "completion": "\n    import matplotlib.pyplot as plt\n    x = [1, 2, 3, 4, 5]\n    plt.stem(x)\n    plt.show()\n    return [i for i, value in enumerate(x) if value != 0]\nThe function `non_zero_indices()` takes a list of numbers as input and returns the indices of the non-zero entries in the vector.\nThe function uses a list comprehension to iterate over the list and check if each value is non-zero.\nIf the value is non-zero, the index is added to the list of non-zero indices.\nThe function returns the list of non-zero indices.\nThe code snippet provided creates a stem plot of the vector `x` using the `plt.stem()` function from the `matplotlib` library.\nThe `plt.show()` function is used to display the plot.\nThe function `non_zero_indices()` is then called with the vector `x` as input and the returned list of non-zero indices is printed.\nThe output of the code snippet is:\n"}
{"task_id": "valid/78", "completion": "\n    # Assign a specific value to a variable\n    my_variable = 10\n\n    # Validate the variable\n    if isinstance(my_variable, int):\n        print(\"The variable is valid.\")\n    else:\n        print(\"The variable is not valid.\")\n"}
{"task_id": "valid/79", "completion": "\n    # Convert the word to a list of characters\n    word_list = list(word)\n    # Shuffle the list of characters\n    random.shuffle(word_list)\n    # Join the shuffled characters back into a word\n    rearranged_word = ''.join(word_list)\n    return rearranged_word\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"integer\"\n    elif isinstance(element, float):\n        return \"float\"\n    elif isinstance(element, str):\n        return \"string\"\n    elif isinstance(element, list):\n        return \"list\"\n    elif isinstance(element, dict):\n        return \"dictionary\"\n    elif isinstance(element, tuple):\n        return \"tuple\"\n    elif isinstance(element, set):\n        return \"set\"\n    elif isinstance(element, bool):\n        return \"boolean\"\n    else:\n        return \"unknown\"\n"}
{"task_id": "valid/81", "completion": "\n    if not arr:\n        return arr\n\n    merged = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i-1]:\n            merged.append(arr[i])\n\n    return merged\n\n"}
{"task_id": "valid/82", "completion": "\n    # Define the regular expression pattern\n    pattern = r'\\b\\w+\\b'\n\n    # Use the re.findall() function to find all matches of the pattern in the text\n    tokens = re.findall(pattern, text)\n\n    return tokens\n\n"}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    average = sum(divisible_numbers) / len(divisible_numbers)\n    max_value = max(divisible_numbers)\n    min_value = min(divisible_numbers)\n    occurrences = {num: divisible_numbers.count(num) for num in set(divisible_numbers)}\n    return average, max_value, min_value, occurrences\n\nnumbers = [21, 42, 63, 84, 105, 126, 147, 168, 189, 210]\naverage, max_value, min_value, occurrences = find_divisible_numbers(numbers)"}
{"task_id": "valid/84", "completion": "\n    word_frequency = {}\n    for word in sentence.split():\n        if word in word_frequency:\n            word_frequency[word] += 1\n        else:\n            word_frequency[word] = 1\n\n    highest_frequency = max(word_frequency.values())\n    highest_frequency_words = [word for word, frequency in word_frequency.items() if frequency == highest_frequency]\n\n    return highest_frequency_words\n"}
{"task_id": "valid/85", "completion": "\n    # Initialize the variables\n    e = 1\n    factorial = 1\n    n = 1\n\n    # Calculate the value of e\n    while True:\n        # Calculate the factorial of n\n        factorial *= n\n\n        # Calculate the term to add to e\n        term = 1 / factorial\n\n        # Check if the term is smaller than the desired precision\n        if term < 10 ** (-decimal_places):\n            break\n\n        # Add the term to e\n        e += term\n\n        # Increment n\n        n += 1\n\n    return e\n\n"}
{"task_id": "valid/86", "completion": "\n    total = 0\n    for num in numbers:\n        total += num\n    average = total / len(numbers)\n    return average, total\n\nnumbers = [1, 2, 3, 4, 5]\naverage, total = getAverageAndSum(numbers)"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series is empty.\")\n    if not all(isinstance(x, (int, float)) for x in time_series):\n        raise ValueError(\"Time series contains non-numerical values.\")\n    return min(time_series), max(time_series)\n"}
{"task_id": "valid/88", "completion": "\n    relatedArticles = {}\n    for entry in encyclopedia:\n        relatedArticles[entry] = len(encyclopedia[entry])\n    return relatedArticles\n"}
{"task_id": "valid/89", "completion": "\n    max_value = max(lst)\n    return lst.index(max_value)\n"}
{"task_id": "valid/90", "completion": "\n    return not set(list1).isdisjoint(list2)\n"}
{"task_id": "valid/91", "completion": "\n    root = Element('data')\n    for key, value in dictionary.items():\n        child = Element(key)\n        child.text = str(value)\n        root.append(child)\n    return tostring(root, encoding='unicode')\n\n"}
{"task_id": "valid/92", "completion": "\n    # Check if the matrix is empty\n    if not matrix or not matrix[0]:\n        return False\n    \n    # Initialize the starting point\n    row, col = 0, len(matrix[0]) - 1\n    \n    # Traverse the matrix\n    while row < len(matrix) and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    \n    return False\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in lst:\n        if i & 1:  # Check if the number is odd using bitwise AND operation\n            sum_odd += i\n            count_odd += 1\n    average_odd = sum_odd / count_odd if count_odd > 0 else 0\n    return sum_odd, average_odd\n"}
{"task_id": "valid/94", "completion": "\n    if n > len(lst):\n        return None\n    lst.sort(reverse=True)\n    return lst[n-1]\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "valid/96", "completion": "\n    return set_a.symmetric_difference(set_b)\n\n"}
{"task_id": "valid/97", "completion": "\n\n    **Features:**\n    - Play music from YouTube, Spotify, SoundCloud, and more\n    - Manage personal playlists and server settings\n    - Categorize commands and provide help information for each command\n    - Provide information about the bot's features and a web app for managing personal playlists and server settings\n\n    **Web App:**\n    - Manage personal playlists and server settings\n    - View playlist statistics and analytics\n    - Create and manage playlists\n    - View server settings and configuration\n\n    **Commands:**\n    - `{mapping['play']}`: Play a song from YouTube, Spotify, SoundCloud, or a local file\n    - `{mapping['pause']}`: Pause the currently playing song\n    - `{mapping['resume']}`: Resume the currently paused song\n    - `{mapping['stop']}`: Stop the currently playing song\n    - `{mapping['skip']}`: Skip to the next song in the queue\n    - `{mapping['queue']}`: View the current queue of songs\n    - `{mapping['shuffle']}`: Shuffle the current queue of songs\n    - `{mapping['repeat']}`: Repeat the current song or the entire queue\n    - `{mapping['volume']}`: Set the volume of the music player\n    - `{mapping['nowplaying']}`: View information about the currently playing song\n    - `{mapping['playlist']}`: Manage personal playlists and server settings\n    - `{mapping['help']}`: View help information for a specific command\n\n    **Help Information:**\n    - `{mapping['help']}`: View help information for a specific command\n    - `{mapping['help']}`: View help information for all commands\n    - `{mapping['help']}`: View help information for a specific category of commands\n\n    **Categorization:**\n    - `{mapping['play']}`: Play music\n    - `{mapping['pause']}`: Pause music\n    - `{mapping['resume']}`: Resume music\n    - `{mapping['stop']}`: Stop music\n    - `{mapping['skip']}`: Skip music\n    - `{mapping['queue']}`: View queue\n    - `{mapping['shuffle']}`: Shuffle queue\n    - `{mapping['repeat']}`: Repeat music\n    - `{mapping['volume']}`: Set volume\n    - `{mapping['nowplaying']}`: View now playing\n    - `{mapping['playlist']"}
{"task_id": "valid/98", "completion": "\n    if n < 0:\n        return dec_to_ternary(-n)\n    elif n == 0:\n        return '0'\n    else:\n        ternary = ''\n        while n > 0:\n            ternary = str(n % 3) + ternary\n            n = n // 3\n        return ternary\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(os.path.splitext(file_name)[1][1:] for file_name in file_names)\n"}
{"task_id": "valid/100", "completion": "\n    if age < 0:\n        return \"Invalid age\"\n    elif age < 13:\n        return \"Child\"\n    elif age < 20:\n        return \"Teenager\"\n    elif age < 40:\n        return \"Young Adult\"\n    elif age < 65:\n        return \"Adult\"\n    else:\n        return \"Senior\""}
{"task_id": "valid/101", "completion": "\n    if numerical_grade >= 90:\n        letter_grade = \"A\"\n        gpa = 4.0\n    elif numerical_grade >= 80:\n        letter_grade = \"B\"\n        gpa = 3.0\n    elif numerical_grade >= 70:\n        letter_grade = \"C\"\n        gpa = 2.0\n    elif numerical_grade >= 60:\n        letter_grade = \"D\"\n        gpa = 1.0\n    else:\n        letter_grade = \"F\"\n        gpa = 0.0\n\n    return letter_grade, gpa\n\n"}
{"task_id": "valid/102", "completion": "\n    # Define the function\n    def total_price(listing):\n        # Initialize the total price\n        total = 0\n        # Loop through the items in the listing\n        for item in listing:\n            # Add the price of the item to the total\n            total += item['price']\n        # Return the total price\n        return total\n    return total_price\n"}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    result = {}\n    for palindrome in palindrome_tuples:\n        count = sum(1 for char in palindrome if char in vowels)\n        result[palindrome] = count\n    return result\n"}
{"task_id": "valid/104", "completion": "\n    # Check if the string is empty\n    if not s:\n        return \"Empty string\"\n\n    # Check if the string contains only whitespace characters\n    if s.isspace():\n        return \"String contains only whitespace\"\n\n    # Check if the string contains any digits\n    if any(char.isdigit() for char in s):\n        return \"String contains digits\"\n\n    # Check if the string contains any special characters\n    if any(not char.isalnum() for char in s):\n        return \"String contains special characters\"\n\n    # Check if the string contains any uppercase letters\n    if any(char.isupper() for char in s):\n        return \"String contains uppercase letters\"\n\n    # Check if the string contains any lowercase letters\n    if any(char.islower() for char in s):\n        return \"String contains lowercase letters\"\n\n    # If none of the above conditions are met, return the original string\n    return s\n"}
{"task_id": "valid/105", "completion": "\n    # Create a set to store the elements of the array\n    elements = set()\n\n    # Iterate through the array\n    for num in arr:\n        # Check if the negative of the current number is in the set\n        if -num in elements:\n            # If it is, return True\n            return True\n        # Add the current number to the set\n        elements.add(num)\n\n    # If no pair of numbers sums to 0, return False\n    return False\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n    for dependency in dependencies:\n        package_name, version_number = dependency\n        version_number = version_number.split('_')[2]  # Extract the date and time part\n        if package_name not in latest_versions or version_number > latest_versions[package_name]:\n            latest_versions[package_name] = version_number\n    return latest_versions\nThe function `extract_latest_versions` takes a list of dependencies as input and returns a dictionary where the keys are the package names and the values are the latest version numbers for each package.\n\nHere's how the function works:\n\n1. Initialize an empty dictionary `latest_versions` to store the latest version for each package.\n2. Iterate over each dependency in the input list.\n3. Split the version number string using the underscore character ('_') as the delimiter. This will give us a list of substrings.\n4. Extract the third element from the list (index 2) to get the date and time part of the version number.\n5. Check if the package name is already a key in the `latest_versions` dictionary. If it is not, or if the current version number is greater than the stored version number, update the `latest_versions` dictionary with the new version number.\n6. After iterating over all dependencies, return the `latest_versions` dictionary.\n\nNote that the function assumes that the input list of dependencies is well-formed and follows the specified format."}
{"task_id": "valid/107", "completion": "\n    # Create a dictionary to store the categories and their corresponding causes\n    categories = {}\n\n    # Iterate through the list of causes\n    for cause in causes:\n        # Split the cause into action and result\n        action, result = cause.split()\n\n        # Check if the action is already in the categories dictionary\n        if action in categories:\n            # If it is, append the result to the list of results for that action\n            categories[action].append(result)\n        else:\n            # If it is not, create a new list with the result as the first element\n            categories[action] = [result]\n\n    # Return the dictionary of categories\n    return categories\n"}
{"task_id": "valid/108", "completion": "\n    code_name = name.replace(\" \", \"-\").lower()\n    return code_name\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(char) > 127 for char in text)\n"}
{"task_id": "valid/110", "completion": "\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    no_punct = \"\"\n    for char in string:\n        if char not in punctuations:\n            no_punct = no_punct + char\n    return no_punct\n"}
{"task_id": "valid/111", "completion": "\n    try:\n        result = []\n        for num in num_list:\n            result.append(num ** exp)\n        return result\n    except TypeError:\n        print(\"Error: Please provide a list of numbers and a valid exponent.\")\n        return None\n"}
{"task_id": "valid/112", "completion": "\n    min_values = []\n    for row in grid:\n        min_values.append(min(row))\n    print(min_values)\n"}
{"task_id": "valid/113", "completion": "\n    if n < 1 or not isinstance(n, int):\n        print(\"Please enter a positive integer.\")\n        return\n    if current_num > n:\n        return\n    if current_num % 2 == 0:\n        print(\"Thank you\")\n    print_thank_you(n, current_num + 1)\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    max_count = 0\n    for i in range(len(lst)):\n        if lst[i] == element:\n            count += 1\n            max_count = max(max_count, count)\n        else:\n            count = 0\n    return max_count\n"}
{"task_id": "valid/115", "completion": "\n    num_str = str(num)\n    return all(digit == num_str[0] for digit in num_str)\n\n"}
{"task_id": "valid/116", "completion": "\n    if len(s) == 0:\n        return \"\"\n    else:\n        if s[0].lower() in \"aeiou\":\n            return remove_vowels_recursive(s[1:])\n        else:\n            return s[0] + remove_vowels_recursive(s[1:])\n"}
{"task_id": "valid/117", "completion": "\n    help_message = \"Usage: python app.py [options]\\n\\nOptions:\\n\"\n    for option, description in options:\n        help_message += f\"  -{option}, --{option}\\n    {description}\\n\"\n    return help_message\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n"}
{"task_id": "valid/119", "completion": "\n    count = 0\n    for i in Val:\n        if i == 1:\n            count += 1\n    return count\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = \"aeiou\"\n    return all(char in vowels for char in s.lower())\n"}
{"task_id": "valid/122", "completion": "\n    count = 0\n    start = 0\n    while True:\n        start = sequence.find(subsequence, start)\n        if start == -1: \n            break\n        count += 1\n        start += 1\n    return count\n\nsequence_of_characters = \"Please find the number of occurrences of this string\"\nspecific_subsequence = \"string\""}
{"task_id": "valid/123", "completion": "\n    # Check if the divisor is zero\n    if t == 0:\n        raise ValueError(\"Cannot divide by zero\")\n\n    # Determine the sign of the result\n    sign = -1 if (h < 0) ^ (t < 0) else 1\n\n    # Take the absolute values of h and t\n    h = abs(h)\n    t = abs(t)\n\n    # Initialize the quotient and remainder\n    quotient = 0\n    remainder = h\n\n    # Perform the division\n    while remainder >= t:\n        remainder -= t\n        quotient += 1\n\n    # Return the result with the correct sign\n    return sign * quotient\n\n"}
{"task_id": "valid/124", "completion": "\n"}
{"task_id": "valid/125", "completion": "\n    # Initialize a counter for consonants\n    consonant_count = 0\n\n    # Iterate over each character in the string\n    for char in string:\n        # Check if the character is a consonant\n        if char.lower() in \"bcdfghjklmnpqrstvwxyz\":\n            # Increment the counter\n            consonant_count += 1\n\n    # Return the total count of consonants\n    return consonant_count\n"}
{"task_id": "valid/126", "completion": "\n    # Calculate the number of electrons based on energy values\n    num_electrons = 0\n    for energy in grid_energies:\n        num_electrons += ados[energy]\n\n    # Adjust the number of electrons based on doping levels\n    num_electrons += dope * dos_grid_size\n\n    return num_electrons\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))"}
{"task_id": "valid/128", "completion": "\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Create two new arrays to store the rearranged elements\n    arr1 = []\n    arr2 = []\n    \n    # Divide the sorted array into two halves\n    mid = len(arr) // 2\n    arr1 = arr[:mid]\n    arr2 = arr[mid:]\n    \n    # Reverse the second half of the array\n    arr2.reverse()\n    \n    # Merge the two halves of the array\n    arr = arr1 + arr2\n    \n    return arr\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for element in lst:\n        if element not in unique_elements:\n            unique_elements.append(element)\n            if len(unique_elements) == 3:\n                break\n    return unique_elements\nlst = [1, 2, 3, 4, 5, 1, 2, 3, 6, 7, 8, 9, 10]"}
{"task_id": "valid/132", "completion": "\n    # Sort the fruit list in lexicographical order\n    sorted_fruit_list = sorted(fruit_list)\n\n    # Join the sorted list into a single string with each fruit name separated by a comma and a space\n    result = ', '.join(sorted_fruit_list)\n\n    return result\n"}
{"task_id": "valid/133", "completion": "\n    sublists = []\n    for i in range(len(lst) + 1):\n        for j in range(i + 1):\n            sublists.append(lst[j:i])\n    return sublists\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d+\\.\\d+'\n    return bool(re.search(pattern, string))\n\n"}
{"task_id": "valid/135", "completion": "\n\nfrom django.db import migrations, models\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = set(list1) & set(list2)\n    return sum(common_elements)\n"}
{"task_id": "valid/137", "completion": "\n    forecast_period = math.ceil(len(df) * 0.01)\n    return forecast_period\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n"}
{"task_id": "valid/139", "completion": "\n    start_index = (page_number - 1) * items_per_page\n    end_index = start_index + items_per_page\n    return items[start_index:end_index]\n\n"}
{"task_id": "valid/140", "completion": "\n    result = []\n    carry = 0\n    for i in range(len(n_str) - 1, -1, -1):\n        digit = int(n_str[i])\n        temp = digit * 2 + carry\n        carry = temp // 10\n        result.append(str(temp % 10))\n    if carry > 0:\n        result.append(str(carry))\n    return ''.join(result[::-1])\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        \"home\": (0.0, 0.0, 0.0),\n        \"position1\": (0.1, 0.2, 0.3),\n        \"position2\": (0.4, 0.5, 0.6),\n        \"position3\": (0.7, 0.8, 0.9),\n    }\n\n    def get_preset_coordinates(preset_name):\n        if preset_name in presets:\n            return presets[preset_name]\n        else:\n            return None\n\n    # Example usage\n    preset_name = \"position2\"\n    coordinates = get_preset_coordinates(preset_name)\n    if coordinates:\n        print(f\"The coordinates for preset '{preset_name}' are: {coordinates}\")\n    else:\n        print(f\"No preset found for '{preset_name}'\")"}
{"task_id": "valid/142", "completion": "\n    common_elements = set(list1) & set(list2)\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product\n"}
{"task_id": "valid/143", "completion": "\n    # Configuration for allowing multiple answers\n    allow_multiple_answer = True\n\n    # Configuration for zoom level\n    zoom_level = 2\n\n    # Function to check if the user's answer is correct\n    def check_answer(user_answer, correct_answer):\n        if allow_multiple_answer:\n            return user_answer in correct_answer\n        else:\n            return user_answer == correct_answer\n\n    # Function to calculate the score based on the user's answer\n    def calculate_score(user_answer, correct_answer):\n        if check_answer(user_answer, correct_answer):\n            return 1\n        else:\n            return 0\n\n    # Function to display the quiz question\n    def display_question(question):\n        print(f\"Question: {question}\")\n\n    # Function to display the user's answer\n    def display_user_answer(user_answer):\n        print(f\"Your answer: {user_answer}\")\n\n    # Function to display the correct answer\n    def display_correct_answer(correct_answer):\n        print(f\"Correct answer: {correct_answer}\")\n\n    # Function to display the score\n    def display_score(score):\n        print(f\"Your score: {score}\")\n\n    # Function to display the zoom level\n    def display_zoom_level(zoom_level):\n        print(f\"Zoom level: {zoom_level}\")\n\n    # Function to start the quiz\n    def start_quiz(questions):\n        for question in questions:\n            display_question(question[\"question\"])\n            user_answer = input(\"Your answer: \")\n            display_user_answer(user_answer)\n            correct_answer = question[\"correct_answer\"]\n            display_correct_answer(correct_answer)\n            score = calculate_score(user_answer, correct_answer)\n            display_score(score)\n\n    # Function to display the final score\n    def display_final_score(score):\n        print(f\"Final score: {score}\")\n\n    # Function to display the final zoom level\n    def display_final_zoom_level(zoom_level):\n        print(f\"Final zoom level: {zoom_level}\")\n\n    # Function to end the quiz\n    def end_quiz():\n        print(\"Quiz ended.\")\n\n    # Function to display the quiz instructions\n    def display_instructions():\n        print(\"Welcome to the quiz!\")\n        print(\"Please answer the questions as best as you can.\")\n        print(\"Good luck!\")\n\n    # Function to display the quiz results\n    def display_results(score, zoom_level):\n        print(\"Quiz results:\")\n        print(f\"Your score: {score}\")\n        print(f\"Zoom level: {zoom_level}\")\n\n    # Function to display the quiz summary\n    def display_summary():\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = \"aeiouAEIOU\"\n    return \"\".join([char for char in sentence if char not in vowels])\n"}
{"task_id": "valid/146", "completion": "\n    merged = {}\n    for key in a.keys():\n        if key.isalpha():\n            merged[key] = a[key]\n    for key in b.keys():\n        if key.isalpha():\n            merged[key] = b[key]\n    for key in merged.keys():\n        if isinstance(merged[key], dict):\n            merged[key] = merge_objects(merged[key], b[key])\n    return dict(sorted(merged.items()))\n\n\na = {'a': 1, 'b': 2, 'nested': {'x': 5, 'y': 6}}\nb = {'c': 3, 'd': 4, 'nested': {'y': 7, 'z': 8}}"}
{"task_id": "valid/147", "completion": "\n    try:\n        max_value = float('-inf')\n        for key, value in d.items():\n            if isinstance(value, dict):\n                max_value = max(max_value, find_max_in_dict(value))\n            else:\n                max_value = max(max_value, value)\n        return max_value\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None\n"}
{"task_id": "valid/148", "completion": "\n    return sum(dict[key]) / len(dict[key])\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == \"\":\n        return None\n    else:\n        return string.replace('e', '*')\n"}
{"task_id": "valid/150", "completion": "\n    # Check if n is greater than the length of the list\n    if n > len(lst):\n        raise ValueError(\"n cannot be greater than the length of the list\")\n\n    # Use heapq.nsmallest to find the N smallest items\n    smallest_items = heapq.nsmallest(n, lst)\n\n    return smallest_items\n\n"}
{"task_id": "valid/151", "completion": "\n    return x == 0 or x == 1 or x == 2 or x == 3 or x == 4 or x == 5 or x == 6 or x == 7 or x == 8 or x == 9 or x == 10 or x == 11 or x == 12 or x == 13 or x == 14 or x == 15 or x == 16 or x == 17 or x == 18 or x == 19 or x == 20 or x == 21 or x == 22 or x == 23 or x == 24 or x == 25 or x == 26 or x == 27 or x == 28 or x == 29 or x == 30 or x == 31 or x == 32 or x == 33 or x == 34 or x == 35 or x == 36 or x == 37 or x == 38 or x == 39 or x == 40 or x == 41 or x == 42 or x == 43 or x == 44 or x == 45 or x == 46 or x == 47 or x == 48 or x == 49 or x == 50 or x == 51 or x == 52 or x == 53 or x == 54 or x == 55 or x == 56 or x == 57 or x == 58 or x == 59 or x == 60 or x == 61 or x == 62 or x == 63 or x == 64 or x == 65 or x == 66 or x == 67 or x == 68 or x == 69 or x == 70 or x == 71 or x == 72 or x == 73 or x == 74 or x == 75 or x == 76 or x == 77 or x == 78 or x == 79 or x == 80 or x == 81 or x == 82 or x == 83 or x == 84 or x == 85 or x == 86 or x == 87 or x == 88 or x == 89 or x == 90 or x == 91 or x == 92 or x == 93 or x == 94 or x == 95 or x == 96 or x == 97 or x == 98 or x == 99 or x == 100 or x == 101 or"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n\n"}
