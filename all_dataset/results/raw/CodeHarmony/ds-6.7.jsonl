{"task_id": "valid/0", "completion": "\n    # Define the categories\n    categories = {\n        \"Politics\": [\"government\", \"election\", \"policy\", \"law\", \"legislation\"],\n        \"Sports\": [\"sport\", \"game\", \"team\", \"player\", \"race\", \"competition\"],\n        \"Technology\": [\"technology\", \"computer\", \"software\", \"hardware\", \"internet\", \"tech\"],\n        \"Science\": [\"science\", \"research\", \"lab\", \"experiment\", \"discovery\", \"theory\"],\n        \"Entertainment\": [\"movie\", \"music\", \"show\", \"art\", \"book\", \"music\", \"theater\", \"comic\", \"tv\", \"games\"],\n        \"Business\": [\"business\", \"economy\", \"market\", \"company\", \"corporation\", \"investment\"],\n        \"Health\": [\"health\", \"medicine\", \"disease\", \"doctor\", \"hospital\", \"wellness\"],\n        \"Education\": [\"school\", \"study\", \"teacher\", \"education\", \"university\", \"course\"],\n        \"Environment\": [\"environment\", \"ecology\", \"climate\", \"wildlife\", \"pollution\", \"biodiversity\"],\n        \"Crime\": [\"crime\", \"law enforcement\", \"police\", \"officer\", \"criminal\", \"violence\"]\n    }\n\n    # Convert the text to lowercase for case insensitive comparison\n    text = text.lower()\n\n    # Check each category\n    for category, keywords in categories.items():\n        if any(keyword in text for keyword in keywords):\n            return category\n\n    # If no category is found, return Unknown\n    return \"Unknown\"\n\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n\n"}
{"task_id": "valid/3", "completion": "\n    instruments.sort(reverse=True)\n    return instruments\n\ninstruments = ['Guitar', 'Piano', 'Drums', 'Trumpet', 'Flute', 'Violin', 'Cello', 'Saxophone', 'Clarinet', 'Harp']"}
{"task_id": "valid/4", "completion": "\n    try:\n        return json.loads(json_string)\n    except json.JSONDecodeError:\n        raise ValueError(\"Invalid JSON string\")\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n    else:\n        digits = [int(d) for d in str(n)]\n        return n % 5 == 0 and sum(digits) % 3 == 0\n\n"}
{"task_id": "valid/6", "completion": "\n    return log(n, base)\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        parsed_json = json.loads(json_str)\n        pprint.pprint(parsed_json)\n    except ValueError as e:\n        print(f\"Invalid JSON: {e}\")\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace('{{' + key + '}}', str(value))\n    return template\n\n"}
{"task_id": "valid/10", "completion": "\n    # Initialize an empty set\n    unique_chars = set()\n\n    # Iterate over each character in the string\n    for char in string:\n        # If the character is already in the set, return False\n        if char in unique_chars:\n            return False\n        # Otherwise, add the character to the set\n        unique_chars.add(char)\n\n    # If we've gone through the entire string without finding any duplicates, return True\n    return True\n\n"}
{"task_id": "valid/11", "completion": "\n    date = datetime.strptime(date_string, '%Y-%m-%d')\n    result = date + timedelta(days=days)\n    return result.strftime('%Y-%m-%d')\n"}
{"task_id": "valid/12", "completion": "\n    return \" \".join(text.split())\n\n"}
{"task_id": "valid/13", "completion": "\n    # Convert to lowercase\n    text = text.lower()\n\n    # Remove punctuation\n    translator = str.maketrans('', '', string.punctuation)\n    text = text.translate(translator)\n\n    # Remove digits\n    translator = str.maketrans('', '', string.digits)\n    text = text.translate(translator)\n\n    # Remove whitespace\n    text = text.strip()\n\n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    return re.search(r'\\b(' + word1 + r'|' + word2 + r')\\b', text) is not None\n"}
{"task_id": "valid/15", "completion": "\n    return [sum(i) for i in array]\n\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    lines = comment.split('\\n')\n    for line in lines:\n        if line.startswith('--'):\n            line = line.strip('--').strip()\n            if 'tabstop' in line:\n                settings['tabstop'] = int(line.split('=')[1])\n            elif 'expandtab' in line:\n                settings['expandtab'] = line.split('=')[1].lower() == 'true'\n            elif 'shiftwidth' in line:\n                settings['shiftwidth'] = int(line.split('=')[1])\n            elif 'softtabstop' in line:\n                settings['softtabstop'] = int(line.split('=')[1])\n    return settings\n\n"}
{"task_id": "valid/17", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)\n\n"}
{"task_id": "valid/19", "completion": "\n    list1.reverse()\n    list2.reverse()\n    combined_list = list1 + list2\n    combined_list.sort()\n    return combined_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n"}
{"task_id": "valid/21", "completion": "\n    return z * z\n\n"}
{"task_id": "valid/22", "completion": "\n    if \"name\" in dictionary:\n        return dictionary[\"name\"]\n    else:\n        for key in dictionary:\n            if isinstance(dictionary[key], dict):\n                value = get_nested_dictionary_value(dictionary[key])\n                if value is not None:\n                    return value\n        return None\n\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {k: struct_to_dict(v) for k, v in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(v) for v in struct]\n    else:\n        return struct\n\n"}
{"task_id": "valid/24", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    if is_palindrome(num):\n        return num\n\n    lower = num - 1\n    while not is_palindrome(lower):\n        lower -= 1\n\n    upper = num + 1\n    while not is_palindrome(upper):\n        upper += 1\n\n    return lower if num - lower <= upper - num else upper\n"}
{"task_id": "valid/25", "completion": "\n    return num ** 0.5\n\n"}
{"task_id": "valid/26", "completion": "\n    rows = len(matrix)\n    cols = len(matrix[0])\n    diagonal_sum = 0\n    is_square = rows == cols\n\n    for i in range(min(rows, cols)):\n        diagonal_sum += matrix[i][i]\n\n    return rows, cols, diagonal_sum, is_square\n\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode()).decode()\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c for c in s if c.isalpha()).lower()\n\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n\n    return not (key in json_data and json_data[key] == value)\n\n"}
{"task_id": "valid/31", "completion": "\n    # Initialize an empty list to store the button table\n    button_table = []\n\n    # Iterate over the buttons in chunks of num_columns\n    for i in range(0, len(buttons), num_columns):\n        # Append the current chunk of buttons to the button table\n        button_table.append(buttons[i:i + num_columns])\n\n    # Return the button table\n    return button_table\n\n"}
{"task_id": "valid/32", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(alphabet) - len(s) + 1):\n        if alphabet[i:i+len(s)] == s:\n            return True\n    return False\n\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "valid/34", "completion": "\n    import re\n    return sum(int(i) for i in re.findall(r'\\d+', ts))\n\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n\n"}
{"task_id": "valid/36", "completion": "\n    try:\n        return sum(arr)\n    except TypeError:\n        return \"Array should only contain numerical values\"\n"}
{"task_id": "valid/37", "completion": "\n    neighborhoods = json.loads(json_data)\n    return sorted([neighborhood['name'] for neighborhood in neighborhoods])\n"}
{"task_id": "valid/38", "completion": "\n    arr = sorted(arr)\n    l = 0\n    r = n - 1\n    min_sum = 99999999999\n    min_l = l\n    min_r = r\n    while l < r:\n        sum = abs(arr[l] + arr[r])\n        if sum < min_sum:\n            min_sum = sum\n            min_l = l\n            min_r = r\n        if arr[l] + arr[r] < 0:\n            l += 1\n        else:\n            r -= 1\n    return (arr[min_l], arr[min_r])\n\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for i in p:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack or stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "valid/40", "completion": "\n    # Initialize a dictionary to store the vote counts\n    vote_counts = {}\n\n    # Calculate the total number of votes\n    total_votes = sum(votes[i][1] for i in range(len(votes)))\n\n    # Check if the total number of votes is at least 100\n    if total_votes < 100:\n        return \"Total number of votes is less than 100\"\n\n    # Calculate the vote counts and percentages for each candidate\n    for vote in votes:\n        candidate_name = vote[0]\n        candidate_votes = vote[1]\n        vote_counts[candidate_name] = candidate_votes\n\n    # Calculate the percentage of votes for each candidate\n    for candidate in vote_counts:\n        vote_percentage = (vote_counts[candidate] / total_votes) * 100\n        vote_counts[candidate] = (vote_counts[candidate], round(vote_percentage, 2))\n\n    return vote_counts\n\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        if \"-\" in date_string:\n            if date_string.count(\"-\") == 2:\n                day, month, year = map(int, date_string.split(\"-\"))\n            else:\n                raise ValueError\n        elif \"/\" in date_string:\n            if date_string.count(\"/\") == 2:\n                day, month, year = map(int, date_string.split(\"/\"))\n            else:\n                raise ValueError\n        else:\n            raise ValueError\n\n        date = datetime(year, month, day)\n\n    except ValueError:\n        try:\n            if \"-\" in date_string:\n                if date_string.count(\"-\") == 2:\n                    day, month, year = date_string.split(\"-\")\n                    day = int(day)\n                    year = int(year)\n                    month = datetime.strptime(month, \"%b\").month\n                else:\n                    raise ValueError\n            elif \"/\" in date_string:\n                if date_string.count(\"/\") == 2:\n                    day, month, year = date_string.split(\"/\")\n                    day = int(day)\n                    year = int(year)\n                    month = datetime.strptime(month, \"%b\").month\n                else:\n                    raise ValueError\n            else:\n                raise ValueError\n\n            date = datetime(year, month, day)\n\n        except ValueError:\n            return \"Invalid date format. Please use DD-MM-YYYY or DD-MMM-YYYY.\"\n\n    return date.strftime(\"%B %d, %Y\")\n\n"}
{"task_id": "valid/42", "completion": "\n    allowed_extensions = {\n        'txt': 'text',\n        'exe': 'executable',\n        'dll': 'dynamic-link library',\n        'pdf': 'pdf',\n        'docx': 'word',\n        'jpeg': 'image',\n    }\n\n    old_extension = oldname.split('.')[-1]\n    new_extension = newname.split('.')[-1]\n\n    if old_extension not in allowed_extensions:\n        return False, f\"The file {oldname} is not allowed to be renamed.\"\n\n    if new_extension not in allowed_extensions:\n        return False, f\"The new file name {newname} has an invalid extension. Only files with the following extensions are allowed: {', '.join(allowed_extensions.keys())}\"\n\n    if allowed_extensions[old_extension] != allowed_type and allowed_type != 'all':\n        return False, f\"The file {oldname} is not allowed to be renamed to a {allowed_type} file.\"\n\n    return True, f\"The file {oldname} has been successfully renamed to {newname}.\"\n\n"}
{"task_id": "valid/43", "completion": "\n    def is_even(n):\n        if isinstance(n, str):\n            if n.isdigit():\n                return int(n) % 2 == 0\n            else:\n                return False\n        else:\n            return n % 2 == 0\n\n    def process(n):\n        if isinstance(n, tuple):\n            return tuple(filter(is_even, map(process, n)))\n        else:\n            return n if is_even(n) else None\n\n    return process(lst)\n\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n\n"}
{"task_id": "valid/45", "completion": "\n    count = 0\n    for character in string:\n        if character.lower() == specific_character.lower():\n            count += 1\n    return count\n\n"}
{"task_id": "valid/46", "completion": "\n    histogram_data['generation'].append(generation)\n    histogram_data['accuracy'].append(accs)\n    return histogram_data\n\n"}
{"task_id": "valid/47", "completion": "\n    return re.fullmatch(r'\\w{5}', string) is not None\n\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        if \" :: \" in classifier:\n            language = classifier.split(\" :: \")[1]\n            unique_languages.add(language)\n    return len(unique_languages)\n"}
{"task_id": "valid/49", "completion": "\n    count_dict = {}\n    for sub_arr in arr:\n        for num in sub_arr:\n            if num in count_dict:\n                count_dict[num] += 1\n            else:\n                count_dict[num] = 1\n    return count_dict\n"}
{"task_id": "valid/50", "completion": "\n    urlpatterns = [\n        (r'^videos/$', 'list_videos'),\n        (r'^videos/(?P<video_id>\\d+)/$', 'watch_video'),\n    ]\n\n    for pattern, view in urlpatterns:\n        if re.match(pattern, url):\n            return view\n\n    return None\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n\n"}
{"task_id": "valid/52", "completion": "\n    string = \"Hello, \"\n    sentence = \"world!\"\n    return string + sentence\n"}
{"task_id": "valid/53", "completion": "\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.append(s[i:j])\n    return substrings\n\n"}
{"task_id": "valid/54", "completion": "\n    price_sum = 0\n    for dict in list_of_dicts:\n        for key in dict.keys():\n            if key.startswith(\"price\"):\n                price_sum += dict[key]\n    return price_sum\n\n"}
{"task_id": "valid/55", "completion": "\n    intersection = [value for value in list1 if value in list2]\n    list2 = [value for value in list2 if value not in intersection]\n    return intersection, list2\n\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]"}
{"task_id": "valid/56", "completion": "\n    if request_method == 'GET':\n        return api_advisor_view\n    elif request_method == 'POST':\n        return api_advisor_view_post\n    else:\n        return None\n\n"}
{"task_id": "valid/57", "completion": "\n    if a < 0 or b < 0:\n        raise ValueError(\"Both numbers must be positive\")\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a > b:\n        return gcd_recursive(a % b, b)\n    else:\n        return gcd_recursive(a, b % a)\n\n"}
{"task_id": "valid/58", "completion": "\n    config_files = {}\n    for file_path in file_paths:\n        dir_path = \"/\".join(file_path.split(\"/\")[:-1])\n        file_name = file_path.split(\"/\")[-1]\n        if dir_path not in config_files:\n            config_files[dir_path] = [file_name]\n        else:\n            config_files[dir_path].append(file_name)\n    return config_files\n\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n\n"}
{"task_id": "valid/61", "completion": "\n    return timeEnd - timeStart\n\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return False\n\n    mid = (start + end) // 2\n\n    if array[mid] == target:\n        return mid\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    if color == \"WHITE\":\n        return \"RED\"\n    elif color == \"RED\":\n        return \"GREEN\"\n    elif color == \"GREEN\":\n        return \"BLUE\"\n    elif color == \"BLUE\":\n        return \"WHITE\"\n    else:\n        return \"Invalid color\"\n\n"}
{"task_id": "valid/64", "completion": "\n    return [i + 1 for i in list]\n\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end + 1):\n        if i ** 0.5 == int(i ** 0.5):\n            return True\n    return False\n\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        if word == target:\n            return True\n    return False\n\n"}
{"task_id": "valid/67", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/68", "completion": "\n    for key in dict.keys():\n        print(key)\n\n\nfruits = {'apple': 5, 'banana': 3, 'orange': 2}"}
{"task_id": "valid/69", "completion": "\n    string = \"Hello, \"\n    phrase = \"World!\"\n\n    # Write your code below this line\n    return f\"{string}{phrase}\"\n\n"}
{"task_id": "valid/70", "completion": "\n    result = []\n    for string in strings:\n        if re.match(\"^[a-zA-Z0-9 ]*$\", string):\n            result.append(string.capitalize())\n    return result\n"}
{"task_id": "valid/71", "completion": "\n    return string.index(char)\n"}
{"task_id": "valid/72", "completion": "\n    start_tag = \"<b>\"\n    end_tag = \"</b>\"\n    start = 0\n    end = 0\n    bold_texts = []\n\n    while start != -1 and end != -1:\n        start = html_code.find(start_tag, end)\n        if start != -1:\n            end = html_code.find(end_tag, start + len(start_tag))\n            if end != -1:\n                bold_texts.append(html_code[start + len(start_tag):end])\n                end += len(end_tag)\n\n    return bold_texts\n\n\nhtml_code = \"<b>Hello</b> <b>World</b>\""}
{"task_id": "valid/73", "completion": "\n    # Define the stock and prices\n    stock = {\"chips\": 1.5, \"candy\": 0.75, \"soda\": 1.0, \"cookies\": 0.5}\n    change = {100: 0, 50: 0, 20: 0, 10: 0, 5: 0, 2: 0, 1: 0}\n\n    # Check if the item is in stock\n    if item not in stock:\n        return \"Item not in stock\"\n\n    # Check if enough money was inserted\n    if money_inserted < stock[item]:\n        return \"Not enough money inserted\"\n\n    # Calculate the change\n    change_to_return = money_inserted - stock[item]\n\n    # Update the stock\n    stock[item] = 0\n\n    # Calculate the number of each denomination of change to return\n    for denomination in change:\n        while change_to_return >= denomination:\n            change_to_return -= denomination\n            change[denomination] += 1\n\n    return f\"Here is your {item} and your change: {change}\"\n\n"}
{"task_id": "valid/74", "completion": "\n    return list(set(list1 + list2))\n\n"}
{"task_id": "valid/75", "completion": "\n    count = 0\n    for i in list:\n        if i == target:\n            count += 1\n    return count\n"}
{"task_id": "valid/76", "completion": "\n    message_bytes = string.encode('ascii')\n    base64_bytes = base64.b64encode(message_bytes)\n    base64_message = base64_bytes.decode('ascii')\n\n    return base64_message\n"}
{"task_id": "valid/77", "completion": "\n    non_zero_indices = [i for i, x in enumerate(vector) if x != 0]\n    return non_zero_indices\n\n"}
{"task_id": "valid/78", "completion": "\n\n    Design a function that assigns a specific value to a variable and validates it.\n    \"\"\"\n    # Assign a value to a variable\n    my_var = \"10\"\n\n    # Validate the variable\n    if isinstance(my_var, str):\n        print(\"The variable is a string.\")\n    else:\n        print(\"The variable is not a string.\")\n\nassign_and_validate()def assign_and_validate():\n    \"\"\"\n    Design a function that assigns a specific value to a variable and validates it.\n    \"\"\"\n    # Assign a value to a variable\n    my_var = [1, 2, 3, 4, 5]\n\n    # Validate the variable\n    if isinstance(my_var, list):\n        print(\"The variable is a list.\")\n    else:\n        print(\"The variable is not a list.\")\n\nassign_and_validate()def assign_and_validate():\n    \"\"\"\n    Design a function that assigns a specific value to a variable and validates it.\n    \"\"\"\n    # Assign a value to a variable\n    my_var = {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}\n\n    # Validate the variable\n    if isinstance(my_var, dict):\n        print(\"The variable is a dictionary.\")\n    else:\n        print(\"The variable is not a dictionary.\")\n\nassign_and_validate()def assign_and_validate():\n    \"\"\"\n    Design a function that assigns a specific value to a variable and validates it.\n    \"\"\"\n    # Assign a value to a variable\n    my_var = True\n\n    # Validate the variable\n    if isinstance(my_var, bool):\n        print(\"The variable is a boolean.\")\n    else:\n        print(\"The variable is not a"}
{"task_id": "valid/79", "completion": "\n    letters = list(word)\n    random.shuffle(letters)\n    return ''.join(letters)\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"integer\"\n    elif isinstance(element, float):\n        return \"float\"\n    elif isinstance(element, str):\n        return \"string\"\n    elif isinstance(element, bool):\n        return \"boolean\"\n    elif isinstance(element, list):\n        return \"list\"\n    elif isinstance(element, tuple):\n        return \"tuple\"\n    elif isinstance(element, dict):\n        return \"dictionary\"\n    elif isinstance(element, set):\n        return \"set\"\n    else:\n        return \"unknown\"\n\n"}
{"task_id": "valid/81", "completion": "\n    if len(arr) == 0:\n        return arr\n\n    result = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] != result[-1]:\n            result.append(arr[i])\n    return result\n\n"}
{"task_id": "valid/82", "completion": "\n    tokens = re.findall(r'\\b\\w[\\w\\']*\\b', text.lower())\n    return tokens\n\ntext = \"This is a sample sentence for tokenization.\""}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n\n    if not divisible_numbers:\n        print(\"No numbers divisible by both 3 and 7.\")\n        return\n\n    average = sum(divisible_numbers) / len(divisible_numbers)\n    minimum = min(divisible_numbers)\n    maximum = max(divisible_numbers)\n\n    print(f\"Average: {average}\")\n    print(f\"Minimum: {minimum}\")\n    print(f\"Maximum: {maximum}\")\n\n    unique_numbers = set(divisible_numbers)\n    for num in unique_numbers:\n        print(f\"{num} occurs {divisible_numbers.count(num)} times\")\n\n"}
{"task_id": "valid/84", "completion": "\n    words = sentence.lower().split()\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    highest_frequency = max(word_count.values())\n    for word, count in word_count.items():\n        if count == highest_frequency:\n            return word\n"}
{"task_id": "valid/85", "completion": "\n    euler_number = 0\n    for i in range(1000000):\n        euler_number += 1 / math.factorial(i)\n    euler_number = round(euler_number, decimal_places)\n    return euler_number\n\n"}
{"task_id": "valid/86", "completion": "\n    sum_numbers = sum(numbers)\n    average = sum_numbers / len(numbers)\n    return average, sum_numbers\n"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"The time series is empty.\")\n    if not all(isinstance(x, (int, float)) for x in time_series):\n        raise ValueError(\"The time series should only contain numerical values.\")\n\n    return min(time_series), max(time_series)\n\n"}
{"task_id": "valid/88", "completion": "\n    relatedArticles = {}\n    for entry in encyclopedia:\n        relatedArticles[entry] = len(encyclopedia[entry])\n    return relatedArticles\n\n"}
{"task_id": "valid/89", "completion": "\n    largest_index = 0\n    for i in range(1, len(lst)):\n        if lst[i] > lst[largest_index]:\n            largest_index = i\n    return largest_index\n\n"}
{"task_id": "valid/90", "completion": "\n    return bool(set(list1) & set(list2))\n\n"}
{"task_id": "valid/91", "completion": "\n    def _dict_to_xml(dictionary, root):\n        for key, value in dictionary.items():\n            if isinstance(value, dict):\n                child = Element(key)\n                root.append(child)\n                _dict_to_xml(value, child)\n            else:\n                child = Element(key)\n                child.text = str(value)\n                root.append(child)\n\n    root = Element('data')\n    _dict_to_xml(dictionary, root)\n    return tostring(root, encoding='unicode')\n"}
{"task_id": "valid/92", "completion": "\n    # The matrix is empty\n    if not matrix:\n        return False\n\n    # The matrix has more than one row\n    if len(matrix) > 1:\n        # The target is in the first row\n        if matrix[0][0] <= target <= matrix[0][-1]:\n            # Binary search in the first row\n            return binary_search(matrix[0], target)\n        # The target is in the last row\n        elif matrix[-1][0] <= target <= matrix[-1][-1]:\n            # Binary search in the last row\n            return binary_search(matrix[-1], target)\n        # The target is in the middle rows\n        else:\n            for row in matrix[1:-1]:\n                if row[0] <= target <= row[-1]:\n                    return binary_search(row, target)\n\n    # The matrix has only one row\n    else:\n        return binary_search(matrix[0], target)\n\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in lst:\n        if i & 1:  # bitwise operation to check if a number is odd\n            sum_odd += i\n            count_odd += 1\n    average_odd = sum_odd / count_odd if count_odd != 0 else 0\n    return sum_odd, average_odd\n\n"}
{"task_id": "valid/94", "completion": "\n    if n > len(lst):\n        return None\n    else:\n        lst.sort(reverse=True)\n        return lst[n-1]\n\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n"}
{"task_id": "valid/96", "completion": "\n    exclusive_elements = set_a ^ set_b\n    return exclusive_elements\n\n"}
{"task_id": "valid/97", "completion": "\n    description = \"I am a Discord bot designed to manage and play music in a server. I have several features including:\\n\\n\"\n\n    for command, info in mapping.items():\n        description += f\"**{command}**: {info['description']}\\n\"\n\n    description += \"\\nFor more information on how to use each command, type `.help <command>`\"\n\n    return description\n\n"}
{"task_id": "valid/98", "completion": "\n    if n < 0:\n        return dec_to_ternary(abs(n))\n    if n == 0:\n        return '0'\n    else:\n        return dec_to_ternary(n // 3) + str(n % 3)\n\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(file_name.split('.')[-1] for file_name in file_names)\n\n"}
{"task_id": "valid/100", "completion": "\n    if age < 18:\n        return \"Under-Age\"\n    elif 18 <= age < 21:\n        return \"Young\"\n    elif 21 <= age < 35:\n        return \"Adult\"\n    elif 35 <= age < 50:\n        return \"Mid-Age\"\n    elif 50 <= age < 60:\n        return \"Senior\"\n    else:\n        return \"Old\"\n\n"}
{"task_id": "valid/101", "completion": "\n    # Define the grade boundaries\n    grade_boundaries = [90, 80, 70, 60, 50]\n\n    # Define the GPA boundaries\n    gpa_boundaries = [4.0, 3.0, 2.0, 1.0]\n\n    # Initialize the letter grade and GPA\n    letter_grade = \"\"\n    gpa = 0.0\n\n    # Determine the letter grade\n    for i in range(len(grade_boundaries)):\n        if numerical_grade >= grade_boundaries[i]:\n            letter_grade = \"A\" if i == 0 else chr(65 + i)\n            break\n\n    # Determine the GPA\n    for i in range(len(gpa_boundaries)):\n        if numerical_grade >= grade_boundaries[i]:\n            gpa = gpa_boundaries[i]\n            break\n\n    return letter_grade, gpa\n\n"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item.price\n    return total\n\n"}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    palindrome_dict = {}\n\n    for palindrome in palindrome_tuples:\n        vowel_count = sum(letter in vowels for letter in palindrome)\n        palindrome_dict[palindrome] = vowel_count\n\n    return palindrome_dict\n\n"}
{"task_id": "valid/104", "completion": "\n    # 1. If the string is empty, return \"Empty String\".\n    if s == \"\":\n        return \"Empty String\"\n\n    # 2. If the string contains only one character, return \"Single Character\".\n    elif len(s) == 1:\n        return \"Single Character\"\n\n    # 3. If the string contains more than one character, return the string reversed.\n    else:\n        return s[::-1]\n\n"}
{"task_id": "valid/105", "completion": "\n    # Create an empty set to store the sum of the elements\n    sum_set = set()\n\n    # Initialize the sum\n    sum = 0\n\n    # Traverse through the given array\n    for i in range(0, len(arr)):\n        # Add the current element to sum\n        sum += arr[i]\n\n        # If sum is 0, then 4 elements sum to 0\n        if sum == 0:\n            return True\n\n        # If sum is already present in the set, then 4 elements sum to 0\n        if sum in sum_set:\n            return True\n\n        # Insert sum so far into the set\n        sum_set.add(sum)\n\n    # Return False if no pair exists\n    return False\n\n"}
{"task_id": "valid/106", "completion": "\n    def extract_version_number(version):\n        return int(version.split('_')[0].split('.')[1])\n\n    def extract_package_name(dependency):\n        return dependency[0]\n\n    def extract_latest_version(dependencies):\n        latest_versions = {}\n        for dependency in dependencies:\n            package_name = extract_package_name(dependency)\n            version_number = extract_version_number(dependency[1])\n\n            if package_name not in latest_versions or version_number > extract_version_number(latest_versions[package_name][1]):\n                latest_versions[package_name] = dependency\n        return list(latest_versions.values())\n\n    return extract_latest_version(dependencies)\n\n"}
{"task_id": "valid/107", "completion": "\n    causes_dict = {}\n\n    for cause in causes:\n        action = cause.split()[0]\n        if action in causes_dict:\n            causes_dict[action].append(cause)\n        else:\n            causes_dict[action] = [cause]\n\n    return causes_dict\n\n\ncauses = [\"killed by drunken driving\", \"drowned in a lake\", \"stabbed to death\", \"crushed by a falling tree\", \"poisoned by a snake\", \"burned alive\", \"fell into a pit\", \"ate a bug\", \"got lost in a fog\", \"smelled a rat\", \"got stung by a bee\", \"got bitten by a lion\", \"got stabbed by a snake\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear\", \"got stabbed by a bear"}
{"task_id": "valid/108", "completion": "\n    return name.replace(\" \", \"-\").lower()\n\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(c) > 127 for c in text)\n\n"}
{"task_id": "valid/110", "completion": "\n    punctuations = ''''''!'\"$%&'()*+, -./:;<=>?@[\\]^_`{|}~'''\n    no_punct = \"\"\n    for char in string:\n        if char not in punctuations:\n            no_punct = no_punct + char\n    return no_punct\n\n"}
{"task_id": "valid/111", "completion": "\n    try:\n        return [i ** exp for i in num_list]\n    except TypeError:\n        print(\"Error: Both inputs must be lists and the exponent must be an integer.\")\n\n"}
{"task_id": "valid/112", "completion": "\n    min_values = [min(row) for row in grid]\n    for value in min_values:\n        print(value)\n"}
{"task_id": "valid/113", "completion": "\n    if n <= 0:\n        return\n    if current_num % 2 == 0:\n        print(\"Thank you\")\n    print_thank_you(n-1, current_num+1)\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    max_count = 0\n    for i in lst:\n        if i == element:\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    return max_count\n\n"}
{"task_id": "valid/115", "completion": "\n    digits = []\n    while num:\n        digits.append(num % base)\n        num //= base\n    return all(digit == digits[0] for digit in digits)\n"}
{"task_id": "valid/116", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    if len(s) == 0:\n        return s\n    elif s[0] in vowels:\n        return remove_vowels_recursive(s[1:])\n    else:\n        return s[0] + remove_vowels_recursive(s[1:])\n\n"}
{"task_id": "valid/117", "completion": "\n    help_message = \"Usage: my_app [OPTIONS]\\n\\nOptions:\\n\"\n    for option in options:\n        help_message += f\"  {option[0]}\\t{option[1]}\\n\"\n    return help_message\n\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n"}
{"task_id": "valid/119", "completion": "\n    # Initialize the count\n    count = 0\n\n    # Loop through the array\n    for i in Val:\n        # If the value is equal to the given value, increment the count\n        if i == Val:\n            count += 1\n\n    # Return the count\n    return count\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = s.lower()\n    for letter in s:\n        if letter not in vowels:\n            return False\n    return True\n\n"}
{"task_id": "valid/122", "completion": "\n    return sequence.count(subsequence)\n\nsequence_of_characters = \"Please find the number of occurrences of this string\"\nspecific_subsequence = \"string\"\n"}
{"task_id": "valid/123", "completion": "\n    # Your code here\n    return h // t\n\n"}
{"task_id": "valid/124", "completion": "\n    return sum(i for i in input_list if i % 2 != 0)\n\n"}
{"task_id": "valid/125", "completion": "\n    vowels = \"aeiouAEIOU\"\n    consonants = 0\n    for char in string:\n        if char.isalpha() and char not in vowels:\n            consonants += 1\n    return consonants\n\n"}
{"task_id": "valid/126", "completion": "\n    # Initialize the number of electrons to 0\n    num_electrons = 0\n\n    # Calculate the number of electrons based on the grid energies\n    for energy in grid_energies:\n        num_electrons += energy / 100\n\n    # Adjust the number of electrons based on the doping level\n    num_electrons *= ados\n\n    # Adjust the number of electrons based on the dopant concentration\n    num_electrons /= dope\n\n    # Adjust the number of electrons based on the density of states grid size\n    num_electrons /= dos_grid_size\n\n    return num_electrons\n\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    n = len(arr)\n    temp = [0] * n\n    mid = n // 2\n    even_index = n % 2 == 0\n    for i in range(mid):\n        temp[i * 2] = arr[i]\n        temp[i * 2 + 1] = arr[mid + i]\n    if even_index:\n        temp[-1] = arr[-1]\n    else:\n        temp[-1] = arr[-2]\n        temp[-2] = arr[-1]\n    return temp\n\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    brackets = {'(': ')', '{': '}', '[': ']'}\n    for char in string:\n        if char in brackets:\n            stack.append(char)\n        elif len(stack) == 0 or brackets[stack.pop()] != char:\n            return False\n    return len(stack) == 0\n\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for element in lst:\n        if element not in unique_elements:\n            unique_elements.append(element)\n        if len(unique_elements) == 3:\n            break\n    return unique_elements\n\n"}
{"task_id": "valid/132", "completion": "\n    fruit_list.sort()\n    return ', '.join(fruit_list)\n"}
{"task_id": "valid/133", "completion": "\n    sublists = [[]]\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            sublists.append(lst[i:j])\n    return sublists\n\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d+\\.\\d+'\n    return bool(re.search(pattern, string))\n"}
{"task_id": "valid/135", "completion": "\n    from django.db import migrations, models\n\n    class Migration(migrations.Migration):\n        dependencies = [\n            (app_name, '0001_initial'),\n        ]\n\n        operations = [\n            migrations.AlterField(\n                model_name='committeemember',\n                name='field_name',\n                field=models.CharField(max_length=200),\n            ),\n        ]\n\n    return Migration\n\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = set(list1).intersection(list2)\n    return sum(common_elements)\n"}
{"task_id": "valid/137", "completion": "\n    # Calculate the forecast period\n    forecast_period = math.ceil(0.01 * len(df))\n\n    return forecast_period\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n\n"}
{"task_id": "valid/139", "completion": "\n    start_index = (page_number - 1) * items_per_page\n    end_index = page_number * items_per_page\n    return items[start_index:end_index]\n\n"}
{"task_id": "valid/140", "completion": "\n    # Initialize carry\n    carry = 0\n    # Initialize result\n    result = ''\n    # Iterate over the string in reverse order\n    for digit in n_str[::-1]:\n        # Convert digit to integer and double it\n        temp = int(digit)*2 + carry\n        # If the result is greater than 9, set carry to 1 and append the remainder to the result\n        if temp >= 10:\n            carry = 1\n            result += str(temp % 10)\n        # If the result is not greater than 9, set carry to 0 and append the result to the result\n        else:\n            carry = 0\n            result += str(temp)\n    # If there is a carry left, append it to the result\n    if carry:\n        result += str(carry)\n    # Return the result in reverse order\n    return result[::-1]\n\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        \"home\": (0.0, 0.0, 0.0),\n        \"preset1\": (1.0, 1.0, 1.0),\n        \"preset2\": (2.0, 2.0, 2.0),\n        \"preset3\": (3.0, 3.0, 3.0),\n        \"preset4\": (4.0, 4.0, 4.0),\n    }\n\n    def main():\n        rospy.init_node('reflex_control')\n        # rest of the code\n\n    if __name__ == '__main__':\n        main()\n\n    # Your task is to implement the `get_preset_coordinates` function.\n    # This function should take a `preset_name` as input and return the corresponding coordinates from the `presets` dictionary.\n    # If the `preset_name` is not found in the dictionary, the function should return None.\n\n    # Write your code here\n    def get_preset_coordinates(preset_name):\n        return presets.get(preset_name)\n\n    # Test the function\n    print(get_preset_coordinates(\"home\"))  # should return (0.0, 0.0, 0.0)\n    print(get_preset_coordinates(\"preset1\"))  # should return (1.0, 1.0, 1.0)\n    print(get_preset_coordinates(\"preset5\"))  # should return None\n\nget_preset_coordinates(\"home\")\nget_preset_coordinates(\"preset1\")\nget_preset_coordinates(\"preset5\")\n<jupyter_output>\n(0.0, 0.0, 0.0)\n(1.0, 1.0, 1.0)\nNone\n<jupyter_text>\nThe function `get_preset_coordinates` is implemented and tested. It takes a preset name as input and returns the corresponding coordinates from the `presets` dictionary. If the preset name is not found in the dictionary, it returns `None"}
{"task_id": "valid/142", "completion": "\n    common_elements = set(list1) & set(list2)\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product\n"}
{"task_id": "valid/143", "completion": "\n    if allow_multiple_answer:\n        print(\"The quiz allows multiple answers.\")\n    else:\n        print(\"The quiz does not allow multiple answers.\")\n\n    if zoom_level == \"auto\":\n        print(\"The zoom level is set to auto.\")\n    elif zoom_level == \"fit\":\n        print(\"The zoom level is set to fit.\")\n    elif zoom_level == \"custom\":\n        print(\"The zoom level is set to custom.\")\n    else:\n        print(\"Invalid zoom level.\")\n\n\nquiz_system_behavior(True, \"auto\")\nquiz_system_behavior(False, \"fit\")\nquiz_system_behavior(True, \"custom\")\nquiz_system_behavior(False, \"auto\")\nquiz_system_behavior(True, \"fit\")\nquiz_system_behavior(False, \"custom\")\nquiz_system_behavior(True, \"auto\")\nquiz_system_behavior(False, \"fit\")\nquiz_system_behavior(True, \"custom\")\nquiz_system_behavior(False, \"auto\")\nquiz_system_behavior(True, \"fit\")\nquiz_system_behavior(False, \"custom\")\nquiz_system_behavior(True, \"auto\")\nquiz_system_behavior(False, \"fit\")\nquiz_system_behavior(True, \"custom\")\nquiz_system_behavior(False, \"auto\")\nquiz_system_behavior(True, \"fit\")\nquiz_system_behavior(False, \"custom\")\nquiz_system_behavior(True, \"auto\")\nquiz_system_behavior(False, \"fit\")\nquiz_system_behavior(True, \"custom\")\nquiz_system_behavior(False, \"auto\")\nquiz_system_behavior(True, \"fit\")\nquiz_system_behavior(False, \"custom\")\nquiz_system_behavior(True, \"auto\")\nquiz_system_behavior(False, \"fit\")\nquiz_system_behavior(True, \"custom\")\nquiz_system_behavior(False, \"auto\")\nqu"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    return ''.join([char for char in sentence if char not in vowels])\n\n"}
{"task_id": "valid/146", "completion": "\n    def merge(a, b, merged={}, is_b_prior=False):\n        for k, v in (a if not is_b_prior else b).items():\n            if k.isalpha():\n                if isinstance(v, dict):\n                    if k in (b if is_b_prior else a):\n                        merged[k] = merge(a.get(k, {}), b.get(k, {}), merged.get(k, {}), is_b_prior)\n                    else:\n                        merged[k] = v\n                else:\n                    merged[k] = v if is_b_prior else a.get(k, v)\n        return merged\n\n    return merge(a, b)\n\n\na = {'a': 1, 'b': 2, 'nested': {'x': 5, 'y': 6}}\nb = {'c': 3, 'd': 4, 'nested': {'y': 7, 'z': 8}}"}
{"task_id": "valid/147", "completion": "\n    try:\n        return max(d.values())\n    except ValueError:\n        return \"The dictionary is empty\"\n    except TypeError:\n        return \"The input is not a dictionary\"\n\n"}
{"task_id": "valid/148", "completion": "\n    grades = dict[key]\n    avg = sum(grades) / len(grades)\n    return avg\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == \"\":\n        return None\n    else:\n        return string.replace('e', '*')\n\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n\n"}
{"task_id": "valid/151", "completion": "\n    return gcd(x, 10) == 1 and x % 5 == 0 and sqrt(x) % 1 == 0\n\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n"}
