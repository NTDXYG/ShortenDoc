{"task_id": "MBPP/11", "completion": "\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    \n    if first_index == -1:\n        return s\n    \n    if first_index == last_index:\n        return s.replace(ch, '', 1)\n    \n    return s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n"}
{"task_id": "MBPP/12", "completion": "\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    \n    # Create a list of tuples where each tuple is (row_sum, row)\n    row_sum_pairs = list(zip(row_sums, M))\n    \n    # Sort the list of tuples based on the row_sum\n    sorted_pairs = sorted(row_sum_pairs, key=lambda x: x[0])\n    \n    # Extract the sorted rows from the sorted list of tuples\n    sorted_matrix = [row for _, row in sorted_pairs]\n    \n    return sorted_matrix\n"}
{"task_id": "MBPP/13", "completion": "\n    word_counts = Counter(words)\n    most_common_words = word_counts.most_common()\n    return most_common_words\n"}
{"task_id": "MBPP/14", "completion": "\n    return (l * b * h) / 2\n"}
{"task_id": "MBPP/15", "completion": "\n    pattern = r'([a-z])([A-Z])'\n    result = re.sub(pattern, r'\\1 \\2', text)\n    return result\n"}
{"task_id": "MBPP/16", "completion": "\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text)\n    return matches\n"}
{"task_id": "MBPP/17", "completion": "\n    return 4 * a\n"}
{"task_id": "MBPP/18", "completion": "\n    list_of_chars = [False] * NO_OF_CHARS\n    for char in string:\n        list_of_chars[ord(char)] = True\n    return list_of_chars\n\n"}
{"task_id": "MBPP/19", "completion": "\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "MBPP/20", "completion": "\n    if x <= 0:\n        return False\n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == x:\n            return True\n        elif woodall_number > x:\n            return False\n        n += 1\n"}
{"task_id": "MBPP/21", "completion": "\n    multiples = []\n    for i in range(1, m + 1):\n        multiples.append(n * i)\n    return multiples\n"}
{"task_id": "MBPP/22", "completion": "\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None\n"}
{"task_id": "MBPP/23", "completion": "\n    max_sum = float('-inf')\n    for sublist in list1:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n"}
{"task_id": "MBPP/24", "completion": "\n    decimal = 0\n    binary = binary[::-1]  # Reverse the binary string to start from the least significant bit\n    for i in range(len(binary)):\n        if binary[i] == '1':\n            decimal += 2 ** i\n    return decimal\n"}
{"task_id": "MBPP/25", "completion": "\n    product = 1\n    seen = set()\n    \n    for num in arr:\n        if num not in seen:\n            product *= num\n            seen.add(num)\n    \n    return product\n"}
{"task_id": "MBPP/26", "completion": "\n    return all(len(sublist) == K for sublist in test_list)\n"}
{"task_id": "MBPP/27", "completion": "\n    pattern = re.compile(r'\\d')\n    return [pattern.sub('', item) for item in list]\n"}
{"task_id": "MBPP/28", "completion": "\n    # Create a 2D array to store values of binomial coefficients\n    C = [[0 for x in range(k+1)] for x in range(n+1)]\n    \n    # Calculate value of Binomial Coefficient in bottom-up manner\n    for i in range(n+1):\n        for j in range(min(i, k)+1):\n            # Base Cases\n            if j == 0 or j == i:\n                C[i][j] = 1\n            else:\n                C[i][j] = C[i-1][j-1] + C[i-1][j]\n    \n    return C[n][k]\n"}
{"task_id": "MBPP/29", "completion": "\n    for i in range(arr_size):\n        count = 0\n        for j in range(arr_size):\n            if arr[i] == arr[j]:\n                count += 1\n        if count % 2 != 0:\n            return arr[i]\n    return None\n"}
{"task_id": "MBPP/30", "completion": "\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    \n    return count\n"}
{"task_id": "MBPP/31", "completion": "\n    counter = collections.Counter(nums)\n    return heapq.nlargest(k, counter.keys(), key=counter.get)\n"}
{"task_id": "MBPP/32", "completion": "\n    max_prime = -1\n\n    # Divide by 2 to remove all even factors\n    while n % 2 == 0:\n        max_prime = 2\n        n //= 2\n\n    # n must be odd at this point, so we can skip even numbers\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n //= i\n\n    # If n is still greater than 2, then it must be prime\n    if n > 2:\n        max_prime = n\n\n    return max_prime\n"}
{"task_id": "MBPP/33", "completion": "\n    if N == 0:\n        return \"0\"\n    \n    binary_representation = \"\"\n    while N > 0:\n        remainder = N % 2\n        binary_representation = str(remainder) + binary_representation\n        N = N // 2\n    \n    return binary_representation\n"}
{"task_id": "MBPP/34", "completion": "\n    total_sum = N * (N + 1) // 2\n    array_sum = sum(ar)\n    return total_sum - array_sum\n"}
{"task_id": "MBPP/35", "completion": "\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return n * (n + 1)\n"}
{"task_id": "MBPP/36", "completion": "\n    # Calculate the decimal representation of p/q\n    decimal_representation = str(p / q)\n    \n    # Split the decimal representation into integer and fractional parts\n    integer_part, fractional_part = decimal_representation.split('.')\n    \n    # If N is less than or equal to the length of the integer part, return the corresponding digit\n    if N <= len(integer_part):\n        return int(integer_part[N - 1])\n    \n    # Otherwise, return the corresponding digit from the fractional part\n    return int(fractional_part[N - len(integer_part) - 1])\n"}
{"task_id": "MBPP/37", "completion": "\n    # Separate integers and strings\n    integers = [x for x in mixed_list if isinstance(x, int)]\n    strings = [x for x in mixed_list if isinstance(x, str)]\n    \n    # Sort both lists\n    integers.sort()\n    strings.sort()\n    \n    # Combine the sorted lists\n    sorted_list = integers + strings\n    \n    return sorted_list\n"}
{"task_id": "MBPP/38", "completion": "\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2 != 0 and odd_num is None:\n            odd_num = num\n        \n        if even_num is not None and odd_num is not None:\n            break\n    \n    if even_num is None or odd_num is None:\n        return None\n    \n    return even_num / odd_num\n"}
{"task_id": "MBPP/39", "completion": "\n    if not S:\n        return \"\"\n\n    # Count the frequency of each character\n    char_count = Counter(S)\n    \n    # Create a max heap based on the frequency of characters\n    max_heap = [(-freq, char) for char, freq in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    # To keep track of the last character added to the result to avoid adjacent duplicates\n    prev_freq, prev_char = 0, ''\n    result = []\n    \n    while max_heap:\n        freq, char = heapq.heappop(max_heap)\n        result.append(char)\n        \n        # If there was a previous character, push it back into the heap\n        if prev_freq < 0:\n            heapq.heappush(max_heap, (prev_freq, prev_char))\n        \n        # Update the previous character to the current one\n        prev_freq, prev_char = freq + 1, char\n    \n    # If the length of the result is the same as the input string, return the result\n    if len(result) == len(S):\n        return ''.join(result)\n    else:\n        return \"\"\n"}
{"task_id": "MBPP/40", "completion": "\n    flat_list = list(chain.from_iterable(nums))\n    frequency = Counter(flat_list)\n    return frequency\n"}
{"task_id": "MBPP/41", "completion": "\n    return list(filter(lambda x: x % 2 == 0, nums))\n"}
{"task_id": "MBPP/42", "completion": "\n    sum_repeated = 0\n    seen = set()\n    repeated = set()\n    \n    for num in arr:\n        if num in seen:\n            repeated.add(num)\n        else:\n            seen.add(num)\n    \n    for num in repeated:\n        sum_repeated += num\n    \n    return sum_repeated\n"}
{"task_id": "MBPP/43", "completion": "\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.search(pattern, text))\n"}
{"task_id": "MBPP/44", "completion": "\n    pattern = r\"^\\b\\w+\\b\"\n    match = re.match(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n"}
{"task_id": "MBPP/45", "completion": "\n    while y:\n        x, y = y, x % y\n    return x\n"}
{"task_id": "MBPP/46", "completion": "\n    if len(data) == len(set(data)):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/47", "completion": "\n    if A > B:\n        return 0\n    \n    # Initialize the last digit of the result\n    last_digit = 1\n    \n    # Compute the last digit of (B! / A!)\n    for i in range(A + 1, B + 1):\n        last_digit = (last_digit * i) % 10\n        if last_digit == 0:\n            break\n    \n    return last_digit\n"}
{"task_id": "MBPP/48", "completion": "\n    # Initialize a mask with all odd bits set to 1\n    mask = 0\n    for i in range(0, 32, 2):\n        mask |= (1 << i)\n    \n    # Set all odd bits of the number\n    return n | mask\n"}
{"task_id": "MBPP/49", "completion": "\n    result = []\n    for sublist in nums:\n        if len(sublist) > N:\n            result.append(sublist[N])\n        else:\n            result.append(None)  # or any other default value you prefer\n    return result\n"}
{"task_id": "MBPP/50", "completion": "\n    min_length_list = min(input_list, key=lambda x: len(x))\n    return min_length_list\n"}
{"task_id": "MBPP/51", "completion": "\n    if x == y == z:\n        return \"The triangle is equilateral.\"\n    else:\n        return \"The triangle is not equilateral.\"\n"}
{"task_id": "MBPP/52", "completion": "\n    return b * h\n"}
{"task_id": "MBPP/53", "completion": "\n    if len(str) < 2:\n        return False\n    return str[0] == str[-1]\n"}
{"task_id": "MBPP/54", "completion": "\n    if not my_list:\n        return my_list\n\n    # Find the maximum element in the list to determine the range\n    max_value = max(my_list)\n\n    # Initialize a count array with zeros\n    count = [0] * (max_value + 1)\n\n    # Store the count of each element in the count array\n    for num in my_list:\n        count[num] += 1\n\n    # Modify the count array by adding the previous counts\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n    # Create an output array to store the sorted elements\n    output = [0] * len(my_list)\n\n    # Place the elements in the output array in sorted order\n    for num in reversed(my_list):\n        output[count[num] - 1] = num\n        count[num] -= 1\n\n    return output\n"}
{"task_id": "MBPP/55", "completion": "\n    if r == 0:\n        return 0\n    elif r == 1:\n        return a\n    else:\n        return a * (r ** (n - 1))\n"}
{"task_id": "MBPP/56", "completion": "\n    rev_n = rev(n)\n    return n == 2 * rev_n - 1\n"}
{"task_id": "MBPP/57", "completion": "\n    # Convert each number in the array to a string\n    arr = [str(x) for x in arr]\n    \n    # Sort the array using a custom comparator\n    arr.sort(key=lambda x: x*n, reverse=True)\n    \n    # Join the sorted array to form the largest number\n    largest_number = ''.join(arr)\n    \n    # Return the largest number as an integer\n    return int(largest_number)\n"}
{"task_id": "MBPP/58", "completion": "\n    return (x < 0) != (y < 0)\n"}
{"task_id": "MBPP/59", "completion": "\n    if n < 1:\n        return False\n    \n    # Formula for the nth octagonal number: n(3n - 2)\n    octagonal_number = n * (3 * n - 2)\n    \n    return octagonal_number\n"}
{"task_id": "MBPP/60", "completion": "\n    max_len = 1\n    current_len = 1\n    \n    for i in range(1, n):\n        if arr[i] - arr[i - 1] == arr[i - 1] - arr[i - 2]:\n            current_len += 1\n            max_len = max(max_len, current_len)\n        else:\n            current_len = 2\n    \n    return max_len\n"}
{"task_id": "MBPP/61", "completion": "\n    count = 0\n    for i in range(n):\n        sum_digits = 0\n        for j in range(i, n):\n            sum_digits += int(s[j])\n            if sum_digits == (j - i + 1):\n                count += 1\n    return count\n"}
{"task_id": "MBPP/62", "completion": "\n    if not xs:\n        return None  # Return None if the list is empty\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n"}
{"task_id": "MBPP/63", "completion": "\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"}
{"task_id": "MBPP/64", "completion": "\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks\n"}
{"task_id": "MBPP/65", "completion": "\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\n"}
{"task_id": "MBPP/66", "completion": "\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/67", "completion": "\n    # Initialize a list to store Bell numbers\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    \n    # Base case\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n+1):\n        # Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill for remaining values of j\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    return bell[n][0]\n"}
{"task_id": "MBPP/68", "completion": "\n    increasing = decreasing = True\n\n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        elif A[i] < A[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n"}
{"task_id": "MBPP/69", "completion": "\n    if not s:\n        return True\n    if not l:\n        return False\n    \n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"}
{"task_id": "MBPP/70", "completion": "\n    if not Input:\n        return False\n    \n    first_length = len(Input[0])\n    \n    for tup in Input:\n        if len(tup) != first_length:\n            return False\n    \n    return True\n"}
{"task_id": "MBPP/71", "completion": "\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n\n    return nums\n"}
{"task_id": "MBPP/72", "completion": "\n    if n % 4 == 2:\n        return False\n    else:\n        return True\n"}
{"task_id": "MBPP/73", "completion": "\n    delimiters = [',', ';', ':', '|']\n    pattern = '|'.join(map(re.escape, delimiters))\n    return re.split(pattern, text)\n"}
{"task_id": "MBPP/74", "completion": "\n    if len(colors) != len(patterns):\n        return False\n    \n    pattern_map = {}\n    used_colors = set()\n    \n    for color, pattern in zip(colors, patterns):\n        if pattern in pattern_map:\n            if pattern_map[pattern] != color:\n                return False\n        else:\n            if color in used_colors:\n                return False\n            pattern_map[pattern] = color\n            used_colors.add(color)\n    \n    return True\n"}
{"task_id": "MBPP/75", "completion": "\n    result = []\n    for tup in test_list:\n        if all(element % K == 0 for element in tup):\n            result.append(tup)\n    return result\n"}
{"task_id": "MBPP/76", "completion": "\n    count = 0\n    for i in range(1, min(m, n) + 1):\n        count += (m - i + 1) * (n - i + 1)\n    return count\n"}
{"task_id": "MBPP/77", "completion": "\n    even_sum = 0\n    odd_sum = 0\n    \n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 0:\n            even_sum += digit\n        else:\n            odd_sum += digit\n        n //= 10\n    \n    return even_sum - odd_sum\n"}
{"task_id": "MBPP/78", "completion": "\n    count = 0\n    for i in range(1, n + 1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/79", "completion": "\n    if len(s) % 2 == 1:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/80", "completion": "\n    return n * (n + 1) * (n + 2) // 6\n"}
{"task_id": "MBPP/81", "completion": "\n    zipped = tuple(zip(test_tup1, test_tup2))\n    return zipped\n"}
{"task_id": "MBPP/82", "completion": "\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume\n"}
{"task_id": "MBPP/83", "completion": "\n    total = 0\n    for char in strr:\n        total += ord(char)\n    return chr(total % 256)\n"}
{"task_id": "MBPP/84", "completion": "\n    if n == 1 or n == 2:\n        return 1\n    \n    dp = [0] * (n + 1)\n    dp[1] = 1\n    dp[2] = 1\n    \n    for i in range(3, n + 1):\n        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]]\n    \n    return dp[n]\n"}
{"task_id": "MBPP/85", "completion": "\n    return 4 * math.pi * r**2\n"}
{"task_id": "MBPP/86", "completion": "\n    return 3 * n * (n - 1) + 1\n"}
{"task_id": "MBPP/87", "completion": "\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)\n"}
{"task_id": "MBPP/88", "completion": "\n    frequency = collections.Counter(list1)\n    return dict(frequency)\n"}
{"task_id": "MBPP/89", "completion": "\n    closest = None\n    for i in range(N):\n        if i < N:\n            closest = i\n    return closest\n"}
{"task_id": "MBPP/90", "completion": "\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length\n"}
{"task_id": "MBPP/91", "completion": "\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False\n"}
{"task_id": "MBPP/92", "completion": "\n    n_str = str(n)\n    if len(n_str) < 3:\n        return False\n    \n    for i in range(1, len(n_str) - 1):\n        if not ((n_str[i] > n_str[i-1] and n_str[i] > n_str[i+1]) or (n_str[i] < n_str[i-1] and n_str[i] < n_str[i+1])):\n            return False\n    \n    return True\n"}
{"task_id": "MBPP/93", "completion": "\n    if b == 0:\n        return 1\n    elif b > 0:\n        return a * power(a, b - 1)\n    else:\n        return 1 / (a * power(a, -b - 1))\n"}
{"task_id": "MBPP/94", "completion": "\n    min_index = min(enumerate(test_list), key=itemgetter(1))[0]\n    return test_list[min_index]\n"}
{"task_id": "MBPP/95", "completion": "\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n"}
{"task_id": "MBPP/96", "completion": "\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/97", "completion": "\n    frequency_dict = {}\n    \n    for sublist in list1:\n        for item in sublist:\n            if item in frequency_dict:\n                frequency_dict[item] += 1\n            else:\n                frequency_dict[item] = 1\n    \n    return frequency_dict\n"}
{"task_id": "MBPP/98", "completion": "\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n"}
{"task_id": "MBPP/99", "completion": "\n    if n == 0:\n        return \"0\"\n    \n    binary_representation = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_representation = str(remainder) + binary_representation\n        n = n // 2\n    \n    return binary_representation\n"}
{"task_id": "MBPP/100", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    \n    return num\n"}
{"task_id": "MBPP/101", "completion": "\n    if k > n or k <= 0:\n        return None\n    \n    # Sort the array\n    arr.sort()\n    \n    # Return the kth element (1-based index)\n    return arr[k-1]\n"}
{"task_id": "MBPP/102", "completion": "\n    return re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word)\n"}
{"task_id": "MBPP/103", "completion": "\n    if m >= n or n == 0:\n        return 0\n    elif m == 0:\n        return 1\n    else:\n        return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n"}
{"task_id": "MBPP/104", "completion": "\n    sorted_list = [sorted(sublist, key=lambda x: x.lower()) for sublist in input_list]\n    return sorted_list\n"}
{"task_id": "MBPP/105", "completion": "\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/106", "completion": "\n    # Convert the tuple to a list\n    tup_list = list(test_tup)\n    \n    # Extend the list with the elements of the tuple\n    tup_list.extend(test_list)\n    \n    # Convert the result back to a tuple\n    result_tup = tuple(tup_list)\n    \n    return result_tup\n"}
{"task_id": "MBPP/107", "completion": "\n    count = 0\n    for num in range(L, R + 1):\n        if all(c in '0123456789ABCDEF' for c in hex(num)[2:]):\n            count += 1\n    return count\n"}
{"task_id": "MBPP/108", "completion": "\n    heap = []\n    iterators = [iter(num1), iter(num2), iter(num3)]\n    \n    # Push the first element from each list onto the heap\n    for i, it in enumerate(iterators):\n        try:\n            first_element = next(it)\n            heapq.heappush(heap, (first_element, i))\n        except StopIteration:\n            continue\n    \n    while heap:\n        # Pop the smallest element from the heap\n        smallest_element, list_index = heapq.heappop(heap)\n        yield smallest_element\n        \n        # Push the next element from the same list onto the heap\n        try:\n            next_element = next(iterators[list_index])\n            heapq.heappush(heap, (next_element, list_index))\n        except StopIteration:\n            continue\n"}
{"task_id": "MBPP/109", "completion": "\n    count = 0\n    for i in range(n):\n        if int(s[i]) % 2 != 0:\n            count += 1\n        s = s[1:] + s[0]\n    return count\n"}
{"task_id": "MBPP/110", "completion": "\n    missing_ranges = []\n    current_val = strt_val\n\n    for num in sorted(test_list):\n        if current_val < num:\n            missing_ranges.append((current_val, num - 1))\n        current_val = num + 1\n\n    if current_val <= stop_val:\n        missing_ranges.append((current_val, stop_val))\n\n    return missing_ranges\n"}
{"task_id": "MBPP/111", "completion": "\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    return list(common_elements)\n"}
{"task_id": "MBPP/112", "completion": "\n    return 2 * (diameter + height)\n"}
{"task_id": "MBPP/113", "completion": "\n    if text.isdigit():\n        return True\n    elif text.startswith('-') and text[1:].isdigit():\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/114", "completion": "\n    freq_dict = Counter(test_list)\n    return [(tup, freq_dict[tup]) for tup in test_list]\n"}
{"task_id": "MBPP/115", "completion": "\n    return all(not d for d in list1)\n"}
{"task_id": "MBPP/116", "completion": "\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n"}
{"task_id": "MBPP/117", "completion": "\n    for i in range(len(test_list)):\n        try:\n            test_list[i] = float(test_list[i])\n        except ValueError:\n            continue\n    return test_list\n"}
{"task_id": "MBPP/118", "completion": "\n    return list(string)\n"}
{"task_id": "MBPP/119", "completion": "\n    low, high = 0, len(arr) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if mid == 0 or mid == len(arr) - 1:\n            return arr[mid]\n        \n        if arr[mid] != arr[mid - 1] and arr[mid] != arr[mid + 1]:\n            return arr[mid]\n        \n        if (mid % 2 == 0 and arr[mid] == arr[mid + 1]) or (mid % 2 == 1 and arr[mid] == arr[mid - 1]):\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return -1  # If no such element is found\n"}
{"task_id": "MBPP/120", "completion": "\n    max_product = float('-inf')\n    \n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][0] + list1[i][1] * list1[j][1]\n            if product > max_product:\n                max_product = product\n    \n    return max_product\n"}
{"task_id": "MBPP/121", "completion": "\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = A[i] + A[left] + A[right]\n            if current_sum == sum:\n                print(f\"Triplet is {A[i]}, {A[left]}, {A[right]}\")\n                return True\n            elif current_sum < sum:\n                left += 1\n            else:\n                right -= 1\n    return False\n"}
{"task_id": "MBPP/122", "completion": "\n    primes = [True] * (MAX + 1)\n    p = 2\n    while (p * p <= MAX):\n        if (primes[p] == True):\n            for i in range(p * p, MAX + 1, p):\n                primes[i] = False\n        p += 1\n\n    prime_numbers = [p for p in range(2, MAX + 1) if primes[p]]\n\n    smart_numbers = []\n    for i in range(len(prime_numbers)):\n        for j in range(i, len(prime_numbers)):\n            smart_numbers.append(prime_numbers[i] * prime_numbers[j])\n\n    smart_numbers.sort()\n\n    return smart_numbers[n - 1]\n"}
{"task_id": "MBPP/123", "completion": "\n    def sum_of_divisors(n):\n        total = 1\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n\n    amicable_sum = 0\n    for a in range(1, limit):\n        b = sum_of_divisors(a)\n        if b > a and sum_of_divisors(b) == a:\n            amicable_sum += a + b\n\n    return amicable_sum\n"}
{"task_id": "MBPP/124", "completion": "\n    # Calculate the complex number by dividing b by a\n    complex_number = b / a\n    \n    # Calculate the angle of the complex number using cmath.phase\n    angle = cmath.phase(complex_number)\n    \n    return angle\n"}
{"task_id": "MBPP/125", "completion": "\n    max_diff = 0\n    for i in range(len(string) - n + 1):\n        sub_string = string[i:i+n]\n        count_0 = sub_string.count('0')\n        count_1 = sub_string.count('1')\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"}
{"task_id": "MBPP/126", "completion": "\n    def common_divisors(x, y):\n        divisors = []\n        for i in range(1, min(x, y) + 1):\n            if x % i == 0 and y % i == 0:\n                divisors.append(i)\n        return divisors\n\n    common_divs = common_divisors(a, b)\n    return sum(common_divs)\n"}
{"task_id": "MBPP/127", "completion": "\n    result = 0\n    for _ in range(y):\n        result += x\n    return result\n"}
{"task_id": "MBPP/128", "completion": "\n    words = str.split()\n    return [word for word in words if len(word) > n]\n"}
{"task_id": "MBPP/129", "completion": "\n    n = len(my_matrix)\n    if n == 0:\n        return False\n\n    # Calculate the sum of the first row to use as a reference\n    magic_sum = sum(my_matrix[0])\n\n    # Check sums of all rows\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n\n    # Check sums of all columns\n    for col in range(n):\n        if sum(my_matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n\n    # Check sum of the main diagonal\n    if sum(my_matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n\n    # Check sum of the secondary diagonal\n    if sum(my_matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n\n    return True\n"}
{"task_id": "MBPP/130", "completion": "\n    frequency = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        frequency[num] += 1\n        if frequency[num] > max_freq:\n            max_freq = frequency[num]\n            max_item = num\n\n    return max_item\n"}
{"task_id": "MBPP/131", "completion": "\n    vowels = \"aeiouAEIOU\"\n    str1_list = list(str1)\n    i, j = 0, len(str1) - 1\n    \n    while i < j:\n        if str1_list[i] not in vowels:\n            i += 1\n        elif str1_list[j] not in vowels:\n            j -= 1\n        else:\n            str1_list[i], str1_list[j] = str1_list[j], str1_list[i]\n            i += 1\n            j -= 1\n    \n    return ''.join(str1_list)\n"}
{"task_id": "MBPP/132", "completion": "\n    return ''.join(map(str, tup1))\n"}
{"task_id": "MBPP/133", "completion": "\n    return sum(filter(lambda x: x < 0, nums))\n"}
{"task_id": "MBPP/134", "completion": "\n    for _ in range(p):\n        if arr[-1] % 2 == 0:\n            arr[-1] //= 2\n        else:\n            arr[-1] = arr[-1] * 3 + 1\n    \n    return \"Even\" if arr[-1] % 2 == 0 else \"Odd\"\n"}
{"task_id": "MBPP/135", "completion": "\n    return n * (2 * n - 1)\n"}
{"task_id": "MBPP/136", "completion": "\n    if units <= 50:\n        bill = units * 0.50\n    elif units <= 150:\n        bill = 50 * 0.50 + (units - 50) * 0.75\n    elif units <= 250:\n        bill = 50 * 0.50 + 100 * 0.75 + (units - 150) * 1.20\n    else:\n        bill = 50 * 0.50 + 100 * 0.75 + 100 * 1.20 + (units - 250) * 1.50\n    \n    # Add a 20% surcharge\n    bill += bill * 0.20\n    \n    return bill\n"}
{"task_id": "MBPP/137", "completion": "\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums) if nums else 0\n"}
{"task_id": "MBPP/138", "completion": "\n    # Convert the number to its binary representation\n    binary_representation = bin(n)[2:]\n    \n    # Check if the binary representation contains only '1's and '0's\n    if all(bit in '01' for bit in binary_representation):\n        # Check if there is at least one '1' in the binary representation\n        if '1' in binary_representation:\n            return True\n    return False\n"}
{"task_id": "MBPP/139", "completion": "\n    return 2 * 3.14159 * r\n"}
{"task_id": "MBPP/140", "completion": "\n    from collections import Counter\n\n    # Flatten the list of tuples into a single list\n    flat_list = [item for sublist in test_list for item in sublist]\n    \n    # Count the occurrences of each element\n    count = Counter(flat_list)\n    \n    # Extract elements that occur exactly once\n    singly_occurring_elements = [item for item, cnt in count.items() if cnt == 1]\n    \n    return singly_occurring_elements\n"}
{"task_id": "MBPP/141", "completion": "\n    def flip(arr, k):\n        \"\"\"Helper function to flip the first k elements of the array.\"\"\"\n        arr[:k] = arr[:k][::-1]\n\n    n = len(nums)\n    for curr_size in range(n, 1, -1):\n        # Find the index of the maximum element in nums[:curr_size]\n        max_index = nums.index(max(nums[:curr_size]))\n        \n        # If the maximum element is not at the end, flip it to the beginning\n        if max_index != curr_size - 1:\n            # Flip the maximum element to the beginning\n            if max_index != 0:\n                flip(nums, max_index + 1)\n            # Flip the maximum element to its correct position\n            flip(nums, curr_size)\n\n    return nums\n"}
{"task_id": "MBPP/142", "completion": "\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/143", "completion": "\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count\n"}
{"task_id": "MBPP/144", "completion": "\n    total_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_sum += abs(arr[i] - arr[j])\n    return total_sum\n"}
{"task_id": "MBPP/145", "completion": "\n    max_diff = float('-inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"}
{"task_id": "MBPP/146", "completion": "\n    total_ascii_value = 0\n    for char in str1:\n        total_ascii_value += ord(char)\n    return total_ascii_value\n"}
{"task_id": "MBPP/147", "completion": "\n    # Create a table to store the maximum path sums\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    # Fill the table from bottom to top\n    for i in range(m - 1, -1, -1):\n        for j in range(i + 1):\n            # Update the maximum path sum for the current cell\n            dp[i][j] = tri[i][j] + max(dp[i + 1][j], dp[i + 1][j + 1])\n\n    # The maximum path sum is now stored in the top cell of the table\n    return dp[0][0]\n"}
{"task_id": "MBPP/148", "completion": "\n    if x < 10:\n        return x\n    \n    str_x = str(x)\n    n = len(str_x)\n    \n    # Split the number into two parts\n    part1 = str_x[:n//2]\n    part2 = str_x[n//2:]\n    \n    # Convert back to integers\n    part1 = int(part1)\n    part2 = int(part2)\n    \n    # Sum the digits of each part\n    sum_part1 = sum(int(digit) for digit in str(part1))\n    sum_part2 = sum(int(digit) for digit in str(part2))\n    \n    return sum_part1 + sum_part2\n"}
{"task_id": "MBPP/149", "completion": "\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)\n"}
{"task_id": "MBPP/150", "completion": "\n    def generate_sequence(a, b, c):\n        \"\"\"Generate the infinite sequence based on the given parameters.\"\"\"\n        while True:\n            yield a\n            a = (a * b) + c\n\n    sequence_gen = generate_sequence(a, b, c)\n    for num in sequence_gen:\n        if num == b:\n            return True\n        if num > b:\n            return False\n"}
{"task_id": "MBPP/151", "completion": "\n    if q == 0:\n        return p\n    else:\n        return gcd(q, p % q)\n"}
{"task_id": "MBPP/152", "completion": "\n    if len(x) == 1:\n        return x\n    \n    mid = len(x) // 2\n    left = merge_sort(x[:mid])\n    right = merge_sort(x[mid:])\n    \n    return merge(left, right)\n"}
{"task_id": "MBPP/153", "completion": "\n    # The vertex of a parabola given by the equation y = ax^2 + bx + c is at x = -b / (2a)\n    x_vertex = -b / (2 * a)\n    \n    # To find the y-coordinate of the vertex, substitute x_vertex back into the equation\n    y_vertex = a * x_vertex**2 + b * x_vertex + c\n    \n    return (x_vertex, y_vertex)\n"}
{"task_id": "MBPP/154", "completion": "\n    result = []\n    for row in nums:\n        if N < len(row):\n            result.append(row[N])\n    return result\n"}
{"task_id": "MBPP/155", "completion": "\n    # Create a mask with all even bits set to 1\n    mask = 0\n    for i in range(0, 32, 2):\n        mask |= (1 << i)\n    \n    # Toggle the even bits of the number\n    return n ^ mask\n"}
{"task_id": "MBPP/156", "completion": "\n    return tuple(int(item) for item in tuple_str)\n"}
{"task_id": "MBPP/157", "completion": "\n    encoded_list = []\n    for key, group in groupby(list1):\n        count = len(list(group))\n        encoded_list.append((key, count))\n    return encoded_list\n"}
{"task_id": "MBPP/158", "completion": "\n    arr.sort()\n    median = arr[n // 2]\n    ops = 0\n    \n    for i in range(n):\n        ops += abs(arr[i] - median) // k\n    \n    return ops\n"}
{"task_id": "MBPP/159", "completion": "\n    if (month == 12 and days >= 21) or (month == 1) or (month == 2) or (month == 3 and days < 20):\n        return \"Winter\"\n    elif (month == 3 and days >= 20) or (month == 4) or (month == 5) or (month == 6 and days < 21):\n        return \"Spring\"\n    elif (month == 6 and days >= 21) or (month == 7) or (month == 8) or (month == 9 and days < 22):\n        return \"Summer\"\n    elif (month == 9 and days >= 22) or (month == 10) or (month == 11) or (month == 12 and days < 21):\n        return \"Fall\"\n    else:\n        return \"Invalid input\"\n"}
{"task_id": "MBPP/160", "completion": "\n    # Check if there is a solution\n    if n % gcd(a, b) != 0:\n        return None\n    \n    # Find the gcd of a and b\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    # Extended Euclidean Algorithm to find x and y\n    def extended_gcd(a, b):\n        if b == 0:\n            return (1, 0, a)\n        else:\n            x, y, g = extended_gcd(b, a % b)\n            return (y, x - (a // b) * y, g)\n    \n    # Get the coefficients x and y\n    x, y, g = extended_gcd(a, b)\n    \n    # Scale the coefficients to satisfy ax + by = n\n    x *= n // g\n    y *= n // g\n    \n    return (x, y)\n"}
{"task_id": "MBPP/161", "completion": "\n    result = [item for item in list1 if item not in list2]\n    return result\n"}
{"task_id": "MBPP/162", "completion": "\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total\n"}
{"task_id": "MBPP/163", "completion": "\n    if s <= 2:\n        raise ValueError(\"Number of sides must be greater than 2.\")\n    if l <= 0:\n        raise ValueError(\"Length of each side must be positive.\")\n    \n    # Calculate the interior angle of the polygon\n    interior_angle = (s - 2) * pi / s\n    \n    # Calculate the apothem (distance from the center to the midpoint of a side)\n    apothem = l / (2 * tan(pi / s))\n    \n    # Calculate the area of the polygon\n    area = (s * l * apothem) / 2\n    \n    return area\n"}
{"task_id": "MBPP/164", "completion": "\n    total = 1 + n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            total += i\n            if i != n // i:\n                total += n // i\n    return total\n"}
{"task_id": "MBPP/165", "completion": "\n    count = 0\n    for i, char in enumerate(str1.lower()):\n        if i == ord(char) - ord('a'):\n            count += 1\n    return count\n"}
{"task_id": "MBPP/166", "completion": "\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/167", "completion": "\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n"}
{"task_id": "MBPP/168", "completion": "\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/169", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        pell_minus_2 = 0\n        pell_minus_1 = 1\n        pell_n = 0\n        for i in range(2, n + 1):\n            pell_n = 2 * pell_minus_1 + pell_minus_2\n            pell_minus_2 = pell_minus_1\n            pell_minus_1 = pell_n\n        return pell_n\n"}
{"task_id": "MBPP/170", "completion": "\n    if m > n or m < 0 or n >= len(list1):\n        raise ValueError(\"Invalid range indices\")\n    \n    return sum(list1[m:n+1])\n"}
{"task_id": "MBPP/171", "completion": "\n    return 5 * a\n\n"}
{"task_id": "MBPP/172", "completion": "\n    count = {'s': 0, 't': 0, 'd': 0}\n    for char in s:\n        if char in count:\n            count[char] += 1\n    return count\n"}
{"task_id": "MBPP/173", "completion": "\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    return cleaned_text\n"}
{"task_id": "MBPP/174", "completion": "\n    result = {}\n    for key, value in l:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result\n"}
{"task_id": "MBPP/175", "completion": "\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    \n    for char in str1:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    \n    return not stack\n"}
{"task_id": "MBPP/176", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        return a + b + c\n    else:\n        return \"Invalid triangle sides\"\n"}
{"task_id": "MBPP/177", "completion": "\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return abs(a * b) // gcd(a, b)\n\n    for i in range(L, R + 1):\n        for j in range(i + 1, R + 1):\n            if L <= lcm(i, j) <= R:\n                return (i, j)\n    return None\n"}
{"task_id": "MBPP/178", "completion": "\n    matches = []\n    for pattern in patterns:\n        match = re.search(pattern, text)\n        if match:\n            matches.append(match.group())\n    return matches\n"}
{"task_id": "MBPP/179", "completion": "\n    if x < 10:\n        return False\n    \n    # Convert the number to a list of its digits\n    digits = [int(d) for d in str(x)]\n    n = len(digits)\n    \n    # Generate the sequence\n    while True:\n        next_term = sum(digits[-n:])\n        if next_term == x:\n            return True\n        elif next_term > x:\n            return False\n        digits.append(next_term)\n"}
{"task_id": "MBPP/180", "completion": "\n    # Convert latitude and longitude from degrees to radians\n    slat, slon, elat, elon = map(radians, [slat, slon, elat, elon])\n    \n    # Haversine formula\n    dlat = elat - slat\n    dlon = elon - slon\n    a = sin(dlat / 2)**2 + cos(slat) * cos(elat) * sin(dlon / 2)**2\n    c = 2 * acos(min(1, a**0.5))\n    \n    # Radius of Earth in kilometers (mean value)\n    R = 6371.0\n    \n    # Calculate the distance\n    distance = R * c\n    \n    return distance\n"}
{"task_id": "MBPP/181", "completion": "\n    result = []\n    n1, n2 = len(str1), len(str2)\n    i, j = 0, 0\n    \n    while i < n1 and j < n2:\n        if str1[i] != str2[j]:\n            break\n        result.append(str1[i])\n        i += 1\n        j += 1\n    \n    return ''.join(result)\n"}
{"task_id": "MBPP/182", "completion": "\n    uppercase_pattern = re.compile(r'[A-Z]')\n    lowercase_pattern = re.compile(r'[a-z]')\n    special_char_pattern = re.compile(r'[^\\w\\s]')\n    numeric_pattern = re.compile(r'\\d')\n\n    uppercase_chars = uppercase_pattern.findall(string)\n    lowercase_chars = lowercase_pattern.findall(string)\n    special_chars = special_char_pattern.findall(string)\n    numeric_values = numeric_pattern.findall(string)\n\n    return {\n        'uppercase': uppercase_chars,\n        'lowercase': lowercase_chars,\n        'special_characters': special_chars,\n        'numeric': numeric_values\n    }\n"}
{"task_id": "MBPP/183", "completion": "\n    count = 0\n    seen = set()\n    \n    for num in arr:\n        if num + k in seen:\n            count += 1\n        if num - k in seen:\n            count += 1\n        seen.add(num)\n    \n    return count\n"}
{"task_id": "MBPP/184", "completion": "\n    return [x for x in list if x > num]\n"}
{"task_id": "MBPP/185", "completion": "\n    # The standard form of a parabola is y = ax^2 + bx + c\n    # The focus of a parabola y = ax^2 is at (0, 1/(4a))\n    # For a general parabola y = ax^2 + bx + c, the focus can be found by shifting the focus of the standard parabola\n    \n    # Calculate the x-coordinate of the vertex\n    x_vertex = -b / (2 * a)\n    \n    # Calculate the y-coordinate of the vertex\n    y_vertex = a * x_vertex**2 + b * x_vertex + c\n    \n    # Calculate the distance from the vertex to the focus (p)\n    p = 1 / (4 * a)\n    \n    # The focus is p units above the vertex in the y-direction\n    focus_x = x_vertex\n    focus_y = y_vertex + p\n    \n    return (focus_x, focus_y)\n"}
{"task_id": "MBPP/186", "completion": "\n    matches = []\n    for pattern in patterns:\n        if re.search(pattern, text):\n            matches.append(pattern)\n    return matches\n"}
{"task_id": "MBPP/187", "completion": "\n    if m == 0 or n == 0:\n        return 0\n    elif X[m-1] == Y[n-1]:\n        return 1 + longest_common_subsequence(X, Y, m-1, n-1)\n    else:\n        return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))\n"}
{"task_id": "MBPP/188", "completion": "\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            j = n // i\n            if (int(i**0.5)**2 == i) and (int(j**0.5)**2 == j):\n                return True\n    return False\n"}
{"task_id": "MBPP/189", "completion": "\n    # Step 1: Segregate positive and non-positive numbers\n    pos_start = 0\n    for i in range(n):\n        if arr[i] <= 0:\n            arr[i], arr[pos_start] = arr[pos_start], arr[i]\n            pos_start += 1\n    \n    # Step 2: Consider only positive numbers\n    pos_arr = arr[pos_start:]\n    pos_len = n - pos_start\n    \n    # Step 3: Mark the presence of each positive number by making the corresponding index negative\n    for i in range(pos_len):\n        num = abs(pos_arr[i])\n        if num - 1 < pos_len and pos_arr[num - 1] > 0:\n            pos_arr[num - 1] = -pos_arr[num - 1]\n    \n    # Step 4: Find the first index which is still positive\n    for i in range(pos_len):\n        if pos_arr[i] > 0:\n            return i + 1\n    \n    # If all numbers from 1 to pos_len are present, return pos_len + 1\n    return pos_len + 1\n"}
{"task_id": "MBPP/190", "completion": "\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def count_points_on_line(x1, y1, x2, y2):\n        dx = abs(x2 - x1)\n        dy = abs(y2 - y1)\n        return gcd(dx, dy) + 1\n\n    def count_points_inside_square(x1, y1, x2, y2):\n        # Calculate the side length of the square\n        side_length = max(abs(x2 - x1), abs(y2 - y1))\n        \n        # Calculate the number of integral points on the boundary\n        boundary_points = count_points_on_line(x1, y1, x1 + side_length, y1) + \\\n                          count_points_on_line(x1, y1, x1, y1 + side_length) + \\\n                          count_points_on_line(x1 + side_length, y1, x1 + side_length, y1 + side_length) + \\\n                          count_points_on_line(x1, y1 + side_length, x1 + side_length, y1 + side_length) - 4  # Subtract 4 for the corners counted multiple times\n        \n        # Calculate the number of integral points inside the square\n        inside_points = (side_length - 1) * (side_length - 1)\n        \n        return inside_points + boundary_points\n\n    return count_points_inside_square(x1, y1, x2, y2)\n"}
{"task_id": "MBPP/191", "completion": "\n    month_days = {\n        \"jan\": 31, \"feb\": 28, \"mar\": 31, \"apr\": 30,\n        \"may\": 31, \"jun\": 30, \"jul\": 31, \"aug\": 31,\n        \"sep\": 30, \"oct\": 31, \"nov\": 30, \"dec\": 31\n    }\n    \n    return month_days.get(monthname3.lower(), -1) == 30\n"}
{"task_id": "MBPP/192", "completion": "\n    has_letter = any(c.isalpha() for c in str)\n    has_number = any(c.isdigit() for c in str)\n    return has_letter and has_number\n"}
{"task_id": "MBPP/193", "completion": "\n    seen = set()\n    result = []\n    for item in test_tup:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return tuple(result)\n"}
{"task_id": "MBPP/194", "completion": "\n    decimal_value = 0\n    base = 1\n    \n    while n:\n        last_digit = n % 10\n        n = n // 10\n        decimal_value += last_digit * base\n        base *= 8\n    \n    return decimal_value\n"}
{"task_id": "MBPP/195", "completion": "\n    low, high = 0, n - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result\n"}
{"task_id": "MBPP/196", "completion": "\n    return [tup for tup in test_list if len(tup) != K]\n"}
{"task_id": "MBPP/197", "completion": "\n    result = tuple(a ** b for a, b in zip(test_tup1, test_tup2))\n    return result\n"}
{"task_id": "MBPP/198", "completion": "\n    # Calculate the semi-major and semi-minor axes of the ellipse\n    semi_major_axis = max(a, b)\n    semi_minor_axis = min(a, b)\n    \n    # The largest triangle that can be inscribed in an ellipse is an equilateral triangle\n    # with one vertex at the center of the ellipse and the other two vertices on the ellipse.\n    # The side length of this triangle can be calculated using the formula:\n    # side_length = 2 * semi_major_axis * sqrt(1 - (semi_minor_axis^2 / semi_major_axis^2))\n    \n    side_length = 2 * semi_major_axis * math.sqrt(1 - (semi_minor_axis**2 / semi_major_axis**2))\n    \n    # The area of the largest triangle can be calculated using the formula:\n    # area = (sqrt(3) / 4) * side_length^2\n    \n    area = (math.sqrt(3) / 4) * side_length**2\n    \n    return area\n"}
{"task_id": "MBPP/199", "completion": "\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power\n"}
{"task_id": "MBPP/200", "completion": "\n    max_value = max(list1)\n    max_positions = [index for index, value in enumerate(list1) if value == max_value]\n    return max_positions\n"}
{"task_id": "MBPP/201", "completion": "\n    if not lst:\n        return True  # An empty list is considered to have all elements the same\n    \n    first_element = lst[0]\n    for element in lst:\n        if element != first_element:\n            return False\n    \n    return True\n"}
{"task_id": "MBPP/202", "completion": "\n    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 != 0:\n            result += str1[i]\n    return result\n"}
{"task_id": "MBPP/203", "completion": "\n    x = n1 ^ n2\n    set_bits = 0\n    while x > 0:\n        set_bits += x & 1\n        x >>= 1\n    return set_bits\n"}
{"task_id": "MBPP/204", "completion": "\n    count = 0\n    for char in s:\n        if char == c:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/205", "completion": "\n    from itertools import combinations\n\n    def count_inversions(tup):\n        count = 0\n        for i in range(len(tup)):\n            for j in range(i + 1, len(tup)):\n                if tup[i] > tup[j]:\n                    count += 1\n        return count\n\n    inversion_counts = []\n    for tup in test_tup:\n        inversion_counts.append(count_inversions(tup))\n    \n    return inversion_counts\n"}
{"task_id": "MBPP/206", "completion": "\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(str(test_tup[i]) + str(test_tup[i + 1]))\n    return tuple(result)\n"}
{"task_id": "MBPP/207", "completion": "\n    n = len(str)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if str[i - 1] == str[j - 1] and i != j:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[n][n]\n"}
{"task_id": "MBPP/208", "completion": "\n    pattern = r'^-?\\d+(\\.\\d{1,2})?$'\n    return bool(re.match(pattern, num))\n"}
{"task_id": "MBPP/209", "completion": "\n    hq.heapreplace(heap, a)\n"}
{"task_id": "MBPP/210", "completion": "\n    pattern = re.compile(r'^[a-zA-Z0-9]+$')\n    return bool(pattern.match(string))\n"}
{"task_id": "MBPP/211", "completion": "\n    count = 0\n    for i in range(1, n + 1):\n        if i & 1 and i & (1 << (n.bit_length() - 1)):\n            count += 1\n    return count\n"}
{"task_id": "MBPP/212", "completion": "\n    sum_of_fourth_powers = 0\n    for i in range(1, n + 1):\n        sum_of_fourth_powers += i ** 4\n    return sum_of_fourth_powers\n"}
{"task_id": "MBPP/213", "completion": "\n    concatenated_tuple = tuple(x + y for x, y in zip(test_tup1, test_tup2))\n    return concatenated_tuple\n"}
{"task_id": "MBPP/214", "completion": "\n    degrees = radian * (180 / math.pi)\n    return degrees\n"}
{"task_id": "MBPP/215", "completion": "\n    decoded_list = []\n    i = 0\n    while i < len(alist):\n        count = alist[i]\n        value = alist[i + 1]\n        decoded_list.extend([value] * count)\n        i += 2\n    return decoded_list\n"}
{"task_id": "MBPP/216", "completion": "\n    def is_subset(sublist, superlist):\n        if not sublist:\n            return True\n        if not superlist:\n            return False\n        if sublist[0] in superlist:\n            index = superlist.index(sublist[0])\n            return is_subset(sublist[1:], superlist[index+1:])\n        return False\n\n    for sublist in list2:\n        if not is_subset(sublist, list1):\n            return False\n    return True\n"}
{"task_id": "MBPP/217", "completion": "\n    char_count = {}\n    \n    for char in str:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    \n    return None\n"}
{"task_id": "MBPP/218", "completion": "\n    # Calculate the greatest common divisor (GCD) of A and B\n    gcd = math.gcd(A, B)\n    \n    # Reduce A and B by their GCD\n    A //= gcd\n    B //= gcd\n    \n    # The minimum operations required is the sum of the prime factors of A and B\n    def sum_of_prime_factors(n):\n        total = 0\n        # Check for the smallest prime factor (2)\n        while n % 2 == 0:\n            total += 2\n            n //= 2\n        # Check for odd prime factors from 3 onwards\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            while n % i == 0:\n                total += i\n                n //= i\n        # If n is still greater than 2, then it must be prime\n        if n > 2:\n            total += n\n        return total\n    \n    # Calculate the sum of prime factors for A and B\n    sum_A = sum_of_prime_factors(A)\n    sum_B = sum_of_prime_factors(B)\n    \n    # The minimum operations required is the sum of the prime factors of A and B\n    return sum_A + sum_B\n"}
{"task_id": "MBPP/219", "completion": "\n    sorted_tup = sorted(test_tup)\n    min_k_elements = sorted_tup[:K]\n    max_k_elements = sorted_tup[-K:]\n    return min_k_elements, max_k_elements\n"}
{"task_id": "MBPP/220", "completion": "\n    special_chars = r'[ ,.]'\n    replacement = ':'\n    pattern = re.compile(special_chars)\n    result = pattern.sub(replacement, text, count=n)\n    return result\n"}
{"task_id": "MBPP/221", "completion": "\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None  # Return None if no even number is found\n"}
{"task_id": "MBPP/222", "completion": "\n    if not test_tuple:\n        return True  # An empty tuple has all elements of the same type (no elements)\n    \n    first_type = type(test_tuple[0])\n    \n    for item in test_tuple:\n        if type(item) != first_type:\n            return False\n    \n    return True\n"}
{"task_id": "MBPP/223", "completion": "\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2\n"}
{"task_id": "MBPP/224", "completion": "\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"}
{"task_id": "MBPP/225", "completion": "\n    if low == high:\n        return arr[low]\n    \n    mid = (low + high) // 2\n    \n    if mid < high and arr[mid] > arr[mid + 1]:\n        return arr[mid + 1]\n    \n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n    \n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid - 1)\n    \n    return find_Min(arr, mid + 1, high)\n"}
{"task_id": "MBPP/226", "completion": "\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n"}
{"task_id": "MBPP/227", "completion": "\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n"}
{"task_id": "MBPP/228", "completion": "\n    # Create a mask with all bits set in the given range\n    mask = ((1 << (r - l + 1)) - 1) << l\n    \n    # Check if all bits in the given range are unset in n\n    return (n & mask) == 0\n"}
{"task_id": "MBPP/229", "completion": "\n    left = 0\n    right = n - 1\n    \n    while left <= right:\n        if arr[left] < 0 and arr[right] < 0:\n            left += 1\n        elif arr[left] >= 0 and arr[right] < 0:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n        elif arr[left] >= 0 and arr[right] >= 0:\n            right -= 1\n        else:\n            left += 1\n            right -= 1\n    \n    return arr\n"}
{"task_id": "MBPP/230", "completion": "\n    return str1.replace(' ', char)\n"}
{"task_id": "MBPP/231", "completion": "\n    # Create a 2D list to store the maximum sums\n    dp = [[0] * (i + 1) for i in range(n)]\n    \n    # Initialize the bottom row of dp with the bottom row of the triangle\n    dp[n - 1] = tri[n - 1]\n    \n    # Fill the dp table from bottom to top\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1):\n            dp[i][j] = tri[i][j] + max(dp[i + 1][j], dp[i + 1][j + 1])\n    \n    # The maximum sum is now at the top of the dp table\n    return dp[0][0]\n"}
{"task_id": "MBPP/232", "completion": "\n    if n <= 0:\n        return []\n    \n    # Use a min-heap to keep track of the largest n numbers\n    min_heap = []\n    \n    for num in list1:\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, num)\n        else:\n            if num > min_heap[0]:\n                heapq.heappushpop(min_heap, num)\n    \n    return sorted(min_heap, reverse=True)\n"}
{"task_id": "MBPP/233", "completion": "\n    import math\n\n    # Calculate the lateral surface area of the cylinder\n    lateral_surface_area = 2 * math.pi * r * h\n    \n    return lateral_surface_area\n"}
{"task_id": "MBPP/234", "completion": "\n    return l ** 3\n"}
{"task_id": "MBPP/235", "completion": "\n    # Initialize a mask with all even bits set to 1\n    mask = 0\n    for i in range(0, 32, 2):\n        mask |= (1 << i)\n    \n    # Set the even bits of the number using the mask\n    return n | mask\n"}
{"task_id": "MBPP/236", "completion": "\n    # Calculate the number of smaller triangles that can fit in the larger triangle\n    def count_triangles(n):\n        return n * (n + 1) * (n + 2) // 6\n\n    # Initialize the count of triangles\n    count = 0\n\n    # Iterate over possible sizes of the smaller triangles\n    for i in range(1, N + 1):\n        # Calculate the number of triangles of size i that can fit in the larger triangle\n        num_triangles = count_triangles(i)\n        \n        # If the number of triangles exceeds K, break the loop\n        if num_triangles > K:\n            break\n        \n        # Add the number of triangles of size i to the total count\n        count += num_triangles\n\n    return count\n"}
{"task_id": "MBPP/237", "completion": "\n    counter = Counter(test_list)\n    occurrence_count = Counter(counter.values())\n    return occurrence_count\n"}
{"task_id": "MBPP/238", "completion": "\n    n = len(str)\n    return n * (n + 1) // 2\n"}
{"task_id": "MBPP/239", "completion": "\n    def helper(current, length):\n        if length == n:\n            return 1\n        count = 0\n        for next_val in range(2 * current, m + 1):\n            count += helper(next_val, length + 1)\n        return count\n\n    total_sequences = 0\n    for start in range(1, m + 1):\n        total_sequences += helper(start, 1)\n\n    return total_sequences\n"}
{"task_id": "MBPP/240", "completion": "\n    if list1:\n        list1[-1] = list2\n    return list1\n"}
{"task_id": "MBPP/241", "completion": "\n    array = []\n    for i in range(m):\n        plane = []\n        for j in range(n):\n            row = ['*'] * o\n            plane.append(row)\n        array.append(plane)\n    return array\n"}
{"task_id": "MBPP/242", "completion": "\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"}
{"task_id": "MBPP/243", "completion": "\n    from collections import Counter\n\n    # Extract the first elements of the tuples\n    first_elements = [item[0] for item in lst]\n    \n    # Count the occurrences of each first element\n    occurrence_count = Counter(first_elements)\n    \n    # Sort the list based on the occurrence count and then by the first element value\n    sorted_lst = sorted(lst, key=lambda x: (occurrence_count[x[0]], x[0]))\n    \n    return sorted_lst\n"}
{"task_id": "MBPP/244", "completion": "\n    if N < 0:\n        return 0\n    \n    next_N = math.floor(math.sqrt(N)) + 1\n    return next_N * next_N\n"}
{"task_id": "MBPP/245", "completion": "\n    max_sum = float('-inf')\n    \n    # Create two arrays to store the maximum sum of increasing and decreasing subsequences\n    inc_sum = [0] * n\n    dec_sum = [0] * n\n    \n    # Initialize the inc_sum array\n    for i in range(n):\n        inc_sum[i] = arr[i]\n    \n    # Compute the maximum sum of increasing subsequences\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and inc_sum[i] < inc_sum[j] + arr[i]:\n                inc_sum[i] = inc_sum[j] + arr[i]\n    \n    # Initialize the dec_sum array\n    for i in range(n):\n        dec_sum[i] = arr[i]\n    \n    # Compute the maximum sum of decreasing subsequences\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j] and dec_sum[i] < dec_sum[j] + arr[i]:\n                dec_sum[i] = dec_sum[j] + arr[i]\n    \n    # Find the maximum sum of bi-tonic sub-sequence\n    for i in range(n):\n        if max_sum < inc_sum[i] + dec_sum[i] - arr[i]:\n            max_sum = inc_sum[i] + dec_sum[i] - arr[i]\n    \n    return max_sum\n"}
{"task_id": "MBPP/246", "completion": "\n    if number < 0:\n        raise ValueError(\"Cannot compute square root of a negative number\")\n    \n    if number == 0:\n        return 0\n    \n    # Initial guess\n    guess = number / 2.0\n    \n    # Tolerance for convergence\n    tolerance = 1e-10\n    \n    while True:\n        # Calculate a better guess\n        better_guess = (guess + number / guess) / 2.0\n        \n        # Check for convergence\n        if abs(guess - better_guess) < tolerance:\n            return better_guess\n        \n        # Update guess\n        guess = better_guess\n"}
{"task_id": "MBPP/247", "completion": "\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    for cl in range(2, n+1):\n        for i in range(n-cl+1):\n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    \n    return dp[0][n-1]\n"}
{"task_id": "MBPP/248", "completion": "\n    if n <= 1:\n        return 0\n    else:\n        return 1/n + harmonic_sum(n-1)\n"}
{"task_id": "MBPP/249", "completion": "\n    intersection = list(filter(lambda x: x in array_nums1, array_nums2))\n    return intersection\n"}
{"task_id": "MBPP/250", "completion": "\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/251", "completion": "\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list\n"}
{"task_id": "MBPP/252", "completion": "\n    polar_coordinates = []\n    for number in numbers:\n        polar = cmath.polar(number)\n        polar_coordinates.append(polar)\n    return polar_coordinates\n"}
{"task_id": "MBPP/253", "completion": "\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n"}
{"task_id": "MBPP/254", "completion": "\n    pattern = r'\\b[aeAE]\\w*\\b'\n    return re.findall(pattern, text)\n"}
{"task_id": "MBPP/255", "completion": "\n    return list(combinations_with_replacement(l, n))\n"}
{"task_id": "MBPP/256", "completion": "\n    if n <= 2:\n        return 0\n    \n    # Initialize a list to track prime status of numbers\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False  # 0 and 1 are not prime numbers\n    \n    # Implement the Sieve of Eratosthenes algorithm\n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    \n    # Count the number of primes\n    return sum(is_prime)\n"}
{"task_id": "MBPP/257", "completion": "\n    a, b = b, a\n    return a, b\n"}
{"task_id": "MBPP/258", "completion": "\n    return len(list(filter(lambda x: x % 2 != 0, array_nums)))\n"}
{"task_id": "MBPP/259", "completion": "\n    # Convert tuples to lists for easier manipulation\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    \n    # Iterate through the elements and maximize them\n    for i in range(len(list1)):\n        list1[i] = max(list1[i], list2[i])\n    \n    # Convert the list back to a tuple\n    return tuple(list1)\n"}
{"task_id": "MBPP/260", "completion": "\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Newman-Shanks-Williams primes\n    s = [1, 1]\n    \n    # Compute the nth Newman-Shanks-Williams prime\n    for i in range(2, n + 1):\n        s.append(2 * s[i - 1] + s[i - 2])\n    \n    return s[n]\n"}
{"task_id": "MBPP/261", "completion": "\n    result = tuple(a / b for a, b in zip(test_tup1, test_tup2))\n    return result\n"}
{"task_id": "MBPP/262", "completion": "\n    if L > len(list1) or L < 0:\n        return None  # Invalid L value\n    \n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    return first_part, second_part\n"}
{"task_id": "MBPP/263", "completion": "\n    merged_dict = d1.copy()\n    merged_dict.update(d2)\n    return merged_dict\n"}
{"task_id": "MBPP/264", "completion": "\n    if h_age <= 0:\n        return 0\n    elif h_age == 1:\n        return 15\n    elif h_age == 2:\n        return 24\n    else:\n        return 24 + (h_age - 2) * 4\n"}
{"task_id": "MBPP/265", "completion": "\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"}
{"task_id": "MBPP/266", "completion": "\n    return 4 * l * l\n"}
{"task_id": "MBPP/267", "completion": "\n    sum_of_squares = 0\n    for i in range(1, 2*n, 2):\n        sum_of_squares += i**2\n    return sum_of_squares\n"}
{"task_id": "MBPP/268", "completion": "\n    if n < 1:\n        return None\n    \n    return 6 * n * (n - 1) // 2 + 1\n"}
{"task_id": "MBPP/269", "completion": "\n    return ord(k)\n"}
{"task_id": "MBPP/270", "completion": "\n    total_sum = 0\n    for i in range(0, n, 2):\n        if arr[i] % 2 == 0:\n            total_sum += arr[i]\n    return total_sum\n"}
{"task_id": "MBPP/271", "completion": "\n    sum_of_powers = 0\n    for i in range(2, 2 * n + 1, 2):\n        sum_of_powers += i ** 5\n    return sum_of_powers\n"}
{"task_id": "MBPP/272", "completion": "\n    if not test_list:\n        return None\n    \n    return [(item[:-1] + (None,)) if item[-1] is not None else item for item in test_list]\n"}
{"task_id": "MBPP/273", "completion": "\n    result = tuple(a - b for a, b in zip(test_tup1, test_tup2))\n    return result\n"}
{"task_id": "MBPP/274", "completion": "\n    sum_even = 0\n    for k in range(0, n + 1, 2):\n        sum_even += math.comb(n, k)\n    return sum_even\n"}
{"task_id": "MBPP/275", "completion": "\n    if n == 1:\n        return 1\n    \n    # Calculate the position using the Josephus problem formula\n    position = (get_Position(a, n - 1, m) + m - 1) % n + 1\n    \n    return position\n"}
{"task_id": "MBPP/276", "completion": "\n    import math\n    return math.pi * r**2 * h\n"}
{"task_id": "MBPP/277", "completion": "\n    filtered_dict = {key: value for key, value in dict.items() if value > n}\n    return filtered_dict\n"}
{"task_id": "MBPP/278", "completion": "\n    if not test_tup:\n        return {}\n\n    element_count = {}\n    current_element = test_tup[0]\n    count = 0\n\n    for element in test_tup:\n        if element == current_element:\n            count += 1\n        else:\n            element_count[current_element] = count\n            current_element = element\n            count = 1\n\n    element_count[current_element] = count\n\n    return element_count\n"}
{"task_id": "MBPP/279", "completion": "\n    if n < 0:\n        return False\n    return n * (4 * n - 3)\n"}
{"task_id": "MBPP/280", "completion": "\n    pos = 0\n    found = False\n\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n\n    return found\n"}
{"task_id": "MBPP/281", "completion": "\n    return len(test_list) == len(set(test_list))\n"}
{"task_id": "MBPP/282", "completion": "\n    return list(map(lambda x, y: x - y, nums1, nums2))\n"}
{"task_id": "MBPP/283", "completion": "\n    from collections import Counter\n\n    digit_counts = Counter(str(n))\n    \n    for digit, count in digit_counts.items():\n        if int(digit) < count:\n            return False\n    \n    return True\n"}
{"task_id": "MBPP/284", "completion": "\n    return all(item == element for item in list)\n"}
{"task_id": "MBPP/285", "completion": "\n    pattern = r'a(b{2,3})'\n    return bool(re.search(pattern, text))\n"}
{"task_id": "MBPP/286", "completion": "\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    total_length = n * k\n\n    for i in range(total_length):\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n\n    return max_so_far\n"}
{"task_id": "MBPP/287", "completion": "\n    sum_of_squares = 0\n    for i in range(2, 2 * n + 1, 2):\n        sum_of_squares += i ** 2\n    return sum_of_squares\n"}
{"task_id": "MBPP/288", "completion": "\n    count = 0\n    for num in arr:\n        if num == 0:\n            continue\n        if pow(num, P-2, P) == num:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/289", "completion": "\n    odd_days = 0\n    for month in range(1, 13):\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            odd_days += 3\n        elif month in [4, 6, 9, 11]:\n            odd_days += 2\n        elif month == 2:\n            if (N % 4 == 0 and N % 100 != 0) or (N % 400 == 0):\n                odd_days += 1\n    return odd_days % 7\n"}
{"task_id": "MBPP/290", "completion": "\n    max_len = 0\n    max_list = []\n    \n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    \n    return max_list\n"}
{"task_id": "MBPP/291", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    \n    # Number of ways to paint the first two posts\n    same = k  # If the first two posts have the same color\n    diff = k * (k - 1)  # If the first two posts have different colors\n    \n    for i in range(3, n + 1):\n        # Calculate the number of ways to paint the current post\n        prev_same = same\n        same = diff  # Current post has the same color as the previous post\n        diff = (prev_same + diff) * (k - 1)  # Current post has a different color than the previous post\n    \n    return same + diff\n"}
{"task_id": "MBPP/292", "completion": "\n    quotient = n // m\n    return quotient\n"}
{"task_id": "MBPP/293", "completion": "\n    return math.sqrt(w**2 + h**2)\n"}
{"task_id": "MBPP/294", "completion": "\n    max_value = None\n    for item in listval:\n        if isinstance(item, (int, float)):\n            if max_value is None or item > max_value:\n                max_value = item\n        elif isinstance(item, list):\n            nested_max = max_val(item)\n            if max_value is None or (nested_max is not None and nested_max > max_value):\n                max_value = nested_max\n    return max_value\n"}
{"task_id": "MBPP/295", "completion": "\n    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n    return total\n"}
{"task_id": "MBPP/296", "completion": "\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n"}
{"task_id": "MBPP/297", "completion": "\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n"}
{"task_id": "MBPP/298", "completion": "\n    result = []\n    for sublist in l1:\n        if any(sublist == sub in l2 for sub in l2):\n            result.append(sublist)\n    return result\n"}
{"task_id": "MBPP/299", "completion": "\n    # Initialize a defaultdict to store the sum of scores for each student\n    student_scores = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for student, score in stdata:\n        # Add the score to the corresponding student's total\n        student_scores[student] += score\n\n    # Find the student with the maximum aggregate score\n    max_student = max(student_scores, key=student_scores.get)\n    max_score = student_scores[max_student]\n\n    return max_student, max_score\n"}
{"task_id": "MBPP/300", "completion": "\n    def is_valid_sequence(seq):\n        return sum(seq[:n]) == sum(seq[n:])\n\n    def generate_sequences(length, current_seq=[]):\n        if length == 0:\n            if is_valid_sequence(current_seq):\n                return 1\n            return 0\n        return generate_sequences(length - 1, current_seq + [0]) + generate_sequences(length - 1, current_seq + [1])\n\n    return generate_sequences(2 * n)\n"}
{"task_id": "MBPP/301", "completion": "\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0\n"}
{"task_id": "MBPP/302", "completion": "\n    if n == 0:\n        return 0\n    \n    msb = 0\n    n = n // 2\n    while n > 0:\n        n = n // 2\n        msb += 1\n    \n    return 1 << msb\n"}
{"task_id": "MBPP/303", "completion": "\n    # Initialize counters for each type of inversion\n    inversion_type1 = 0\n    inversion_type2 = 0\n\n    # Iterate through the array to count inversions\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                inversion_type1 += 1\n            if a[i] < a[j]:\n                inversion_type2 += 1\n\n    # Check if the counts of both types of inversions are the same\n    return inversion_type1 == inversion_type2\n"}
{"task_id": "MBPP/304", "completion": "\n    for i in range(rotations):\n        start, end = ranges[i]\n        arr = arr[start:end+1][::-1] + arr[:start] + arr[end+1:]\n    return arr[index]\n"}
{"task_id": "MBPP/305", "completion": "\n    pattern = r'\\bp\\w+\\b'\n    matches = re.findall(pattern, ' '.join(words), re.IGNORECASE)\n    if len(matches) >= 2:\n        return matches[:2]\n    else:\n        return []\n"}
{"task_id": "MBPP/306", "completion": "\n    if index == n - 1:\n        return a[index] if a[index] < a[k] else float('-inf')\n    \n    max_sum = float('-inf')\n    \n    for i in range(index + 1, n):\n        if a[i] > a[index]:\n            max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n    \n    if a[index] < a[k]:\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a, n, k, k))\n    \n    return max_sum\n"}
{"task_id": "MBPP/307", "completion": "\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m, n):\n        new_tuplex = new_tuplex[:i] + (None,) + new_tuplex[i+1:]\n    return new_tuplex\n"}
{"task_id": "MBPP/308", "completion": "\n    # Combine the two lists into pairs and calculate their products\n    products = [(x * y) for x in nums1 for y in nums2]\n    \n    # Sort the products in descending order\n    products.sort(reverse=True)\n    \n    # Return the top N largest products\n    return products[:N]\n"}
{"task_id": "MBPP/309", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "MBPP/310", "completion": "\n    # Split the string by spaces to get individual elements\n    elements = str1.split()\n    \n    # Convert each element to an integer (if possible) and create a tuple\n    try:\n        tuple_elements = tuple(int(elem) if elem.isdigit() else elem for elem in elements)\n    except ValueError:\n        # If conversion to integer fails, keep the element as a string\n        tuple_elements = tuple(elements)\n    \n    return tuple_elements\n"}
{"task_id": "MBPP/311", "completion": "\n    # Find the position of the leftmost unset bit\n    position = 0\n    temp = n\n    while temp > 0:\n        if temp & 1 == 0:\n            break\n        temp >>= 1\n        position += 1\n\n    # Set the leftmost unset bit\n    if temp > 0:\n        n |= (1 << position)\n\n    return n\n"}
{"task_id": "MBPP/312", "completion": "\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n"}
{"task_id": "MBPP/313", "completion": "\n    for num in list1:\n        if num > 0:\n            print(num)\n"}
{"task_id": "MBPP/314", "completion": "\n    # Initialize a DP array to store the maximum sum up to each column\n    dp = [0] * n\n    \n    # Base cases\n    dp[0] = max(grid[0][0], grid[1][0])\n    if n > 1:\n        dp[1] = max(dp[0], grid[0][1], grid[1][1])\n    \n    # Fill the DP array\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] + max(grid[0][i], grid[1][i]))\n    \n    return dp[-1]\n"}
{"task_id": "MBPP/315", "completion": "\n    max_len = 0\n    max_even_word = \"\"\n    \n    words = str.split()\n    \n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n            max_even_word = word\n    \n    return max_even_word\n"}
{"task_id": "MBPP/316", "completion": "\n    left, right = 0, len(A) - 1\n    last_occurrence = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            last_occurrence = mid\n            left = mid + 1  # Continue searching in the right half\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return last_occurrence\n"}
{"task_id": "MBPP/317", "completion": "\n    def encode_group(group):\n        length = len(list(group[1]))\n        if length > 1:\n            return (length, group[0])\n        else:\n            return group[0]\n\n    return [encode_group(group) for group in groupby(alist)]\n"}
{"task_id": "MBPP/318", "completion": "\n    # Initialize the maximum volume to 0\n    max_vol = 0\n    \n    # Iterate over all possible values of length, width, and height\n    for l in range(1, s // 3 + 1):\n        for w in range(l, (s - l) // 2 + 1):\n            h = s - l - w\n            if h >= w:\n                # Calculate the volume of the current cuboid\n                volume = l * w * h\n                # Update the maximum volume if the current volume is greater\n                if volume > max_vol:\n                    max_vol = volume\n    \n    return max_vol\n"}
{"task_id": "MBPP/319", "completion": "\n    pattern = r'\\b\\w{5}\\b'\n    return re.findall(pattern, text)\n"}
{"task_id": "MBPP/320", "completion": "\n    sum_of_squares = sum(i**2 for i in range(1, n+1))\n    square_of_sum = sum(i for i in range(1, n+1))**2\n    return square_of_sum - sum_of_squares\n"}
{"task_id": "MBPP/321", "completion": "\n    # Convert the input string to an integer\n    n = int(s)\n    \n    # Initialize the result as an empty string\n    result = \"\"\n    \n    # Loop through each digit of the number\n    for digit in s:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        \n        # Append the square of the digit to the result string\n        result += str(digit_int ** 2)\n    \n    # Return the final result as an integer\n    return int(result)\n"}
{"task_id": "MBPP/322", "completion": "\n    min_value = min(list1)\n    min_positions = [index for index, value in enumerate(list1) if value == min_value]\n    return min_positions\n"}
{"task_id": "MBPP/323", "completion": "\n    temp = arr[cur]\n    for i in range(cur, out_of_place, -1):\n        arr[i] = arr[i - 1]\n    arr[out_of_place] = temp\n"}
{"task_id": "MBPP/324", "completion": "\n    sum_alt = 0\n    for i, value in enumerate(test_tuple):\n        if i % 2 == 0:\n            sum_alt += sum(value)\n    return sum_alt\n"}
{"task_id": "MBPP/325", "completion": "\n    if n <= 0:\n        return 0\n    \n    # Create a list to store the minimum number of squares for each number up to n\n    min_squares = [float('inf')] * (n + 1)\n    min_squares[0] = 0\n    \n    # Fill the list using dynamic programming\n    for i in range(1, n + 1):\n        j = 1\n        while j * j <= i:\n            min_squares[i] = min(min_squares[i], min_squares[i - j * j] + 1)\n            j += 1\n    \n    return min_squares[n]\n"}
{"task_id": "MBPP/326", "completion": "\n    word_count = defaultdict(int)\n    \n    for word in test_list:\n        word_count[word] += 1\n    \n    if not word_count:\n        return None\n    \n    most_common_word = max(word_count, key=word_count.get)\n    return most_common_word\n"}
{"task_id": "MBPP/327", "completion": "\n    if x == y or y == z or z == x:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/328", "completion": "\n    if m > len(list1):\n        m = m % len(list1)\n    \n    if n > len(list1):\n        n = n % len(list1)\n    \n    if m == 0 or n == 0:\n        return list1\n    \n    return list1[m:n] + list1[:m] + list1[n:]\n"}
{"task_id": "MBPP/329", "completion": "\n    count = 0\n    for num in list:\n        if num < 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/330", "completion": "\n    pattern = r'\\b\\w{3,5}\\b'\n    return re.findall(pattern, text)\n"}
{"task_id": "MBPP/331", "completion": "\n    count = 0\n    while n > 0:\n        if n & 1 == 0:\n            count += 1\n        n >>= 1\n    return count\n"}
{"task_id": "MBPP/332", "completion": "\n    frequency = {}\n    for char in str1:\n        if char in frequency:\n            frequency[char] += 1\n        else:\n            frequency[char] = 1\n    return frequency\n"}
{"task_id": "MBPP/333", "completion": "\n    sub_li.sort(key=lambda x: x[1])\n    return sub_li\n"}
{"task_id": "MBPP/334", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/335", "completion": "\n    sum_ap = n * (2 * a + (n - 1) * d) // 2\n    return sum_ap\n"}
{"task_id": "MBPP/336", "completion": "\n    month_days = {\n        \"January\": 31, \"February\": 28, \"March\": 31, \"April\": 30,\n        \"May\": 31, \"June\": 30, \"July\": 31, \"August\": 31,\n        \"September\": 30, \"October\": 31, \"November\": 30, \"December\": 31\n    }\n    \n    return month_days.get(monthname1, 0) == 28\n"}
{"task_id": "MBPP/337", "completion": "\n    pattern = r'\\b\\w+\\b\\.?$'\n    return bool(re.search(pattern, text))\n"}
{"task_id": "MBPP/338", "completion": "\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    \n    return count\n"}
{"task_id": "MBPP/339", "completion": "\n    if x > y:\n        x, y = y, x\n\n    max_divisor = 1\n    max_count = 0\n\n    for i in range(1, y + 1):\n        count = 0\n        for j in range(1, i + 1):\n            if i % j == 0:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_divisor = i\n\n    return max_divisor\n"}
{"task_id": "MBPP/340", "completion": "\n    # Filter out non-positive numbers and sort the list\n    positive_nums = sorted([num for num in lst if num > 0])\n    \n    # Sum the first three elements (the three smallest positive numbers)\n    return sum(positive_nums[:3])\n"}
{"task_id": "MBPP/341", "completion": "\n    return tuple(sorted(s))\n"}
{"task_id": "MBPP/342", "completion": "\n    min_heap = []\n    max_val = float('-inf')\n    min_range = float('inf')\n    start, end = 0, 0\n\n    # Initialize the heap with the first element from each list\n    for i in range(len(list)):\n        if list[i]:\n            heappush(min_heap, Node(list[i][0], i, 0))\n            max_val = max(max_val, list[i][0])\n\n    while min_heap:\n        # Get the smallest element from the heap\n        current_node = heappop(min_heap)\n        current_value = current_node.value\n        current_list_num = current_node.list_num\n        current_index = current_node.index\n\n        # Calculate the current range\n        current_range = max_val - current_value\n\n        # Update the minimum range if the current range is smaller\n        if current_range < min_range:\n            min_range = current_range\n            start = current_value\n            end = max_val\n\n        # Move to the next element in the current list\n        if current_index + 1 < len(list[current_list_num]):\n            next_value = list[current_list_num][current_index + 1]\n            heappush(min_heap, Node(next_value, current_list_num, current_index + 1))\n            max_val = max(max_val, next_value)\n        else:\n            # If any list is exhausted, break the loop\n            break\n\n    return (start, end)\n"}
{"task_id": "MBPP/343", "completion": "\n    digits = sum(c.isdigit() for c in s)\n    letters = sum(c.isalpha() for c in s)\n    return digits, letters\n"}
{"task_id": "MBPP/344", "completion": "\n    count = 0\n    for i in range(n, m + 1):\n        if (i ** 0.5).is_integer():\n            count += 1\n    return count\n"}
{"task_id": "MBPP/345", "completion": "\n    differences = []\n    for i in range(len(nums) - 1):\n        differences.append(nums[i + 1] - nums[i])\n    return differences\n"}
{"task_id": "MBPP/346", "completion": "\n    if n == 0 and k == 0:\n        return 1\n    if k == 0:\n        return 0\n    return zigzag(n, k - 1) + zigzag(n - 1, n - k)\n"}
{"task_id": "MBPP/347", "completion": "\n    count = 0\n    for i in range(1, min(m, n) + 1):\n        count += (m - i + 1) * (n - i + 1)\n    return count\n"}
{"task_id": "MBPP/348", "completion": "\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    return bin_coff(n-1, r-1) + bin_coff(n-1, r)\n"}
{"task_id": "MBPP/349", "completion": "\n    return all(char in '01' for char in string)\n"}
{"task_id": "MBPP/350", "completion": "\n    # Initialize a dictionary to count the frequency of each character\n    char_count = {}\n    \n    # Count the frequency of each character in the string\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the character with the maximum frequency\n    max_char = max(char_count, key=char_count.get)\n    \n    # Remove all occurrences of the character with the maximum frequency\n    minimized_string = s.replace(max_char, '')\n    \n    return minimized_string\n"}
{"task_id": "MBPP/351", "completion": "\n    count_dict = {}\n    for element in arr:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n        \n        if count_dict[element] == k:\n            return element\n    \n    return None\n"}
{"task_id": "MBPP/352", "completion": "\n    char_set = set()\n    for char in str:\n        if char in char_set:\n            return False\n        char_set.add(char)\n    return True\n"}
{"task_id": "MBPP/353", "completion": "\n    return [row[:n] + row[n+1:] for row in list1]\n"}
{"task_id": "MBPP/354", "completion": "\n    return a + (n - 1) * d\n"}
{"task_id": "MBPP/355", "completion": "\n    count = 0\n    for x in range(-radius, radius + 1):\n        for y in range(-radius, radius + 1):\n            if x**2 + y**2 <= radius**2:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/356", "completion": "\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Angles must be positive.\")\n    if a + b >= 180:\n        raise ValueError(\"The sum of the two angles must be less than 180 degrees.\")\n    \n    return 180 - (a + b)\n"}
{"task_id": "MBPP/357", "completion": "\n    max_element = None\n    for tup in test_list:\n        for element in tup:\n            if max_element is None or element > max_element:\n                max_element = element\n    return max_element\n"}
{"task_id": "MBPP/358", "completion": "\n    return list(map(lambda x, y: x % y, nums1, nums2))\n"}
{"task_id": "MBPP/359", "completion": "\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return False\n    \n    sqrt_discriminant = discriminant**0.5\n    root1 = (-b + sqrt_discriminant) / (2*a)\n    root2 = (-b - sqrt_discriminant) / (2*a)\n    \n    if root1 == 2 * root2 or root2 == 2 * root1:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/360", "completion": "\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return (2 ** (2 * n) - 2 ** n + 1)\n"}
{"task_id": "MBPP/361", "completion": "\n    return [sublist for sublist in list1 if sublist]\n"}
{"task_id": "MBPP/362", "completion": "\n    if not nums:\n        return None\n    \n    count_dict = {}\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    max_item = max(count_dict, key=count_dict.get)\n    return max_item\n"}
{"task_id": "MBPP/363", "completion": "\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i] + (K,)\n    return test_list\n"}
{"task_id": "MBPP/364", "completion": "\n    flips = 0\n    for i in range(len(ch)):\n        expected_char = '0' if i % 2 == 0 else '1'\n        if ch[i] != expected_char:\n            flips += 1\n    return flips\n"}
{"task_id": "MBPP/365", "completion": "\n    count = 0\n    while n > 0:\n        n //= 10\n        count += 1\n    return count\n"}
{"task_id": "MBPP/366", "completion": "\n    max_product = float('-inf')\n    for i in range(len(list_nums) - 1):\n        product = list_nums[i] * list_nums[i + 1]\n        if product > max_product:\n            max_product = product\n    return max_product\n"}
{"task_id": "MBPP/367", "completion": "\n    if root is None:\n        return True\n    \n    left_height = get_height(root.left)\n    right_height = get_height(root.right)\n    \n    if abs(left_height - right_height) > 1:\n        return False\n    \n    return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n"}
{"task_id": "MBPP/368", "completion": "\n    repeated_tuples = tuple(item for item in test_tup for _ in range(N))\n    return repeated_tuples\n"}
{"task_id": "MBPP/369", "completion": "\n    return 2 * (l * h + w * h)\n"}
{"task_id": "MBPP/370", "completion": "\n    sorted_price = sorted(price, key=lambda x: float(x[1]))\n    return sorted_price\n"}
{"task_id": "MBPP/371", "completion": "\n    if left_element > right_element:\n        return left_element\n    \n    mid_element = (left_element + right_element) // 2\n    \n    if A[mid_element] == mid_element:\n        return smallest_missing(A, mid_element + 1, right_element)\n    else:\n        return smallest_missing(A, left_element, mid_element - 1)\n"}
{"task_id": "MBPP/372", "completion": "\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n    \n    sorted_nums = []\n    while heap:\n        sorted_nums.append(hq.heappop(heap))\n    \n    return sorted_nums\n"}
{"task_id": "MBPP/373", "completion": "\n    return l * w * h\n"}
{"task_id": "MBPP/374", "completion": "\n    if len(str) == 0:\n        return [\"\"]\n    \n    permutations = []\n    for i in range(len(str)):\n        char = str[i]\n        remaining_str = str[:i] + str[i+1:]\n        for perm in permute_string(remaining_str):\n            permutations.append(char + perm)\n    \n    return permutations\n"}
{"task_id": "MBPP/375", "completion": "\n    if m == 0:\n        raise ValueError(\"The multiple must be non-zero.\")\n    \n    remainder = n % m\n    if remainder <= m / 2:\n        return n - remainder\n    else:\n        return n + (m - remainder)\n"}
{"task_id": "MBPP/376", "completion": "\n    seen = set()\n    result = []\n    for item in test_tup:\n        if item in seen:\n            result.append(None)  # Replace duplicates with None or any other custom value\n        else:\n            seen.add(item)\n            result.append(item)\n    return tuple(result)\n"}
{"task_id": "MBPP/377", "completion": "\n    return ''.join([char for char in s if char != c])\n"}
{"task_id": "MBPP/378", "completion": "\n    if len(test_list) > 0:\n        last_element = test_list.pop()\n        test_list.insert(0, last_element)\n    return test_list\n"}
{"task_id": "MBPP/379", "completion": "\n    return 2 * (l * w + w * h + h * l)\n"}
{"task_id": "MBPP/380", "completion": "\n    matrix = []\n    for i in range(rownum):\n        row = []\n        for j in range(colnum):\n            row.append(0)\n        matrix.append(row)\n    return matrix\n"}
{"task_id": "MBPP/381", "completion": "\n    sorted_list = sorted(list_data, key=itemgetter(index_no))\n    return sorted_list\n"}
{"task_id": "MBPP/382", "completion": "\n    n = len(A)\n    low, high = 0, n - 1\n\n    while low <= high:\n        if A[low] <= A[high]:\n            return low\n        mid = (low + high) // 2\n        next_index = (mid + 1) % n\n        prev_index = (mid - 1 + n) % n\n\n        if A[mid] <= A[next_index] and A[mid] <= A[prev_index]:\n            return mid\n        elif A[mid] <= A[high]:\n            high = mid - 1\n        elif A[mid] >= A[low]:\n            low = mid + 1\n\n    return -1\n"}
{"task_id": "MBPP/383", "completion": "\n    # Create a mask with all even bits set to 1 and odd bits set to 0\n    mask = 0xAAAAAAAA  # 0xAAAAAAAA is 10101010101010101010101010101010 in binary\n\n    # Toggle the even bits of the number using XOR with the mask\n    toggled_number = n ^ mask\n\n    return toggled_number\n"}
{"task_id": "MBPP/384", "completion": "\n    if n == 0:\n        return 0\n    \n    smallest = min(arr)\n    frequency = arr.count(smallest)\n    \n    return frequency\n"}
{"task_id": "MBPP/385", "completion": "\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n - 2) + get_perrin(n - 3)\n"}
{"task_id": "MBPP/386", "completion": "\n    n = len(s)\n    if n % 2 != 0:\n        return -1\n\n    # Remove the balanced parts from the string\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        else:\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                stack.append(char)\n\n    # Now stack contains only the unbalanced brackets\n    unbalanced_length = len(stack)\n    open_brackets = stack.count('(')\n    close_brackets = unbalanced_length - open_brackets\n\n    # Minimum swaps required\n    return (open_brackets + 1) // 2 + (close_brackets + 1) // 2\n"}
{"task_id": "MBPP/387", "completion": "\n    hex_value = hex(N)\n    last_digit = hex_value[-1]\n    \n    if last_digit in '02468ace':\n        return \"even\"\n    else:\n        return \"odd\"\n"}
{"task_id": "MBPP/388", "completion": "\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power\n"}
{"task_id": "MBPP/389", "completion": "\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n"}
{"task_id": "MBPP/390", "completion": "\n    for i in range(len(list)):\n        list[i] = string + list[i]\n    return list\n"}
{"task_id": "MBPP/391", "completion": "\n    if len(l1) != len(l2) or len(l2) != len(l3):\n        raise ValueError(\"All lists must be of the same length\")\n    \n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    \n    return result\n"}
{"task_id": "MBPP/392", "completion": "\n    if n == 0:\n        return 0\n    \n    # Use memoization to store already computed values\n    memo = {}\n    \n    def helper(x):\n        if x in memo:\n            return memo[x]\n        if x == 0:\n            return 0\n        result = max(helper(x // 2) + helper(x // 3) + helper(x // 4) + helper(x // 5), x)\n        memo[x] = result\n        return result\n    \n    return helper(n)\n"}
{"task_id": "MBPP/393", "completion": "\n    max_length_list = max(input_list, key=lambda x: len(x))\n    return max_length_list\n"}
{"task_id": "MBPP/394", "completion": "\n    return len(set(test_tup)) == len(test_tup)\n"}
{"task_id": "MBPP/395", "completion": "\n    char_count = {}\n    \n    # Count the occurrences of each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first character with count 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None\n"}
{"task_id": "MBPP/396", "completion": "\n    match = re.match(regex, string)\n    return bool(match)\n"}
{"task_id": "MBPP/397", "completion": "\n    if (a >= b and a <= c) or (a <= b and a >= c):\n        return a\n    elif (b >= a and b <= c) or (b <= a and b >= c):\n        return b\n    else:\n        return c\n"}
{"task_id": "MBPP/398", "completion": "\n    total_sum = 0\n    for num in nums:\n        while num > 0:\n            total_sum += num % 10\n            num //= 10\n    return total_sum\n"}
{"task_id": "MBPP/399", "completion": "\n    result = tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n    return result\n"}
{"task_id": "MBPP/400", "completion": "\n    freq_dict = {}\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    return freq_dict\n"}
{"task_id": "MBPP/401", "completion": "\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    \n    result = []\n    for i in range(len(test_tup1)):\n        if len(test_tup1[i]) != len(test_tup2[i]):\n            raise ValueError(\"Nested tuples at index {} must have the same length\".format(i))\n        \n        inner_result = tuple(a + b for a, b in zip(test_tup1[i], test_tup2[i]))\n        result.append(inner_result)\n    \n    return tuple(result)\n"}
{"task_id": "MBPP/402", "completion": "\n    # Step 1: Compute factorials modulo p\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n\n    # Step 2: Compute nCr modulo p using Fermat's Little Theorem\n    num = fact[n]\n    denom = (fact[r] * fact[n - r]) % p\n\n    # Step 3: Compute the modular inverse of denom using Fermat's Little Theorem\n    denom_inv = pow(denom, p - 2, p)\n\n    # Step 4: Compute the result\n    result = (num * denom_inv) % p\n\n    return result\n"}
{"task_id": "MBPP/403", "completion": "\n    # Regular expression pattern for validating a URL\n    url_pattern = re.compile(\n        r'^(https?|ftp)://'  # Scheme (http, https, ftp)\n        r'([A-Za-z0-9.-]+)'  # Host (domain or IP)\n        r'(\\.[A-Za-z]{2,})?'  # Optional top-level domain (e.g., .com, .org)\n        r'(:\\d{2,5})?'  # Optional port number\n        r'(/[\\w.-]*)*'  # Optional path\n        r'(\\?[\\w%&=.-]*)?'  # Optional query string\n        r'(#[\\w.-]*)?'  # Optional fragment identifier\n        r'$'\n    )\n    \n    # Match the input string against the pattern\n    if re.match(url_pattern, str):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/404", "completion": "\n    if a < b:\n        return a\n    else:\n        return b\n"}
{"task_id": "MBPP/405", "completion": "\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False\n"}
{"task_id": "MBPP/406", "completion": "\n    parity = x % 2\n    return parity\n"}
{"task_id": "MBPP/407", "completion": "\n    digits = list(str(n))\n    length = len(digits)\n    \n    # Find the first digit that is smaller than the digit next to it\n    for i in range(length - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            break\n    else:\n        # If no such digit is found, return -1 (no bigger number possible)\n        return -1\n    \n    # Find the smallest digit on right side of (i-1)'th digit that is greater than digits[i]\n    for j in range(length - 1, i, -1):\n        if digits[j] > digits[i]:\n            break\n    \n    # Swap the found digits\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Reverse the digits after the (i-1)'th position to get the smallest possible number\n    digits = digits[:i + 1] + digits[i + 1:][::-1]\n    \n    return int(''.join(digits))\n"}
{"task_id": "MBPP/408", "completion": "\n    if not nums1 or not nums2:\n        return []\n\n    min_heap = []\n    result = []\n\n    # Initialize the heap with the first element from nums1 and all elements from nums2\n    for j in range(len(nums2)):\n        heapq.heappush(min_heap, (nums1[0] + nums2[j], 0, j))\n\n    while min_heap and k > 0:\n        # Pop the smallest element from the heap\n        current_sum, i, j = heapq.heappop(min_heap)\n        result.append([nums1[i], nums2[j]])\n        k -= 1\n\n        # If there are more elements in nums1, push the next pair into the heap\n        if i + 1 < len(nums1):\n            heapq.heappush(min_heap, (nums1[i + 1] + nums2[j], i + 1, j))\n\n    return result\n"}
{"task_id": "MBPP/409", "completion": "\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][0] + list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n"}
{"task_id": "MBPP/410", "completion": "\n    min_value = None\n    for item in listval:\n        if isinstance(item, (int, float)):\n            if min_value is None or item < min_value:\n                min_value = item\n    return min_value\n"}
{"task_id": "MBPP/411", "completion": "\n    return re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word)\n"}
{"task_id": "MBPP/412", "completion": "\n    return [x for x in l if x % 2 == 0]\n"}
{"task_id": "MBPP/413", "completion": "\n    return [item[n] for item in list1]\n"}
{"task_id": "MBPP/414", "completion": "\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n"}
{"task_id": "MBPP/415", "completion": "\n    n = len(arr)\n    if n < 2:\n        return None\n    \n    # Initialize two largest and two smallest elements\n    max1, max2 = float('-inf'), float('-inf')\n    min1, min2 = float('inf'), float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    # Return the maximum of the products of the two largest and the two smallest elements\n    return max(max1 * max2, min1 * min2)\n"}
{"task_id": "MBPP/416", "completion": "\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i // 2] + dp[i // 3] + dp[i // 4], i)\n\n    return dp[n]\n"}
{"task_id": "MBPP/417", "completion": "\n    from collections import defaultdict\n\n    grouped_tuples = defaultdict(list)\n    \n    for tup in Input:\n        if tup:\n            grouped_tuples[tup[0]].append(tup)\n    \n    return dict(grouped_tuples)\n"}
{"task_id": "MBPP/418", "completion": "\n    max_length = 0\n    max_sublist = []\n    \n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_sublist = sublist\n    \n    return max_sublist\n"}
{"task_id": "MBPP/419", "completion": "\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    result = total_sum * len(list1)\n    return result\n"}
{"task_id": "MBPP/420", "completion": "\n    sum_of_cubes = 0\n    for i in range(2, 2 * n + 1, 2):\n        sum_of_cubes += i ** 3\n    return sum_of_cubes\n"}
{"task_id": "MBPP/421", "completion": "\n    delimiter = '-'\n    concatenated_string = delimiter.join(map(str, test_tup))\n    return concatenated_string\n"}
{"task_id": "MBPP/422", "completion": "\n    total_sum = 0\n    for i in range(1, n + 1):\n        total_sum += i ** 3\n    average = total_sum / n\n    return average\n"}
{"task_id": "MBPP/423", "completion": "\n    # Create a 2D table to store the maximum gold collected\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    \n    # Initialize the last column of the dp table with the gold values\n    for i in range(m):\n        dp[i][n-1] = gold[i][n-1]\n    \n    # Fill the dp table from right to left\n    for col in range(n-2, -1, -1):\n        for row in range(m):\n            # Gold collected if we move to the right\n            right = dp[row][col+1]\n            \n            # Gold collected if we move to the right-up\n            right_up = dp[row-1][col+1] if row > 0 else 0\n            \n            # Gold collected if we move to the right-down\n            right_down = dp[row+1][col+1] if row < m-1 else 0\n            \n            # Maximum gold collected from the current position\n            dp[row][col] = gold[row][col] + max(right, right_up, right_down)\n    \n    # The maximum gold collected will be the maximum value in the first column\n    max_gold = max(dp[i][0] for i in range(m))\n    \n    return max_gold\n"}
{"task_id": "MBPP/424", "completion": "\n    return tuple(s[-1] for s in test_tuple)\n"}
{"task_id": "MBPP/425", "completion": "\n    count = 0\n    for sublist in list1:\n        if isinstance(sublist, list) and x in sublist:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/426", "completion": "\n    return list(filter(lambda x: x % 2 != 0, nums))\n"}
{"task_id": "MBPP/427", "completion": "\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.match(dt)\n    if match:\n        year, month, day = match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        raise ValueError(\"Invalid date format\")\n"}
{"task_id": "MBPP/428", "completion": "\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n"}
{"task_id": "MBPP/429", "completion": "\n    return tuple(a & b for a, b in zip(test_tup1, test_tup2))\n"}
{"task_id": "MBPP/430", "completion": "\n    # The standard form of a parabola is y = ax^2 + bx + c\n    # The directrix of a parabola y = ax^2 + bx + c is given by y = k - 1/(4a)\n    # where k is the y-coordinate of the vertex of the parabola.\n\n    # Calculate the x-coordinate of the vertex\n    x_vertex = -b / (2 * a)\n\n    # Calculate the y-coordinate of the vertex\n    y_vertex = a * x_vertex**2 + b * x_vertex + c\n\n    # Calculate the directrix\n    directrix = y_vertex - 1 / (4 * a)\n\n    return directrix\n"}
{"task_id": "MBPP/431", "completion": "\n    set1 = set(list1)\n    set2 = set(list2)\n    return not set1.isdisjoint(set2)\n"}
{"task_id": "MBPP/432", "completion": "\n    # Calculate the median of the trapezium\n    median = (base1 + base2) / 2\n    return median\n"}
{"task_id": "MBPP/433", "completion": "\n    for element in arr:\n        if number <= element:\n            return False\n    return True\n"}
{"task_id": "MBPP/434", "completion": "\n    pattern = r'ab+'\n    return bool(re.search(pattern, text))\n"}
{"task_id": "MBPP/435", "completion": "\n    return n % 10\n"}
{"task_id": "MBPP/436", "completion": "\n    for num in list1:\n        if num < 0:\n            print(num)\n"}
{"task_id": "MBPP/437", "completion": "\n    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n"}
{"task_id": "MBPP/438", "completion": "\n    count = 0\n    seen = set()\n    \n    for tup in test_list:\n        if tup in seen:\n            continue\n        reverse_tup = (tup[1], tup[0])\n        if reverse_tup in seen:\n            count += 1\n        seen.add(tup)\n        seen.add(reverse_tup)\n    \n    return count\n"}
{"task_id": "MBPP/439", "completion": "\n    result = int(''.join(map(str, L)))\n    return result\n"}
{"task_id": "MBPP/440", "completion": "\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    positions = []\n    for adverb in adverbs:\n        start = text.find(adverb)\n        end = start + len(adverb)\n        positions.append((adverb, start, end))\n    return positions\n"}
{"task_id": "MBPP/441", "completion": "\n    return 6 * l * l\n"}
{"task_id": "MBPP/442", "completion": "\n    positive_count = 0\n    total_count = len(nums)\n    \n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    \n    return positive_count / total_count if total_count > 0 else 0\n"}
{"task_id": "MBPP/443", "completion": "\n    largest = None\n    for num in list1:\n        if num < 0:\n            if largest is None or num > largest:\n                largest = num\n    return largest\n"}
{"task_id": "MBPP/444", "completion": "\n    return [(t[i] for i in range(len(t)) if i < K) for t in test_list]\n"}
{"task_id": "MBPP/445", "completion": "\n    result = tuple(a * b for a, b in zip(test_tup1, test_tup2))\n    return result\n"}
{"task_id": "MBPP/446", "completion": "\n    counter = Counter(tup)\n    result = {element: counter[element] for element in lst if element in counter}\n    return result\n"}
{"task_id": "MBPP/447", "completion": "\n    return list(map(lambda x: x**3, nums))\n"}
{"task_id": "MBPP/448", "completion": "\n    def perrin(m):\n        if m == 0:\n            return 3\n        elif m == 1:\n            return 0\n        elif m == 2:\n            return 2\n        else:\n            return perrin(m - 2) + perrin(m - 3)\n\n    total_sum = 0\n    for i in range(n):\n        total_sum += perrin(i)\n\n    return total_sum\n"}
{"task_id": "MBPP/449", "completion": "\n    # Calculate the lengths of the sides of the triangle\n    side1 = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n    side2 = ((x3 - x2) ** 2 + (y3 - y2) ** 2) ** 0.5\n    side3 = ((x1 - x3) ** 2 + (y1 - y3) ** 2) ** 0.5\n    \n    # Check the triangle inequality theorem\n    if side1 + side2 > side3 and side1 + side3 > side2 and side2 + side3 > side1:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/450", "completion": "\n    extracted_strings = []\n    for s in str:\n        if len(s) == l:\n            extracted_strings.append(s)\n    return extracted_strings\n"}
{"task_id": "MBPP/451", "completion": "\n    return re.sub(r'\\s+', '', text1)\n"}
{"task_id": "MBPP/452", "completion": "\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return None\n"}
{"task_id": "MBPP/453", "completion": "\n    total = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                total += i\n            if (n // i) != i and (n // i) % 2 == 0:\n                total += (n // i)\n    return total\n"}
{"task_id": "MBPP/454", "completion": "\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))\n"}
{"task_id": "MBPP/455", "completion": "\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/456", "completion": "\n    return [s[::-1] for s in stringlist]\n"}
{"task_id": "MBPP/457", "completion": "\n    if not lst:\n        return []\n    \n    min_length = float('inf')\n    min_sublist = []\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist\n"}
{"task_id": "MBPP/458", "completion": "\n    return l * b\n"}
{"task_id": "MBPP/459", "completion": "\n    pattern = re.compile(r'[A-Z]+')\n    result = pattern.sub('', str1)\n    return result\n"}
{"task_id": "MBPP/460", "completion": "\n    return [sublist[0] for sublist in lst]\n"}
{"task_id": "MBPP/461", "completion": "\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n"}
{"task_id": "MBPP/462", "completion": "\n    from itertools import chain, combinations\n\n    def powerset(iterable):\n        \"Generate the power set of a given iterable.\"\n        s = list(iterable)\n        return chain.from_iterable(combinations(s, r) for r in range(len(s) + 1))\n\n    return list(powerset(list1))\n"}
{"task_id": "MBPP/463", "completion": "\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for i in range(1, n):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n        result = max(result, max_product)\n\n    return result\n"}
{"task_id": "MBPP/464", "completion": "\n    if not dict:\n        return False\n    \n    values = list(dict.values())\n    return all(value == n for value in values)\n"}
{"task_id": "MBPP/465", "completion": "\n    return {k: v for k, v in dict1.items() if v}\n"}
{"task_id": "MBPP/466", "completion": "\n    mid = low + (high - low) // 2\n\n    # Compare middle element with its neighbors (if neighbors exist)\n    if (mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid]):\n        return arr[mid]\n\n    # If middle element is not a peak and its left neighbor is greater than it,\n    # then left half must have a peak element\n    elif mid > 0 and arr[mid - 1] > arr[mid]:\n        return find_peak_util(arr, low, mid - 1, n)\n\n    # If middle element is not a peak and its right neighbor is greater than it,\n    # then right half must have a peak element\n    else:\n        return find_peak_util(arr, mid + 1, high, n)\n"}
{"task_id": "MBPP/467", "completion": "\n    octalNum = \"\"\n    while deciNum > 0:\n        remainder = deciNum % 8\n        octalNum = str(remainder) + octalNum\n        deciNum = deciNum // 8\n    return octalNum\n"}
{"task_id": "MBPP/468", "completion": "\n    if n == 0:\n        return 0\n\n    # Initialize the maximum product to the smallest possible value\n    max_product = float('-inf')\n\n    # Iterate through the array to find the maximum product of increasing subsequences\n    for i in range(n):\n        current_product = arr[i]\n        max_product = max(max_product, current_product)\n        \n        for j in range(i + 1, n):\n            if arr[j] > arr[j - 1]:\n                current_product *= arr[j]\n                max_product = max(max_product, current_product)\n            else:\n                break\n\n    return max_product\n"}
{"task_id": "MBPP/469", "completion": "\n    n = len(price)\n    if n == 0:\n        return 0\n\n    # Create a 2D array to store the maximum profit at each day with at most k transactions\n    dp = [[0] * n for _ in range(k + 1)]\n\n    for i in range(1, k + 1):\n        max_diff = -price[0]\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j - 1], price[j] + max_diff)\n            max_diff = max(max_diff, dp[i - 1][j] - price[j])\n\n    return dp[k][n - 1]\n"}
{"task_id": "MBPP/470", "completion": "\n    result = tuple(a + b for a, b in zip(test_tup[:-1], test_tup[1:]))\n    return result\n"}
{"task_id": "MBPP/471", "completion": "\n    product = 1\n    for num in arr:\n        product *= num\n    return product % n\n"}
{"task_id": "MBPP/472", "completion": "\n    if len(l) == 0:\n        return False\n    \n    l.sort()\n    for i in range(1, len(l)):\n        if l[i] != l[i-1] + 1:\n            return False\n    return True\n"}
{"task_id": "MBPP/473", "completion": "\n    # Convert tuples to frozensets for order-independent comparison\n    set_list1 = {frozenset(t) for t in test_list1}\n    set_list2 = {frozenset(t) for t in test_list2}\n    \n    # Find the intersection of the two sets of frozensets\n    intersection = set_list1 & set_list2\n    \n    # Convert frozensets back to tuples\n    result = [tuple(s) for s in intersection]\n    \n    return result\n"}
{"task_id": "MBPP/474", "completion": "\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str\n"}
{"task_id": "MBPP/475", "completion": "\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict\n"}
{"task_id": "MBPP/476", "completion": "\n    if not nums:\n        return 0\n    \n    min_val = min(nums)\n    max_val = max(nums)\n    \n    return min_val + max_val\n"}
{"task_id": "MBPP/477", "completion": "\n    return string.lower()\n"}
{"task_id": "MBPP/478", "completion": "\n    pattern = re.compile(r'[a-z]+')\n    return pattern.sub('', str1)\n"}
{"task_id": "MBPP/479", "completion": "\n    while n >= 10:\n        n //= 10\n    return n\n"}
{"task_id": "MBPP/480", "completion": "\n    char_count = {}\n    max_count = 0\n    max_char = ''\n\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n        if char_count[char] > max_count:\n            max_count = char_count[char]\n            max_char = char\n\n    return max_char\n"}
{"task_id": "MBPP/481", "completion": "\n    if sum == 0:\n        return True\n    if n == 0 and sum != 0:\n        return False\n\n    # If the last element is greater than the sum, then ignore it\n    if set[n-1] > sum:\n        return is_subset_sum(set, n-1, sum)\n\n    # Check if sum can be obtained by any of the following:\n    # (a) including the last element\n    # (b) excluding the last element\n    return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])\n"}
{"task_id": "MBPP/482", "completion": "\n    pattern = r'[A-Z][a-z]+'\n    matches = re.findall(pattern, text)\n    return matches\n"}
{"task_id": "MBPP/483", "completion": "\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        result = 1\n        for i in range(2, n + 1):\n            result *= i\n        return result\n\n    n = 1\n    while True:\n        if factorial(n) % x == 0:\n            return n\n        n += 1\n"}
{"task_id": "MBPP/484", "completion": "\n    result_list = []\n    for t1 in test_list1:\n        if t1 not in test_list2:\n            result_list.append(t1)\n    return result_list\n"}
{"task_id": "MBPP/485", "completion": "\n    # Convert the number to a string\n    str_n = str(n)\n    \n    # Check if the string is equal to its reverse\n    return str_n == str_n[::-1]\n"}
{"task_id": "MBPP/486", "completion": "\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    r = min(r, n - r)  # Take advantage of symmetry\n    c = 1\n    for i in range(r):\n        c = c * (n - i) // (i + 1)\n    return c\n"}
{"task_id": "MBPP/487", "completion": "\n    return sorted(tup, key=lambda x: x[-1])\n"}
{"task_id": "MBPP/488", "completion": "\n    return (5 * a**2) / (4 * math.tan(math.pi / 5))\n"}
{"task_id": "MBPP/489", "completion": "\n    if n == 0:\n        return 0\n    \n    max_value = max(arr)\n    frequency = arr.count(max_value)\n    \n    return frequency\n"}
{"task_id": "MBPP/490", "completion": "\n    symmetric_pairs = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]):\n                symmetric_pairs.append((test_list[i], test_list[j]))\n    return symmetric_pairs\n"}
{"task_id": "MBPP/491", "completion": "\n    if r == 1:\n        return a * n\n    else:\n        return a * (1 - r**n) / (1 - r)\n"}
{"task_id": "MBPP/492", "completion": "\n    first = 0\n    last = len(item_list) - 1\n    found = False\n\n    while first <= last and not found:\n        midpoint = (first + last) // 2\n        if item_list[midpoint] == item:\n            found = True\n        else:\n            if item < item_list[midpoint]:\n                last = midpoint - 1\n            else:\n                first = midpoint + 1\n\n    return found\n"}
{"task_id": "MBPP/493", "completion": "\n    # Calculate the distance between the start and end points\n    distance = math.sqrt((endx - startx) ** 2 + (endy - starty) ** 2)\n    \n    # Calculate the number of hexagons in the x and y directions\n    num_hexagons_x = int(distance / (2 * radius))\n    num_hexagons_y = int(distance / (math.sqrt(3) * radius))\n    \n    # Initialize the list to hold the hexagon coordinates\n    hexagons = []\n    \n    # Generate the hexagon coordinates\n    for i in range(num_hexagons_y):\n        for j in range(num_hexagons_x):\n            # Calculate the center of the hexagon\n            center_x = startx + j * 2 * radius + (i % 2) * radius\n            center_y = starty + i * math.sqrt(3) * radius\n            \n            # Calculate the 6 vertices of the hexagon\n            vertices = []\n            for k in range(6):\n                angle_deg = 60 * k\n                angle_rad = math.pi / 180 * angle_deg\n                vertex_x = center_x + radius * math.cos(angle_rad)\n                vertex_y = center_y + radius * math.sin(angle_rad)\n                vertices.append((vertex_x, vertex_y))\n            \n            # Add the hexagon to the list\n            hexagons.append(vertices)\n    \n    return hexagons\n"}
{"task_id": "MBPP/494", "completion": "\n    return int(''.join(map(str, test_tup)), 2)\n"}
{"task_id": "MBPP/495", "completion": "\n    pattern = re.compile(r'[a-z]+')\n    result = pattern.sub('', str1)\n    return result\n"}
{"task_id": "MBPP/496", "completion": "\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n    \n    smallest_integers = []\n    for _ in range(n):\n        smallest_integers.append(hq.heappop(heap))\n    \n    return smallest_integers\n"}
{"task_id": "MBPP/497", "completion": "\n    l = math.sqrt(r**2 + h**2)\n    base_area = math.pi * r**2\n    lateral_area = math.pi * r * l\n    surface_area = base_area + lateral_area\n    return surface_area\n"}
{"task_id": "MBPP/498", "completion": "\n    while y != 0:\n        x, y = y, x % y\n    return x\n"}
{"task_id": "MBPP/499", "completion": "\n    return 2 * r\n"}
{"task_id": "MBPP/500", "completion": "\n    concatenated_string = \"\"\n    for element in list:\n        concatenated_string += str(element)\n    return concatenated_string\n"}
{"task_id": "MBPP/501", "completion": "\n    while y != 0:\n        x, y = y, x % y\n    return x\n"}
{"task_id": "MBPP/502", "completion": "\n    return n % m\n"}
{"task_id": "MBPP/503", "completion": "\n    result = []\n    for i in range(len(nums) - 1):\n        result.append(nums[i] + nums[i + 1])\n    return result\n"}
{"task_id": "MBPP/504", "completion": "\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 3\n    return sum\n"}
{"task_id": "MBPP/505", "completion": "\n    n = len(A)\n    count = 0  # Count of non-zero elements\n\n    # Traverse the array. If element encountered is non-zero, then\n    # replace the element at index 'count' with this element\n    for i in range(n):\n        if A[i] != 0:\n            A[count] = A[i]\n            count += 1\n\n    # Now all non-zero elements have been shifted to front and 'count' is set\n    # as index of first 0. Make all elements 0 from count to end.\n    while count < n:\n        A[count] = 0\n        count += 1\n\n    return A\n"}
{"task_id": "MBPP/506", "completion": "\n    # Initialize the result as 1\n    result = 1\n    \n    # Calculate P(n, k) = n * (n-1) * (n-2) * ... * (n-k+1)\n    for i in range(k):\n        result *= (n - i)\n    \n    return result\n"}
{"task_id": "MBPP/507", "completion": "\n    result = []\n    for word in list1:\n        if word not in removewords:\n            result.append(word)\n    return result\n"}
{"task_id": "MBPP/508", "completion": "\n    set1 = set(l1)\n    set2 = set(l2)\n    common_elements = set1.intersection(set2)\n    \n    if not common_elements:\n        return True  # No common elements, so trivially in the same order\n    \n    l1_indices = {elem: [] for elem in common_elements}\n    l2_indices = {elem: [] for elem in common_elements}\n    \n    for i, elem in enumerate(l1):\n        if elem in common_elements:\n            l1_indices[elem].append(i)\n    \n    for i, elem in enumerate(l2):\n        if elem in common_elements:\n            l2_indices[elem].append(i)\n    \n    for elem in common_elements:\n        if l1_indices[elem] != l2_indices[elem]:\n            return False\n    \n    return True\n"}
{"task_id": "MBPP/509", "completion": "\n    odd_sum = 0\n    count = 0\n    \n    for i in range(1, n + 1, 2):\n        odd_sum += i\n        count += 1\n    \n    return odd_sum / count\n"}
{"task_id": "MBPP/510", "completion": "\n    def count_subsequences(arr, index, product, k):\n        if index == len(arr):\n            return 1 if product < k else 0\n        \n        # Include the current element in the subsequence\n        include_count = count_subsequences(arr, index + 1, product * arr[index], k)\n        \n        # Exclude the current element from the subsequence\n        exclude_count = count_subsequences(arr, index + 1, product, k)\n        \n        return include_count + exclude_count\n    \n    return count_subsequences(arr, 0, 1, k)\n"}
