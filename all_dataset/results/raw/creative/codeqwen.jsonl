{"task_id": "EvoEval/0", "completion": "\n    base_cost = 5.0\n    additional_cost = 10.0\n    local_factor = 1.0\n    national_factor = 1.5\n    international_factor = 2.5\n    \n    total_cost = 0.0\n    factor_multiplier = 1.0\n    \n    for item in items:\n        if isinstance(item, str):\n            factor_multiplier *= 1.5\n            item = 1.0\n        \n        if item > 5.0:\n            total_cost += base_cost + additional_cost\n        else:\n            total_cost += base_cost * item\n    \n    total_cost *= factor_multiplier\n    \n    if location == 'National':\n        total_cost *= national_factor\n    elif location == 'International':\n        total_cost *= international_factor\n    \n    return \"{:.2f}\".format(total_cost)\n"}
{"task_id": "EvoEval/1", "completion": "\n    total_cost = 0.0\n    for item in items:\n        weight = float(item) if isinstance(item, (int, float)) else 1.0\n        base_cost = 5.0 + (10.0 if weight > 5 else 0.0)\n        total_cost += base_cost\n    \n    if location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n    \n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    def caesar_cipher(word: str, key: int) -> str:\n        encrypted_word = \"\"\n        for char in word:\n            if char.isalpha():\n                shift = key % 26\n                if char.islower():\n                    encrypted_word += chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n                else:\n                    encrypted_word += chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n            else:\n                encrypted_word += char\n        return encrypted_word\n\n    if isinstance(key, str):\n        key = sum(ord(char) for char in key)\n\n    return [caesar_cipher(word.lower(), key) for word in words]\n"}
{"task_id": "EvoEval/3", "completion": "\n    def helper(s):\n        if not s:\n            return ['']\n        if s[0] == '0':\n            return []\n        res = [s[0]]\n        if len(s) > 1 and 10 <= int(s[:2]) <= 26:\n            res.append(s[:2])\n        for i in range(1, len(s)):\n            for word in helper(s[i:]):\n                res.append(s[0] + word)\n        return res\n    \n    return helper(input_string)\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    \n    lit_candles = 1\n    max_height = candles[0]\n    \n    for height in candles[1:]:\n        if height > max_height:\n            lit_candles += 1\n            max_height = height\n            \n    return lit_candles\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = 0, 0\n    while row < len(matrix) and col < len(matrix[0]):\n        result.append(matrix[row][col])\n        if col == 0:\n            while row < len(matrix) - 1 and col < len(matrix[0]):\n                row += 1\n                result.append(matrix[row][col])\n        else:\n            while row < len(matrix) and col > 0:\n                col -= 1\n                result.append(matrix[row][col])\n        row += 1\n        col += 1\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]):\n        return grid\n    if grid[x][y] == 1:\n        return grid\n    if grid[x][y] == 0:\n        return grid\n    grid[x][y] = 0\n    for i in range(max(0, x-1), min(len(grid), x+2)):\n        for j in range(max(0, y-1), min(len(grid[0]), y+2)):\n            if grid[i][j] == 1:\n                grid[x][y] += 1\n    return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\r\n    for direction in code_sequence:\r\n        if direction == 0:\r\n            y += 1\r\n        elif direction == 1:\r\n            x += 1\r\n        elif direction == 2:\r\n            y -= 1\r\n        elif direction == 3:\r\n            x -= 1\r\n        if x == 0 and y == 0:\r\n            return 'Shangri-La found'\r\n    return 'Shangri-La not found'\n"}
{"task_id": "EvoEval/8", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/9", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/10", "completion": "\n    animals = {'C': 'meow', 'D': 'woof', 'B': 'chirp'}\n    sounds = []\n    animal_count = {}\n    for animal in animal_string.split(' '):\n        if animal[0] in animals and len(animal) > 1:\n            sounds.append(int(animal[1:]))\n            if animal[0] in animal_count:\n                animal_count[animal[0]] += 1\n            else:\n                animal_count[animal[0]] = 1\n            if animal_count[animal[0]] > 2 or len(animal_count) > 5:\n                sounds.pop()\n    return sounds\r\n\r"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh, are those {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh, are those {fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"Oh, are those {fruits[0]}, {fruits[1]} and {fruits[2]} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    max_count = max(Counter(flux_values).values())\n    max_count_elements = [num for num, count in Counter(flux_values).items() if count == max_count]\n    return sum(flux_values) * min(max_count_elements)\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    \n    elem_count = {}\n    for elem in elems:\n        if elem in elem_count:\n            elem_count[elem] += 1\n        else:\n            elem_count[elem] = 1\n    \n    rarest_elem = min(elem_count, key=elem_count.get)\n    return rarest_elem\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                alias += vowels[(index + 1) % len(vowels)]\n            else:\n                index = consonants.index(char.lower())\n                alias += consonants[(index + 1) % len(consonants)]\n            if char.isupper():\n                alias = alias.upper()\n        else:\n            alias += char\n    return alias\n"}
{"task_id": "EvoEval/15", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        sum = 1  # 1 is the sum of the first two numbers in the Fibonacci sequence\n        for _ in range(2, n):\n            a, b = b, a + b\n            sum += b\n        return sum\n"}
{"task_id": "EvoEval/17", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    num = 7\n    while True:\n        if num % 7 == 0 and sum(int(digit) for digit in str(num)) == 7:\n            count += 1\n            if count == n:\n                return num\n        num += 1\n"}
{"task_id": "EvoEval/19", "completion": "\n    vampires = sum(row.count(2) for row in m)\n    danger_count = 0\n    for i in range(len(m)):\n        for j in range(len(m[0])):\n            if m[i][j] == 1:\n                if any(m[i][k] == 2 for k in range(len(m[0])) if k != j):\n                    danger_count += 1\n                if any(m[k][j] == 2 for k in range(len(m)) if k != i):\n                    danger_count += 1\n    return danger_count - vampires\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n\n    patterns = []\n    for i in range(1, n + 1):\n        pattern = ','.join(str(j) for j in range(1, i + 1))\n        patterns.append(pattern)\n\n    for i in range(n - 1, 0, -1):\n        pattern = ','.join(str(j) for j in range(i, 0, -1))\n        patterns.append(pattern)\n\n    return patterns\n"}
{"task_id": "EvoEval/21", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/22", "completion": "\n    light_year = 9.461 * 10**12\n    return t * v / light_year\n"}
{"task_id": "EvoEval/23", "completion": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = \"\"\n    for char in s:\n        if char.islower():\n            result += str(primes[ord(char) - ord('a')])\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!', 'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=', 'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<', 'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'}\n    translated_word = ''\n    for letter in english_word:\n        translated_word += alien_dict[letter]\n    return translated_word\n"}
{"task_id": "EvoEval/25", "completion": "\n    sentences = text.split(\".\")\r\n    max_frequency = 0\r\n    max_sentence = \"\"\r\n    frequency = 0\r\n    for sentence in sentences:\r\n        words = sentence.split()\r\n        frequency = words.count(word)\r\n        if frequency > max_frequency:\r\n            max_frequency = frequency\r\n            max_sentence = sentence\r\n    return (max_frequency, max_sentence.strip()) if max_frequency > 0 else (0, \"\")\n"}
{"task_id": "EvoEval/26", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = max(0, income - deductions)\n    tax = 0\n\n    if taxable_income > 130000:\n        tax += (taxable_income - 130000) * 0.3\n        taxable_income = 130000\n\n    if taxable_income > 45000:\n        tax += (taxable_income - 45000) * 0.25\n        taxable_income = 45000\n\n    if taxable_income > 25000:\n        tax += (taxable_income - 25000) * 0.15\n        taxable_income = 25000\n\n    if taxable_income > 10000:\n        tax += (taxable_income - 10000) * 0.1\n\n    return tax\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(substring: str) -> bool:\n        return substring == substring[::-1]\n\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if is_palindrome(substring):\n                substrings.add(substring)\n\n    return sorted(list(substrings))\n"}
{"task_id": "EvoEval/30", "completion": "\n    rows, cols = len(maze), len(maze[0])\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    queue = [(start, [start])]\n    visited = set([start])\n\n    while queue:\n        current, path = queue.pop(0)\n        if current == end:\n            return path\n        for dx, dy in directions:\n            nx, ny = current[0] + dx, current[1] + dy\n            if 0 <= nx < rows and 0 <= ny < cols and maze[nx][ny] == 1 and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                queue.append(((nx, ny), path + [(nx, ny)]))\n    return []\n"}
{"task_id": "EvoEval/31", "completion": "\n    # Create a 2D array to store the number of unique paths to each cell\n    paths = [[0 for _ in range(n)] for _ in range(m)]\n    \n    # The number of unique paths to the first cell is 1\n    paths[0][0] = 1\n    \n    # Fill in the first row and first column with the number of unique paths to the previous cell\n    for i in range(1, m):\n        paths[i][0] = paths[i-1][0]\n    for j in range(1, n):\n        paths[0][j] = paths[0][j-1]\n    \n    # Fill in the rest of the grid with the number of unique paths to each cell\n    for i in range(1, m):\n        for j in range(1, n):\n            paths[i][j] = paths[i-1][j] + paths[i][j-1]\n    \n    # The number of unique paths to the bottom-right cell is the value in the last cell of the grid\n    return paths[m-1][n-1]\n"}
{"task_id": "EvoEval/32", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/33", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/34", "completion": "\n    transformation_percentages = []\n    for day in range(1, n + 1):\n        if day < m:\n            transformation_percentages.append(min(100, transformation_percentages[-1] + 10))\n        elif day == m:\n            transformation_percentages.append(min(100, transformation_percentages[-1] * 2))\n        else:\n            transformation_percentages.append(max(0, transformation_percentages[-1] - 10))\n    return transformation_percentages\n"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or email.count(\"@\") != 1 or email.startswith(\"@\") or email.endswith(\"@\"):\r\n        return False\r\n    username, domain = email.split(\"@\")\r\n    if \".\" not in domain or domain.startswith(\".\") or domain.endswith(\".\"):\r\n        return False\r\n    return True\r\n\r\n\r"}
{"task_id": "EvoEval/36", "completion": "\n    return [0] + [x / (i + 1) for i, x in enumerate(xs)]\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n\n    for char in s:\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            new_char = vowels[(index + 1) % len(vowels)]\n            transformed += new_char.upper() if char.isupper() else new_char\n        elif char.lower() in consonants:\n            index = consonants.index(char.lower())\n            new_char = consonants[(index + 1) % len(consonants)]\n            transformed += new_char.upper() if char.isupper() else new_char\n        else:\n            transformed += char\n\n    return transformed\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\": \"\ud83d\ude09\"\n    }\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n    return sentence\n"}
{"task_id": "EvoEval/39", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/40", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/41", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/42", "completion": "\n    # Your code here\r\n    legendary_item = False\r\n    second_most_valuable = None\r\n    rarities = set()\r\n    for rarity in player_input:\r\n        if rarity == 5:\r\n            legendary_item = True\r\n        rarities.add(rarity)\r\n    if legendary_item:\r\n        if len(rarities) == 1:\r\n            return True, -1\r\n        else:\r\n            sorted_rarities = sorted(rarities, reverse=True)\r\n            second_most_valuable = sorted_rarities[1]\r\n            return True, second_most_valuable\r\n    else:\r\n        return False, None\r\n"}
{"task_id": "EvoEval/43", "completion": "\n    trip_duration = distance / speed\n    fuel_consumption = spaceship_weight * planet_gravity * 0.1 * trip_duration\n    remaining_fuel = fuel - fuel_consumption\n    if remaining_fuel >= 0:\n        return round(remaining_fuel, 2)\n    else:\n        return 'Insufficient fuel'\n"}
{"task_id": "EvoEval/44", "completion": "\n    total_weight = sum(q)\r\n    if total_weight <= w + e:\r\n        return True\r\n    else:\r\n        return False\r\n\r"}
{"task_id": "EvoEval/45", "completion": "\n    max_view = 0\n    for i in range(len(arr)):\n        left_view = 0\n        right_view = 0\n        for j in range(i-1, -1, -1):\n            if arr[j] < arr[i]:\n                left_view += 1\n            else:\n                break\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[i]:\n                right_view += 1\n            else:\n                break\n        max_view = max(max_view, left_view + right_view + 1)\n    return max_view\n"}
{"task_id": "EvoEval/46", "completion": "\n    result = []\n    for case in test_cases:\n        secret = ''\n        for word in case:\n            for char in word:\n                if char.isalpha():\n                    secret += char.lower()\n                    break\n        result.append(secret)\n    return result\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n"}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log[\"item\"]\n        quantity = log[\"quantity\"]\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n    return {item: quantity for item, quantity in inventory.items() if quantity > 0}\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code = {\n        '01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E', '0010': 'F', \n        '110': 'G', '0000': 'H', '00': 'I', '0111': 'J', '101': 'K', '0100': 'L', \n        '11': 'M', '10': 'N', '111': 'O', '0110': 'P', '1101': 'Q', '010': 'R', \n        '000': 'S', '1': 'T', '001': 'U', '0001': 'V', '011': 'W', '1001': 'X', \n        '1011': 'Y', '1100': 'Z', '01111': '1', '00111': '2', '00011': '3', \n        '00001': '4', '00000': '5', '10000': '6', '11000': '7', '11100': '8', \n        '11110': '9', '11111': '0'\n    }\n    decoded_msg = ''\n    word = ''\n    for char in msg:\n        if char == ' ':\n            decoded_msg += morse_code[word]\n            word = ''\n        elif char == '/':\n            decoded_msg += ' '\n        else:\n            word += char\n    decoded_msg += morse_code[word]\n    return decoded_msg.upper()\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', \n    'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', \n    'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', \n    'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', \n    'Y': '-.--', 'Z': '--..', ' ': '  '}\n\n    morse_code = \"\"\n    for char in text.upper():\n        if char in morse_code_dict:\n            morse_code += morse_code_dict[char] + \" \"\n    return morse_code.strip()\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not string or not list_of_alphabets:\n        return string\n    \n    encoded_string = ''\n    for i in range(len(string)):\n        encoded_string += list_of_alphabets[i % len(list_of_alphabets)]\n    \n    return encoded_string\n"}
{"task_id": "EvoEval/52", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/53", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/54", "completion": "\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                coordinates.append((i, j))\n    return coordinates\n"}
{"task_id": "EvoEval/55", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', \n        'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', \n        'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', \n        'y': '-.--', 'z': '--..'\n    }\n    morse_code = \"\"\n    for word in s.split(\" \"):\n        for letter in word:\n            morse_code += morse_code_dict[letter] + \" \"\n        morse_code += \"/ \"\n    return morse_code.strip()\n"}
{"task_id": "EvoEval/57", "completion": "\n    transformed_menu = {}\n    for dish, price in menu.items():\n        transformed_dish = ''.join([magic_spell[i % len(magic_spell)] for i in range(len(dish))])\n        transformed_menu[transformed_dish] = price\n    return transformed_menu\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated_phrase = ''\n    for word in earth_phrase.split():\n        first_letter = word[0]\n        if first_letter in vowels:\n            translated_word = first_letter.replace(first_letter, 'e') + 'xy'\n        else:\n            translated_word = first_letter.replace(first_letter, 'y') + 'z'\n        for letter in word[1:]:\n            if letter in vowels:\n                translated_word += letter.replace(letter, 'e')\n            else:\n                translated_word += letter.replace(letter, 'y')\n        translated_word = translated_word.capitalize()\n        translated_word = translated_word.replace(' ', '@')\n        translated_phrase += translated_word\n    return translated_phrase\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    sorted_ingredients = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n    return sorted_ingredients\n"}
{"task_id": "EvoEval/60", "completion": "\n    # Your implementation goes here.\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    next_vowel = {'a': 'e', 'e': 'i', 'i': 'o', 'o': 'u', 'u': 'a'}\n    prev_consonant = {c: consonants[(i - 1) % 21] for i, c in enumerate(consonants + consonants[:1])}\n    \n    result = []\n    for i, char in enumerate(s):\n        if char.isalpha():\n            if i % 2 == 0:\n                # Swap case\n                result.append(char.swapcase())\n            else:\n                # Replace vowel with next vowel, consonant with preceding consonant\n                if char.lower() in vowels:\n                    result.append(next_vowel[char.lower()].upper() if char.isupper() else next_vowel[char.lower()])\n                else:\n                    result.append(prev_consonant[char.lower()].upper() if char.isupper() else prev_consonant[char.lower()])\n        else:\n            # Preserve spaces\n            result.append(char)\n    \n    return ''.join(result)\n"}
{"task_id": "EvoEval/62", "completion": "\n    return {ingredient: quantity * conversion_factor for ingredient, quantity in recipe.items()}\n"}
{"task_id": "EvoEval/63", "completion": "\n    # Your code here\r\n\r"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in range(start, end + 1):\n        if is_prime(num) and num % divisor == 0:\n            result.append(num)\n    return result\n"}
{"task_id": "EvoEval/65", "completion": "\n    final_order = {}\n    for food, ingredients in menu.items():\n        final_order[food] = ingredients.copy()\n        if food in order:\n            if \"remove\" in order[food]:\n                for ingredient in order[food][\"remove\"]:\n                    if ingredient in final_order[food]:\n                        final_order[food].remove(ingredient)\n            if \"add\" in order[food]:\n                final_order[food].extend(order[food][\"add\"])\n    return final_order\n"}
{"task_id": "EvoEval/66", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/67", "completion": "\n    calories_consumed = {}\n    for customer in customers:\n        total_calories = 0\n        if customer in meals:\n            for meal in meals[customer]:\n                total_calories += meal['calories']\n        calories_consumed[customer] = total_calories\n    return calories_consumed\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return True\n\n    # Find the index where the array is not in ascending order\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            # Perform the swap operation\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n            # Check if the array is sorted after the swap\n            if arr == sorted(arr):\n                return True\n            else:\n                return False\n\n    # If the array is already sorted\n    return True\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not path or path[0] not in planets or path[-1] not in planets:\n        return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets[path[i + 1]]:\n            return False\n    return True\r\n"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    encrypted_string = ''\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            shift = n % 26\n            if char.islower():\n                new_char = chr(((ord(char) - ord('a') + shift) % 26) + ord('a'))\n            else:\n                new_char = chr(((ord(char) - ord('A') + shift) % 26) + ord('A'))\n            encrypted_string += new_char\n            if new_char.lower() in vowels:\n                vowel_count += 1\n        else:\n            encrypted_string += char\n    return (encrypted_string, vowel_count)\n"}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for string in lst:\n        digit_count = sum(c.isdigit() for c in string)\n        result.append(f\"Once upon a time, in a kingdom far away, lived a magical creature with the name of '{string}' who was known for telling {digit_count} tales a day\")\n    return result\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Your code here\r\n    # Initialize variables\r\n    num_trips = 0\r\n    num_chests = 0\r\n    num_chambers = len(grid)\r\n    num_treasures = sum(sum(row) for row in grid)\r\n    \r\n    # Iterate through each chamber\r\n    for i in range(num_chambers):\r\n        # If the chamber has treasures\r\n        if sum(grid[i]) > 0:\r\n            # If the bag is not full\r\n            if num_chests < bag_capacity:\r\n                # Collect all treasures in the chamber\r\n                num_chests += sum(grid[i])\r\n                num_trips += 1\r\n            # If the bag is full\r\n            else:\r\n                # Go out of the chamber\r\n                num_trips += 1\r\n                # Collect treasures until the bag is full\r\n                while num_chests < bag_capacity and sum(grid[i]) > 0:\r\n                    num_chests += 1\r\n                    grid[i][grid[i].index(1)] = 0\r\n                # Go back into the chamber\r\n                num_trips += 1\r\n    \r\n    # Return the total number of trips\r\n    return num_trips\r\n\r"}
{"task_id": "EvoEval/74", "completion": "\n    if not s:\n        return \"\"\n    return ''.join(cipher.get(char, char) for char in s)\n"}
{"task_id": "EvoEval/75", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    \n    max_len = sum(lst)\n    pyramid = []\n    \n    for num in lst:\n        level = '#' * num\n        pyramid.append(level)\n    \n    return pyramid[::-1]\n"}
{"task_id": "EvoEval/77", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    result = []\n    for i in range(n // 2):\n        result.extend([mat[i][i], mat[i][n - i - 1], mat[n - i - 1][i], mat[n - i - 1][n - i - 1]])\n    return result\n"}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\r\n    for i in range(days):\r\n        for j in range(i+1, days):\r\n            if prices[j] > prices[i]:\r\n                max_profit = max(max_profit, prices[j] - prices[i])\r\n    return max_profit\r\n\r"}
{"task_id": "EvoEval/80", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    \n    for i in range(len(word_list) - 1):\n        word1 = word_list[i]\n        word2 = word_list[i + 1]\n        \n        for j in range(min(len(word1), len(word2))):\n            if word1[j] != word2[j]:\n                if alien_dictionary.index(word1[j]) > alien_dictionary.index(word2[j]):\n                    return \"INCORRECT\"\n                break\n        else:\n            if len(word1) > len(word2):\n                return \"INCORRECT\"\n    \n    return \"CORRECT\"\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n\n    zodiac_signs = {\n        \"Aries\": \"Fire\",\n        \"Taurus\": \"Earth\",\n        \"Gemini\": \"Air\",\n        \"Cancer\": \"Water\",\n        \"Leo\": \"Fire\",\n        \"Virgo\": \"Earth\",\n        \"Libra\": \"Air\",\n        \"Scorpio\": \"Water\",\n        \"Sagittarius\": \"Fire\",\n        \"Capricorn\": \"Earth\",\n        \"Aquarius\": \"Air\",\n        \"Pisces\": \"Water\"\n    }\n\n    elements_count = {\"Fire\": 0, \"Earth\": 0, \"Air\": 0, \"Water\": 0}\n\n    for birthday in birthdays:\n        month = int(birthday.split(\"-\")[1])\n        day = int(birthday.split(\"-\")[2])\n\n        if month == 3 and day >= 21 or month == 4 and day <= 19:\n            elements_count[\"Fire\"] += 1\n        elif month == 4 and day >= 20 or month == 5 and day <= 20:\n            elements_count[\"Earth\"] += 1\n        elif month == 5 and day >= 21 or month == 6 and day <= 20:\n            elements_count[\"Air\"] += 1\n        elif month == 6 and day >= 21 or month == 7 and day <= 22:\n            elements_count[\"Water\"] += 1\n        elif month == 7 and day >= 23 or month == 8 and day <= 22:\n            elements_count[\"Fire\"] += 1\n        elif month == 8 and day >= 23 or month == 9 and day <= 22:\n            elements_count[\"Earth\"] += 1\n        elif month == 9 and day >= 23 or month == 10 and day <= 22:\n            elements_count[\"Air\"] += 1\n        elif month == 10 and day >= 23 or month == 11 and day <= 21:\n            elements_count[\"Water\"] += 1\n        elif month == 11 and day >= "}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] in vowels and s[right] in vowels:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n        elif s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n    return ''.join(s)\n"}
{"task_id": "EvoEval/84", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/85", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/86", "completion": "\n    # Your code here\n    sorted_movies = sorted(movies_dict.keys(), key=lambda x: (-movies_dict[x][0], -movies_dict[x][1]))\n    return sorted_movies\n"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    \n    result = []\n    while arr:\n        result += arr.pop(0)\n        if arr and arr[0]:\n            for row in arr:\n                result.append(row.pop())\n        if arr:\n            result += arr.pop()[::-1]\n        if arr and arr[0]:\n            for row in arr[::-1]:\n                result.append(row.pop(0))\n    return ''.join(result)\n"}
{"task_id": "EvoEval/88", "completion": "\n    result = {}\n    for planet, features in dict_of_planets.items():\n        population, size = features\n        if population is not None and size is not None:\n            density = round(population / size, 2)\n            result[planet] = density\n    return result\n"}
{"task_id": "EvoEval/89", "completion": "\n    aliens.sort()\n    remaining_aliens = []\n    for alien in aliens:\n        if alien != ray and alien != ray - 1 and alien != ray + 1:\n            remaining_aliens.append(alien)\n    return remaining_aliens\n"}
{"task_id": "EvoEval/90", "completion": "\n    # Convert the strings to lists of digits\n    digits1 = list(s1)\n    digits2 = list(s2)\n\n    # Initialize the product to 0\n    product = 0\n\n    # Iterate over all unique combinations of digits from the two numbers\n    for digit1 in digits1:\n        for digit2 in digits2:\n            product += int(digit1) + int(digit2)\n\n    return product\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if action == 'Launch':\n            if status == 'On Ground':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Move':\n            if status == 'In Space':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Land':\n            if status == 'In Space':\n                status = 'On Ground'\n            else:\n                return 'Invalid Action Sequence'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    fountain = ''\n    for i in range(n):\n        layer = ' ' * (n - i - 1) + alphabet[i % 26] * (2 * i + 1) + ' ' * (n - i - 1)\n        fountain += layer + '\\n'\n    return fountain.strip()\n"}
{"task_id": "EvoEval/93", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/94", "completion": "\n    return [\" \".join(sorted(spell.split(), key=len)) for spell in strings]\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    \n    first_diagonal = sum(m[i][i] for i in range(len(m)))\n    second_diagonal = sum(m[i][len(m)-i-1] for i in range(len(m)))\n    \n    return abs(first_diagonal - second_diagonal)\n"}
{"task_id": "EvoEval/96", "completion": "\n    def product_of_digits(n):\n        product = 1\n        for digit in str(abs(n)):\n            product *= int(digit)\n        return product\n\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0 and product_of_digits(lst[i]) == i:\n            magic_indices.append(i)\n    return magic_indices\n"}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    encountered = []\n    for continent in [\"Asia\", \"Africa\", \"Europe\", \"North America\", \"South America\"]:\n        for human, home in humans.items():\n            if home == continent and alien in human:\n                encountered.append(human)\n    return encountered\n"}
{"task_id": "EvoEval/98", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    current_position = 0\n\n    for round_duration in rounds:\n        for _ in range(round_duration):\n            current_position = (current_position + music) % n\n        players.pop(current_position)\n        if current_position == 0:\n            current_position = len(players) - 1\n\n    return players\n"}
