{"task_id": "EvoEval/0", "completion": "\n    base_cost_per_item = 5.0\n    additional_charge_per_heavy_item = 10.0\n    string_item_multiplier = 1.5\n\n    total_cost = 0.0\n    has_string_item = False\n\n    for item in items:\n        if isinstance(item, str):\n            if not has_string_item:\n                base_cost_per_item *= string_item_multiplier\n                has_string_item = True\n            item_weight = 1.0\n        else:\n            item_weight = item\n\n        item_cost = base_cost_per_item\n        if item_weight > 5.0:\n            item_cost += additional_charge_per_heavy_item\n\n        total_cost += item_cost\n\n    if location == \"National\":\n        total_cost *= 1.5\n    elif location == \"International\":\n        total_cost *= 2.5\n\n    return f\"{total_cost:.2f}\"\n"}
{"task_id": "EvoEval/1", "completion": "\n    total_cost = 0.0\n    \n    for item in items:\n        weight = 1.0 if isinstance(item, str) else item\n        base_cost = 5.0\n        \n        if weight > 5.0:\n            base_cost += 10.0\n        \n        total_cost += base_cost\n    \n    if location == \"National\":\n        total_cost *= 1.5\n    elif location == \"International\":\n        total_cost *= 2.5\n    \n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    if isinstance(key, str):\n        key = sum(ord(char) for char in key)\n\n    encrypted_words = []\n    for word in words:\n        encrypted_word = []\n        for char in word.lower():\n            if char.isalpha():\n                shifted_char = chr((ord(char) - ord('a') + key) % 26 + ord('a'))\n                encrypted_word.append(shifted_char)\n            else:\n                encrypted_word.append(char)\n        encrypted_words.append(''.join(encrypted_word))\n    \n    return encrypted_words\n"}
{"task_id": "EvoEval/3", "completion": "\n    def backtrack(index: int, path: List[str]):\n        if index == len(input_string):\n            result.append(''.join(path))\n            return\n        \n        # Single digit case\n        if index < len(input_string):\n            single_digit = int(input_string[index])\n            if 1 <= single_digit <= 9:\n                path.append(chr(single_digit + 96))\n                backtrack(index + 1, path)\n                path.pop()\n        \n        # Two digits case\n        if index < len(input_string) - 1:\n            double_digit = int(input_string[index:index + 2])\n            if 10 <= double_digit <= 26:\n                path.append(chr(double_digit + 96))\n                backtrack(index + 2, path)\n                path.pop()\n    \n    result = []\n    backtrack(0, [])\n    return result\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    \n    lit_count = 1  # The first candle is always lit\n    max_height = candles[0]\n    \n    for i in range(1, len(candles)):\n        if candles[i] > max_height:\n            lit_count += 1\n            max_height = candles[i]\n    \n    return lit_count\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    if not matrix or not matrix[0]:\n        return result\n\n    row, col = 0, 0\n    rows, cols = len(matrix), len(matrix[0])\n    direction = 1  # 1 for right, -1 for left\n\n    while row < rows:\n        result.append(matrix[row][col])\n        if direction == 1:\n            if col + 1 < cols:\n                col += 1\n            else:\n                row += 1\n                direction = -1\n        else:\n            if col - 1 >= 0:\n                col -= 1\n            else:\n                row += 1\n                direction = 1\n\n    return result\n"}
{"task_id": "EvoEval/6", "completion": "\n    rows = len(grid)\n    cols = len(grid[0])\n    x, y = position\n\n    # Check if the position is out of bounds\n    if x < 0 or x >= rows or y < 0 or y >= cols:\n        return grid\n\n    # Check if the clicked cell is already revealed or a mine\n    if grid[x][y] == 0 or grid[x][y] == 1:\n        return grid\n\n    # If the clicked cell is unknown, reveal it and its adjacent cells\n    if grid[x][y] == -1:\n        grid[x][y] = 0\n        for i in range(max(0, x-1), min(rows, x+2)):\n            for j in range(max(0, y-1), min(cols, y+2)):\n                if grid[i][j] == -1:\n                    grid[i][j] = 0\n\n    return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\n    for direction in code_sequence:\n        if direction == 0:\n            y += 1\n        elif direction == 1:\n            x += 1\n        elif direction == 2:\n            y -= 1\n        elif direction == 3:\n            x -= 1\n    \n    if x == 0 and y == 0:\n        return 'Shangri-La found'\n    else:\n        return 'Shangri-La not found'\n"}
{"task_id": "EvoEval/8", "completion": "\n    # Check if there is exactly one painter 'P'\n    if canvas.count('P') != 1:\n        return 'Invalid canvas'\n    \n    # Find the position of the painter 'P'\n    painter_pos = canvas.index('P')\n    \n    # Initialize the left and right boundaries for painting\n    left_bound = painter_pos\n    right_bound = painter_pos\n    \n    # Expand to the left until a wall '#' is encountered\n    while left_bound > 0 and canvas[left_bound - 1] != '#':\n        left_bound -= 1\n    \n    # Expand to the right until a wall '#' is encountered\n    while right_bound < len(canvas) - 1 and canvas[right_bound + 1] != '#':\n        right_bound += 1\n    \n    # Create the new canvas with painted spaces\n    new_canvas = list(canvas)\n    for i in range(left_bound, right_bound + 1):\n        if new_canvas[i] == '-':\n            new_canvas[i] = '*'\n    \n    # Convert the list back to a string\n    return ''.join(new_canvas)\n"}
{"task_id": "EvoEval/9", "completion": "\n    import string\n\n    # Remove punctuation and convert to lowercase\n    translator = str.maketrans('', '', string.punctuation)\n    cleaned_string = string.translate(translator).lower()\n    \n    # Split the string into words\n    words = cleaned_string.split()\n    \n    # Calculate word frequency\n    word_frequency = {}\n    for word in words:\n        if word in word_frequency:\n            word_frequency[word] += 1\n        else:\n            word_frequency[word] = 1\n    \n    return word_frequency\n"}
{"task_id": "EvoEval/10", "completion": "\n    animal_counts = []\n    animal_appearances = {'C': 0, 'D': 0, 'B': 0}\n    total_animals = 0\n\n    for animal_sound in animal_string.split():\n        if total_animals >= 5:\n            break\n\n        animal = animal_sound[0]\n        if animal in animal_appearances and animal_appearances[animal] < 2:\n            sound_count = len(animal_sound) - 1\n            animal_counts.append(sound_count)\n            animal_appearances[animal] += 1\n            total_animals += 1\n\n    return animal_counts\n"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh, are those {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh, are those {fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"Oh, are those {', '.join(fruits[:-1])} and {fruits[-1]} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n\n    # Count the occurrences of each element\n    counts = Counter(flux_values)\n    \n    # Find the element with the maximum occurrence\n    most_common_element = min(counts, key=lambda x: (-counts[x], x))\n    \n    # Calculate the sum of all elements in the list\n    total_sum = sum(flux_values)\n    \n    # Multiply the sum with the most occurred element\n    energy_signature = total_sum * most_common_element\n    \n    return energy_signature\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    \n    frequency = {}\n    for elem in elems:\n        if elem in frequency:\n            frequency[elem] += 1\n        else:\n            frequency[elem] = 1\n    \n    rarest_count = min(frequency.values())\n    for elem in elems:\n        if frequency[elem] == rarest_count:\n            return elem\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n\n    for char in name:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                next_vowel = vowels[(index + 1) % len(vowels)]\n                alias += next_vowel.upper() if char.isupper() else next_vowel\n            else:\n                index = consonants.index(char.lower())\n                next_consonant = consonants[(index + 1) % len(consonants)]\n                alias += next_consonant.upper() if char.isupper() else next_consonant\n        else:\n            alias += char\n\n    return alias\n"}
{"task_id": "EvoEval/15", "completion": "\n    # Extract the values from the hand\n    values = [card[:-1] for card in hand]\n    \n    # Convert face cards to numerical values\n    value_map = {'A': '1', 'J': '11', 'Q': '12', 'K': '13'}\n    values = [value_map[v] if v in value_map else v for v in values]\n    \n    # Convert values to integers\n    values = list(map(int, values))\n    \n    # Count the occurrences of each value\n    from collections import Counter\n    value_counts = Counter(values)\n    \n    # Calculate the score based on the rules\n    score = 0\n    for value, count in value_counts.items():\n        if count == 2:\n            score += value\n        elif count == 3:\n            score += value * 2\n        elif count == 4:\n            score += value * 3\n        elif count == 5:\n            score += value * 4\n    \n    return score\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n <= 0:\n        return 0\n    \n    fib_sequence = [0, 1]\n    for i in range(2, n):\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n    \n    return sum(fib_sequence[:n])\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard, power in wizards:\n        dragon_hp -= power\n        if dragon_hp <= 0:\n            return wizard\n    return 'The dragon won!'\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    num = 0\n    while count < n:\n        num += 7\n        if sum(int(digit) for digit in str(num)) == 7:\n            count += 1\n    return num\n"}
{"task_id": "EvoEval/19", "completion": "\n    rows = len(m)\n    cols = len(m[0])\n    danger_count = 0\n\n    for r in range(rows):\n        for c in range(cols):\n            if m[r][c] == 2:\n                # Check the row\n                for col in range(cols):\n                    if m[r][col] == 1:\n                        danger_count += 1\n                        m[r][col] = 0  # Mark as counted\n                # Check the column\n                for row in range(rows):\n                    if m[row][c] == 1:\n                        danger_count += 1\n                        m[row][c] = 0  # Mark as counted\n\n    return danger_count\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    \n    result = []\n    \n    # Generate ascending patterns\n    for i in range(1, n + 1):\n        result.append(','.join(map(str, range(1, i + 1))))\n    \n    # Generate descending patterns\n    for i in range(n, 0, -1):\n        result.append(','.join(map(str, range(n, i - 1, -1))))\n    \n    return result\n"}
{"task_id": "EvoEval/21", "completion": "\n    def find_word_in_grid(word, grid):\n        n = len(grid)\n        word_len = len(word)\n        \n        # Check rows for the word\n        for row in range(n):\n            for col in range(n - word_len + 1):\n                if ''.join(grid[row][col:col+word_len]) == word:\n                    return True\n                if ''.join(grid[row][col:col+word_len][::-1]) == word:\n                    return True\n        \n        # Check columns for the word\n        for col in range(n):\n            for row in range(n - word_len + 1):\n                if ''.join(grid[row+i][col] for i in range(word_len)) == word:\n                    return True\n                if ''.join(grid[row+i][col] for i in range(word_len)[::-1]) == word:\n                    return True\n        \n        return False\n\n    for word in words:\n        if not find_word_in_grid(word, grid):\n            return False\n    \n    return True\n"}
{"task_id": "EvoEval/22", "completion": "\n    distance_km = t * v * 365.25 * 24 * 3600  # Convert years to seconds and multiply by velocity\n    distance_ly = distance_km / 9.461e12  # Convert km to light years\n    return distance_ly\n"}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def nth_prime(n):\n        count = 0\n        num = 2\n        while True:\n            if is_prime(num):\n                count += 1\n                if count == n:\n                    return num\n            num += 1\n\n    primes = [nth_prime(i) for i in range(1, 27)]\n    result = []\n\n    for char in s:\n        if 'a' <= char <= 'z':\n            result.append(str(primes[ord(char) - ord('a')]))\n        else:\n            result.append(char)\n\n    return ''.join(result)\n"}
{"task_id": "EvoEval/24", "completion": "\n    translation_map = {\n        'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!',\n        'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=',\n        'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<',\n        'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'\n    }\n    \n    return ''.join(translation_map[char] for char in english_word)\n"}
{"task_id": "EvoEval/25", "completion": "\n    # Split the text into sentences\n    sentences = text.split('. ')\n\n    # Initialize variables to track the frequency and the sentence with the max frequency\n    max_frequency = 0\n    max_frequency_sentence = \"\"\n\n    # Iterate over each sentence\n    for sentence in sentences:\n        # Count the frequency of the word in the current sentence\n        frequency = sentence.lower().split().count(word.lower())\n        \n        # Update the max frequency and sentence if the current frequency is higher\n        if frequency > max_frequency:\n            max_frequency = frequency\n            max_frequency_sentence = sentence.strip()\n\n    # If the word was not found in any sentence, return (0, \"\")\n    if max_frequency == 0:\n        return (0, \"\")\n\n    # Return the frequency and the sentence with the max frequency\n    return (max_frequency, max_frequency_sentence)\n"}
{"task_id": "EvoEval/26", "completion": "\n    def is_valid(x, y):\n        return 0 <= x < len(maze) and 0 <= y < len(maze[0]) and maze[x][y] == 0\n\n    def get_direction(prev, curr):\n        if curr[0] == prev[0]:\n            if curr[1] > prev[1]:\n                return \"right\"\n            else:\n                return \"left\"\n        else:\n            if curr[0] > prev[0]:\n                return \"down\"\n            else:\n                return \"up\"\n\n    if start == end:\n        return []\n\n    queue = [(start, [])]\n    visited = set()\n    visited.add(start)\n\n    while queue:\n        (current, path) = queue.pop(0)\n        x, y = current\n\n        if current == end:\n            return path\n\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if is_valid(nx, ny) and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                new_path = path + [get_direction(current, (nx, ny))]\n                queue.append(((nx, ny), new_path))\n\n    return []\n"}
{"task_id": "EvoEval/27", "completion": "\n    result = []\n    for i in range(0, len(s), n):\n        result.append(s[i:i+n])\n    return result\n"}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n\n    if taxable_income <= 0:\n        return 0.0\n\n    tax = 0.0\n\n    if taxable_income > 130000:\n        tax += (taxable_income - 130000) * 0.30\n        taxable_income = 130000\n\n    if taxable_income > 85000:\n        tax += (taxable_income - 85000) * 0.25\n        taxable_income = 85000\n\n    if taxable_income > 10000:\n        tax += (taxable_income - 10000) * 0.15\n        taxable_income = 10000\n\n    return tax\n"}
{"task_id": "EvoEval/29", "completion": "\n    palindromes = set()\n    \n    # Check all possible substrings\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if substring == substring[::-1]:  # Check if the substring is a palindrome\n                palindromes.add(substring)\n    \n    # Convert the set to a sorted list\n    return sorted(palindromes)\n"}
{"task_id": "EvoEval/30", "completion": "\n    def is_valid(x, y):\n        return 0 <= x < len(maze) and 0 <= y < len(maze[0]) and maze[x][y] == 1\n\n    def bfs(start, end):\n        queue = [(start, [start])]\n        visited = set()\n        visited.add(start)\n\n        while queue:\n            (current, path) = queue.pop(0)\n            x, y = current\n\n            if current == end:\n                return path\n\n            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                nx, ny = x + dx, y + dy\n                if is_valid(nx, ny) and (nx, ny) not in visited:\n                    visited.add((nx, ny))\n                    queue.append(((nx, ny), path + [(nx, ny)]))\n\n        return []\n\n    return bfs(start, end)\n"}
{"task_id": "EvoEval/31", "completion": "\n    # Create a 2D list to store the number of paths to each cell\n    dp = [[0] * n for _ in range(m)]\n    \n    # There is only one way to reach any cell in the first row or first column\n    for i in range(m):\n        dp[i][0] = 1\n    for j in range(n):\n        dp[0][j] = 1\n    \n    # Fill the dp table\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    \n    # The bottom-right corner will have the number of unique paths\n    return dp[m-1][n-1]\n"}
{"task_id": "EvoEval/32", "completion": "\n    shuffled_playlist = playlist[:]\n    playlist_length = len(playlist)\n    \n    for i in range(playlist_length):\n        if \"Rock\" in shuffled_playlist[i]:\n            continue\n        \n        swap_index = seed % playlist_length\n        if swap_index != i:\n            shuffled_playlist[i], shuffled_playlist[swap_index] = shuffled_playlist[swap_index], shuffled_playlist[i]\n        \n        seed = (seed * 16807) % 2147483647\n    \n    return shuffled_playlist\n"}
{"task_id": "EvoEval/33", "completion": "\n    dp = [0] * (n + 1)\n    dp[0] = 1  # There's one way to stay at the bottom (doing nothing)\n\n    for i in range(1, n + 1):\n        for stone in magic_stones:\n            if i - stone >= 0:\n                dp[i] += dp[i - stone]\n\n    return dp[n]\n"}
{"task_id": "EvoEval/34", "completion": "\n    transformation_percentages = [0] * n\n    current_percentage = 0\n\n    for day in range(1, n + 1):\n        if day == m:\n            current_percentage *= 2\n            if current_percentage > 100:\n                current_percentage = 100\n        elif day < m:\n            current_percentage += 10\n            if current_percentage > 100:\n                current_percentage = 100\n        else:\n            current_percentage -= 10\n            if current_percentage < 0:\n                current_percentage = 0\n\n        transformation_percentages[day - 1] = current_percentage\n\n    return transformation_percentages\n"}
{"task_id": "EvoEval/35", "completion": "\n    if email.count(\"@\") != 1:\n        return False\n    \n    local, domain = email.split(\"@\")\n    \n    if not local or not domain:\n        return False\n    \n    if \".\" not in domain:\n        return False\n    \n    return True\n"}
{"task_id": "EvoEval/36", "completion": "\n    integral_coefficients = [0]  # Start with the constant term set to zero\n    for i, coeff in enumerate(xs):\n        integral_coefficients.append(coeff / (i + 1))\n    return integral_coefficients\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    \n    def next_vowel(v):\n        index = vowels.index(v.lower())\n        next_index = (index + 1) % len(vowels)\n        return vowels[next_index].upper() if v.isupper() else vowels[next_index]\n    \n    def next_consonant(c):\n        index = consonants.index(c.lower())\n        next_index = (index + 1) % len(consonants)\n        return consonants[next_index].upper() if c.isupper() else consonants[next_index]\n    \n    transformed = []\n    \n    for char in s:\n        if char.lower() in vowels:\n            transformed.append(next_vowel(char))\n        elif char.lower() in consonants:\n            transformed.append(next_consonant(char))\n        else:\n            transformed.append(char)\n    \n    return ''.join(transformed)\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticon_to_emoji = {\n        \":)\" : \"\ud83d\ude0a\",\n        \":(\" : \"\u2639\ufe0f\",\n        \":D\" : \"\ud83d\ude00\",\n        \";)\" : \"\ud83d\ude09\"\n    }\n    \n    for emoticon, emoji in emoticon_to_emoji.items():\n        sentence = sentence.replace(emoticon, emoji)\n    \n    return sentence\n"}
{"task_id": "EvoEval/39", "completion": "\n    # Create the body of the ASCII art\n    body = \"\"\n    for char in s:\n        body += char * n\n    \n    # Create the top and bottom border\n    border = \"*\" * (len(body) + 2)\n    \n    # Create the framed rows\n    framed_rows = [f\"*{body}*\" for _ in range(n)]\n    \n    # Combine all parts to form the final ASCII art\n    framed_rows.append(border)\n    framed_rows.insert(0, border)\n    \n    return \"\\n\".join(framed_rows)\n"}
{"task_id": "EvoEval/40", "completion": "\n    from itertools import combinations\n\n    def parse_potion(potion):\n        name, power = potion.rsplit(' ', 1)\n        return name, int(power)\n\n    def potion_mixing(potions, target):\n        potions = [parse_potion(p) for p in potions]\n        n = len(potions)\n        \n        for r in range(1, n + 1):\n            for combo in combinations(potions, r):\n                if sum(p[1] for p in combo) == target:\n                    return sorted([p[0] + ' ' + str(p[1]) for p in combo])\n        \n        return []\n"}
{"task_id": "EvoEval/41", "completion": "\n    import heapq\n\n    def spider_web_jump(arr):\n        rows, cols = len(arr), len(arr[0])\n        safe_cell = (0, 0)\n        \n        # Find the safe cell\n        for r in range(rows):\n            for c in range(cols):\n                if arr[r][c] == 0:\n                    safe_cell = (r, c)\n                    break\n        \n        # Priority queue for Dijkstra's algorithm\n        pq = [(0, 0, 0)]  # (energy, row, col)\n        min_energy = [[float('inf')] * cols for _ in range(rows)]\n        min_energy[0][0] = 0\n        \n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n        \n        while pq:\n            current_energy, r, c = heapq.heappop(pq)\n            \n            if (r, c) == safe_cell:\n                return current_energy\n            \n            for dr, dc in directions:\n                nr, nc = r + dr, c + dc\n                if 0 <= nr < rows and 0 <= nc < cols:\n                    new_energy = current_energy + arr[nr][nc]\n                    if new_energy < min_energy[nr][nc]:\n                        min_energy[nr][nc] = new_energy\n                        heapq.heappush(pq, (new_energy, nr, nc))\n        \n        return min_energy[safe_cell[0]][safe_cell[1]]\n"}
{"task_id": "EvoEval/42", "completion": "\n    if not player_input:\n        return (False, None)\n    \n    if 5 in player_input:\n        sorted_rarities = sorted(player_input, reverse=True)\n        if len(sorted_rarities) > 1:\n            return (True, sorted_rarities[1])\n        else:\n            return (True, -1)\n    else:\n        return (False, None)\n"}
{"task_id": "EvoEval/43", "completion": "\n    # Calculate the duration of the trip\n    duration = distance / speed\n    \n    # Calculate the fuel consumption for the trip\n    fuel_consumption = spaceship_weight * planet_gravity * 0.1 * duration\n    \n    # Check if there is enough fuel for the trip\n    if fuel >= fuel_consumption:\n        # Calculate the remaining fuel\n        remaining_fuel = fuel - fuel_consumption\n        # Return the remaining fuel rounded to 2 decimal points\n        return round(remaining_fuel, 2)\n    else:\n        # Return 'Insufficient fuel' if there is not enough fuel\n        return 'Insufficient fuel'\n"}
{"task_id": "EvoEval/44", "completion": "\n    total_weight = sum(q)\n    total_capacity = w + 2 * e\n    \n    return total_weight <= total_capacity\n"}
{"task_id": "EvoEval/45", "completion": "\n    max_view = 0\n    n = len(arr)\n    \n    for i in range(n):\n        left_view = 0\n        right_view = 0\n        \n        # Count hills to the left\n        for j in range(i - 1, -1, -1):\n            if arr[j] <= arr[i]:\n                left_view += 1\n            else:\n                break\n        \n        # Count hills to the right\n        for j in range(i + 1, n):\n            if arr[j] <= arr[i]:\n                right_view += 1\n            else:\n                break\n        \n        # Total view is the sum of left and right views plus the hill itself\n        total_view = left_view + right_view + 1\n        max_view = max(max_view, total_view)\n    \n    return max_view\n"}
{"task_id": "EvoEval/46", "completion": "\n    results = []\n    for case in test_cases:\n        secret_message = ''.join([word[0].lower() for word in case if word[0].isalpha()])\n        if 'Take the cannoli.' in ''.join(case).lower():\n            results.append('Take the cannoli.')\n        else:\n            results.append(secret_message)\n    return results\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n"}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    \n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        \n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n        \n        if inventory[item] <= 0:\n            del inventory[item]\n    \n    return inventory\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code_dict = {\n        '01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E', '0010': 'F', '110': 'G',\n        '0000': 'H', '00': 'I', '0111': 'J', '101': 'K', '0100': 'L', '11': 'M', '10': 'N',\n        '111': 'O', '0110': 'P', '1101': 'Q', '010': 'R', '000': 'S', '1': 'T', '001': 'U',\n        '0001': 'V', '011': 'W', '1001': 'X', '1011': 'Y', '1100': 'Z', '01111': '1',\n        '00111': '2', '00011': '3', '00001': '4', '00000': '5', '10000': '6', '11000': '7',\n        '11100': '8', '11110': '9', '11111': '0'\n    }\n\n    words = msg.split('/')\n    decoded_message = []\n\n    for word in words:\n        characters = word.split()\n        decoded_word = ''.join(morse_code_dict[char] for char in characters)\n        decoded_message.append(decoded_word)\n\n    return ' '.join(decoded_message)\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', \n        'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', \n        'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', \n        'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', \n        'Y': '-.--', 'Z': '--..', ' ': '  '\n    }\n\n    morse_text = []\n    for char in text.upper():\n        if char in morse_code_dict:\n            morse_text.append(morse_code_dict[char])\n    \n    return ' '.join(morse_text)\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not string:\n        return ''\n    if not list_of_alphabets:\n        return string\n    \n    encoded_string = ''\n    for i, char in enumerate(string):\n        encoded_string += list_of_alphabets[i % len(list_of_alphabets)]\n    \n    return encoded_string\n"}
{"task_id": "EvoEval/52", "completion": "\n    fulfilled_orders = 0\n    batches_used = 0\n\n    for order in orders:\n        if order == n:\n            if batches_used < m:\n                fulfilled_orders += 1\n                batches_used += 1\n            else:\n                break\n\n    return fulfilled_orders\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    \n    def next_vowel(v):\n        return vowels[(vowels.index(v.lower()) + 1) % len(vowels)]\n    \n    def next_consonant(c):\n        return consonants[(consonants.index(c.lower()) + 1) % len(consonants)]\n    \n    transformed = []\n    \n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            next_v = next_vowel(char)\n            transformed.append(next_v.upper() if char.isupper() else next_v)\n        elif char.lower() in consonants:\n            next_c = next_consonant(char)\n            transformed.append(next_c.upper() if char.isupper() else next_c)\n        elif char == '?':\n            transformed.append('!' if i % 2 == 0 else '?')\n        elif char == '!':\n            transformed.append('?' if i % 2 == 0 else '!')\n        else:\n            transformed.append(char)\n    \n    return ''.join(transformed)\n"}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for row in range(len(lst)):\n        for col in range(len(lst[row])):\n            if lst[row][col] == star:\n                result.append((row, col))\n    return result\n"}
{"task_id": "EvoEval/55", "completion": "\n    encrypted_message = []\n    for i, char in enumerate(message):\n        if char.isalpha():\n            shift_amount = shift + i\n            if char.islower():\n                new_char = chr((ord(char) - ord('a') + shift_amount) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(char) - ord('A') + shift_amount) % 26 + ord('A'))\n            encrypted_message.append(new_char)\n        else:\n            encrypted_message.append(char)\n    \n    return ''.join(encrypted_message)\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', \n        'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', \n        'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', \n        'y': '-.--', 'z': '--..'\n    }\n\n    morse_code_list = []\n    for word in s.split():\n        morse_word = ' '.join(morse_code_dict[char] for char in word)\n        morse_code_list.append(morse_word)\n    \n    return ' / '.join(morse_code_list)\n"}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        transformed_dish = ''.join(magic_spell[i % len(magic_spell)] for i in range(len(dish)))\n        new_menu[transformed_dish] = price\n    return new_menu\n"}
{"task_id": "EvoEval/58", "completion": "\n    translation = []\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    \n    for word in earth_phrase.split():\n        if word[0] in vowels:\n            suffix = 'xy'\n        else:\n            suffix = 'yz'\n        \n        translated_word = ''\n        for char in word:\n            if char in vowels:\n                translated_word += vowels[(vowels.index(char) + 1) % 5]\n            elif char in consonants:\n                translated_word += consonants[(consonants.index(char) + 1) % 21]\n        \n        translated_word = translated_word.capitalize() + suffix\n        translation.append(translated_word)\n    \n    return '@'.join(translation)\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    \n    sorted_ingredients = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n    return sorted_ingredients\n"}
{"task_id": "EvoEval/60", "completion": "\n    happy_ants_count = 0\n    sugar_locations_set = set(sugar_locations)\n\n    for ant_position, direction in ant_positions:\n        if direction == \"right\":\n            while ant_position < path_length:\n                if ant_position in sugar_locations_set:\n                    happy_ants_count += 1\n                    break\n                ant_position += 1\n        elif direction == \"left\":\n            while ant_position >= 0:\n                if ant_position in sugar_locations_set:\n                    happy_ants_count += 1\n                    break\n                ant_position -= 1\n\n    return happy_ants_count\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    \n    def next_vowel(v):\n        return vowels[(vowels.index(v.lower()) + 1) % len(vowels)]\n    \n    def prev_consonant(c):\n        return consonants[(consonants.index(c.lower()) - 1) % len(consonants)]\n    \n    result = []\n    \n    for i, char in enumerate(s):\n        if char.isalpha():\n            if i % 2 == 1:\n                char = char.swapcase()\n            if char.lower() in vowels:\n                new_char = next_vowel(char)\n                if char.isupper():\n                    new_char = new_char.upper()\n            else:\n                new_char = prev_consonant(char)\n                if char.isupper():\n                    new_char = new_char.upper()\n            result.append(new_char)\n        else:\n            result.append(char)\n    \n    return ''.join(result)\n"}
{"task_id": "EvoEval/62", "completion": "\n    new_recipe = {}\n    for ingredient, quantity in recipe.items():\n        new_recipe[ingredient] = quantity * conversion_factor\n    return new_recipe\n"}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = []\n    current_layer = p\n    \n    while current_layer > 0:\n        pyramid.append(current_layer)\n        if current_layer % 2 == 0:\n            current_layer -= 2\n        else:\n            current_layer -= 3\n    \n    return pyramid\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in range(start, end + 1):\n        if num % divisor == 0 and is_prime(num):\n            result.append(num)\n    \n    return result\n"}
{"task_id": "EvoEval/65", "completion": "\n    if not order:\n        return menu\n\n    final_order = {}\n\n    for food, customizations in order.items():\n        if not customizations:\n            final_order[food] = menu[food]\n            continue\n\n        ingredients = menu[food].copy()\n\n        if \"remove\" in customizations:\n            for ingredient in customizations[\"remove\"]:\n                ingredients.remove(ingredient)\n\n        if \"add\" in customizations:\n            for ingredient in customizations[\"add\"]:\n                ingredients.append(ingredient)\n\n        final_order[food] = ingredients\n\n    return final_order\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def are_anagrams(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    anagram_pairs = []\n\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            if are_anagrams(primes[i], primes[j]):\n                anagram_pairs.append((primes[i], primes[j]))\n\n    anagram_pairs.sort()\n    return anagram_pairs\n"}
{"task_id": "EvoEval/67", "completion": "\n    total_calories = {}\n    \n    for customer in customers:\n        if customer in meals:\n            total_calories[customer] = sum(meal['calories'] for meal in meals[customer])\n        else:\n            total_calories[customer] = 0\n    \n    return total_calories\n"}
{"task_id": "EvoEval/68", "completion": "\n    # First, check if the array is already sorted\n    if arr == sorted(arr):\n        return True\n    \n    # If the array is empty, return True\n    if not arr:\n        return True\n    \n    # Try all possible rotations\n    for _ in range(len(arr)):\n        # Rotate the array\n        arr = arr[-1:] + arr[:-1]\n        \n        # Check if the array can be sorted with one swap\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                # Swap elements at indices i and j\n                arr[i], arr[j] = arr[j], arr[i]\n                \n                # Check if the array is sorted\n                if arr == sorted(arr):\n                    return True\n                \n                # Swap back to the original state\n                arr[i], arr[j] = arr[j], arr[i]\n    \n    # If no rotation and one swap combination results in a sorted array, return False\n    return False\n"}
{"task_id": "EvoEval/69", "completion": "\n    seen = {}\n    for i, card in enumerate(cards):\n        if magicNumber % card == 0:\n            complement = magicNumber // card\n            if complement in seen:\n                return (seen[complement], i)\n        seen[card] = i\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    \n    for i in range(len(path) - 1):\n        current_planet = path[i]\n        next_planet = path[i + 1]\n        \n        if current_planet not in planets or next_planet not in planets[current_planet]:\n            return False\n    \n    return True\n"}
{"task_id": "EvoEval/71", "completion": "\n    def shift_char(c, n):\n        if c.isalpha():\n            base = ord('A') if c.isupper() else ord('a')\n            return chr((ord(c) - base + n) % 26 + base)\n        return c\n\n    encrypted_string = ''.join(shift_char(c, n) for c in s)\n    vowel_count = sum(1 for c in encrypted_string if c.lower() in 'aeiou')\n    \n    return (encrypted_string, vowel_count)\n"}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for i, s in enumerate(lst):\n        digit_count = sum(c.isdigit() for c in s)\n        story = f\"Once upon a time, in a kingdom far away, lived a magical creature with the name of '{s}' who was known for telling {digit_count} tales a day\"\n        result.append(story)\n    return result\n"}
{"task_id": "EvoEval/73", "completion": "\n    total_treasures = sum(sum(row) for row in grid)\n    \n    if total_treasures == 0:\n        return 0\n    \n    trips_needed = math.ceil(total_treasures / bag_capacity)\n    \n    # Each trip involves entering and exiting the pyramid\n    return trips_needed * 2\n"}
{"task_id": "EvoEval/74", "completion": "\n    if not s:\n        return \"\"\n    \n    result = []\n    for char in s:\n        if char in cipher:\n            result.append(cipher[char])\n        else:\n            result.append(char)\n    \n    return ''.join(result)\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = []\n\n    for i, char in enumerate(input_str):\n        if char.lower() in vowels:\n            next_vowel = vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n            result.append(next_vowel.upper() if char.isupper() else next_vowel)\n        elif char.lower() in consonants:\n            next_consonant = consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n            result.append(next_consonant.upper() if char.isupper() else next_consonant)\n        elif char.isdigit():\n            result.append(str((int(char) + 1) % 10))\n        elif char in '?!':\n            if i % 2 == 0:\n                result.append('!' if char == '?' else '?')\n            else:\n                result.append(char)\n        else:\n            result.append(char)\n\n    return ''.join(result)\n"}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    \n    pyramid = []\n    for num in lst:\n        pyramid.append('#' * num)\n    \n    return pyramid[::-1]\n"}
{"task_id": "EvoEval/77", "completion": "\n    def calculate_points(num, k):\n        points = 0\n        while num > 1:\n            if num % k == 0:\n                num //= k\n                points += 1\n            else:\n                break\n        return points\n\n    points_list = [(num, calculate_points(num, k)) for num in sequence]\n    sorted_points_list = sorted(points_list, key=lambda x: x[1], reverse=True)\n    \n    return [points for num, points in sorted_points_list]\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    result = []\n    \n    # Collect elements from the main diagonal (top-left to bottom-right)\n    for i in range(n):\n        result.append(mat[i][i])\n    \n    # Collect elements from the anti-diagonal (top-right to bottom-left)\n    for i in range(n):\n        result.append(mat[i][n - 1 - i])\n    \n    return result\n"}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    min_price = float('inf')\n    \n    for i in range(days):\n        if prices[i] < min_price:\n            min_price = prices[i]\n        elif prices[i] - min_price > max_profit:\n            max_profit = prices[i] - min_price\n    \n    return max_profit\n"}
{"task_id": "EvoEval/80", "completion": "\n    directions = {\n        'up': (-1, 0),\n        'down': (1, 0),\n        'left': (0, -1),\n        'right': (0, 1)\n    }\n\n    start_row, start_col = None, None\n    for r in range(len(map)):\n        for c in range(len(map[r])):\n            if map[r][c] == 'S':\n                start_row, start_col = r, c\n                break\n        if start_row is not None:\n            break\n\n    if start_row is None:\n        return []\n\n    path = [(start_row, start_col)]\n    current_row, current_col = start_row, start_col\n\n    for instruction in instructions:\n        move = directions.get(instruction)\n        if move:\n            new_row, new_col = current_row + move[0], current_col + move[1]\n            if (0 <= new_row < len(map)) and (0 <= new_col < len(map[0])) and map[new_row][new_col] != 'X':\n                current_row, current_col = new_row, new_col\n                path.append((current_row, current_col))\n                if map[current_row][current_col] == 'E':\n                    return path\n\n    return path\n"}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    \n    # Create a mapping from alien dictionary characters to their order\n    alien_order = {char: idx for idx, char in enumerate(alien_dictionary)}\n    \n    # Compare each word with the next one\n    for i in range(len(word_list) - 1):\n        word1, word2 = word_list[i], word_list[i + 1]\n        min_len = min(len(word1), len(word2))\n        \n        for j in range(min_len):\n            if word1[j] != word2[j]:\n                if alien_order[word1[j]] > alien_order[word2[j]]:\n                    return \"INCORRECT\"\n                break\n        else:\n            # If all characters are the same in the shorter word, the shorter word should come first\n            if len(word1) > len(word2):\n                return \"INCORRECT\"\n    \n    return \"CORRECT\"\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n\n    elements = {\n        'Fire': 0,\n        'Water': 0,\n        'Air': 0,\n        'Earth': 0\n    }\n\n    zodiac_dates = [\n        (range(321, 420), 'Fire'),  # Aries\n        (range(420, 521), 'Earth'),  # Taurus\n        (range(521, 621), 'Air'),  # Gemini\n        (range(621, 723), 'Water'),  # Cancer\n        (range(723, 823), 'Fire'),  # Leo\n        (range(823, 923), 'Earth'),  # Virgo\n        (range(923, 1023), 'Air'),  # Libra\n        (range(1023, 1122), 'Water'),  # Scorpio\n        (range(1122, 1222), 'Fire'),  # Sagittarius\n        ((range(1222, 1232), range(101, 120)), 'Earth'),  # Capricorn\n        (range(120, 219), 'Air'),  # Aquarius\n        (range(219, 321), 'Water')  # Pisces\n    ]\n\n    for birthday in birthdays:\n        year, month, day = map(int, birthday.split('-'))\n        date_number = month * 100 + day\n\n        for dates, element in zodiac_dates:\n            if isinstance(dates, tuple):\n                if any(date_number in date_range for date_range in dates):\n                    elements[element] += 1\n                    break\n            else:\n                if date_number in dates:\n                    elements[element] += 1\n                    break\n\n    return {k: v for k, v in elements.items() if v > 0}\n"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = \"aeiouAEIOU\"\n    s_list = list(s)\n    i, j = 0, len(s) - 1\n    \n    while i < j:\n        if s_list[i] in vowels and s_list[j] in vowels:\n            s_list[i], s_list[j] = s_list[j], s_list[i]\n            i += 1\n            j -= 1\n        elif s_list[i] not in vowels:\n            i += 1\n        elif s_list[j] not in vowels:\n            j -= 1\n    \n    return ''.join(s_list)\n"}
{"task_id": "EvoEval/84", "completion": "\n    def traverse(node, current_path, all_paths):\n        current_path.append(node)\n        if not tree[node]:  # If it's a leaf node\n            all_paths.append(current_path.copy())\n        else:\n            for child in tree[node]:\n                traverse(child, current_path, all_paths)\n        current_path.pop()\n\n    all_paths = []\n    root = next(iter(tree))\n    traverse(root, [], all_paths)\n    return all_paths\n"}
{"task_id": "EvoEval/85", "completion": "\n    def is_valid_move(x, y, grid):\n        return 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] == 0\n\n    def bfs(start, end, grid):\n        queue = [(start[0], start[1], 0)]\n        visited = set()\n        visited.add(start)\n        \n        while queue:\n            x, y, dist = queue.pop(0)\n            \n            if (x, y) == end:\n                return dist\n            \n            for dx, dy in [(0, 1), (1, 0)]:\n                nx, ny = x + dx, y + dy\n                if is_valid_move(nx, ny, grid) and (nx, ny) not in visited:\n                    visited.add((nx, ny))\n                    queue.append((nx, ny, dist + 1))\n        \n        return -1\n\n    start = (0, 0)\n    end = coord\n    \n    if not is_valid_move(start[0], start[1], grid) or not is_valid_move(end[0], end[1], grid):\n        return -1\n    \n    return bfs(start, end, grid)\n"}
{"task_id": "EvoEval/86", "completion": "\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n    return [movie[0] for movie in sorted_movies]\n"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return \"\"\n\n    top, bottom = 0, len(arr) - 1\n    left, right = 0, len(arr[0]) - 1\n    result = []\n\n    while top <= bottom and left <= right:\n        # Traverse from left to right along the top row\n        for i in range(left, right + 1):\n            result.append(arr[top][i])\n        top += 1\n\n        # Traverse from top to bottom along the right column\n        for i in range(top, bottom + 1):\n            result.append(arr[i][right])\n        right -= 1\n\n        if top <= bottom:\n            # Traverse from right to left along the bottom row\n            for i in range(right, left - 1, -1):\n                result.append(arr[bottom][i])\n            bottom -= 1\n\n        if left <= right:\n            # Traverse from bottom to top along the left column\n            for i in range(bottom, top - 1, -1):\n                result.append(arr[i][left])\n            left += 1\n\n    return ''.join(result)\n"}
{"task_id": "EvoEval/88", "completion": "\n    result = {}\n    for planet, features in dict_of_planets.items():\n        population, size = features\n        if population is not None and size is not None and population > 0 and size > 0:\n            density = round(population / size, 2)\n            result[planet] = density\n    return result\n"}
{"task_id": "EvoEval/89", "completion": "\n    # Create a set of the remaining aliens' positions\n    remaining_aliens = set(aliens)\n    \n    # Remove the alien at the aimed position\n    remaining_aliens.discard(ray)\n    \n    # Remove the aliens at the adjacent positions\n    remaining_aliens.discard(ray - 1)\n    remaining_aliens.discard(ray + 1)\n    \n    # Convert the set back to a sorted list\n    return sorted(remaining_aliens)\n"}
{"task_id": "EvoEval/90", "completion": "\n    # Convert the input strings to lists of integers\n    digits1 = [int(d) for d in s1]\n    digits2 = [int(d) for d in s2]\n    \n    # Initialize the result\n    result = 0\n    \n    # Calculate the sum of all unique combinations of digits\n    for d1 in digits1:\n        for d2 in digits2:\n            result += d1 + d2\n    \n    return result\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if action == 'Launch':\n            if status == 'On Ground':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Move':\n            if status == 'In Space':\n                continue\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Land':\n            if status == 'In Space':\n                status = 'On Ground'\n            else:\n                return 'Invalid Action Sequence'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    result = []\n    max_width = 2 * n - 1\n    for i in range(n):\n        letter = chr(ord('A') + i % 26)\n        layer = letter * (2 * i + 1)\n        centered_layer = layer.center(max_width)\n        result.append(centered_layer)\n    \n    return '\\n'.join(result)\n"}
{"task_id": "EvoEval/93", "completion": "\n    encoded_message = []\n    n_values_cycle = itertools.cycle(n_values)\n    \n    for char in message:\n        if char.isalpha():\n            n = next(n_values_cycle)\n            if char.islower():\n                new_char = chr((ord(char) - ord('a') + n) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(char) - ord('A') + n) % 26 + ord('A'))\n            encoded_message.append(new_char)\n        else:\n            encoded_message.append(char)\n    \n    return ''.join(encoded_message)\n"}
{"task_id": "EvoEval/94", "completion": "\n    sorted_spells = []\n    for spell in strings:\n        words = spell.split()\n        sorted_words = sorted(words, key=len)\n        sorted_spells.append(' '.join(sorted_words))\n    return sorted_spells\n"}
{"task_id": "EvoEval/95", "completion": "\n    n = len(m)\n    if any(len(row) != n for row in m):\n        return 'Invalid Matrix'\n    \n    sum_diag1 = sum(m[i][i] for i in range(n))\n    sum_diag2 = sum(m[i][n-i-1] for i in range(n))\n    \n    return abs(sum_diag1 - sum_diag2)\n"}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    \n    for index in range(len(lst)):\n        value = abs(lst[index])\n        \n        if value % index == 0:\n            product_of_digits = 1\n            for digit in str(value):\n                product_of_digits *= int(digit)\n            \n            if product_of_digits == index:\n                magic_indices.append(index)\n    \n    return sorted(magic_indices)\n"}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n\n    continents_order = [\"Asia\", \"Africa\", \"Europe\", \"North America\", \"South America\"]\n    encounter_order = []\n\n    for continent in continents_order:\n        for human, location in humans.items():\n            if location == continent:\n                encounter_order.append(human)\n\n    return encounter_order\n"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[i-1] + sequence[i-2] + (i - 1)\n        sequence.append(next_num)\n    \n    for i in range(len(sequence)):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n    \n    return sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    position = 0\n\n    for round_duration in rounds:\n        position = (position + round_duration * music) % len(players)\n        players.pop(position)\n        if position == len(players):\n            position = 0\n\n    return players\n"}
