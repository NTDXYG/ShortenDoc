{"task_id": "EvoEval/0", "completion": "\n    base_cost = 5.0\n    additional_charge = 10.0\n    total_cost = 0.0\n    string_item = False\n\n    for item in items:\n        if isinstance(item, str):\n            total_cost += base_cost * 1.5\n            string_item = True\n        else:\n            total_cost += base_cost\n            if item > 5:\n                total_cost += additional_charge\n\n    if string_item:\n        total_cost *= 1.5\n\n    if location == \"National\":\n        total_cost *= 1.5\n    elif location == \"International\":\n        total_cost *= 2.5\n\n    return f\"{total_cost:.2f}\"\n"}
{"task_id": "EvoEval/1", "completion": "\n    base_cost = 5.0\n    total_cost = 0.0\n\n    for item in items:\n        weight = item if isinstance(item, float) else 1.0\n        cost = base_cost\n        \n        if weight > 5:\n            cost += 10.0\n        \n        total_cost += cost\n\n    location_factors = {\n        \"Local\": 1.0,\n        \"National\": 1.5,\n        \"International\": 2.5\n    }\n    \n    factor = location_factors.get(location, 1.0)\n    total_cost *= factor\n\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    def calculate_key(key: Union[str, int]) -> int:\n        if isinstance(key, int):\n            return key\n        elif isinstance(key, str):\n            return sum(ord(char) for char in key)\n        return 0\n\n    def shift_letter(letter: str, shift: int) -> str:\n        if letter.isalpha():\n            base = ord('a') if letter.islower() else ord('A')\n            return chr((ord(letter) - base + shift) % 26 + base)\n        return letter\n\n    key_value = calculate_key(key)\n    encrypted_words = []\n\n    for word in words:\n        encrypted_word = ''.join(shift_letter(char.lower(), key_value) for char in word)\n        encrypted_words.append(encrypted_word)\n\n    return encrypted_words\n"}
{"task_id": "EvoEval/3", "completion": "\n    def backtrack(index: int, path: str):\n        if index == len(input_string):\n            combinations.append(path)\n            return\n        \n        # Single digit decoding\n        if index < len(input_string):\n            num = int(input_string[index])\n            if 1 <= num <= 26:\n                backtrack(index + 1, path + chr(num + 96))\n        \n        # Double digit decoding\n        if index + 1 < len(input_string):\n            num = int(input_string[index:index + 2])\n            if 10 <= num <= 26:\n                backtrack(index + 2, path + chr(num + 96))\n\n    combinations = []\n    backtrack(0, \"\")\n    return combinations\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n\n    count = 1  # The first candle is always lit\n    max_height = candles[0]\n\n    for height in candles[1:]:\n        if height > max_height:\n            count += 1\n            max_height = height\n\n    return count\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not matrix:\n        return []\n\n    result = []\n    rows = len(matrix)\n    for i in range(rows):\n        if i % 2 == 0:\n            # Traverse left to right\n            result.extend(matrix[i])\n        else:\n            # Traverse right to left\n            result.extend(reversed(matrix[i]))\n\n    return result\n"}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if not (0 <= x < len(grid) and 0 <= y < len(grid[0])):\n        return grid\n    if grid[x][y] == 1 or grid[x][y] == 0:\n        return grid\n    if grid[x][y] == -1:\n        grid[x][y] = 0\n\n    directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]\n    \n    for dx, dy in directions:\n        nx, ny = x + dx, y + dy\n        if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and grid[nx][ny] == 0:\n            grid[nx][ny] = 0\n\n    return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\r\n\r\n    for direction in code_sequence:\r\n        if direction == 0:  # North\r\n            y += 1\r\n        elif direction == 1:  # East\r\n            x += 1\r\n        elif direction == 2:  # South\r\n            y -= 1\r\n        elif direction == 3:  # West\r\n            x -= 1\r\n\r\n    if x == 0 and y == 0:\r\n        return 'Shangri-La found'\r\n    else:\r\n        return 'Shangri-La not found'\r\n"}
{"task_id": "EvoEval/8", "completion": "\n    if canvas.count('P') != 1:\n        return 'Invalid canvas'\n    \n    painter_index = canvas.index('P')\n    left_index = painter_index\n    right_index = painter_index\n    \n    # Move left\n    while left_index > 0 and canvas[left_index - 1] != '#':\n        left_index -= 1\n    \n    # Move right\n    while right_index < len(canvas) - 1 and canvas[right_index + 1] != '#':\n        right_index += 1\n    \n    # Count empty spaces and painted spaces\n    empty_spaces = canvas.count('-')\n    painted_spaces = (right_index - left_index + 1) - (canvas[left_index:right_index + 1].count('#') + 1)\n    \n    # Check if painted spaces divide empty spaces evenly\n    if painted_spaces > 0 and empty_spaces % painted_spaces == 0:\n        return 'Invalid canvas'\n    \n    # Create the transformed canvas\n    transformed_canvas = list(canvas)\n    for i in range(left_index, right_index + 1):\n        if transformed_canvas[i] == '-':\n            transformed_canvas[i] = '*'\n    \n    return ''.join(transformed_canvas)\n"}
{"task_id": "EvoEval/9", "completion": "\n    import string as str_module\n\n    # Remove punctuation and convert to lower case\n    translator = str_module.maketrans('', '', str_module.punctuation)\n    cleaned_string = string.translate(translator).lower()\n    \n    # Split the string into words\n    words = cleaned_string.split()\n    \n    # Calculate frequency\n    frequency = {}\n    for word in words:\n        frequency[word] = frequency.get(word, 0) + 1\n    \n    return frequency\n"}
{"task_id": "EvoEval/10", "completion": "\n    animal_count = {}\n    valid_animals = {'C': 'Cat', 'D': 'Dog', 'B': 'Bird'}\n    sounds = animal_string.split()\n    \n    for sound in sounds:\n        if len(animal_count) >= 5:\n            break\n        \n        animal = sound[0]\n        if animal in valid_animals:\n            count = sound.count('|')\n            if animal not in animal_count:\n                animal_count[animal] = count\n            elif animal_count[animal] < 2:\n                animal_count[animal] += count\n            \n            if animal_count[animal] == 2:\n                del animal_count[animal]\n    \n    return list(animal_count.values())\n"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh, are those {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh, are those {fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"Oh, are those {', '.join(fruits[:-1])} and {fruits[-1]} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n\n    # Count the occurrences of each element\n    count = Counter(flux_values)\n    \n    # Find the element with maximum occurrence (and the smallest in case of a tie)\n    most_common_value = min((num for num, freq in count.items() if freq == max(count.values())))\n\n    # Calculate the sum of all elements\n    total_sum = sum(flux_values)\n\n    # Calculate the unique energy signature\n    unique_energy_signature = total_sum * most_common_value\n\n    return unique_energy_signature\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n\n    frequency = {}\n    for elem in elems:\n        frequency[elem] = frequency.get(elem, 0) + 1\n\n    rarest_elem = None\n    rarest_count = float('inf')\n\n    for elem in elems:\n        if frequency[elem] < rarest_count:\n            rarest_count = frequency[elem]\n            rarest_elem = elem\n\n    return rarest_elem\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    \n    def next_vowel(c):\n        return vowels[(vowels.index(c.lower()) + 1) % len(vowels)].upper() if c.isupper() else vowels[(vowels.index(c) + 1) % len(vowels)]\n    \n    def next_consonant(c):\n        return consonants[(consonants.index(c.lower()) + 1) % len(consonants)].upper() if c.isupper() else consonants[(consonants.index(c) + 1) % len(consonants)]\n    \n    alias = []\n    \n    for char in name:\n        if char.isalpha():\n            if char.lower() in vowels:\n                alias.append(next_vowel(char))\n            elif char.lower() in consonants:\n                alias.append(next_consonant(char))\n            else:\n                alias.append(char)\n        else:\n            alias.append(char)\n    \n    return ''.join(alias)\n"}
{"task_id": "EvoEval/15", "completion": "\n    value_count = {}\n    \n    for card in hand:\n        value = card[:-1]  # Get the value part of the card\n        if value == 'A':\n            value = 1\n        elif value == 'J':\n            value = 11\n        elif value == 'Q':\n            value = 12\n        elif value == 'K':\n            value = 13\n        else:\n            value = int(value)\n        \n        if value in value_count:\n            value_count[value] += 1\n        else:\n            value_count[value] = 1\n\n    score = 0\n    for value, count in value_count.items():\n        if count == 2:  # Pair\n            score += value\n        elif count == 3:  # Triple\n            score += 2 * value\n        elif count == 4:  # Four of a kind\n            score += 3 * value\n        elif count == 5:  # Five of a kind\n            score += 4 * value\n\n    return score\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    a, b = 0, 1\n    total = a + b\n\n    for _ in range(3, n + 1):\n        a, b = b, a + b\n        total += b\n\n    return total\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard, power in wizards:\n        dragon_hp -= power\n        if dragon_hp <= 0:\n            return wizard\n    return 'The dragon won!'\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    num = 7\n    while count < n:\n        if num % 7 == 0 and sum(int(digit) for digit in str(num)) == 7:\n            count += 1\n        if count < n:\n            num += 7\n    return num\n"}
{"task_id": "EvoEval/19", "completion": "\n    rows = len(m)\n    cols = len(m[0]) if rows > 0 else 0\n\n    danger_rows = set()\n    danger_cols = set()\n\n    for i in range(rows):\n        for j in range(cols):\n            if m[i][j] == 2:  # Found a vampire\n                danger_rows.add(i)\n                danger_cols.add(j)\n\n    danger_humans = 0\n    for i in range(rows):\n        for j in range(cols):\n            if m[i][j] == 1:  # Found a human\n                if i in danger_rows or j in danger_cols:\n                    danger_humans += 1\n\n    return danger_humans\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n\n    pattern = []\n    \n    # Ascending part\n    for i in range(1, n + 1):\n        pattern.append(','.join(str(x) for x in range(1, i + 1)))\n    \n    # Descending part\n    for i in range(n, 0, -1):\n        pattern.append(','.join(str(x) for x in range(i, 0, -1)))\n    \n    return pattern\n"}
{"task_id": "EvoEval/21", "completion": "\n    def find_word_in_grid(word):\n        word_length = len(word)\n        \n        # Check rows\n        for row in grid:\n            if ''.join(row).find(word) != -1 or ''.join(row[::-1]).find(word) != -1:\n                return True\n        \n        # Check columns\n        for col in range(len(grid)):\n            column_string = ''.join(grid[row][col] for row in range(len(grid)))\n            if column_string.find(word) != -1 or column_string[::-1].find(word) != -1:\n                return True\n        \n        return False\n\n    for word in words:\n        if not find_word_in_grid(word):\n            return False\n            \n    return True\n"}
{"task_id": "EvoEval/22", "completion": "\n    light_year_km = 9.461e12\n    distance_km = v * t * 365.25 * 24 * 3600  # Convert time to seconds\n    distance_ly = distance_km / light_year_km\n    return distance_ly\n"}
{"task_id": "EvoEval/23", "completion": "\n    def nth_prime(n: int) -> int:\n        \"\"\"Return the n-th prime number.\"\"\"\n        primes = []\n        candidate = 2\n        while len(primes) < n:\n            for p in primes:\n                if candidate % p == 0:\n                    break\n            else:\n                primes.append(candidate)\n            candidate += 1\n        return primes[-1]\n\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            index = ord(char) - ord('a') + 1\n            result.append(str(nth_prime(index)))\n        else:\n            result.append(char)\n\n    return ''.join(result)\n"}
{"task_id": "EvoEval/24", "completion": "\n    translation_map = {\n        'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!',\n        'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=',\n        'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<',\n        'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'\n    }\n    \n    translated_word = ''.join(translation_map[char] for char in english_word if char in translation_map)\n    \n    return translated_word\n"}
{"task_id": "EvoEval/25", "completion": "\n    sentences = text.split('.')\r\n    frequency = 0\r\n    max_sentence = \"\"\r\n    \r\n    for sentence in sentences:\r\n        count = sentence.lower().split().count(word.lower())\r\n        if count > frequency:\r\n            frequency = count\r\n            max_sentence = sentence.strip()\r\n    \r\n    return (frequency, max_sentence)\r\n"}
{"task_id": "EvoEval/26", "completion": "\n    if start == end:\n        return []\n\n    rows, cols = len(maze), len(maze[0])\n    directions = []\n    visited = set()\n    queue = [(start, [])]\n\n    while queue:\n        (current_row, current_col), path = queue.pop(0)\n\n        if (current_row, current_col) == end:\n            return path\n\n        if (current_row, current_col) in visited:\n            continue\n\n        visited.add((current_row, current_col))\n\n        for dr, dc, direction in [(-1, 0, \"up\"), (1, 0, \"down\"), (0, -1, \"left\"), (0, 1, \"right\")]:\n            new_row, new_col = current_row + dr, current_col + dc\n\n            if 0 <= new_row < rows and 0 <= new_col < cols and maze[new_row][new_col] == 0:\n                queue.append(((new_row, new_col), path + [direction]))\n\n    return []\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    # Calculate taxable income after deductions\n    if deductions <= 1000:\n        taxable_income = income - deductions\n    elif deductions <= 3000:\n        taxable_income = income - (deductions - 1000) / 2 - 1000\n    else:\n        taxable_income = income - (deductions - 3000) / 3 - 1000 - 1000\n\n    # Initialize tax variable\n    tax = 0.0\n\n    # Calculate tax based on taxable income\n    if taxable_income > 130000:\n        tax += (taxable_income - 130000) * 0.30\n        taxable_income = 130000\n    if taxable_income > 85000:\n        tax += (taxable_income - 85000) * 0.25\n        taxable_income = 85000\n    if taxable_income > 10000:\n        tax += (taxable_income - 10000) * 0.15\n\n    return tax\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(sub: str) -> bool:\n        return sub == sub[::-1]\n\n    unique_palindromes = set()\n\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if is_palindrome(substring):\n                unique_palindromes.add(substring)\n\n    return sorted(unique_palindromes)\n"}
{"task_id": "EvoEval/30", "completion": "\n    from collections import deque\n\n    rows, cols = len(maze), len(maze[0])\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    queue = deque([start])\n    visited = set()\n    visited.add(start)\n    parent = {start: None}\n\n    while queue:\n        current = queue.popleft()\n        \n        if current == end:\n            path = []\n            while current is not None:\n                path.append(current)\n                current = parent[current]\n            return path[::-1]\n\n        for direction in directions:\n            neighbor = (current[0] + direction[0], current[1] + direction[1])\n            if (0 <= neighbor[0] < rows and \n                0 <= neighbor[1] < cols and \n                maze[neighbor[0]][neighbor[1]] == 1 and \n                neighbor not in visited):\n                visited.add(neighbor)\n                parent[neighbor] = current\n                queue.append(neighbor)\n\n    return []\n"}
{"task_id": "EvoEval/31", "completion": "\n    # Create a 2D array to store the number of unique paths to each cell\n    dp = [[1] * n for _ in range(m)]\n\n    # Fill the dp array\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n\n    return dp[m - 1][n - 1]\n"}
{"task_id": "EvoEval/32", "completion": "\n    playlist_length = len(playlist)\n    shuffled_playlist = playlist[:]\n    \n    for i in range(playlist_length):\n        if \"Rock\" in shuffled_playlist[i]:\n            continue\n        \n        swap_index = seed % playlist_length\n        shuffled_playlist[i], shuffled_playlist[swap_index] = shuffled_playlist[swap_index], shuffled_playlist[i]\n        \n        seed = (seed * 16807) % 2147483647\n    \n    return shuffled_playlist\n"}
{"task_id": "EvoEval/33", "completion": "\n    ways = [0] * (n + 1)\n    ways[0] = 1  # There's one way to stay at the ground (do nothing)\n\n    for step in range(1, n + 1):\n        for stone in magic_stones:\n            if step - stone >= 0:\n                ways[step] += ways[step - stone]\n\n    return ways[n]\n"}
{"task_id": "EvoEval/34", "completion": "\n    transformation = []\n    current_percentage = 0\n\n    for day in range(1, n + 1):\n        if day == m:\n            current_percentage = min(current_percentage * 2, 100)\n        else:\n            if day < m:\n                current_percentage = min(current_percentage + 10, 100)\n            else:\n                current_percentage = max(current_percentage - 10, 0)\n\n        transformation.append(current_percentage)\n\n    return transformation\n"}
{"task_id": "EvoEval/35", "completion": "\n    at_symbol_index = email.find('@')\n    if at_symbol_index == -1 or at_symbol_index == 0 or at_symbol_index == len(email) - 1:\n        return False\n    \n    if email.count('@') > 1:\n        return False\n    \n    domain_part = email[at_symbol_index + 1:]\n    return '.' in domain_part\n"}
{"task_id": "EvoEval/36", "completion": "\n    integral_coeffs = [0]  # Start with the constant of integration set to zero\n    for i in range(len(xs)):\n        integral_coeffs.append(xs[i] / (i + 1))\n    return integral_coeffs\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = []\n\n    for char in s:\n        if char.lower() in vowels:\n            next_vowel = vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n            transformed.append(next_vowel.upper() if char.isupper() else next_vowel)\n        elif char.lower() in consonants:\n            next_consonant = consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n            transformed.append(next_consonant.upper() if char.isupper() else next_consonant)\n        else:\n            transformed.append(char)\n\n    return ''.join(transformed)\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticon_map = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\": \"\ud83d\ude09\"\n    }\n\n    for emoticon, emoji in emoticon_map.items():\n        sentence = sentence.replace(emoticon, emoji)\n\n    return sentence\n"}
{"task_id": "EvoEval/39", "completion": "\n    # Create the middle part of the ASCII art\n    middle_part = ''.join(char * n for char in s)\n    \n    # Create the top and bottom frame\n    top_bottom_frame = '*' * (len(middle_part) + 2)\n    \n    # Create the full ASCII art\n    art = [top_bottom_frame] + [f\"*{middle_part}*\"] * n + [top_bottom_frame]\n    \n    return '\\n'.join(art)\n"}
{"task_id": "EvoEval/40", "completion": "\n    from itertools import combinations\n"}
{"task_id": "EvoEval/41", "completion": "\n    from collections import deque\n\n    def is_valid(x, y):\n        return 0 <= x < len(arr) and 0 <= y < len(arr[0])\n\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    min_energy = [[float('inf')] * len(arr[0]) for _ in range(len(arr))]\n    min_energy[0][0] = arr[0][0]\n    queue = deque([(0, 0)])\n\n    while queue:\n        x, y = queue.popleft()\n\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if is_valid(nx, ny):\n                new_energy = min_energy[x][y] + arr[nx][ny]\n                if new_energy < min_energy[nx][ny]:\n                    min_energy[nx][ny] = new_energy\n                    queue.append((nx, ny))\n\n    # Find the minimum energy to reach the safe cell (0)\n    safe_cell_energy = float('inf')\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if arr[i][j] == 0:\n                safe_cell_energy = min(safe_cell_energy, min_energy[i][j])\n\n    return safe_cell_energy\n"}
{"task_id": "EvoEval/42", "completion": "\n    def find_legendary_item(player_input):\n    if not player_input:\n        return (False, None)\n    \n    unique_items = set(player_input)\n    \n    if 5 in unique_items:\n        unique_items.remove(5)\n        if unique_items:\n            return (True, max(unique_items))\n        else:\n            return (True, -1)\n    \n    return (False, None)\n"}
{"task_id": "EvoEval/43", "completion": "\n    travel_time = distance / speed\n    fuel_consumption_per_year = spaceship_weight * planet_gravity * 0.1\n    total_fuel_consumed = fuel_consumption_per_year * travel_time\n\n    if fuel >= travel_time:\n        remaining_fuel = fuel - total_fuel_consumed\n        return round(remaining_fuel, 2)\n    else:\n        return 'Insufficient fuel'\n"}
{"task_id": "EvoEval/44", "completion": "\n    total_weight = sum(q)\n    unicorns_capacity = w\n    dragons_and_griffins_capacity = 2 * e  # since both dragons and griffins can carry 'e' kg each\n\n    return total_weight <= (unicorns_capacity + dragons_and_griffins_capacity)\n"}
{"task_id": "EvoEval/45", "completion": "\n    def find_castle(arr):\n    max_view = 0\n\n    for i in range(len(arr)):\n        current_height = arr[i]\n        view_count = 0\n\n        # Check to the left\n        for j in range(i - 1, -1, -1):\n            if arr[j] <= current_height:\n                view_count += 1\n            else:\n                break\n\n        # Check to the right\n        for j in range(i + 1, len(arr)):\n            if arr[j] <= current_height:\n                view_count += 1\n            else:\n                break\n\n        # Update max_view if the current view_count is greater\n        max_view = max(max_view, view_count)\n\n    return max_view\n"}
{"task_id": "EvoEval/46", "completion": "\n    def extract_first_letters(words):\n        return ''.join(word[0].lower() for word in words if word)\n\n    results = []\n    for case in test_cases:\n        secret_message = extract_first_letters(case)\n        if secret_message in ''.join(case).lower():\n            results.append(\"Take the cannoli.\")\n        else:\n            results.append(secret_message)\n    \n    return results\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if available.get(ingredient, 0) < quantity:\n            return False\n    return True\n"}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n\n    # Remove items with zero or negative quantity\n    final_inventory = {item: qty for item, qty in inventory.items() if qty > 0}\n\n    return final_inventory\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_dict = {\n        '01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E', '0010': 'F',\n        '110': 'G', '0000': 'H', '00': 'I', '0111': 'J', '101': 'K', '0100': 'L',\n        '11': 'M', '10': 'N', '111': 'O', '0110': 'P', '1101': 'Q', '010': 'R',\n        '000': 'S', '1': 'T', '001': 'U', '0001': 'V', '011': 'W', '1001': 'X',\n        '1011': 'Y', '1100': 'Z', '01111': '1', '00111': '2', '00011': '3',\n        '00001': '4', '00000': '5', '10000': '6', '11000': '7', '11100': '8',\n        '11110': '9', '11111': '0'\n    }\n\n    words = msg.split('/')\n    decoded_message = []\n\n    for word in words:\n        characters = word.split()\n        decoded_word = ''.join(morse_dict[char] for char in characters)\n        decoded_message.append(decoded_word)\n\n    return ' '.join(decoded_message)\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', \n        'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', \n        'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', \n        'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', \n        'Y': '-.--', 'Z': '--..', ' ': '  '\n    }\n    \n    morse_code = []\n    \n    for word in text.split(' '):\n        morse_word = ' '.join(morse_code_dict[char] for char in word)\n        morse_code.append(morse_word)\n    \n    return '   '.join(morse_code)\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not string:\n        return \"\"\n    if not list_of_alphabets:\n        return string\n\n    encoded_string = []\n    for i, char in enumerate(string):\n        encoded_char = list_of_alphabets[i % len(list_of_alphabets)]\n        encoded_string.append(encoded_char)\n\n    return ''.join(encoded_string)\n"}
{"task_id": "EvoEval/52", "completion": "\n    fulfilled_orders = 0\n    for order in orders:\n        if order == n and fulfilled_orders < m:\n            fulfilled_orders += 1\n    return fulfilled_orders\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    transformed = []\n\n    for index, char in enumerate(s):\n        if char in vowels:\n            if char.islower():\n                transformed.append(vowels[(vowels.index(char) + 1) % 5])\n            else:\n                transformed.append(vowels[(vowels.index(char) + 1) % 5].upper())\n        elif char in consonants:\n            if char.islower():\n                transformed.append(consonants[(consonants.index(char) + 1) % 21])\n            else:\n                transformed.append(consonants[(consonants.index(char) + 1) % 21].upper())\n        elif char == '?':\n            if index % 2 == 0:\n                transformed.append('!')\n            else:\n                transformed.append('?')\n        else:\n            transformed.append(char)\n\n    return ''.join(transformed)\n"}
{"task_id": "EvoEval/54", "completion": "\n    coordinates = []\n    for row_index, row in enumerate(lst):\n        for col_index, value in enumerate(row):\n            if value == star:\n                coordinates.append((row_index, col_index))\n    return coordinates\n"}
{"task_id": "EvoEval/55", "completion": "\n    def treasure_map(message, shift):\n    encrypted_message = []\n    \n    for i, char in enumerate(message):\n        if char.isalpha():\n            # Determine the base ASCII value for upper or lower case\n            base = ord('A') if char.isupper() else ord('a')\n            # Calculate the effective shift for this character\n            effective_shift = shift + i + 1\n            # Shift the character and wrap around using modulo\n            new_char = chr(base + (ord(char) - base + effective_shift) % 26)\n            encrypted_message.append(new_char)\n        else:\n            # Non-alphabet characters remain unchanged\n            encrypted_message.append(char)\n    \n    return ''.join(encrypted_message)\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_dict = {\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', \n        'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', \n        'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', \n        'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..'\n    }\n    \n    morse_code = []\n    \n    for word in s.split(' '):\n        morse_word = ' '.join(morse_dict[char] for char in word if char in morse_dict)\n        morse_code.append(morse_word)\n    \n    return ' / '.join(morse_code)\n"}
{"task_id": "EvoEval/57", "completion": "\n    transformed_menu = {}\n    spell_length = len(magic_spell)\n\n    for dish, price in menu.items():\n        transformed_dish = ''.join(magic_spell[i % spell_length] for i in range(len(dish)))\n        transformed_menu[transformed_dish] = price\n\n    return transformed_menu\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    \n    def translate_char(char):\n        if char in vowels:\n            return vowels[(vowels.index(char) + 1) % len(vowels)]\n        elif char in consonants:\n            return consonants[(consonants.index(char) + 1) % len(consonants)]\n        elif char == ' ':\n            return '@'\n        else:\n            return char\n\n    words = earth_phrase.split()\n    translated_words = []\n\n    for word in words:\n        translated_word = ''.join(translate_char(char) for char in word)\n        if word[0] in vowels:\n            translated_word += 'xy'\n        else:\n            translated_word += 'yz'\n        translated_words.append(translated_word.capitalize())\n\n    return ''.join(translated_words)\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    \n    sorted_ingredients = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n    return sorted_ingredients\n"}
{"task_id": "EvoEval/60", "completion": "\n    def happy_ants(path_length, sugar_locations, ant_positions):\n    sugar_set = set(sugar_locations)\n    happy_ants_count = 0\n\n    for position, direction in ant_positions:\n        if direction == \"right\":\n            while position < path_length:\n                if position in sugar_set:\n                    happy_ants_count += 1\n                    break\n                position += 1\n        elif direction == \"left\":\n            while position >= 0:\n                if position in sugar_set:\n                    happy_ants_count += 1\n                    break\n                position -= 1\n\n    return happy_ants_count\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    next_vowel = {vowels[i]: vowels[(i + 1) % len(vowels)] for i in range(len(vowels))}\n    next_vowel.update({vowels[i].upper(): vowels[(i + 1) % len(vowels)].upper() for i in range(len(vowels))})\n\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    prev_consonant = {consonants[i]: consonants[i - 1] for i in range(len(consonants))}\n    prev_consonant.update({consonants[i].upper(): consonants[i - 1].upper() for i in range(len(consonants))})\n\n    result = []\n    for index, char in enumerate(s):\n        if char == ' ':\n            result.append(' ')\n            continue\n        \n        if index % 2 == 1:\n            char = char.swapcase()\n        \n        if char in next_vowel:\n            result.append(next_vowel[char])\n        elif char in prev_consonant:\n            result.append(prev_consonant[char])\n        else:\n            result.append(char)\n\n    return ''.join(result)\n"}
{"task_id": "EvoEval/62", "completion": "\n    converted_recipe = {}\n    for ingredient, quantity in recipe.items():\n        converted_recipe[ingredient] = quantity * conversion_factor\n    return converted_recipe\n"}
{"task_id": "EvoEval/63", "completion": "\n    layers = []\n    while p > 0:\n        layers.append(p)\n        if p % 2 == 0:\n            p -= 2\n        else:\n            p -= 3\n    return layers\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in range(start, end + 1):\n        if num % divisor == 0 and is_prime(num):\n            result.append(num)\n\n    return result\n"}
{"task_id": "EvoEval/65", "completion": "\n    if not order:\n        return menu\n\n    final_order = {}\n    \n    for food, modifications in order.items():\n        if food in menu:\n            ingredients = menu[food][:]\n            if \"remove\" in modifications:\n                for ingredient in modifications[\"remove\"]:\n                    if ingredient in ingredients:\n                        ingredients.remove(ingredient)\n            if \"add\" in modifications:\n                ingredients.extend(modifications[\"add\"])\n            final_order[food] = ingredients\n\n    return final_order\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def get_primes_up_to(n):\n        return [i for i in range(2, n) if is_prime(i)]\n\n    def are_anagrams(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    primes = get_primes_up_to(n)\n    anagram_pairs = []\n\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            if are_anagrams(primes[i], primes[j]):\n                anagram_pairs.append((primes[i], primes[j]))\n\n    return sorted(anagram_pairs)\n"}
{"task_id": "EvoEval/67", "completion": "\n    calorie_count = {}\n    \n    for customer in customers:\n        if customer in meals:\n            total_calories = sum(meal['calories'] for meal in meals[customer])\n            calorie_count[customer] = total_calories\n        else:\n            calorie_count[customer] = 0\n            \n    return calorie_count\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return True\n\n    sorted_arr = sorted(arr)\n    n = len(arr)\n\n    # Check if the array is already sorted\n    if arr == sorted_arr:\n        return True\n\n    # Check for the number of positions where arr and sorted_arr differ\n    diff_indices = [i for i in range(n) if arr[i] != sorted_arr[i]]\n\n    # If there are more than 4 differences, we cannot sort with one swap\n    if len(diff_indices) > 4:\n        return False\n\n    # If there are exactly 2 differences, we can swap them\n    if len(diff_indices) == 2:\n        i, j = diff_indices\n        arr[i], arr[j] = arr[j], arr[i]\n        return arr == sorted_arr\n\n    # If there are exactly 3 differences, we cannot sort with one swap\n    if len(diff_indices) == 3:\n        return False\n\n    # If there are exactly 4 differences, we can check if swapping the first two\n    # or the last two will sort the array\n    if len(diff_indices) == 4:\n        i1, i2, i3, i4 = diff_indices\n        arr[i1], arr[i2] = arr[i2], arr[i1]\n        if arr == sorted_arr:\n            return True\n        arr[i1], arr[i2] = arr[i2], arr[i1]  # Swap back\n        arr[i3], arr[i4] = arr[i4], arr[i3]\n        return arr == sorted_arr\n\n    return False\n"}
{"task_id": "EvoEval/69", "completion": "\n    def magicTrick(cards, magicNumber):\n    card_indices = {}\n    \n    for i, card in enumerate(cards):\n        if card != 0 and magicNumber % card == 0:\n            complement = magicNumber // card\n            if complement in card_indices:\n                return (card_indices[complement], i)\n            card_indices[card] = i\n            \n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not path or not planets:\n        return False\n\n    for i in range(len(path) - 1):\n        if path[i] not in planets or path[i + 1] not in planets:\n            return False\n        if path[i + 1] not in planets[path[i]]:\n            return False\n\n    return True\n"}
{"task_id": "EvoEval/71", "completion": "\n    def shift_char(c, n):\n        if c.isalpha():\n            start = ord('a') if c.islower() else ord('A')\n            return chr(start + (ord(c) - start + n) % 26)\n        return c\n\n    encrypted_string = ''.join(shift_char(c, n) for c in s)\n    vowel_count = sum(1 for c in encrypted_string.lower() if c in 'aeiou')\n    \n    return encrypted_string, vowel_count\n"}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for item in lst:\n        count_digits = sum(c.isdigit() for c in item)\n        story = f\"Once upon a time, in a kingdom far away, lived a magical creature with the name of '{item}' who was known for telling {count_digits} tales a day\"\n        result.append(story)\n    return result\n"}
{"task_id": "EvoEval/73", "completion": "\n    total_treasures = sum(sum(row) for row in grid)\n    if total_treasures == 0:\n        return 0\n    \n    trips_needed = math.ceil(total_treasures / bag_capacity) * 2\n    return trips_needed\n"}
{"task_id": "EvoEval/74", "completion": "\n    if not s:\n        return \"\"\n    \n    return ''.join(cipher.get(char, char) for char in s)\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed_str = []\n\n    for index, char in enumerate(input_str):\n        if char.lower() in vowels:\n            next_vowel = vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n            transformed_str.append(next_vowel.upper() if char.isupper() else next_vowel)\n        elif char.lower() in consonants:\n            next_consonant = consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n            transformed_str.append(next_consonant.upper() if char.isupper() else next_consonant)\n        elif char.isdigit():\n            transformed_str.append(str((int(char) + 1) % 10))\n        elif char in ['?', '!']:\n            if index % 2 == 0:\n                transformed_str.append('!' if char == '?' else '?')\n            else:\n                transformed_str.append('?' if char == '!' else '!')\n        else:\n            transformed_str.append(char)\n\n    return ''.join(transformed_str)\n"}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    \n    pyramid = []\n    for num in reversed(lst):\n        pyramid.append('#' * num)\n    \n    return pyramid\n"}
{"task_id": "EvoEval/77", "completion": "\n    def points(n, k):\n        count = 0\n        while n > 1:\n            n //= k\n            count += 1\n        return count\n\n    points_list = [points(num, k) for num in sequence]\n    return sorted(points_list, reverse=True)\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    result = []\n\n    for i in range(n):\n        result.append(mat[i][i])  # Top-left to bottom-right diagonal\n        result.append(mat[i][n - 1 - i])  # Top-right to bottom-left diagonal\n\n    # Remove the middle element if n is odd (it will be counted twice)\n    if n % 2 == 1:\n        middle_index = n // 2\n        result.remove(mat[middle_index][middle_index])\n\n    return result\n"}
{"task_id": "EvoEval/79", "completion": "\n    if not prices or days <= 0:\n        return 0\n\n    max_profit = 0\n    min_price = float('inf')\n\n    for i in range(min(days, len(prices))):\n        min_price = min(min_price, prices[i])\n        max_profit = max(max_profit, prices[i] - min_price)\n\n    return max_profit\n"}
{"task_id": "EvoEval/80", "completion": "\n    # Find the starting position\n    start_row, start_column = next((r, c) for r, row in enumerate(map) for c, val in enumerate(row) if val == 'S')\n    path = [(start_row, start_column)]\n    current_position = (start_row, start_column)\n\n    # Define movement directions\n    directions = {\n        'up': (-1, 0),\n        'down': (1, 0),\n        'left': (0, -1),\n        'right': (0, 1)\n    }\n\n    for instruction in instructions:\n        if instruction in directions:\n            move_row, move_column = directions[instruction]\n            new_row = current_position[0] + move_row\n            new_column = current_position[1] + move_column\n\n            # Check if the new position is within bounds and not a wall\n            if (0 <= new_row < len(map) and \n                0 <= new_column < len(map[0]) and \n                map[new_row][new_column] != 'X'):\n                current_position = (new_row, new_column)\n\n            # Check if the player has reached the end\n            if map[current_position[0]][current_position[1]] == 'E':\n                path.append(current_position)\n                return path\n\n        path.append(current_position)\n\n    return path\n"}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n\n    # Create a mapping of each character to its index in the alien dictionary\n    alien_order = {char: index for index, char in enumerate(alien_dictionary)}\n\n    # Function to convert a word to its corresponding order based on the alien dictionary\n    def convert_word(word):\n        return [alien_order[char] for char in word]\n\n    # Convert all words to their corresponding order\n    converted_words = [convert_word(word) for word in word_list]\n\n    # Check if the list of converted words is sorted\n    for i in range(1, len(converted_words)):\n        if converted_words[i] < converted_words[i - 1]:\n            return \"INCORRECT\"\n\n    return \"CORRECT\"\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n\n    element_count = {\n        'Fire': 0,\n        'Earth': 0,\n        'Air': 0,\n        'Water': 0\n    }\n\n    for birthday in birthdays:\n        month_day = birthday[5:10]  # Extract MM-DD\n        if \"03-21\" <= month_day <= \"04-19\":\n            element_count['Fire'] += 1  # Aries\n        elif \"04-20\" <= month_day <= \"05-20\":\n            element_count['Earth'] += 1  # Taurus\n        elif \"05-21\" <= month_day <= \"06-20\":\n            element_count['Air'] += 1  # Gemini\n        elif \"06-21\" <= month_day <= \"07-22\":\n            element_count['Water'] += 1  # Cancer\n        elif \"07-23\" <= month_day <= \"08-22\":\n            element_count['Fire'] += 1  # Leo\n        elif \"08-23\" <= month_day <= \"09-22\":\n            element_count['Earth'] += 1  # Virgo\n        elif \"09-23\" <= month_day <= \"10-22\":\n            element_count['Air'] += 1  # Libra\n        elif \"10-23\" <= month_day <= \"11-21\":\n            element_count['Water'] += 1  # Scorpio\n        elif \"11-22\" <= month_day <= \"12-21\":\n            element_count['Fire'] += 1  # Sagittarius\n        elif \"12-22\" <= month_day <= \"01-19\":\n            element_count['Earth'] += 1  # Capricorn\n        elif \"01-20\" <= month_day <= \"02-18\":\n            element_count['Air'] += 1  # Aquarius\n        elif \"02-19\" <= month_day <= \"03-20\":\n            element_count['Water'] += 1  # Pisces\n\n    return {element: count for element, count in element_count.items() if count > 0}\n"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s_list = list(s)\n    left, right = 0, len(s) - 1\n\n    while left < right:\n        if s_list[left] not in vowels:\n            left += 1\n        elif s_list[right] not in vowels:\n            right -= 1\n        else:\n            s_list[left], s_list[right] = s_list[right], s_list[left]\n            left += 1\n            right -= 1\n\n    return ''.join(s_list)\n"}
{"task_id": "EvoEval/84", "completion": "\n    def dfs(node, path, paths):\n        if not node:\n            return\n        path.append(node)\n        if not tree[node]:  # If it's a leaf node\n            paths.append(path.copy())\n        else:\n            for child in tree[node]:\n                dfs(child, path, paths)\n        path.pop()  # Backtrack\n\n    paths = []\n    for root in tree:\n        dfs(root, [], paths)\n    return paths\n"}
{"task_id": "EvoEval/85", "completion": "\n    from collections import deque\n\n    rows, cols = len(grid), len(grid[0])\n    target_row, target_col = coord\n    if grid[0][0] == 1 or grid[target_row][target_col] == 1:\n        return -1\n\n    queue = deque([(0, 0, 0)])  # (row, col, moves)\n    visited = set((0, 0))\n\n    while queue:\n        row, col, moves = queue.popleft()\n\n        if (row, col) == (target_row, target_col):\n            return moves\n\n        # Move down\n        if row + 1 < rows and grid[row + 1][col] == 0 and (row + 1, col) not in visited:\n            visited.add((row + 1, col))\n            queue.append((row + 1, col, moves + 1))\n\n        # Move right\n        if col + 1 < cols and grid[row][col + 1] == 0 and (row, col + 1) not in visited:\n            visited.add((row, col + 1))\n            queue.append((row, col + 1, moves + 1))\n\n    return -1\n"}
{"task_id": "EvoEval/86", "completion": "\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n    return [movie[0] for movie in sorted_movies]\n"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return \"\"\n    \n    result = []\n    top, bottom = 0, len(arr) - 1\n    left, right = 0, len(arr[0]) - 1\n\n    while top <= bottom and left <= right:\n        # Traverse from left to right\n        for i in range(left, right + 1):\n            result.append(arr[top][i])\n        top += 1\n\n        # Traverse from top to bottom\n        for i in range(top, bottom + 1):\n            result.append(arr[i][right])\n        right -= 1\n\n        if top <= bottom:\n            # Traverse from right to left\n            for i in range(right, left - 1, -1):\n                result.append(arr[bottom][i])\n            bottom -= 1\n\n        if left <= right:\n            # Traverse from bottom to top\n            for i in range(bottom, top - 1, -1):\n                result.append(arr[i][left])\n            left += 1\n\n    return ''.join(result)\n"}
{"task_id": "EvoEval/88", "completion": "\n    result = {}\n    \n    for planet, features in dict_of_planets.items():\n        if len(features) == 2:\n            population, size = features\n            if isinstance(population, int) and isinstance(size, int) and population > 0 and size > 0:\n                density = round(population / size, 2)\n                result[planet] = density\n    \n    return result\n"}
{"task_id": "EvoEval/89", "completion": "\n    # Convert the list of aliens to a set for faster lookups\n    aliens_set = set(aliens)\n    \n    # Determine the positions to be destroyed\n    positions_to_destroy = {ray}  # The aimed position\n    if ray - 1 in aliens_set:\n        positions_to_destroy.add(ray - 1)  # Left adjacent position\n    if ray + 1 in aliens_set:\n        positions_to_destroy.add(ray + 1)  # Right adjacent position\n    \n    # Remove the destroyed positions from the aliens set\n    remaining_aliens = aliens_set - positions_to_destroy\n    \n    # Return the remaining aliens as a sorted list\n    return sorted(remaining_aliens)\n"}
{"task_id": "EvoEval/90", "completion": "\n    digits1 = [int(d) for d in s1]\n    digits2 = [int(d) for d in s2]\n    \n    unique_sums = set()\n    \n    for d1 in digits1:\n        for d2 in digits2:\n            unique_sums.add(d1 + d2)\n    \n    return sum(unique_sums)\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    \n    for action, distance in spaceship_data:\n        if action == 'Launch':\n            if status == 'On Ground':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Move':\n            if status == 'In Space':\n                continue\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Land':\n            if status == 'In Space':\n                status = 'On Ground'\n            else:\n                return 'Invalid Action Sequence'\n        else:\n            return 'Invalid Action Sequence'\n    \n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    result = []\n    for i in range(n):\n        layer = []\n        for j in range(n - 1 - i):\n            layer.append(' ')\n        for j in range(i + 1):\n            layer.append(chr((i + j) % 26 + 65))  # 65 is the ASCII value for 'A'\n        for j in range(i - 1, -1, -1):\n            layer.append(chr((i + j) % 26 + 65))\n        for j in range(n - 1 - i):\n            layer.append(' ')\n        result.append(''.join(layer))\n    \n    return '\\n'.join(result)\n"}
{"task_id": "EvoEval/93", "completion": "\n    encoded_message = []\n    n_length = len(n_values)\n\n    for i, char in enumerate(message):\n        if char.isalpha():\n            shift = n_values[i % n_length]\n            if char.islower():\n                new_char = chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n            encoded_message.append(new_char)\n        else:\n            encoded_message.append(char)\n\n    return ''.join(encoded_message)\n"}
{"task_id": "EvoEval/94", "completion": "\n    sorted_spells = []\n    for spell in strings:\n        words = spell.split()\n        sorted_words = sorted(words, key=lambda word: (len(word), words.index(word)))\n        sorted_spells.append(' '.join(sorted_words))\n    return sorted_spells\n"}
{"task_id": "EvoEval/95", "completion": "\n    if not all(len(row) == len(m) for row in m):\n        return 'Invalid Matrix'\n    \n    n = len(m)\n    primary_diagonal_sum = sum(m[i][i] for i in range(n))\n    secondary_diagonal_sum = sum(m[i][n - i - 1] for i in range(n))\n    \n    return abs(primary_diagonal_sum - secondary_diagonal_sum)\n"}
{"task_id": "EvoEval/96", "completion": "\n    def product_of_digits(n):\n    n = abs(n)\n    product = 1\n    while n > 0:\n        product *= n % 10\n        n //= 10\n    return product\n"}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n\n    encounter_order = [\"Asia\", \"Africa\", \"Europe\", \"North America\", \"South America\"]\n    encountered_humans = []\n\n    for continent in encounter_order:\n        for human, human_continent in humans.items():\n            if human_continent == continent:\n                encountered_humans.append(human)\n\n    return encountered_humans\n"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_value = sequence[i-1] + sequence[i-2] + (i - 1)\n        sequence.append(next_value)\n\n    for i in range(len(sequence)):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n\n    return sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    current_position = 0\n\n    for round_time in rounds:\n        if len(players) == 0:\n            break\n        \n        # Calculate the position to eliminate\n        current_position = (current_position + (round_time * music) - 1) % len(players)\n        players.pop(current_position)\n\n    return players\n"}
