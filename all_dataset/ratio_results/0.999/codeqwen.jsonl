{"task_id": "valid/0", "completion": "\n    # Define the categories\n    categories = ['sports', 'politics', 'technology', 'entertainment']\n    \n    # Define the keywords for each category\n    keywords = {\n        'sports': ['football', 'basketball', 'cricket', 'tennis', 'golf'],\n        'politics': ['election', 'president', 'parliament', 'government', 'democracy'],\n        'technology': ['computer', 'mobile', 'internet', 'software', 'hardware'],\n        'entertainment': ['movie', 'music', 'tv', 'game', 'comedy']\n    }\n    \n    # Initialize the category list\n    category_list = []\n    \n    # Check each category\n    for category in categories:\n        # Check if any keyword is present in the text\n        if any(keyword in text.lower() for keyword in keywords[category]):\n            # If yes, add the category to the list\n            category_list.append(category)\n    \n    # Return the category list\n    return category_list\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n"}
{"task_id": "valid/3", "completion": "\n    instruments.sort(reverse=True)\n    return instruments\n\ninstruments = [\"Violin\", \"Guitar\", \"Piano\", \"Flute\", \"Drums\"]"}
{"task_id": "valid/4", "completion": "\n    try:\n        return json.loads(json_string)\n    except json.JSONDecodeError:\n        raise ValueError(\"Invalid JSON string\")\n\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n    sum_digits = sum(int(digit) for digit in str(n))\n    return n % sum_digits == 0\n"}
{"task_id": "valid/6", "completion": "\n    if n == 1:\n        return 0\n    elif base == 1:\n        return None\n    else:\n        log_val = 1\n        while log_val < n:\n            log_val *= base\n        if log_val == n:\n            return log_val\n        else:\n            return None\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        json_obj = json.loads(json_str)\n        pprint.pprint(json_obj)\n    except json.JSONDecodeError:\n        raise ValueError(\"Invalid JSON\")\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace(\"{{\" + key + \"}}\", value)\n    return template\n"}
{"task_id": "valid/10", "completion": "\n    # Create a set from the string to remove duplicates\n    unique_chars = set(string)\n    \n    # Compare the length of the set with the length of the string\n    return len(unique_chars) == len(string)\n"}
{"task_id": "valid/11", "completion": "\n    date = datetime.strptime(date_string, '%Y-%m-%d')\n    new_date = date + timedelta(days=days)\n    return new_date.strftime('%Y-%m-%d')\n\n"}
{"task_id": "valid/12", "completion": "\n    if len(text) > 10000:\n        return \"Error: Text is too long.\"\n    return ' '.join(text.split())\n"}
{"task_id": "valid/13", "completion": "\n    # Convert to lowercase\n    text = text.lower()\n\n    # Remove punctuation\n    text = text.translate(str.maketrans('', '', string.punctuation))\n\n    # Remove numbers\n    text = ''.join(e for e in text if not e.isdigit())\n\n    # Remove whitespace\n    text = text.strip()\n\n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    return re.search(r'\\b' + re.escape(word1) + r'\\b.*\\b' + re.escape(word2) + r'\\b', text) is not None\n\n"}
{"task_id": "valid/15", "completion": "\n    return [sum(row) for row in array]\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    lines = comment.split('\\n')\n    for line in lines:\n        if line.startswith('#'):\n            parts = line.split(':')\n            if len(parts) == 2:\n                key, value = parts[0].strip(), parts[1].strip()\n                if key in ['tabstop', 'expandtab', 'shiftwidth', 'softtabstop']:\n                    settings[key] = value\n    return settings\n"}
{"task_id": "valid/17", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)\n"}
{"task_id": "valid/19", "completion": "\n    # Reverse both lists\n    list1.reverse()\n    list2.reverse()\n\n    # Combine both lists\n    combined_list = list1 + list2\n\n    # Sort the combined list\n    combined_list.sort()\n\n    return combined_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n\n"}
{"task_id": "valid/21", "completion": "\n    return z * z\n"}
{"task_id": "valid/22", "completion": "\n    try:\n        return dictionary[\"name\"]\n    except KeyError:\n        return None\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {k: struct_to_dict(v) for k, v in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(item) for item in struct]\n    else:\n        return struct\n"}
{"task_id": "valid/24", "completion": "\n    num = int(num)\n    for i in range(num, num+2):\n        if str(i) == str(i)[::-1]:\n            return i\n    return None\n"}
{"task_id": "valid/25", "completion": "\n    return num ** 0.5\n\n"}
{"task_id": "valid/26", "completion": "\n    rows = len(matrix)\n    cols = len(matrix[0])\n    sum_diag = 0\n    is_square = rows == cols\n    \n    for i in range(rows):\n        for j in range(cols):\n            if i == j:\n                sum_diag += matrix[i][j]\n    \n    return rows, cols, sum_diag, is_square\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c.lower() for c in s if c.isalpha())\n"}
{"task_id": "valid/29", "completion": "\n    minimum = lst[0]\n    for i in lst:\n        if i < minimum:\n            minimum = i\n    return minimum\n\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n    return key not in json_data or json_data[key] != value\n\n"}
{"task_id": "valid/31", "completion": "\n    # your code here\n    pass\n"}
{"task_id": "valid/32", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for i in range(len(alphabet)):\n        if alphabet[i] not in s:\n            return False\n    return True\n"}
{"task_id": "valid/33", "completion": "\n    return a if a > b else b\n"}
{"task_id": "valid/34", "completion": "\n    return sum(int(substring) for substring in re.findall(r'\\d+', ts))\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n"}
{"task_id": "valid/36", "completion": "\n    # Validate the array\n    for i in arr:\n        if not isinstance(i, (int, float)):\n            raise ValueError(\"Array must only contain numerical values\")\n    \n    # Compute the sum\n    return sum(arr)\n"}
{"task_id": "valid/37", "completion": "\n    neighborhoods = json.loads(json_data)\n    neighborhood_names = [neighborhood[\"name\"] for neighborhood in neighborhoods]\n    neighborhood_names.sort()\n    return neighborhood_names\n\n"}
{"task_id": "valid/38", "completion": "\n    # Step 1: Sort the array\n    arr.sort()\n\n    # Step 2: Initialize variables to store the minimum absolute sum and the pair of elements\n    min_sum = float('inf')\n    pair = (0, 0)\n\n    # Step 3: Iterate through the array to find the pair with the minimum absolute sum\n    for i in range(n - 1):\n        # Calculate the absolute sum of the current pair\n        current_sum = abs(arr[i] + arr[i + 1])\n\n        # If the current sum is smaller than the minimum sum, update the minimum sum and the pair\n        if current_sum < min_sum:\n            min_sum = current_sum\n            pair = (arr[i], arr[i + 1])\n\n    # Step 4: Return the pair with the minimum absolute sum\n    return pair\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for char in p:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/40", "completion": "\n    # Check if the input is valid\n    if not isinstance(votes, list) or not all(isinstance(vote, tuple) and len(vote) == 2 and isinstance(vote[0], str) and isinstance(vote[1], int) for vote in votes):\n        raise ValueError(\"Invalid input. Please provide a list of tuples, where each tuple contains a candidate name and the number of votes.\")\n\n    # Check if the number of votes is at least 100\n    if sum(vote[1] for vote in votes) < 100:\n        raise ValueError(\"The total number of votes must be at least 100.\")\n\n    # Check if the number of votes for each candidate exceeds 1000\n    if any(vote[1] > 1000 for vote in votes):\n        raise ValueError(\"The number of votes for each candidate must be at most 1000.\")\n\n    # Calculate the total number of votes\n    total_votes = sum(vote[1] for vote in votes)\n\n    # Calculate the percentage of votes for each candidate\n    results = {candidate: (vote / total_votes) * 100 for candidate, vote in votes}\n\n    return results\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        date_obj = datetime.strptime(date_string, \"%d-%b-%Y\")\n        return date_obj.strftime(\"%b, %Y\")\n    except ValueError:\n        try:\n            date_obj = datetime.strptime(date_string, \"%d-%m-%y\")\n            return date_obj.strftime(\"%b, %Y\")\n        except ValueError:\n            raise ValueError(\"Invalid date format. Please use dd-mm-yyyy or dd-mmm-yy.\")\n"}
{"task_id": "valid/42", "completion": "\n    allowed_extensions = {\n        \"text\": [\"txt\", \"doc\", \"docx\"],\n        \"image\": [\"jpg\", \"jpeg\", \"png\", \"gif\"],\n        \"video\": [\"mp4\", \"avi\", \"mkv\", \"mov\"],\n        \"audio\": [\"mp3\", \"wav\", \"flac\", \"aac\"]\n    }\n    \n    # get the file extension from the new file name\n    new_extension = newname.split(\".\")[-1]\n    \n    # check if the new file extension is in the list of allowed extensions for the given file type\n    if allowed_type in allowed_extensions and new_extension in allowed_extensions[allowed_type]:\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/43", "completion": "\n    new_lst = []\n    for i in lst:\n        if isinstance(i, (int, float)):\n            if i % 2 == 0:\n                new_lst.append(i)\n        elif isinstance(i, str):\n            if i.isdigit() and int(i) % 2 == 0:\n                new_lst.append(int(i))\n    return tuple(new_lst)\n"}
{"task_id": "valid/44", "completion": "\n    minutes = hours * 60\n    return minutes\n\nhours = 2\nminutes = hours_to_minutes(hours)"}
{"task_id": "valid/45", "completion": "\n    return string.count(specific_character)\n"}
{"task_id": "valid/46", "completion": "\n    # histogram_data[generation] = accs\n    return histogram_data\n"}
{"task_id": "valid/47", "completion": "\n    return bool(re.match(r'^[a-zA-Z0-9]{5}$', string))\n\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        parts = classifier.split()\n        if len(parts) == 3 and parts[0] == \"programming\" and parts[1].isalpha() and parts[2].isdigit():\n            unique_languages.add(parts[1])\n    return len(unique_languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    # Create an empty dictionary to store the counts\n    count_dict = {}\n\n    # Iterate over each sub-array in the main array\n    for sub_arr in arr:\n        # Iterate over each element in the sub-array\n        for elem in sub_arr:\n            # If the element is already in the dictionary, increment its count\n            if elem in count_dict:\n                count_dict[elem] += 1\n            # Otherwise, add the element to the dictionary with a count of 1\n            else:\n                count_dict[elem] = 1\n\n    # Convert the dictionary to a list of tuples and return it\n    return list(count_dict.items())\n"}
{"task_id": "valid/50", "completion": "\n    # Your task is to implement a function that takes a URL and matches it to the appropriate view function.\n    # The function should return the name of the view function if a match is found, or \"Not Found\" if no match is found.\n    # The URL patterns are defined using regular expressions, and the view functions are imported from the views module.\n    # The view functions are named after the model they are associated with, and are located in the views module.\n    # The URL patterns are defined in the following format:\n    # path(regex, view_function, name)\n    # where:\n    # - regex is the regular expression pattern for the URL\n    # - view_function is the function to be called when the URL is matched\n    # - name is the name of the URL pattern\n    # The view functions are imported from the views module using the following format:\n    # from .views import view_function_name\n    # The function should be case-insensitive and should match the URL pattern with the longest prefix.\n    # If there are multiple matches with the same longest prefix, the function should return the first match found.\n    # If no matches are found, the function should return \"Not Found\".\n    # Example:\n    # Given the following URL patterns:\n    # path(r'^$', views.home, name='home')\n    # path(r'^about/$', views.about, name='about')\n    # path(r'^contact/$', views.contact, name='contact')\n    # If the URL is 'http://example.com/about/', the function should return 'about'.\n    # If the URL is 'http://example.com/about', the function should return 'about'.\n    # If the URL is 'http://example.com/about/contact/', the function should return 'contact'.\n    # If the URL is 'http://example.com/about/contact', the function should return 'contact'.\n    # If the URL is 'http://example.com/about/contact/about/', the function should return 'contact'.\n    # If the URL is 'http://example.com/about/contact/about', the function should return 'contact'.\n    # If the URL is 'http://example.com/about/contact/about/contact/',"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n"}
{"task_id": "valid/52", "completion": "\n    sentence = \"Hello, world!\"\n    return sentence\n"}
{"task_id": "valid/53", "completion": "\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.add(s[i:j])\n    return substrings\n\n"}
{"task_id": "valid/54", "completion": "\n    total_price = 0\n    for dict_item in list_of_dicts:\n        for key in dict_item:\n            if key.startswith(\"price_\"):\n                total_price += dict_item[key]\n    return total_price\n"}
{"task_id": "valid/55", "completion": "\n    intersection = [value for value in list1 if value in list2]\n    for value in intersection:\n        while value in list1:\n            list1.remove(value)\n    return intersection\n"}
{"task_id": "valid/56", "completion": "\n    if request_method == 'GET':\n        return api_advisor_view()\n    elif request_method == 'POST':\n        return api_advisor_view_post()\n    else:\n        return \"Invalid request method\"\n"}
{"task_id": "valid/57", "completion": "\n    if not all(isinstance(i, int) and i > 0 for i in [a, b]):\n        raise ValueError(\"Both numbers must be positive integers\")\n    if b == 0:\n        return a\n    return gcd_recursive(b, a % b)\n"}
{"task_id": "valid/58", "completion": "\n    categorized_files = {\n        \"system\": [],\n        \"user\": [],\n        \"other\": []\n    }\n\n    for file_path in file_paths:\n        if file_path.startswith(\"/etc/\"):\n            categorized_files[\"system\"].append(file_path)\n        elif file_path.startswith(\"/home/\"):\n            categorized_files[\"user\"].append(file_path)\n        else:\n            categorized_files[\"other\"].append(file_path)\n\n    return categorized_files\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n"}
{"task_id": "valid/61", "completion": "\n    return timeEnd - timeStart\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return -1\n\n    mid = (start + end) // 2\n\n    if array[mid] == target:\n        return mid\n    elif array[mid] < target:\n        return binary_search_recursive(array, target, mid + 1, end)\n    else:\n        return binary_search_recursive(array, target, start, mid - 1)\n\n"}
{"task_id": "valid/63", "completion": "\n    colors = [\"white\", \"red\", \"green\", \"blue\", \"white\"]\n    return colors[(colors.index(color) + 1) % len(colors)]\n"}
{"task_id": "valid/64", "completion": "\n    # Create a new list with incremented values\n    new_list = [i + 1 for i in list]\n    return new_list\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end + 1):\n        if i**0.5 == int(i**0.5):\n            return True\n    return False\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        if target in word:\n            return True\n    return False\n"}
{"task_id": "valid/67", "completion": "\n    words = sentence.split()\n    return words\n\nsentence = \"This is a test sentence.\"\nwords = sentence_to_words(sentence)"}
{"task_id": "valid/68", "completion": "\n    print(\"keys dictionary: \", end=\"\")\n    for key in dict.keys():\n        print(key, end=\" \")\n    print()\n\nfruits = {'apple': 5, 'banana': 3, 'orange': 2}"}
{"task_id": "valid/69", "completion": "\n    name = \"John\"\n    age = 30\n    phrase = f\"My name is {name} and I am {age} years old.\"\n    return phrase\n\n"}
{"task_id": "valid/70", "completion": "\n    result = []\n    for string in strings:\n        if re.search(r'\\W', string):\n            result.append(string.upper())\n        else:\n            result.append(string)\n    return result\n\n"}
{"task_id": "valid/71", "completion": "\n    return string.index(char)\n"}
{"task_id": "valid/72", "completion": "\n    bold_text = []\n    i = 0\n    while i < len(html_code):\n        if html_code[i:i+4] == '<b>':\n            start = i\n            i += 4\n            while i < len(html_code) and html_code[i:i+5] != '</b>':\n                i += 1\n            if i < len(html_code):\n                bold_text.append(html_code[start+4:i])\n                i += 5\n        else:\n            i += 1\n    return bold_text\n"}
{"task_id": "valid/73", "completion": "\n    # Define the items and their prices\n    items = {\n        \"coke\": 1.5,\n        \"chips\": 1.0,\n        \"candy\": 0.75\n    }\n    \n    # Check if the item is available\n    if item not in items:\n        return \"Item not available\"\n    \n    # Check if the user has inserted enough money\n    if money_inserted < items[item]:\n        return \"Insufficient funds\"\n    \n    # Calculate the change to return\n    change = money_inserted - items[item]\n    \n    # Update the stock of the item\n    # For simplicity, we'll just print a message indicating that the item has been sold\n    print(f\"{item} sold. Change returned: ${change:.2f}\")\n    \n    return change\n"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    unique_list = list(set(merged_list))\n    return unique_list\n"}
{"task_id": "valid/75", "completion": "\n    count = 0\n    for i in list:\n        if i == target:\n            count += 1\n    return count\n"}
{"task_id": "valid/76", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n"}
{"task_id": "valid/77", "completion": "\n    return [i for i, x in enumerate(vector) if x != 0]\n"}
{"task_id": "valid/78", "completion": "\n    try:\n        # Assign a variable\n        my_var = 10\n        \n        # Validate the variable\n        if isinstance(my_var, int):\n            print(\"Variable is valid and assigned.\")\n        else:\n            print(\"Variable is not valid.\")\n    except Exception as e:\n        print(\"An error occurred: \", e)\n\nassign_and_validate()\n"}
{"task_id": "valid/79", "completion": "\n    letters = list(word)\n    random.shuffle(letters)\n    return ''.join(letters)\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"integer\"\n    elif isinstance(element, float):\n        return \"float\"\n    elif isinstance(element, str):\n        return \"string\"\n    elif isinstance(element, list):\n        return \"list\"\n    elif isinstance(element, dict):\n        return \"dictionary\"\n    else:\n        return \"unknown\"\n"}
{"task_id": "valid/81", "completion": "\n    if not arr:\n        return []\n\n    merged_arr = [arr[0]]\n    for num in arr[1:]:\n        if num != merged_arr[-1]:\n            merged_arr.append(num)\n\n    return merged_arr\n\n"}
{"task_id": "valid/82", "completion": "\n    tokens = re.findall(r'\\b\\w+\\b', text)\n    return tokens\n\n"}
{"task_id": "valid/83", "completion": "\n    divisible_by_3 = [num for num in numbers if num % 3 == 0]\n    divisible_by_7 = [num for num in numbers if num % 7 == 0]\n    \n    average = sum(numbers) / len(numbers)\n    max_num = max(numbers)\n    min_num = min(numbers)\n    \n    count_3 = sum(1 for num in numbers if num % 3 == 0)\n    count_7 = sum(1 for num in numbers if num % 7 == 0)\n    \n    print(\"Average:\", average)\n    print(\"Maximum:\", max_num)\n    print(\"Minimum:\", min_num)\n    print(\"Count of numbers divisible by 3:\", count_3)\n    print(\"Count of numbers divisible by 7:\", count_7)\n"}
{"task_id": "valid/84", "completion": "\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    max_frequency = max(frequency.values())\n    for word, freq in frequency.items():\n        if freq == max_frequency:\n            return word\n"}
{"task_id": "valid/85", "completion": "\n    e = 0\n    for i in range(decimal_places):\n        e += 1 / math.factorial(i)\n    return round(e, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    if len(numbers) == 0:\n        return 0, 0\n    else:\n        return sum(numbers) / len(numbers), sum(numbers)\n"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series is empty\")\n    \n    min_value = max_value = time_series[0]\n    \n    for value in time_series:\n        if not isinstance(value, (int, float)):\n            raise ValueError(\"Non-numerical value found in time series\")\n        \n        if value < min_value:\n            min_value = value\n        elif value > max_value:\n            max_value = value\n    \n    return (min_value, max_value)\n"}
{"task_id": "valid/88", "completion": "\n    encyclopedia = {\n        \"Python\": [\"Introduction to Python\", \"Advanced Python Techniques\", \"Python Libraries\"],\n        \"JavaScript\": [\"Introduction to JavaScript\", \"DOM Manipulation\", \"Asynchronous JavaScript\"],\n        \"Java\": [\"Introduction to Java\", \"Object-Oriented Programming\", \"Java Collections\"]\n    }\n    \n    related_articles_count = {}\n    for entry, articles in encyclopedia.items():\n        related_articles_count[entry] = len(articles)\n    \n    return related_articles_count\n"}
{"task_id": "valid/89", "completion": "\n    max_index = 0\n    for i in range(1, len(lst)):\n        if lst[i] > lst[max_index]:\n            max_index = i\n    return max_index\n"}
{"task_id": "valid/90", "completion": "\n    return bool(list1) and bool(list2)\n"}
{"task_id": "valid/91", "completion": "\n    root = Element('data')\n    for key, value in dictionary.items():\n        child = Element(key)\n        child.text = str(value)\n        root.append(child)\n    return tostring(root, encoding='unicode')\n\n"}
{"task_id": "valid/92", "completion": "\n    if not matrix or not matrix[0]:\n        return False\n    \n    rows, cols = len(matrix), len(matrix[0])\n    row, col = 0, cols - 1\n    \n    while row < rows and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    \n    return False\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count = 0\n    for i in lst:\n        if i % 2 != 0:\n            sum_odd += i\n            count += 1\n    average = sum_odd / count\n    return sum_odd, average\n"}
{"task_id": "valid/94", "completion": "\n    if n > len(lst) or n < 1:\n        return None\n    else:\n        lst.sort(reverse=True)\n        return lst[n-1]\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "valid/96", "completion": "\n    exclusive_elements = set_a.symmetric_difference(set_b)\n    return exclusive_elements\n"}
{"task_id": "valid/97", "completion": "\n    description = \"Tasked Discord Bot is a versatile bot designed to enhance your Discord server experience. It offers a range of features, including information about its capabilities, a web app for managing playlists and settings, and categorized commands with detailed help information. With Tasked Discord Bot, you can easily customize your server and make it more enjoyable for everyone.\"\n    return description\n"}
{"task_id": "valid/98", "completion": "\n    if n < 0:\n        return \"-\" + dec_to_ternary(-n)\n    elif n == 0:\n        return \"0\"\n    else:\n        return dec_to_ternary(n // 3) + str(n % 3)\n"}
{"task_id": "valid/99", "completion": "\n    extensions = tuple(file_name.split('.')[-1] for file_name in file_names)\n    return extensions\n"}
{"task_id": "valid/100", "completion": "\n    if age < 0:\n        return \"Invalid age\"\n    elif age < 13:\n        return \"Child\"\n    elif age < 18:\n        return \"Teenager\"\n    elif age < 60:\n        return \"Adult\"\n    else:\n        return \"Senior\"\n"}
{"task_id": "valid/101", "completion": "\n    grade = \"A\" if numerical_grade >= 90 else \"B\" if numerical_grade >= 80 else \"C\" if numerical_grade >= 70 else \"D\" if numerical_grade >= 60 else \"F\"\n    gpa = 40 if numerical_grade >= 90 else 35 if numerical_grade >= 80 else 30 if numerical_grade >= 70 else 25 if numerical_grade >= 60 else 20\n    return grade, gpa\n"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item\n    return total\n"}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    vowel_count_dict = {}\n\n    for palindrome in palindrome_tuples:\n        vowel_count = sum(1 for char in palindrome if char in vowels)\n        vowel_count_dict[palindrome] = vowel_count\n\n    return vowel_count_dict\n"}
{"task_id": "valid/104", "completion": "\n    # Your implementation here\n    pass\n"}
{"task_id": "valid/105", "completion": "\n    # Create a set to store the elements of the array\n    num_set = set()\n\n    # Iterate over the array\n    for num in arr:\n        # Check if the negation of the current number exists in the set\n        if -num in num_set:\n            # If it does, return True\n            return True\n        # Add the current number to the set\n        num_set.add(num)\n\n    # If no pair sums to 0, return False\n    return False\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n    for package, version in dependencies:\n        package_name = package.split('_')[0]\n        if package_name not in latest_versions or version > latest_versions[package_name]:\n            latest_versions[package_name] = version\n    return latest_versions\n"}
{"task_id": "valid/107", "completion": "\n    categories = {}\n    for cause in causes:\n        action = cause.split()[0]\n        if action in categories:\n            categories[action].append(cause)\n        else:\n            categories[action] = [cause]\n    return categories\n"}
{"task_id": "valid/108", "completion": "\n    return name.replace(\" \", \"-\").lower()\n"}
{"task_id": "valid/109", "completion": "\n    return [char for char in text if ord(char) > 127]\n\n"}
{"task_id": "valid/110", "completion": "\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    no_punct = \"\"\n    for char in string:\n        if char not in punctuations:\n            no_punct = no_punct + char\n    return no_punct\n\n"}
{"task_id": "valid/111", "completion": "\n    result = []\n    for num in num_list:\n        try:\n            result.append(num ** exp)\n        except TypeError:\n            print(f\"Error: {num} is not a number.\")\n    return result\n"}
{"task_id": "valid/112", "completion": "\n    # Your code here\n"}
{"task_id": "valid/113", "completion": "\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    if current_num == n:\n        return\n    print(f\"Thank you for #{current_num + 1}!\")\n    print_thank_you(n, current_num + 1)\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == element:\n            count += 1\n        else:\n            count = 0\n    return count\n"}
{"task_id": "valid/115", "completion": "\n    digits = set(str(num))\n    return len(digits) == 1\n\n"}
{"task_id": "valid/116", "completion": "\n    vowels = \"aeiouAEIOU\"\n    if not s:\n        return \"\"\n    elif s[0] in vowels:\n        return remove_vowels_recursive(s[1:])\n    else:\n        return s[0] + remove_vowels_recursive(s[1:])\n"}
{"task_id": "valid/117", "completion": "\n    help_text = \"Available options:\\n\"\n    for option, description in options:\n        help_text += f\"  {option}: {description}\\n\"\n    return help_text\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n"}
{"task_id": "valid/119", "completion": "\n    count = 0\n    for i in Val:\n        if i == Val[0]:\n            count += 1\n    return count\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset & ((1 << len(sample_bitset)) - 1)\n"}
{"task_id": "valid/121", "completion": "\n    vowels = \"aeiou\"\n    return all(char in vowels for char in s.lower())\n"}
{"task_id": "valid/122", "completion": "\n    count = 0\n    start = 0\n    while True:\n        start = sequence.find(subsequence, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count\n"}
{"task_id": "valid/123", "completion": "\n    if t == 0:\n        return \"Error: Division by zero is not allowed.\"\n    elif h == 0:\n        return 0\n    elif h < 0 and t < 0:\n        return dividir(-h, -t)\n    elif h < 0:\n        return -dividir(-h, t)\n    elif t < 0:\n        return -dividir(h, -t)\n    else:\n        if h < t:\n            return 0\n        else:\n            return 1 + dividir(h - t, t)\n"}
{"task_id": "valid/124", "completion": "\n    return sum(i for i in input_list if i % 2 != 0)\n\n"}
{"task_id": "valid/125", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    count = 0\n    for char in string:\n        if char.lower() in consonants:\n            count += 1\n    return count\n"}
{"task_id": "valid/126", "completion": "\n    # Calculate the number of electrons based on the grid energies and the density of states\n    electrons = 0\n    for energy, density in zip(grid_energies, ados):\n        electrons += density * energy\n    \n    # Adjust the number of electrons based on doping\n    if dope > 0:\n        electrons += dope\n    elif dope < 0:\n        electrons -= abs(dope)\n    \n    # Return the final number of electrons\n    return electrons\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    n = len(arr)\n    result = [0] * n\n    result[0] = arr[0]\n    result[n - 1] = arr[n - 1]\n    for i in range(1, n - 1):\n        result[i] = max(arr[i + 1] - result[i - 1], result[i - 1] - arr[i - 1])\n    return result\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for element in lst:\n        if element not in unique_elements:\n            unique_elements.append(element)\n            if len(unique_elements) == 3:\n                break\n    return unique_elements\n"}
{"task_id": "valid/132", "completion": "\n    fruit_list.sort()\n    return fruit_list\n\nfruit_list = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]"}
{"task_id": "valid/133", "completion": "\n    sublists = [[]]\n    for i in range(len(lst)):\n        sublists += [lst[i: j] for j in range(i + 1, len(lst) + 1)]\n    return sublists\n\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d+\\.\\d+'\n    return bool(re.search(pattern, string))\n\n"}
{"task_id": "valid/135", "completion": "\n    from django.db import migrations, models\n\n    class Migration(migrations.Migration):\n\n        dependencies = [\n            ('app_name', 'previous_migration_number'),\n        ]\n\n        operations = [\n            migrations.AddField(\n                model_name='model_name',\n                name='field_name',\n                field=models.CharField(max_length=100),\n            ),\n        ]\n\n    return Migration\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = set(list1).intersection(set(list2))\n    common_elements_sum = sum(common_elements)\n    return common_elements_sum\n"}
{"task_id": "valid/137", "completion": "\n    forecast_period = math.ceil(len(df) * 0.01)\n    return forecast_period\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: getattr(x, attr))\n\n"}
{"task_id": "valid/139", "completion": "\n    start_index = (page_number - 1) * items_per_page\n    end_index = start_index + items_per_page\n    return items[start_index:end_index]\n\n"}
{"task_id": "valid/140", "completion": "\n    # Initialize the result string\n    result = \"\"\n\n    # Iterate over the input string in reverse\n    for i in range(len(n_str) - 1, -1, -1):\n        # Get the current digit\n        digit = int(n_str[i])\n\n        # Double the digit\n        doubled_digit = digit * 2\n\n        # If the doubled digit is greater than 9, subtract 9 to get the single-digit result\n        if doubled_digit > 9:\n            doubled_digit -= 9\n\n        # Prepend the doubled digit to the result string\n        result = str(doubled_digit) + result\n\n    # Return the result string\n    return result\n"}
{"task_id": "valid/141", "completion": "\n    preset_coordinates = {\n        \"home\": (0.0, 0.0, 0.0),\n        \"pick\": (0.1, 0.0, 0.1),\n        \"place\": (-0.1, 0.0, 0.1)\n    }\n    rospy.init_node('arm_control')\n    return preset_coordinates[preset_name]\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = set(list1) & set(list2)\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product\n"}
{"task_id": "valid/143", "completion": "\n    if allow_multiple_answer:\n        print(\"Users can select multiple answers for each question.\")\n    else:\n        print(\"Users can only select one answer for each question.\")\n    \n    if zoom_level == 1:\n        print(\"The quiz is at a basic level.\")\n    elif zoom_level == 2:\n        print(\"The quiz is at an intermediate level.\")\n    elif zoom_level == 3:\n        print(\"The quiz is at an advanced level.\")\n    else:\n        print(\"Invalid zoom level.\")\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in sentence:\n        if char not in vowels:\n            result += char\n    return result\n"}
{"task_id": "valid/146", "completion": "\n    # your code here\n"}
{"task_id": "valid/147", "completion": "\n    try:\n        return max(d.values())\n    except ValueError:\n        return \"The dictionary is empty.\"\n    except TypeError:\n        return \"The dictionary contains non-comparable types.\"\n"}
{"task_id": "valid/148", "completion": "\n    return sum(dict[key]) / len(dict[key])\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == \"\":\n        return None\n    else:\n        return string.replace('e', '*')\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n\n"}
{"task_id": "valid/151", "completion": "\n    return x % 2 == 0 or x % 3 == 0 or x % 5 == 0 or x % 7 == 0\n\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n\n"}
