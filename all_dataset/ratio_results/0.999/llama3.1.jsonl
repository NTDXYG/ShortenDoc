{"task_id": "valid/0", "completion": "\n    # Define the categories and their corresponding keywords\n    categories = {\n        'sports': ['football', 'basketball', 'soccer', 'tennis'],\n        'politics': ['government', 'election', 'policy', 'law'],\n        'entertainment': ['movie', 'music', 'celebrity', 'award']\n    }\n\n    # Initialize the category with the highest score\n    best_category = None\n    best_score = 0\n\n    # Tokenize the text into words\n    words = text.split()\n\n    # Iterate over each category\n    for category, keywords in categories.items():\n        # Initialize the score for the current category\n        score = 0\n\n        # Iterate over each keyword in the category\n        for keyword in keywords:\n            # Check if the keyword is in the text\n            if keyword in words:\n                # Increment the score\n                score += 1\n\n        # Update the best category if the current category has a higher score\n        if score > best_score:\n            best_category = category\n            best_score = score\n\n    # Return the best category\n    return best_category\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n"}
{"task_id": "valid/3", "completion": "\n    return sorted(instruments, reverse=True)\n"}
{"task_id": "valid/4", "completion": "\n    try:\n        return json.loads(json_string)\n    except json.JSONDecodeError:\n        raise ValueError(\"Invalid JSON string\")\n\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n    sum_digits = sum(int(digit) for digit in str(n))\n    return n % sum_digits == 0 and sum_digits % 3 == 0\n"}
{"task_id": "valid/6", "completion": "\n    return int(math.log(n, base))\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        json_data = json.loads(json_str)\n        pprint.pprint(json_data)\n    except ValueError as e:\n        print(f\"Error: {e}\")\n        return False\n    return True\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace(\"{\" + key + \"}\", str(value))\n    return template\n"}
{"task_id": "valid/10", "completion": "\n    return len(string) == len(set(string))\n"}
{"task_id": "valid/11", "completion": "\n    date = datetime.strptime(date_string, '%Y-%m-%d')\n    new_date = date + timedelta(days=days)\n    return new_date.strftime('%Y-%m-%d')\n\n"}
{"task_id": "valid/12", "completion": "\n    # Remove leading and trailing whitespace\n    text = text.strip()\n    \n    # Replace one or more whitespace characters with a single space\n    text = ' '.join(text.split())\n    \n    return text\n"}
{"task_id": "valid/13", "completion": "\n    # Convert text to lowercase\n    text = text.lower()\n    \n    # Remove punctuation\n    text = ''.join(e for e in text if e.isalnum() or e.isspace())\n    \n    # Remove special characters\n    text = ''.join(e for e in text if e.isalnum() or e.isspace() or e in string.punctuation)\n    \n    # Remove extra whitespace\n    text = ' '.join(text.split())\n    \n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    return bool(re.search(r'\\b' + re.escape(word1) + r'\\b|\\b' + re.escape(word2) + r'\\b', text))\n\n"}
{"task_id": "valid/15", "completion": "\n    return sum(array)\n"}
{"task_id": "valid/16", "completion": "\n    # Split the comment into lines\n    lines = comment.split('\\n')\n    \n    # Initialize a dictionary to store the settings\n    settings = {}\n    \n    # Iterate over each line\n    for line in lines:\n        # Remove leading and trailing whitespace\n        line = line.strip()\n        \n        # Check if the line starts with a setting\n        if line.startswith('set'):\n            # Split the line into parts\n            parts = line.split()\n            \n            # Check if the line is a setting we care about\n            if parts[1] in ['tabstop', 'expandtab', 'shiftwidth', 'softtabstop']:\n                # Extract the value\n                value = parts[2]\n                \n                # Store the setting in the dictionary\n                settings[parts[1]] = value\n    \n    # Return the settings\n    return settings\n"}
{"task_id": "valid/17", "completion": "\n    # Tokenize the sentence into words\n    words = nltk.word_tokenize(sentence)\n    \n    # Tag the words with their part of speech\n    tagged_words = nltk.pos_tag(words)\n    \n    # Disassemble the sentence into a list of words\n    disassembled_sentence = [word for word, tag in tagged_words]\n    \n    return disassembled_sentence\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)\n"}
{"task_id": "valid/19", "completion": "\n    list1 = list1[::-1]\n    list2 = list2[::-1]\n    list1.sort()\n    list2.sort()\n    return list1, list2\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n"}
{"task_id": "valid/21", "completion": "\n    return z * z\n"}
{"task_id": "valid/22", "completion": "\n    return dictionary.get(\"name\")\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {key: struct_to_dict(value) for key, value in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(item) for item in struct]\n    elif isinstance(struct, tuple):\n        return tuple(struct_to_dict(item) for item in struct)\n    elif isinstance(struct, set):\n        return set(struct_to_dict(item) for item in struct)\n    elif isinstance(struct, str):\n        return struct\n    elif isinstance(struct, int) or isinstance(struct, float):\n        return struct\n    elif isinstance(struct, bool):\n        return struct\n    else:\n        return struct.__dict__\n\n"}
{"task_id": "valid/24", "completion": "\n    # Convert the number to a string to easily reverse it\n    num_str = str(num)\n    \n    # Initialize the closest palindrome and its distance\n    closest_palindrome = num\n    closest_distance = abs(num - int(str(num)[::-1]))\n    \n    # Check all numbers from num-1 to num+1\n    for i in range(num-1, num+2):\n        # Convert the number to a string to easily reverse it\n        i_str = str(i)\n        \n        # Check if the number is a palindrome\n        if i_str == i_str[::-1]:\n            # Calculate the distance between the number and the closest palindrome\n            distance = abs(i - closest_palindrome)\n            \n            # If the distance is smaller than the current closest distance, update the closest palindrome and its distance\n            if distance < closest_distance:\n                closest_palindrome = i\n                closest_distance = distance\n    \n    return closest_palindrome\n"}
{"task_id": "valid/25", "completion": "\n    return num ** 0.5\n"}
{"task_id": "valid/26", "completion": "\n    # get the number of rows and columns\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    # check if the matrix is square\n    is_square = rows == cols\n    \n    # initialize sum of diagonal elements\n    sum_diagonal = 0\n    \n    # iterate over the matrix to find the sum of diagonal elements\n    for i in range(rows):\n        sum_diagonal += matrix[i][i]\n    \n    # return the required information\n    return rows, cols, sum_diagonal, is_square\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c for c in s if c.isalpha()).lower()\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n    if key not in json_data:\n        return True\n    if json_data[key] != value:\n        return True\n    return False\n\n"}
{"task_id": "valid/31", "completion": "\n    # Initialize an empty list to store the table rows\n    table_rows = []\n    \n    # Calculate the number of rows needed\n    num_rows = -(-len(buttons) // num_columns)  # Ceiling division\n    \n    # Iterate over the range of rows\n    for i in range(num_rows):\n        # Initialize an empty list to store the current row\n        row = []\n        \n        # Iterate over the range of columns\n        for j in range(num_columns):\n            # Calculate the index of the button in the list\n            index = i * num_columns + j\n            \n            # If the index is within the bounds of the list, add the button to the row\n            if index < len(buttons):\n                # Append the button to the row\n                row.append(buttons[index])\n        \n        # Add the row to the table rows\n        table_rows.append(row)\n    \n    # Return the table rows\n    return table_rows\n"}
{"task_id": "valid/32", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for i in range(len(alphabet) - 1):\n        if alphabet[i] not in s or alphabet[i + 1] not in s or s.index(alphabet[i]) > s.index(alphabet[i + 1]):\n            return False\n    return True\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "valid/34", "completion": "\n    total = 0\n    current = ''\n    for char in ts:\n        if char.isdigit():\n            current += char\n        elif current:\n            total += int(current)\n            current = ''\n    if current:\n        total += int(current)\n    return total\n"}
{"task_id": "valid/35", "completion": "\n    return [word[-1].upper() + word[:-1] for word in words]\n"}
{"task_id": "valid/36", "completion": "\n    # Check if all elements in the array are numbers\n    if not all(isinstance(x, (int, float)) for x in arr):\n        raise ValueError(\"Array must only contain numerical values\")\n    \n    # Compute the sum of the array elements\n    total = sum(arr)\n    \n    return total\n"}
{"task_id": "valid/37", "completion": "\n    # First, we load the json data into a python dictionary\n    data = json.loads(json_data)\n    \n    # Then, we extract the list of neighborhoods from the dictionary\n    neighborhoods = data['neighborhoods']\n    \n    # Next, we use a list comprehension to extract the name of each neighborhood\n    neighborhood_names = [neighborhood['name'] for neighborhood in neighborhoods]\n    \n    # Finally, we sort the list of neighborhood names in alphabetical order and return it\n    return sorted(neighborhood_names)\n\n"}
{"task_id": "valid/38", "completion": "\n    arr.sort()\n    min_sum = float('inf')\n    for i in range(n - 1):\n        # Calculate the absolute sum of the current pair\n        abs_sum = abs(arr[i] + arr[i + 1])\n        # Update the minimum sum if the current sum is smaller\n        min_sum = min(min_sum, abs_sum)\n    return min_sum\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    res = 0\n    sign = 1\n    for c in p:\n        if c == '(':\n            stack.append(sign)\n            sign = 1\n        elif c == ')':\n            res += sign\n            sign = stack.pop()\n        else:\n            sign *= int(c)\n    return res\n"}
{"task_id": "valid/40", "completion": "\n    # Initialize an empty dictionary to store the results\n    results = {}\n\n    # Iterate over each vote in the list of votes\n    for vote in votes:\n        # Extract the candidate name and number of votes from the tuple\n        candidate_name, number_of_votes = vote\n\n        # Check if the candidate name is a string of uppercase letters\n        if not isinstance(candidate_name, str) or not candidate_name.isupper():\n            raise ValueError(\"Candidate name must be a string of uppercase letters\")\n\n        # Check if the number of votes is an integer exceeding 1000\n        if not isinstance(number_of_votes, int) or number_of_votes <= 1000:\n            raise ValueError(\"Number of votes must be an integer exceeding 1000\")\n\n        # Check if the number of votes is at least 100\n        if number_of_votes < 100:\n            raise ValueError(\"Number of votes must be at least 100\")\n\n        # If the candidate is already in the results dictionary, add the number of votes to their count\n        if candidate_name in results:\n            results[candidate_name] += number_of_votes\n        # If the candidate is not in the results dictionary, add them with their number of votes\n        else:\n            results[candidate_name] = number_of_votes\n\n    # Calculate the total number of votes\n    total_votes = sum(results.values())\n\n    # Calculate the percentage of votes each candidate received\n    for candidate in results:\n        results[candidate] = (results[candidate] / total_votes) * 100\n\n    # Return the results dictionary\n    return results\n"}
{"task_id": "valid/41", "completion": "\n    # Define the possible date formats\n    date_formats = [\"%d-%m-%Y\", \"%d-%b-%y\"]\n\n    # Try to parse the date string with each possible format\n    for date_format in date_formats:\n        try:\n            # Attempt to parse the date string\n            date = datetime.strptime(date_string, date_format)\n\n            # Check if the date is valid\n            if date.year < 100:\n                # If the year is less than 100, it's likely a two-digit year\n                # We'll assume it's in the 21st century\n                date = date.replace(year=2000 + date.year)\n            else:\n                # If the year is 100 or more, it's likely a four-digit year\n                pass\n\n            # Return the date in the standardized format\n            return date.strftime(\"%b, %Y\")\n\n        except ValueError:\n            # If the date string doesn't match the current format, try the next one\n            pass\n\n    # If none of the formats match, raise an error\n    raise ValueError(\"Invalid date format\")\n\n"}
{"task_id": "valid/42", "completion": "\n    # Define a list of allowed file types\n    allowed_types = {\n        'image': ['.jpg', '.jpeg', '.png', '.gif', '.bmp'],\n        'video': ['.mp4', '.avi', '.mov', '.wmv'],\n        'document': ['.pdf', '.docx', '.doc', '.txt'],\n        'spreadsheet': ['.xlsx', '.xls'],\n        'presentation': ['.pptx', '.ppt']\n    }\n\n    # Check if the new file name has a valid extension\n    for type, extensions in allowed_types.items():\n        if allowed_type in type and newname.endswith(tuple(extensions)):\n            return True\n\n    return False\n\n"}
{"task_id": "valid/43", "completion": "\n    return tuple(i for i in lst if isinstance(i, (int, float)) and i % 2 == 0)\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n\n"}
{"task_id": "valid/45", "completion": "\n    return string.lower().count(specific_character.lower())\n"}
{"task_id": "valid/46", "completion": "\n    # Get the current accuracy\n    current_accuracy = accs[generation]\n    \n    # Add the current accuracy to the histogram data\n    histogram_data[generation] = current_accuracy\n    \n    # Return the updated histogram data\n    return histogram_data\n"}
{"task_id": "valid/47", "completion": "\n    pattern = re.compile(r'^[a-zA-Z0-9]{5}$')\n    if pattern.match(string):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        if classifier.startswith(\"programming \"):\n            language = classifier.split(\" \")[1]\n            unique_languages.add(language)\n    return len(unique_languages)  # return the number of unique languages\n\n"}
{"task_id": "valid/49", "completion": "\n    # Initialize an empty dictionary to store the count of each instance\n    instance_count = {}\n    \n    # Iterate over each row in the array\n    for row in arr:\n        # Convert the row to a tuple (since lists are not hashable and cannot be used as dictionary keys)\n        row_tuple = tuple(row)\n        \n        # If the row is already in the dictionary, increment its count by 1\n        if row_tuple in instance_count:\n            instance_count[row_tuple] += 1\n        # If the row is not in the dictionary, add it with a count of 1\n        else:\n            instance_count[row_tuple] = 1\n    \n    # Convert the dictionary to an array of tuples, where each tuple contains the instance and its count\n    instance_count_array = [(instance, count) for instance, count in instance_count.items()]\n    \n    # Return the array of tuples\n    return instance_count_array\n"}
{"task_id": "valid/50", "completion": "\n    # Define a dictionary to map url patterns to view functions\n    url_patterns = {\n        r'^$': 'home',\n        r'^about/$': 'about',\n        r'^contact/$': 'contact',\n        r'^login/$': 'login',\n        r'^logout/$': 'logout',\n        r'^register/$': 'register',\n        r'^dashboard/$': 'dashboard',\n        r'^dashboard/(\\d+)/$': 'dashboard',\n        r'^dashboard/(\\d+)/edit/$': 'dashboard_edit',\n        r'^dashboard/(\\d+)/delete/$': 'dashboard_delete',\n        r'^dashboard/(\\d+)/view/$': 'dashboard_view',\n        r'^dashboard/(\\d+)/add/$': 'dashboard_add',\n        r'^dashboard/(\\d+)/edit/(\\d+)/$': 'dashboard_edit',\n        r'^dashboard/(\\d+)/delete/(\\d+)/$': 'dashboard_delete',\n        r'^dashboard/(\\d+)/view/(\\d+)/$': 'dashboard_view',\n        r'^dashboard/(\\d+)/add/(\\d+)/$': 'dashboard_add',\n    }\n\n    # Use regular expression to match the url\n    for pattern, view in url_patterns.items():\n        if re.match(pattern, url):\n            return view\n\n    # If no match is found, return None\n    return None\n\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n"}
{"task_id": "valid/52", "completion": "\n    sentence = \"Hello, how are you?\"\n    return sentence + \" I am good, thanks.\"\n"}
{"task_id": "valid/53", "completion": "\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.add(s[i:j])\n    return substrings\n"}
{"task_id": "valid/54", "completion": "\n    price_sum = 0\n    for dictionary in list_of_dicts:\n        for key in dictionary:\n            if key.startswith(\"price_\"):\n                price_sum += dictionary[key]\n    return price_sum\n"}
{"task_id": "valid/55", "completion": "\n    # Convert the lists to sets for efficient lookup\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Find the intersection of the two sets\n    intersection = set1 & set2\n    \n    # Convert the intersection back to a list and remove the common elements from list1\n    result = [element for element in list1 if element not in intersection]\n    \n    return result\n"}
{"task_id": "valid/56", "completion": "\n    def decorator(func):\n        def wrapper(request, *args, **kwargs):\n            if request_method == 'GET':\n                return api_advisor_view(request, *args, **kwargs)\n            elif request_method == 'POST':\n                return api_advisor_view_post(request, *args, **kwargs)\n            else:\n                return HttpResponse(status=405)\n        return wrapper\n    return decorator\n"}
{"task_id": "valid/57", "completion": "\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Both inputs must be positive integers.\")\n    elif a == b:\n        return a\n    elif a > b:\n        return gcd_recursive(a - b, b)\n    else:\n        return gcd_recursive(a, b - a)\n"}
{"task_id": "valid/58", "completion": "\n    categorized_files = {}\n    for file_path in file_paths:\n        # Get the directory path of the file\n        dir_path = os.path.dirname(file_path)\n        \n        # Get the file name\n        file_name = os.path.basename(file_path)\n        \n        # If the directory path is not in the dictionary, add it\n        if dir_path not in categorized_files:\n            categorized_files[dir_path] = []\n        \n        # Add the file to the list of files in the directory\n        categorized_files[dir_path].append(file_name)\n    \n    return categorized_files\n"}
{"task_id": "valid/59", "completion": "\n    # Sort the list\n    numbers = sorted([a, b, c, d, e])\n    # Find the middle value\n    median = numbers[2]\n    return median\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n"}
{"task_id": "valid/61", "completion": "\n    # Calculate the difference between timeEnd and timeStart\n    timeDifference = timeEnd - timeStart\n    \n    # Return the calculated time difference\n    return timeDifference\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return -1\n    mid = (start + end) // 2\n    if array[mid] == target:\n        return mid\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n"}
{"task_id": "valid/63", "completion": "\n    colors = [\"white\", \"red\", \"green\", \"blue\"]\n    if color not in colors:\n        return \"Invalid color\"\n    return colors[(colors.index(color) + 1) % len(colors)]\n\n"}
{"task_id": "valid/64", "completion": "\n    for i in range(len(list)):\n        list[i] += 1\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end + 1):\n        root = int(i ** 0.5)\n        if root ** 2 == i:\n            return True\n    return False\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        if target in word:\n            return word\n    return None\n"}
{"task_id": "valid/67", "completion": "\n    words = sentence.split()\n    return words\n"}
{"task_id": "valid/68", "completion": "\n    for key in dict.keys():\n        print(key)\n"}
{"task_id": "valid/69", "completion": "\n    phrase = \"Hello, my name is\"\n    name = \"John\"\n    age = 30\n    location = \"New York\"\n    greeting = f\"{phrase} {name}, I am {age} years old and from {location}.\"\n    return greeting\n"}
{"task_id": "valid/70", "completion": "\n    result = []\n    for string in strings:\n        if re.search(r'[^a-zA-Z0-9\\s]', string):\n            result.append(string.capitalize())\n        else:\n            result.append(string)\n    return result\n\n"}
{"task_id": "valid/71", "completion": "\n    try:\n        return string.index(char)\n    except ValueError:\n        return -1\n"}
{"task_id": "valid/72", "completion": "\n    bold_text = []\n    i = 0\n    while i < len(html_code):\n        if html_code[i:i+4] == '<b>':\n            start = i + 4\n            i += 1\n            while html_code[i] != '<':\n                i += 1\n            end = i\n            bold_text.append(html_code[start:end])\n        elif html_code[i:i+5] == '</b>':\n            i += 5\n        else:\n            i += 1\n    return bold_text\n"}
{"task_id": "valid/73", "completion": "\n    # Define the items and their prices\n    items = {\n        'chips': 1.00,\n        'soda': 1.50,\n        'candy': 0.50\n    }\n\n    # Check if the item is in stock\n    if item in items:\n        # Calculate the change to return to the user\n        change = money_inserted - items[item]\n        if change < 0:\n            return \"Insufficient funds\"\n        # Update the stock of the item\n        items[item] -= 1\n        return f\"Here is your {item}. Your change is ${change:.2f}\"\n    else:\n        return \"Item not found\"\n"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    merged_list = list(set(merged_list))\n    return merged_list\n"}
{"task_id": "valid/75", "completion": "\n    return list.count(target)\n"}
{"task_id": "valid/76", "completion": "\n    encoded_string = base64.b64encode(string.encode('utf-8'))\n    return encoded_string.decode('utf-8')\n\n"}
{"task_id": "valid/77", "completion": "\n    return [i for i, x in enumerate(vector) if x != 0]  # return indices of non-zero elements\n"}
{"task_id": "valid/78", "completion": "\n    # Assign a variable\n    x = 5\n\n    # Validate the variable\n    if x == 5:\n        print(\"The variable is 5\")\n    else:\n        print(\"The variable is not 5\")\n"}
{"task_id": "valid/79", "completion": "\n    word_list = list(word)\n    random.shuffle(word_list)\n    return ''.join(word_list)\n\n"}
{"task_id": "valid/80", "completion": "\n    if element == 'H':\n        return 'Hydrogen'\n    elif element == 'He':\n        return 'Helium'\n    elif element == 'Li':\n        return 'Lithium'\n    elif element == 'Be':\n        return 'Beryllium'\n    elif element == 'B':\n        return 'Boron'\n    elif element == 'C':\n        return 'Carbon'\n    elif element == 'N':\n        return 'Nitrogen'\n    elif element == 'O':\n        return 'Oxygen'\n    elif element == 'F':\n        return 'Fluorine'\n    elif element == 'Ne':\n        return 'Neon'\n    elif element == 'Na':\n        return 'Sodium'\n    elif element == 'Mg':\n        return 'Magnesium'\n    elif element == 'Al':\n        return 'Aluminum'\n    elif element == 'Si':\n        return 'Silicon'\n    elif element == 'P':\n        return 'Phosphorus'\n    elif element == 'S':\n        return 'Sulfur'\n    elif element == 'Cl':\n        return 'Chlorine'\n    elif element == 'Ar':\n        return 'Argon'\n    elif element == 'K':\n        return 'Potassium'\n    elif element == 'Ca':\n        return 'Calcium'\n    elif element == 'Sc':\n        return 'Scandium'\n    elif element == 'Ti':\n        return 'Titanium'\n    elif element == 'V':\n        return 'Vanadium'\n    elif element == 'Cr':\n        return 'Chromium'\n    elif element == 'Mn':\n        return 'Manganese'\n    elif element == 'Fe':\n        return 'Iron'\n    elif element == 'Co':\n        return 'Cobalt'\n    elif element == 'Ni':\n        return 'Nickel'\n    elif element == 'Cu':\n        return 'Copper'\n    elif element == 'Zn':\n        return 'Zinc'\n    elif element == 'Ga':\n        return 'Gallium'\n    elif element == 'Ge':\n        return 'Germanium'\n    elif element == 'As':\n        return 'Arsenic'\n    elif element == 'Se':\n        return 'Selenium'\n    elif element == 'Br':\n        return 'Bromine'\n    elif element == 'Kr':\n        return 'Krypton'\n    elif element == 'Rb':\n        return 'Rubidium'\n    elif element == 'Sr':\n        return 'Strontium'\n   "}
{"task_id": "valid/81", "completion": "\n    if len(arr) == 0:\n        return arr\n    merged_arr = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] != merged_arr[-1]:\n            merged_arr.append(arr[i])\n    return merged_arr\n"}
{"task_id": "valid/82", "completion": "\n    # Tokenize the text\n    tokens = re.findall(r'\\w+|[^\\w\\s]', text)\n    return tokens\n\n"}
{"task_id": "valid/83", "completion": "\n    # Filter the list to get numbers divisible by 7\n    divisible_by_7 = [num for num in numbers if num % 7 == 0]\n    \n    # Calculate the average of the numbers divisible by 7\n    average = sum(divisible_by_7) / len(divisible_by_7) if divisible_by_7 else 0\n    \n    # Find the maximum and minimum numbers divisible by 7\n    max_num = max(divisible_by_7) if divisible_by_7 else 0\n    min_num = min(divisible_by_7) if divisible_by_7 else 0\n    \n    # Count the occurrences of each number divisible by 3\n    count_by_3 = {num: numbers.count(num) for num in numbers if num % 3 == 0}\n    \n    # Print the results\n    print(f\"Average of numbers divisible by 7: {average}\")\n    print(f\"Maximum number divisible by 7: {max_num}\")\n    print(f\"Minimum number divisible by 7: {min_num}\")\n    print(\"Occurrences of numbers divisible by 3:\")\n    for num, count in count_by_3.items():\n        print(f\"{num}: {count}\")\n"}
{"task_id": "valid/84", "completion": "\n    # Split the sentence into words\n    words = sentence.split()\n    \n    # Create a dictionary to store the frequency of each word\n    frequency = {}\n    \n    # Iterate over each word in the sentence\n    for word in words:\n        # If the word is already in the dictionary, increment its count\n        if word in frequency:\n            frequency[word] += 1\n        # If the word is not in the dictionary, add it with a count of 1\n        else:\n            frequency[word] = 1\n    \n    # Find the word with the highest frequency\n    highest_frequency_word = max(frequency, key=frequency.get)\n    \n    return highest_frequency_word\n"}
{"task_id": "valid/85", "completion": "\n    return round(math.e, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    average = sum(numbers) / len(numbers)\n    sum_of_numbers = sum(numbers)\n    return average, sum_of_numbers\n\nnumbers = [1, 2, 3, 4, 5]\naverage, sum_of_numbers = getAverageAndSum(numbers)"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series is empty\")\n    if not all(isinstance(x, (int, float)) for x in time_series):\n        raise ValueError(\"Time series contains non-numerical values\")\n    return min(time_series), max(time_series)\n\n"}
{"task_id": "valid/88", "completion": "\n    related_articles = {}\n    for article in encyclopedia:\n        related_articles[article] = 0\n        for other_article in encyclopedia:\n            if article != other_article and is_related(article, other_article):\n                related_articles[article] += 1\n    return related_articles\n"}
{"task_id": "valid/89", "completion": "\n    return lst.index(max(lst))\n"}
{"task_id": "valid/90", "completion": "\n    return len(list1) > 0 and len(list2) > 0\n"}
{"task_id": "valid/91", "completion": "\n    root = Element('data')\n    for key, value in dictionary.items():\n        child = Element(key)\n        child.text = str(value)\n        root.append(child)\n    return tostring(root, encoding='unicode')\n\n"}
{"task_id": "valid/92", "completion": "\n    if not matrix or not matrix[0]:\n        return False\n\n    row, col = 0, len(matrix[0]) - 1\n    while row < len(matrix) and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] > target:\n            col -= 1\n        else:\n            row += 1\n    return False\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for num in lst:\n        if num % 2 != 0:\n            sum_odd += num\n            count_odd += 1\n    if count_odd == 0:\n        return 0\n    return sum_odd / count_odd\n"}
{"task_id": "valid/94", "completion": "\n    if n < 1 or n > len(lst):\n        return None\n    return sorted(lst, reverse=True)[n - 1]\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "valid/96", "completion": "\n    return set_a.symmetric_difference(set_b)\n"}
{"task_id": "valid/97", "completion": "\n    description = \"\"\n    for key, value in mapping.items():\n        description += f\"{key}: {value}\\n\"\n    return description\n"}
{"task_id": "valid/98", "completion": "\n    if n == 0:\n        return '0'\n    elif n < 0:\n        return '-' + dec_to_ternary(-n)\n    else:\n        return dec_to_ternary(n // 3) + str(n % 3)\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(file_name.split('.')[-1] for file_name in file_names)\n"}
{"task_id": "valid/100", "completion": "\n    if age < 0:\n        return \"Invalid age\"\n    elif age < 18:\n        return \"Minor\"\n    elif age < 65:\n        return \"Adult\"\n    else:\n        return \"Senior\"\n"}
{"task_id": "valid/101", "completion": "\n    # Define the grade and gpa mapping\n    grade_mapping = {\n        0: \"F\",\n        1: \"D\",\n        2: \"C\",\n        3: \"B\",\n        4: \"A\"\n    }\n    gpa_mapping = {\n        0: 0,\n        1: 10,\n        2: 20,\n        3: 30,\n        4: 40\n    }\n\n    # Use ternary operator to determine the grade\n    grade = grade_mapping.get(numerical_grade, \"Invalid Grade\")\n\n    # Use ternary operator to calculate the gpa\n    gpa = gpa_mapping.get(numerical_grade, 0)\n\n    return grade, gpa\n"}
{"task_id": "valid/102", "completion": "\n    return sum(item['price'] for item in listing)  # This line is already implemented\n\n"}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    palindrome_dict = {}\n    for palindrome in palindrome_tuples:\n        count = sum(1 for char in palindrome if char.lower() in vowels)\n        palindrome_dict[palindrome] = count\n    return palindrome_dict\n"}
{"task_id": "valid/104", "completion": "\n    # Split the string into words\n    words = s.split()\n    \n    # Reverse the order of the words\n    words = words[::-1]\n    \n    # Join the words back into a string with spaces in between\n    modified_string = ' '.join(words)\n    \n    return modified_string\n"}
{"task_id": "valid/105", "completion": "\n    # Create an empty set to store the numbers we have seen so far\n    seen = set()\n    \n    # Iterate over the array\n    for num in arr:\n        # Check if the negative of the current number is in the set\n        if -num in seen:\n            # If it is, return True\n            return True\n        # Otherwise, add the current number to the set\n        seen.add(num)\n    \n    # If we have iterated over the entire array and haven't found a pair that sums to 0, return False\n    return False\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n    for dependency in dependencies:\n        package_name, version = dependency\n        date, time = version.split('_')\n        date = int(date)\n        time = int(time)\n        if package_name not in latest_versions or date > latest_versions[package_name][0] or (date == latest_versions[package_name][0] and time > latest_versions[package_name][1]):\n            latest_versions[package_name] = (date, time)\n    return latest_versions\n"}
{"task_id": "valid/107", "completion": "\n    # Create a dictionary to store the categorized causes of death\n    categorized_causes = {}\n\n    # Loop through each cause of death\n    for cause in causes:\n        # Split the cause into action and result\n        action, result = cause.split(\", \")\n\n        # If the action is not already in the dictionary, add it\n        if action not in categorized_causes:\n            categorized_causes[action] = []\n\n        # Add the cause to the list of causes for the action\n        categorized_causes[action].append(result)\n\n    # Return the dictionary of categorized causes\n    return categorized_causes\n"}
{"task_id": "valid/108", "completion": "\n    # First, we remove any leading or trailing spaces from the name\n    name = name.strip()\n    \n    # Then, we replace all spaces in the name with hyphens\n    name = name.replace(' ', '-')\n    \n    # Finally, we convert the name to lowercase\n    name = name.lower()\n    \n    # We return the modified name\n    return name\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(c) > 127 for c in text)\n"}
{"task_id": "valid/110", "completion": "\n    # Import the string module which contains a pre-initialized string of punctuation marks\n    import string\n    \n    # Use the translate method to remove punctuation marks from the string\n    # The translate method returns a string where some specified characters are replaced with other specified characters\n    # The maketrans method returns a translation table that can be used with the translate method\n    # The string.punctuation constant contains all the punctuation marks\n    translator = str.maketrans('', '', string.punctuation)\n    return string.translate(translator)\n"}
{"task_id": "valid/111", "completion": "\n    try:\n        result = [num ** exp for num in num_list]\n        return result\n    except TypeError:\n        return \"Error: Input must be a list of numbers and exponent must be an integer.\"\n    except Exception as e:\n        return f\"An error occurred: {str(e)}\"\n"}
{"task_id": "valid/112", "completion": "\n    for row in grid:\n        print(min(row))\n"}
{"task_id": "valid/113", "completion": "\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    if n == 0:\n        return\n    print_thank_you(n - 1, current_num + 1)\n    print(f\"Thank you for {current_num} numbers.\")\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    for i in range(len(lst) - 1):\n        if lst[i] == element and lst[i + 1] == element:\n            count += 1\n    return count\n"}
{"task_id": "valid/115", "completion": "\n    if not isinstance(num, int):\n        raise TypeError(\"num must be an integer\")\n    if not isinstance(base, int):\n        raise TypeError(\"base must be an integer\")\n    if num < 0:\n        raise ValueError(\"num must be a non-negative integer\")\n    if base < 2:\n        raise ValueError(\"base must be at least 2\")\n    if base > 36:\n        raise ValueError(\"base must be at most 36\")\n    if num == 0:\n        return True\n    digits = []\n    while num:\n        digits.append(num % base)\n        num //= base\n    return len(set(digits)) == 1\n\n"}
{"task_id": "valid/116", "completion": "\n    # base case: if the string is empty, return it\n    if not s:\n        return s\n\n    # if the first character is a vowel, remove it and recurse on the rest of the string\n    if s[0].lower() in 'aeiou':\n        return remove_vowels_recursive(s[1:])\n\n    # if the first character is not a vowel, keep it and recurse on the rest of the string\n    return s[0] + remove_vowels_recursive(s[1:])  # <--- changed here\n\n"}
{"task_id": "valid/117", "completion": "\n    # Initialize an empty string to store the help message\n    help_message = \"\"\n\n    # Iterate over each option in the list\n    for option in options:\n        # Extract the option name and description from the tuple\n        option_name, option_description = option\n\n        # Add the option name and description to the help message\n        help_message += f\"  {option_name}: {option_description}\\n\"\n\n    # Return the help message\n    return help_message\n\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n"}
{"task_id": "valid/119", "completion": "\n    return Val.value_counts()\n"}
{"task_id": "valid/120", "completion": "\n    inverted_bitset = sample_bitset.copy()\n    inverted_bitset.invert()\n    return inverted_bitset\n"}
{"task_id": "valid/121", "completion": "\n    vowels = 'aeiou'\n    for char in s:\n        if char.lower() not in vowels:\n            return False\n    return True\n"}
{"task_id": "valid/122", "completion": "\n    count = 0\n    for i in range(len(sequence)):\n        if sequence[i:i+len(subsequence)] == subsequence:\n            count += 1\n    return count\n"}
{"task_id": "valid/123", "completion": "\n    # Initialize quotient to 0\n    q = 0\n    # Initialize remainder to dividend\n    r = h\n    # Loop until remainder is less than divisor\n    while r >= t:\n        # Subtract divisor from remainder\n        r = r - t\n        # Increment quotient\n        q = q + 1\n    # Return quotient\n    return q\n"}
{"task_id": "valid/124", "completion": "\n    return sum(num for num in input_list if num % 2 != 0)\n"}
{"task_id": "valid/125", "completion": "\n    # Define the set of vowels\n    vowels = set('aeiouAEIOU')\n    \n    # Initialize a counter for consonants\n    consonant_count = 0\n    \n    # Iterate over each character in the string\n    for char in string:\n        # Check if the character is a letter and not a vowel\n        if char.isalpha() and char not in vowels:\n            # Increment the consonant count\n            consonant_count += 1\n    \n    # Return the total count of consonants\n    return consonant_count\n"}
{"task_id": "valid/126", "completion": "\n    # Calculate the number of electrons based on the density of states (DOS)\n    num_electrons = ados * dos_grid_size\n    \n    # Adjust the number of electrons based on doping\n    num_electrons += dope\n    \n    return num_electrons\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    return [arr[-1]] + arr[:-1]\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n"}
{"task_id": "valid/131", "completion": "\n    \n    # Initialize an empty list to store the unique elements\n    unique_elements = []\n    \n    # Initialize a set to keep track of the elements we have seen so far\n    seen = set()\n    \n    # Iterate through the list\n    for element in lst:\n        # Check if the element is not in the seen set\n        if element not in seen:\n            # Add the element to the seen set\n            seen.add(element)\n            # Add the element to the unique_elements list\n            unique_elements.append(element)\n            # If we have 3 unique elements, break the loop\n            if len(unique_elements) == 3:\n                break\n    \n    # Return the list of unique elements\n    return unique_elements\n"}
{"task_id": "valid/132", "completion": "\n    return sorted(fruit_list)\n"}
{"task_id": "valid/133", "completion": "\n    sublists = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            sublists.append(lst[i:j])\n    return sublists\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d\\.\\d'\n    return bool(re.search(pattern, string))\n\n"}
{"task_id": "valid/135", "completion": "\n    migration_operation = {\n        \"app_name\": app_name,\n        \"model_name\": model_name,\n        \"field_name\": field_name,\n        \"operation\": \"add\"\n    }\n    return migration_operation\n"}
{"task_id": "valid/136", "completion": "\n    # Convert the lists to sets for efficient lookup\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Find the intersection of the two sets (i.e., the common elements)\n    common_elements = set1.intersection(set2)\n    \n    # Calculate the sum of the common elements\n    common_elements_sum = sum(common_elements)\n    \n    return common_elements_sum\n"}
{"task_id": "valid/137", "completion": "\n    # Calculate 1% of the dataset\n    one_percent = len(df) * 0.01\n    \n    # Round the result to the nearest integer\n    forecast_period = math.ceil(one_percent)\n    \n    return forecast_period\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: getattr(x, attr))\n"}
{"task_id": "valid/139", "completion": "\n    # Calculate the start index of the page\n    start_index = (page_number - 1) * items_per_page\n    \n    # Calculate the end index of the page\n    end_index = start_index + items_per_page\n    \n    # Slice the list to get the items for the current page\n    paginated_items = items[start_index:end_index]\n    \n    return paginated_items\n\n"}
{"task_id": "valid/140", "completion": "\n    n_str = n_str.lstrip('-')\n    result = ''\n    carry = 0\n    for i in range(len(n_str)-1, -1, -1):\n        digit = int(n_str[i]) + carry\n        result = str(digit % 10) + result\n        carry = digit // 10\n    if carry:\n        result = str(carry) + result\n    if n_str[0] == '-':\n        result = '-' + result\n    return result\n"}
{"task_id": "valid/141", "completion": "\n    # Define the dictionary of preset coordinates\n    preset_coordinates = {\n        \"home\": (0.0, 0.0, 0.0),\n        \"up\": (0.0, 0.0, 0.5),\n        \"down\": (0.0, 0.0, -0.5),\n        \"left\": (-0.5, 0.0, 0.0),\n        \"right\": (0.5, 0.0, 0.0),\n        \"forward\": (0.0, 0.5, 0.0),\n        \"backward\": (0.0, -0.5, 0.0)\n    }\n\n    # Check if the preset name is valid\n    if preset_name not in preset_coordinates:\n        raise ValueError(\"Invalid preset name\")\n\n    # Return the coordinates for the given preset\n    return preset_coordinates[preset_name]\n"}
{"task_id": "valid/142", "completion": "\n    # Convert the lists to sets for efficient lookup\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Find the intersection of the two sets (common elements)\n    common_elements = set1.intersection(set2)\n    \n    # Initialize the product of common elements to 1\n    product = 1\n    \n    # Iterate over the common elements and multiply them together\n    for element in common_elements:\n        product *= element\n    \n    return product\n"}
{"task_id": "valid/143", "completion": "\n    if allow_multiple_answer:\n        # if multiple answers are allowed, the quiz will be displayed in a grid layout\n        layout = \"grid\"\n    else:\n        # if multiple answers are not allowed, the quiz will be displayed in a single column layout\n        layout = \"single_column\"\n\n    if zoom_level == \"high\":\n        # if the zoom level is high, the quiz will be displayed in a larger font size\n        font_size = 24\n    elif zoom_level == \"medium\":\n        # if the zoom level is medium, the quiz will be displayed in a medium font size\n        font_size = 18\n    elif zoom_level == \"low\":\n        # if the zoom level is low, the quiz will be displayed in a smaller font size\n        font_size = 12\n\n    # the quiz will be displayed in a modal window\n    display_in_modal = True\n\n    # the quiz will be displayed with a timer\n    display_with_timer = True\n\n    # the quiz will be displayed with a score tracker\n    display_with_score_tracker = True\n\n    # return the configurations as a dictionary\n    return {\n        \"layout\": layout,\n        \"font_size\": font_size,\n        \"display_in_modal\": display_in_modal,\n        \"display_with_timer\": display_with_timer,\n        \"display_with_score_tracker\": display_with_score_tracker\n    }  # return the configurations as a dictionary\n\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in sentence if char not in vowels])\n"}
{"task_id": "valid/146", "completion": "\n    # First, we filter out keys that contain non-alphabetic characters\n    a = {k: v for k, v in a.items() if k.isalpha()}\n    b = {k: v for k, v in b.items() if k.isalpha()}\n\n    # Then, we merge the two objects\n    merged = {**a, **b}\n\n    # We define a recursive function to merge nested objects\n    def merge_nested(obj1, obj2):\n        for k, v in obj2.items():\n            if isinstance(v, dict) and k in obj1 and isinstance(obj1[k], dict):\n                merge_nested(obj1[k], v)\n            else:\n                obj1[k] = v\n\n    # We call the recursive function to merge the nested objects\n    merge_nested(merged, b)\n\n    # Finally, we sort the merged object by keys\n    merged = dict(sorted(merged.items()))\n\n    return merged\n\n"}
{"task_id": "valid/147", "completion": "\n    if not isinstance(d, dict):\n        raise TypeError(\"Input must be a dictionary\")\n    if not d:\n        raise ValueError(\"Dictionary is empty\")\n    try:\n        return max(d.values())\n    except TypeError:\n        raise ValueError(\"Dictionary values must be comparable\")\n"}
{"task_id": "valid/148", "completion": "\n    # Get the list of values for the given key\n    values = dict.get(key, [])\n\n    # Check if the list is not empty\n    if values:\n        # Calculate the average\n        avg = sum(values) / len(values)\n        return avg\n    else:\n        return None\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == '':\n        return None\n    else:\n        return string.replace('e', '*')  # replace 'e' with '*' in the string\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n\n"}
{"task_id": "valid/151", "completion": "\n    return x % 2 == 0 or x % 5 == 0 or x % 7 == 0 or x % 11 == 0 or x % 13 == 0 or x % 17 == 0 or x % 19 == 0 or x % 23 == 0 or x % 29 == 0 or x % 31 == 0 or x % 37 == 0 or x % 41 == 0 or x % 43 == 0 or x % 47 == 0 or x % 53 == 0 or x % 59 == 0 or x % 61 == 0 or x % 67 == 0 or x % 71 == 0 or x % 73 == 0 or x % 79 == 0 or x % 83 == 0 or x % 89 == 0 or x % 97 == 0\n\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n\n"}
