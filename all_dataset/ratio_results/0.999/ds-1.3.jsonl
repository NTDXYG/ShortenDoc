{"task_id": "valid/0", "completion": "\n    if \"good\" in text:\n        return \"positive\"\n    elif \"bad\" in text:\n        return \"negative\"\n    else:\n        return \"neutral\"\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n\n"}
{"task_id": "valid/3", "completion": "\n    return sorted(instruments, reverse=True)\n\n\ninstruments = [\"Guitar\", \"Piano\", \"Flute\", \"Violin\", \"Drums\"]"}
{"task_id": "valid/4", "completion": "\n    try:\n        return json.loads(json_string)\n    except json.JSONDecodeError:\n        print(\"Invalid JSON\")\n        return None\n\njson_string = '[{\"name\": \"alice\", \"age\": 25}, {\"name\": \"bob\", \"age\": 30}]'"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n\n    sum_digits = sum(int(digit) for digit in str(n))\n    return n % sum_digits == 0\n\n"}
{"task_id": "valid/6", "completion": "\n    if n == 1:\n        return 0\n    else:\n        return 1 + discrete_logarithm(n // base, base)\n\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        data = json.loads(json_str)\n        pprint.pprint(data)\n    except ValueError:\n        print(\"Invalid JSON\")\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n\n"}
{"task_id": "valid/9", "completion": "\n    for key in values:\n        template = template.replace(\"{{\" + key + \"}}\", values[key])\n    return template\n"}
{"task_id": "valid/10", "completion": "\n    return len(string) == len(set(string))\n\n"}
{"task_id": "valid/11", "completion": "\n    date_object = datetime.strptime(date_string, '%Y-%m-%d')\n    new_date = date_object + timedelta(days=days)\n    return new_date.strftime('%Y-%m-%d')\n"}
{"task_id": "valid/12", "completion": "\n    # check if the text is more than 10000 characters\n    if len(text) > 10000:\n        return \"Error: Text is too long\"\n\n    # eliminate whitespace at the start and at the end\n    text = text.strip()\n\n    # eliminate whitespace between words\n    text = ' '.join(text.split())\n\n    return text\n"}
{"task_id": "valid/13", "completion": "\n    # Remove punctuation\n    text = text.translate(str.maketrans('', '', string.punctuation))\n\n    # Remove extra spaces\n    text = ' '.join(text.split())\n\n    # Convert to lower case\n    text = text.lower()\n\n    return text\n"}
{"task_id": "valid/14", "completion": "\n    return re.search(word1, text) or re.search(word2, text)\n"}
{"task_id": "valid/15", "completion": "\n    return sum(sum(array, []))\n\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    lines = comment.split('\\n')\n    for line in lines:\n        if 'tabstop' in line:\n            settings['tabstop'] = int(line.split('=')[1])\n        elif 'expandtab' in line:\n            settings['expandtab'] = line.split('=')[1].lower() == 'true'\n        elif 'shiftwidth' in line:\n            settings['shiftwidth'] = int(line.split('=')[1])\n        elif 'softtabstop' in line:\n            settings['softtabstop'] = int(line.split('=')[1])\n    return settings\n\n"}
{"task_id": "valid/17", "completion": "\n    words = sentence.split()\n    return words\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)\n\n"}
{"task_id": "valid/19", "completion": "\n    # Reverse each list\n    list1.reverse()\n    list2.reverse()\n\n    # Combine the two lists\n    combined_list = list1 + list2\n\n    # Sort the combined list\n    combined_list.sort()\n\n    return combined_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n\n"}
{"task_id": "valid/21", "completion": "\n    return z * z\n\n"}
{"task_id": "valid/22", "completion": "\n    if \"name\" in dictionary:\n        return dictionary[\"name\"]\n    else:\n        return None\n"}
{"task_id": "valid/23", "completion": "\n    def convert(data):\n        if isinstance(data, list):\n            return [convert(item) for item in data]\n        elif isinstance(data, dict):\n            return {k: convert(v) for k, v in data.items()}\n        else:\n            return data\n\n    return convert(struct)\n\n"}
{"task_id": "valid/24", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def next_palindrome(n):\n        n += 1\n        while not is_palindrome(n):\n            n += 1\n        return n\n\n    def prev_palindrome(n):\n        n -= 1\n        while not is_palindrome(n):\n            n -= 1\n        return n\n\n    if is_palindrome(num):\n        return num\n\n    lower = prev_palindrome(num)\n    upper = next_palindrome(num)\n\n    if num - lower <= upper - num:\n        return lower\n    else:\n        return upper\n"}
{"task_id": "valid/25", "completion": "\n    return num ** 2\n"}
{"task_id": "valid/26", "completion": "\n    rows = len(matrix)\n    cols = len(matrix[0]) if matrix else 0\n    diagonal_sum = sum(matrix[i][i] for i in range(min(rows, cols)))\n    is_square = rows == cols\n\n    return rows, cols, diagonal_sum, is_square\n\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode())\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c.lower() for c in s if c.isalpha())\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n"}
{"task_id": "valid/30", "completion": "\n    try:\n        if isinstance(json_data, str):\n            json_data = json.loads(json_data)\n        return key not in json_data\n    except (TypeError, ValueError):\n        return False\n"}
{"task_id": "valid/31", "completion": "\n    import tkinter as tk\n\n    root = tk.Tk()\n    table = tk.Frame(root)\n\n    for i in range(len(buttons)):\n        button = tk.Button(table, text=buttons[i], command=lambda i=i: action(i))\n        button.pack(side=\"top\", fill=\"both\", expand=True)\n\n    table.pack(side=\"top\", fill=\"both\", expand=True)\n\n    root.mainloop()\n\n"}
{"task_id": "valid/32", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(s)):\n        if s[i] != alphabet[i]:\n            return False\n    return True\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "valid/34", "completion": "\n    numeric_substrings = [s for s in ts.split() if s.isdigit()]\n    return sum(int(s) for s in numeric_substrings)\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() if word[-1].isalpha() else word for word in words]\n"}
{"task_id": "valid/36", "completion": "\n    def validate(arr):\n        for i in arr:\n            if not isinstance(i, (int, float)):\n                return False\n        return True\n\n    def add(arr):\n        return sum(arr)\n\n    if validate(arr):\n        return add(arr)\n    else:\n        return \"Invalid array\"\n"}
{"task_id": "valid/37", "completion": "\n    # Load the JSON data\n    data = json.loads(json_data)\n\n    # Extract the neighborhood names and sort them\n    neighborhoods = [item['name'] for item in data]\n    neighborhoods.sort()\n\n    return neighborhoods\n"}
{"task_id": "valid/38", "completion": "\n    # Initialize minimum absolute sum\n    min_sum = float('inf')\n\n    # Sort the array\n    arr.sort()\n\n    # Traverse the array\n    for i in range(n - 1):\n        # Update minimum sum\n        min_sum = min(min_sum, abs(arr[i] + arr[i + 1]))\n\n    return min_sum\n\n"}
{"task_id": "valid/39", "completion": "\n    def is_balanced(p):\n        stack = []\n        for char in p:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack or stack.pop() != '(':\n                    return False\n        return not stack\n\n    def evaluate_expression(expression):\n        if '+' in expression:\n            left, op, right = expression.split('+')\n            return str(evaluate_expression(left) + evaluate_expression(right))\n        elif '-' in expression:\n            left, op, right = expression.split('-')\n            return str(evaluate_expression(left) - evaluate_expression(right))\n        elif '*' in expression:\n            left, op, right = expression.split('*')\n            return str(evaluate_expression(left) * evaluate_expression(right))\n        elif '/' in expression:\n            left, op, right = expression.split('/')\n            return str(evaluate_expression(left) / evaluate_expression(right))\n        else:\n            return int(expression)\n\n    def evaluate_expression_advanced(expression):\n        if '(' in expression:\n            left, op, right = expression.split('(', 1)\n            return str(evaluate_expression_advanced(left + evaluate_expression(right) + ')'))\n        else:\n            return evaluate_expression(expression)\n\n    return is_balanced(p) and evaluate_expression_advanced(p)\n\n"}
{"task_id": "valid/40", "completion": "\n    # Check if votes are valid\n    for vote in votes:\n        if not isinstance(vote[1], int) or vote[1] < 100:\n            raise ValueError(\"Number of votes must be at least 100.\")\n        if not isinstance(vote[1], str) or not vote[1].isupper():\n            raise ValueError(\"Candidate name must be a string of uppercase letters.\")\n\n    # Create a dictionary to store the votes\n    votes_dict = {}\n\n    # Count the votes\n    for vote in votes:\n        if vote[0] in votes_dict:\n            votes_dict[vote[0]] += vote[1]\n        else:\n            votes_dict[vote[0]] = vote[1]\n\n    # Calculate the percentage of votes\n    total_votes = sum(votes_dict.values())\n    for candidate in votes_dict:\n        votes_dict[candidate] = (votes_dict[candidate] / total_votes) * 100\n        votes_dict[candidate] = round(votes_dict[candidate], 2)\n\n    return votes_dict\n\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        date_object = datetime.strptime(date_string, '%d-%m-%Y')\n        return date_object.strftime('%B %Y')\n    except ValueError:\n        try:\n            date_object = datetime.strptime(date_string, '%d-%b-%Y')\n            return date_object.strftime('%d, %Y')\n        except ValueError:\n            raise ValueError(\"Invalid date format. Please use dd-mm-yyyy or dd-mmm-yy format.\")\n"}
{"task_id": "valid/42", "completion": "\n    allowed_extensions = ['txt', 'docx', 'pdf', 'xlsx', 'png', 'jpg', 'jpeg', 'gif', 'mp3', 'mp4', 'avi', 'mov', 'zip', 'rar']\n\n    if newname.split('.')[-1] in allowed_extensions:\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/43", "completion": "\n    new_lst = [i for i in lst if isinstance(i, int) and i % 2 == 0]\n    return tuple(new_lst)\n"}
{"task_id": "valid/44", "completion": "\n    minutes = hours * 60\n    return minutes\n\nhours = int(input(\"Enter hours: \"))\nminutes = hours_to_minutes(hours)"}
{"task_id": "valid/45", "completion": "\n    return string.count(specific_character)\n"}
{"task_id": "valid/46", "completion": "\n    # histogram_data = histogram_data.append(pd.Series([generation, accs]), ignore_index=True)\n    return histogram_data\n\n"}
{"task_id": "valid/47", "completion": "\n    return bool(re.match(r'^\\w{5}$', string))\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        parts = classifier.split()\n        if len(parts) == 3 and parts[0] == 'programming' and parts[1] in ['language', 'version']:\n            unique_languages.add(parts[2])\n    return len(unique_languages)\n"}
{"task_id": "valid/49", "completion": "\n    result = []\n    for i in range(len(arr)):\n        count = 0\n        for j in range(len(arr[i])):\n            if arr[i][j] == arr[i][0]:\n                count += 1\n        result.append(count)\n    return result\n"}
{"task_id": "valid/50", "completion": "\n    # Define the list of URLs\n    urlpatterns = [\n        re.compile(r'^$'),\n        re.compile(r'^home/$'),\n        re.compile(r'^about/$'),\n        re.compile(r'^contact/$'),\n        re.compile(r'^blog/$'),\n        re.compile(r'^blog/post/$'),\n        re.compile(r'^blog/category/$'),\n        re.compile(r'^accounts/login/$'),\n        re.compile(r'^accounts/logout/$'),\n        re.compile(r'^accounts/password_change/$'),\n        re.compile(r'^accounts/password_change_done/$'),\n        re.compile(r'^accounts/password_reset/$'),\n        re.compile(r'^accounts/password_reset_done/$'),\n        re.compile(r'^accounts/register/$'),\n        re.compile(r'^accounts/register_done/$'),\n    ]\n\n    # Iterate over the list of URLs\n    for pattern in urlpatterns:\n        if re.match(pattern, url):\n            return pattern.string\n\n    return None\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n"}
{"task_id": "valid/52", "completion": "\n    sentence = \"Hello, World!\"\n    return sentence\n"}
{"task_id": "valid/53", "completion": "\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings.add(s[i:j])\n    return substrings\n\ns = \"abcabc\""}
{"task_id": "valid/54", "completion": "\n    total_price = 0\n    for dictionary in list_of_dicts:\n        for key in sorted(dictionary.keys()):\n            if key.startswith(\"price\"):\n                total_price += dictionary[key]\n    return total_price\n"}
{"task_id": "valid/55", "completion": "\n    intersection = [value for value in list1 if value in list2]\n    list1 = [value for value in list1 if value not in list2]\n    list2 = [value for value in list2 if value not in list1]\n    return intersection\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6,]"}
{"task_id": "valid/56", "completion": "\n    def decorator_function(view_function):\n        def wrapper_function(request):\n            if request_method == 'GET':\n                return view_function(request)\n            else:\n                return HttpResponseBadRequest()\n        return wrapper_function\n    return decorator_function\n"}
{"task_id": "valid/57", "completion": "\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both arguments must be integers\")\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Both arguments must be positive integers\")\n    if a < b:\n        return gcd_recursive(b, a)\n    elif b == 0:\n        return a\n    else:\n        return gcd_recursive(b, a % b)\n\n"}
{"task_id": "valid/58", "completion": "\n    config_files = {}\n    for file_path in file_paths:\n        file_name = file_path.split('/')[-1]\n        if file_name.endswith('.conf'):\n            category = file_path.split('/')[-2]\n            if category not in config_files:\n                config_files[category] = []\n            config_files[category].append(file_path)\n    return config_files\n\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n"}
{"task_id": "valid/60", "completion": "\n    if len(my_list) == len(set(my_list)):\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/61", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return False\n    mid = (start + end) // 2\n    if array[mid] == target:\n        return True\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    colors = [\"white\", \"red\", \"green\", \"blue\"]\n    current_index = colors.index(color)\n    if current_index == 3:\n        return colors[0]\n    else:\n        return colors[current_index + 1]\n\n"}
{"task_id": "valid/64", "completion": "\n    for i in range(len(list)):\n        list[i] += 1\n    return list\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end + 1):\n        if i**0.5 == int(i**0.5):\n            return True\n    return False\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        if target in word:\n            return word\n    return None\n"}
{"task_id": "valid/67", "completion": "\n    words = sentence.split()\n    return words\n"}
{"task_id": "valid/68", "completion": "\n    for key in dict.keys():\n        print(key)\n\nfruits = {'apple': 5, 'banana': 3, 'orange': 2}"}
{"task_id": "valid/69", "completion": "\n    phrase = \"Hello\"\n    name = \"World\"\n    return f\"{phrase} {name}\"\n"}
{"task_id": "valid/70", "completion": "\n    result = []\n    for string in strings:\n        if re.match(\"^[A-Za-z0-9\\s]*$\", string):\n            result.append(string.upper())\n    return result\n"}
{"task_id": "valid/71", "completion": "\n    return string.index(char)\n"}
{"task_id": "valid/72", "completion": "\n    start_tag = \"<b>\"\n    end_tag = \"</b>\"\n    bold_texts = []\n    current_tag = \"\"\n    in_tag = False\n\n    for char in html_code:\n        if char == '<':\n            in_tag = True\n            current_tag = \"\"\n        elif char == '>':\n            in_tag = False\n            if current_tag == start_tag:\n                bold_texts.append(current_tag)\n        elif in_tag:\n            current_tag += char\n\n    return bold_texts\n\n"}
{"task_id": "valid/73", "completion": "\n    # define the prices of the items\n    prices = {\n        \"item1\": 1.0,\n        \"item2\": 0.8,\n        \"item3\": 0.6,\n    }\n\n    # check if the item is in the stock\n    if item in prices:\n        # check if the money inserted is enough\n        if money_inserted >= prices[item]:\n            # calculate the change\n            change = money_inserted - prices[item]\n            # update the stock\n            item = \"item1\"\n            print(f\"Here is your {item} and your change is ${change:.2f}\")\n        else:\n            print(\"Sorry, not enough money inserted\")\n    else:\n        print(\"Sorry, the item is not in stock\")\n\n    return item\n"}
{"task_id": "valid/74", "completion": "\n    return list(set(list1 + list2))\n\n"}
{"task_id": "valid/75", "completion": "\n    return list.count(target)\n"}
{"task_id": "valid/76", "completion": "\n    return base64.b64encode(string.encode())\n"}
{"task_id": "valid/77", "completion": "\n    non_zero_indices = [i for i, x in enumerate(vector) if x != 0]\n    return non_zero_indices\n"}
{"task_id": "valid/78", "completion": "\n    # Assign a value to a variable\n    variable = 10\n\n    # Validate the variable\n    if variable == 10:\n        print(\"Variable is valid\")\n    else:\n        print(\"Variable is not valid\")\n\nassign_and_validate()\n"}
{"task_id": "valid/79", "completion": "\n    word_list = list(word)\n    random.shuffle(word_list)\n    return ''.join(word_list)\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"Integer\"\n    elif isinstance(element, float):\n        return \"Float\"\n    elif isinstance(element, str):\n        return \"String\"\n    elif isinstance(element, bool):\n        return \"Boolean\"\n    elif isinstance(element, list):\n        return \"List\"\n    elif isinstance(element, tuple):\n        return \"Tuple\"\n    elif isinstance(element, dict):\n        return \"Dictionary\"\n    elif isinstance(element, set):\n        return \"Set\"\n    else:\n        return \"Unknown\"\n"}
{"task_id": "valid/81", "completion": "\n    result = []\n    for i in range(len(arr)):\n        if i == 0 or arr[i] != arr[i-1]:\n            result.append(arr[i])\n    return result\n"}
{"task_id": "valid/82", "completion": "\n    token = re.findall(r'\\b\\w+\\b', text)\n    return token\n\ntext = \"Hello, this is a test text for tokenization.\""}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [n for n in numbers if n % 3 == 0 or n % 7 == 0]\n    average = sum(divisible_numbers) / len(divisible_numbers)\n    print(f\"Average: {average}\")\n    print(f\"Max: {max(divisible_numbers)}\")\n    print(f\"Min: {min(divisible_numbers)}\")\n    divisible_by_3_7 = {n: divisible_numbers.count(n) for n in divisible_numbers if n % 3 == 0 or n % 7 == 0}\n    print(divisible_by_3_7)\n\n"}
{"task_id": "valid/84", "completion": "\n    words = sentence.split()\n    word_freq = {}\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n    return max(word_freq, key=word_freq.get)\n\n"}
{"task_id": "valid/85", "completion": "\n    euler_number = 2.0\n    for i in range(1, 10000):\n        euler_number += 1.0 / math.factorial(i)\n    return round(euler_number, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    average = sum(numbers) / len(numbers)\n    total = sum(numbers)\n    return average, total\n"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series cannot be empty\")\n    try:\n        min_val = min(time_series)\n        max_val = max(time_series)\n        return min_val, max_val\n    except TypeError:\n        raise ValueError(\"Time series should contain only numerical values\")\n"}
{"task_id": "valid/88", "completion": "\n    related_articles_count = {}\n    for article in encyclopedia:\n        related_articles_count[article] = len(encyclopedia.get_articles_by_similarity(article))\n    return related_articles_count\n"}
{"task_id": "valid/89", "completion": "\n    max_index = 0\n    for i in range(1, len(lst)):\n        if lst[i] > lst[max_index]:\n            max_index = i\n    return max_index\n"}
{"task_id": "valid/90", "completion": "\n    if list1 and list2:\n        return True\n    return False\n"}
{"task_id": "valid/91", "completion": "\n    def _dict_to_xml(element, dictionary):\n        for key, value in dictionary.items():\n            if isinstance(value, dict):\n                sub_element = Element(key)\n                element.append(sub_element)\n                _dict_to_xml(sub_element, value)\n            else:\n                element.text = str(value)\n        return element\n\n    root = Element(\"data\")\n    _dict_to_xml(root, dictionary)\n    return tostring(root, encoding='utf-8', method='xml')\n"}
{"task_id": "valid/92", "completion": "\n    if not matrix or not matrix[0]:\n        return False\n\n    rows, cols = len(matrix), len(matrix[0])\n    low, high = 0, rows * cols\n\n    while low < high:\n        mid = (low + high) // 2\n        num = matrix[mid // cols][mid % cols]\n\n        if num == target:\n            return True\n        elif num < target:\n            low = mid + 1\n        else:\n            high = mid\n\n    return False\n"}
{"task_id": "valid/93", "completion": "\n    sum_of_odd_numbers = 0\n    count_of_odd_numbers = 0\n    for i in lst:\n        if i % 2 != 0:\n            sum_of_odd_numbers += i\n            count_of_odd_numbers += 1\n    return sum_of_odd_numbers / count_of_odd_numbers if count_of_odd_numbers != 0 else None\n"}
{"task_id": "valid/94", "completion": "\n    if n > len(lst) or n < 1:\n        return None\n    else:\n        lst.sort(reverse=True)\n        return lst[n - 1]\n\n\nlst = [9, 4, 7, 2, 1, 5]"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "valid/96", "completion": "\n    return set_a ^ set_b\n"}
{"task_id": "valid/97", "completion": "\n\n    This discord bot is designed to provide information about its features and a web app for managing playlists and settings. It also has the ability to categorize commands and provide help information for each command.\n    \"\"\"\n    return description\n\n"}
{"task_id": "valid/98", "completion": "\n    def ternary(n):\n        if n < 0:\n            return \"-\" + ternary(-n)\n        elif n < 3:\n            return str(n)\n        else:\n            return ternary(n // 3) + str(n % 3)\n\n    return ternary(n)\n\n"}
{"task_id": "valid/99", "completion": "\n    extensions = []\n    for file_name in file_names:\n        extension = file_name.split('.')[-1]\n        extensions.append(extension)\n    return tuple(extensions)\n\n"}
{"task_id": "valid/100", "completion": "\n    if age < 18:\n        return \"Minor\"\n    elif 18 <= age < 30:\n        return \"Middle-aged\"\n    elif 30 <= age < 60:\n        return \"Senior\"\n    else:\n        return \"Old\"\n"}
{"task_id": "valid/101", "completion": "\n    grade = 'A' if numerical_grade >= 90 else 'B' if numerical_grade >= 80 else 'C' if numerical_grade >= 70 else 'D' if numerical_grade >= 60 else 'F'\n\n    gpa = numerical_grade / 10\n\n    return grade, gpa\n\n"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item['price']\n    return total\n"}
{"task_id": "valid/103", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = {}\n    for palindrome in palindrome_tuples:\n        count = 0\n        for letter in palindrome:\n            if letter.lower() in vowels:\n                count += 1\n        result[palindrome] = count\n    return result\n\n"}
{"task_id": "valid/104", "completion": "\n    if s.isupper():\n        return s.lower()\n    elif s.islower():\n        return s.upper()\n    elif s[0].isupper():\n        return s.capitalize()\n    else:\n        return s\n"}
{"task_id": "valid/105", "completion": "\n    if len(arr) <= 1:\n        return False\n\n    seen = set()\n\n    for num in arr:\n        if -num in seen:\n            return True\n        seen.add(num)\n\n    return False\n"}
{"task_id": "valid/106", "completion": "\n    result = {}\n    for dep in dependencies:\n        package_name, version_number = dep\n        version_number_list = version_number.split('_')\n        year, month, day, hour, minute = map(int, version_number_list[0].split('_'))\n        date = datetime.datetime(year, month, day, hour, minute)\n        result[package_name] = date\n    return result\n"}
{"task_id": "valid/107", "completion": "\n    # Define the categories\n    categories = {\n        \"physical_injury\": [],\n        \"mental_injury\": [],\n        \"life_threatening\": [],\n        \"unintentional\": [],\n        \"other\": [],\n    }\n\n    # Loop through the causes\n    for cause in causes:\n        action, result = cause.split(\":\")\n        result = result.strip()\n\n        if result == \"death\":\n            if action.startswith(\"injury\"):\n                categories[\"physical_injury\"].append(cause)\n            elif action.startswith(\"threaten\"):\n                categories[\"life_threatening\"].append(cause)\n            else:\n                categories[\"other\"].append(cause)\n        elif result == \"survival\":\n            if action.startswith(\"injury\"):\n                categories[\"mental_injury\"].append(cause)\n            else:\n                categories[\"unintentional\"].append(cause)\n        else:\n            categories[\"other\"].append(cause)\n\n    return categories\n\n"}
{"task_id": "valid/108", "completion": "\n    return name.replace(\" \", \"-\").lower()\n"}
{"task_id": "valid/109", "completion": "\n    return [char for char in text if ord(char) > 127]\n\n"}
{"task_id": "valid/110", "completion": "\n    import string\n    translator = str.maketrans('', '', string.punctuation)\n    return string.translate(string, translator)\n"}
{"task_id": "valid/111", "completion": "\n    result = []\n    for num in num_list:\n        try:\n            result.append(num ** exp)\n        except TypeError:\n            print(f\"TypeError: {num} is not a number\")\n        except Exception as e:\n            print(f\"An error occurred: {e}\")\n    return result\n\n\nnum_list = [2, 3, 4, 5, 'a', 6]\nexp = 3"}
{"task_id": "valid/112", "completion": "\n    for i in range(len(grid)):\n        min_value = min(grid[i])\n        print(min_value)\n"}
{"task_id": "valid/113", "completion": "\n    if not isinstance(n, int) or n <= 0:\n        print(\"Please enter a positive integer.\")\n        return\n\n    if current_num > n:\n        return\n\n    print(f\"You're welcome, {current_num}th person.\")\n    print_thank_you(n, current_num + 1)\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == element:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            return count\n    return count\n"}
{"task_id": "valid/115", "completion": "\n    num_str = str(num)\n    return len(set(num_str)) == 1\n\n\ncheck_repdigit = partial(check_repdigit, base=10)\n\n"}
{"task_id": "valid/116", "completion": "\n    if len(s) == 0:\n        return s\n    else:\n        first_char = s[0]\n        if first_char.lower() in 'aeiou':\n            return first_char.lower() + remove_vowels_recursive(s[1:])\n        else:\n            return first_char + remove_vowels_recursive(s[1:])\n\n"}
{"task_id": "valid/117", "completion": "\n    def format_option(option):\n        return f\"{option[0]}: {option[1]}\"\n\n    def format_help(options):\n        formatted_options = [format_option(option) for option in options]\n        return \"\\n\".join(formatted_options)\n\n    return format_help(options)\n\n"}
{"task_id": "valid/118", "completion": "\n    if isinstance(input_string, str):\n        return input_string[0]\n    else:\n        return \"Error: input is not a string\"\n"}
{"task_id": "valid/119", "completion": "\n    count_dict = {}\n    for i in Val:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    return count_dict\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset & 0xFF\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = \"aeiou\"\n    for char in s.lower():\n        if char not in vowels:\n            return False\n    return True\n"}
{"task_id": "valid/122", "completion": "\n    count = sequence.count(subsequence)\n    return count\n\nsequence_of_characters = \"please find the number of occurrences of this string\"\nspecific_subsequence = \"string\"\n"}
{"task_id": "valid/123", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "valid/124", "completion": "\n    return sum(i for i in input_list if i % 2 != 0)\n\n"}
{"task_id": "valid/125", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    count = 0\n    for char in string:\n        if char in consonants:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/126", "completion": "\n\n        This function should calculate the number of electrons based on the given parameters.\n        \"\"\"\n        # Implement your code here\n        pass\n\n    def adjust_electron_count(grid_energies, ados, dope, dos_grid_size):\n        \"\"\"\n        This function should adjust the number of electrons based on the given parameters.\n        \"\"\"\n        # Implement your code here\n        pass\n\n    # Test the functions\n    grid_energies = [0, 1, 2, 3, 4, 5]\n    ados = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6]\n    dope = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6]\n    dos_grid_size = 10\n\n    calculate_electron_count(grid_energies, ados, dope, dos_grid_size)\n    adjust_electron_count(grid_energies, ados, dope, dos_grid_size)\n\nsimulate_electron_behavior(grid_energies, ados, dope, dos_grid_size)\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    max_diff = arr[1] - arr[0]\n    for i in range(2, len(arr)):\n        if arr[i] - arr[i-1] > max_diff:\n            max_diff = arr[i] - arr[i-1]\n    return arr\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    mapping = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n\n    for char in string:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []\n\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for i in range(len(lst)):\n        if lst[i] not in unique_elements:\n            unique_elements.append(lst[i])\n        if len(unique_elements) == 3:\n            break\n    return unique_elements\n\n"}
{"task_id": "valid/132", "completion": "\n    return sorted(fruit_list)\n"}
{"task_id": "valid/133", "completion": "\n    if lst == []:\n        return [[]]\n    else:\n        sublists = generate_sublists(lst[1:])\n        for sublist in sublists:\n            return sublists + [sublist + [lst[0]]]\n\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r\"\\d+\\.\\d+\"\n    if re.search(pattern, string):\n        return True\n    return False\n"}
{"task_id": "valid/135", "completion": "\n\n    from django.db import migrations, models\n\n    class Migration(migrations.Migration):\n\n        dependencies = [\n            ('{app_name}', '0001_initial'),\n        ]\n\n        operations = [\n            migrations.AddField(\n                model_name='{model_name}',\n                name='{field_name}',\n                field=models.CharField(max_length=200, null=True, blank=True),\n            ),\n        ]\n    \"\"\"\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = [value for value in list1 if value in list2]\n    return sum(common_elements)\n\n"}
{"task_id": "valid/137", "completion": "\n    forecast_period = round(len(df) * 0.01)\n    return forecast_period\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n\n"}
{"task_id": "valid/139", "completion": "\n    start_index = (page_number - 1) * items_per_page\n    end_index = start_index + items_per_page\n    return items[start_index:end_index]\n"}
{"task_id": "valid/140", "completion": "\n    if n_str == \"0\":\n        return \"0\"\n    n_str = n_str[::-1]\n    carry = 0\n    result = \"\"\n    for i in range(len(n_str)):\n        temp = int(n_str[i]) * 2 + carry\n        if temp >= 10:\n            carry = 1\n            temp = temp % 10\n        else:\n            carry = 0\n        result = str(temp) + result\n    if carry != 0:\n        result = str(carry) + result\n    return result.strip()\n\n"}
{"task_id": "valid/141", "completion": "\n    import rospy\n    from std_msgs.msg import String\n    from geometry_msgs.msg import Pose\n\n    # Initialize the node\n    rospy.init_node('arm_control')\n\n    # Create a publisher for the arm's pose\n    pub = rospy.Publisher('/arm_pose', Pose, queue_size=10)\n\n    # Get the preset coordinates\n    preset_coordinates = get_preset(preset_name)\n\n    # Create a message for the arm's pose\n    pose_msg = Pose()\n    pose_msg.position.x = preset_coordinates[0]\n    pose_msg.position.y = preset_coordinates[1]\n    pose_msg.position.z = preset_coordinates[2]\n\n    # Publish the pose message\n    pub.publish(pose_msg)\n\n    # Wait for the node to be shut down\n    rospy.spin()\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = [value for value in list1 if value in list2]\n    product = 1\n    for value in common_elements:\n        product *= value\n    return product\n"}
{"task_id": "valid/143", "completion": "\n\n    def __init__(self, allow_multiple_answer, zoom_level):\n        self.allow_multiple_answer = allow_multiple_answer\n        self.zoom_level = zoom_level\n\n    def set_allow_multiple_answer(self, allow_multiple_answer):\n        self.allow_multiple_answer = allow_multiple_answer\n\n    def set_zoom_level(self, zoom_level):\n        self.zoom_level = zoom_level\n\n    def get_allow_multiple_answer(self):\n        return self.allow_multiple_answer\n\n    def get_zoom_level(self):\n        return self.zoom_level\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n"}
{"task_id": "valid/145", "completion": "\n    vowels = 'aeiouAEIOU'\n    no_vowels_sentence = ''\n    for char in sentence:\n        if char not in vowels:\n            no_vowels_sentence += char\n    return no_vowels_sentence\n"}
{"task_id": "valid/146", "completion": "\n    def is_alpha(s):\n        return s.isalpha()\n\n    def merge_dicts(a, b):\n        for key in b:\n            if isinstance(b[key], dict):\n                a[key] = merge_dicts(a.get(key, {}), b[key])\n            else:\n                a[key] = b[key]\n        return a\n\n    def sort_dict(d):\n        return {k: v for k, v in sorted(d.items())}\n\n    merged = merge_dicts(a, b)\n    return sort_dict({k: v for k, v in merged.items() if is_alpha(k)})\n\n\na = {'a': 1, 'b': 2, 'nested': {'x': 5, 'y': 6}}\nb = {'c': 3, 'd': 4, 'nested': {'y': 7, 'z': 8}}"}
{"task_id": "valid/147", "completion": "\n    try:\n        if not d:\n            return \"The dictionary is empty\"\n        else:\n            return max(d.values())\n    except Exception as e:\n        return str(e)\n"}
{"task_id": "valid/148", "completion": "\n    # your code here\n    pass\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None:\n        return None\n    else:\n        return string.replace('e', '*')\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n"}
{"task_id": "valid/151", "completion": "\n    if x < 2:\n        return False\n    for i in range(2, int(sqrt(x)) + 1):\n        if x % i == 0:\n            return False\n    return True\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n\n"}
