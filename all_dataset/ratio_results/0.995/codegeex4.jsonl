{"task_id": "valid/0", "completion": "\n    # Define categories\n    categories = {\n        'politics': ['government', 'election', 'policy', 'legislative'],\n        'sports': ['football', 'basketball', 'tennis', 'golf'],\n        'entertainment': ['movie', 'music', 'celebrity', 'television'],\n        'technology': ['computer', 'software', 'hardware', 'internet'],\n        'business': ['finance', 'stock', 'market', 'economy'],\n        'health': ['medicine', 'healthcare', 'disease', 'wellness'],\n        'education': ['school', 'university', 'student', 'teacher'],\n        'travel': ['vacation', 'destination', 'tourism', 'transportation'],\n        'food': ['recipe', 'cuisine', 'restaurant', 'diet'],\n        'science': ['astronomy', 'biology', 'physics', 'chemistry'],\n        'religion': ['church', 'religion', 'faith', 'spirituality'],\n        'lifestyle': ['fashion', 'beauty', 'fitness', 'hobby'],\n        'other': ['news', 'weather', 'sports', 'entertainment']\n    }\n\n    # Initialize category scores\n    category_scores = {category: 0 for category in categories}\n\n    # Tokenize text\n    tokens = text.split()\n\n    # Score each category based on the presence of keywords\n    for token in tokens:\n        for category, keywords in categories.items():\n            if token.lower() in keywords:\n                category_scores[category] += 1\n\n    # Find the category with the highest score\n    max_score = max(category_scores.values())\n    for category, score in category_scores.items():\n        if score == max_score:\n            return category\n\n    # If no category has a score, return 'other'\n    return 'other'\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n"}
{"task_id": "valid/3", "completion": "\n    instruments = ['piano', 'guitar', 'drums', 'flute', 'violin', 'cello', 'trumpet', 'saxophone', 'bassoon', 'clarinet']\n    sorted_instruments = sorted(instruments, reverse=True)\n    return sorted_instruments\n"}
{"task_id": "valid/4", "completion": "\n    try:\n        data = json.loads(json_string)\n        if isinstance(data, list):\n            return data\n        else:\n            raise ValueError(\"Input is not a valid json string.\")\n    except json.JSONDecodeError:\n        raise ValueError(\"Input is not a valid json string.\")\n\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n    digits = [int(d) for d in str(n)]\n    return all(d % 3 == 0 for d in digits) and n % 5 == 0"}
{"task_id": "valid/6", "completion": "\n    for i in range(1, n):\n        if pow(base, i, n) == 1:\n            return i\n    return None\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        json_data = json.loads(json_str)\n        pprint.pprint(json_data)\n    except json.JSONDecodeError as e:\n        raise ValueError(\"Invalid JSON string\") from e\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace(f\"{{{{{key}}}}}\", str(value))\n    return template\n\n"}
{"task_id": "valid/10", "completion": "\n    # Create a set to store unique characters\n    unique_chars = set()\n\n    # Iterate over each character in the string\n    for char in string:\n        # If the character is already in the set, it is not unique\n        if char in unique_chars:\n            return False\n        # Otherwise, add the character to the set\n        unique_chars.add(char)\n\n    # If we reach this point, all characters are unique\n    return True\n\n"}
{"task_id": "valid/11", "completion": "\n    date = datetime.strptime(date_string, '%Y-%m-%d')\n    new_date = date + timedelta(days=days)\n    return new_date.strftime('%Y-%m-%d')\n\n"}
{"task_id": "valid/12", "completion": "\n    if len(text) > 10000:\n        return \"Error: Text too long\"\n    else:\n        return text.strip()\n"}
{"task_id": "valid/13", "completion": "\n    # Convert text to lowercase\n    text = text.lower()\n\n    # Remove punctuation\n    text = text.translate(str.maketrans('', '', string.punctuation))\n\n    # Remove digits\n    text = text.translate(str.maketrans('', '', string.digits))\n\n    # Remove extra spaces\n    text = ' '.join(text.split())\n\n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    pattern = r'\\b(' + word1 + r'|' + word2 + r')\\b'\n    return bool(re.search(pattern, text))\n\n"}
{"task_id": "valid/15", "completion": "\n    return [sum(x) for x in array]\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    for line in comment.split('\\n'):\n        line = line.strip()\n        if line.startswith('vim:'):\n            for setting in line.split(':')[1:]:\n                setting = setting.strip()\n                if setting.startswith('tabstop'):\n                    settings['tabstop'] = int(setting.split('=')[1])\n                elif setting.startswith('expandtab'):\n                    settings['expandtab'] = True\n                elif setting.startswith('shiftwidth'):\n                    settings['shiftwidth'] = int(setting.split('=')[1])\n                elif setting.startswith('softtabstop'):\n                    settings['softtabstop'] = int(setting.split('=')[1])\n    return settings\n\n"}
{"task_id": "valid/17", "completion": "\n    # Tokenize the sentence into words\n    words = sentence.split()\n\n    # Return the list of words\n    return words\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)"}
{"task_id": "valid/19", "completion": "\n    list1 = list1[::-1]\n    list2 = list2[::-1]\n    combined_list = list1 + list2\n    combined_list.sort()\n    return combined_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n"}
{"task_id": "valid/21", "completion": "\n    return z**2\n"}
{"task_id": "valid/22", "completion": "\n    if \"name\" in dictionary:\n        return dictionary[\"name\"]\n    else:\n        return None\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {k: struct_to_dict(v) for k, v in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(v) for v in struct]\n    else:\n        return struct\n"}
{"task_id": "valid/24", "completion": "\n    # Convert the number to string\n    num_str = str(num)\n    \n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        return num\n    \n    # Find the closest palindrome smaller than the given number\n    smaller_palindrome = num - 1\n    while str(smaller_palindrome) != str(smaller_palindrome)[::-1]:\n        smaller_palindrome -= 1\n    \n    # Find the closest palindrome larger than the given number\n    larger_palindrome = num + 1\n    while str(larger_palindrome) != str(larger_palindrome)[::-1]:\n        larger_palindrome += 1\n    \n    # Return the closest palindrome\n    if abs(num - smaller_palindrome) <= abs(num - larger_palindrome):\n        return smaller_palindrome\n    else:\n        return larger_palindrome\n"}
{"task_id": "valid/25", "completion": "\n    return f\"import math\\nprint(math.sqrt({num}))\"\n\n"}
{"task_id": "valid/26", "completion": "\n    rows = len(matrix)\n    columns = len(matrix[0])\n    diagonal_sum = sum(matrix[i][i] for i in range(min(rows, columns)))\n    is_square = rows == columns\n    return rows, columns, diagonal_sum, is_square\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c for c in s.lower() if c.isalpha())\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        try:\n            json_data = json.loads(json_data)\n        except json.JSONDecodeError:\n            return False\n    if isinstance(json_data, dict):\n        if key not in json_data:\n            return True\n        if json_data[key] != value:\n            return True\n    return False\n\nThe function `validate_key_value` is designed to check if a specific key-value pair does not exist in a JSON dictionary. It takes three parameters: `json_data`, `key`, and `value`. \n\nHere's a breakdown of what the function does:\n\n1. If `json_data` is a string, it attempts to parse it as JSON using `json.loads()`. If the parsing fails (i.e., the string is not valid JSON), the function returns `False`.\n\n2. If `json_data` is a dictionary, the function checks if the `key` is not in the dictionary. If the `key` is not present, the function returns `True`. If the `key` is present, the function checks if the value associated with the `key` is not equal to the `value` passed to the function. If the value is not equal, the function returns `True`.\n\n3. If `json_data` is neither a string nor a dictionary, the function returns `False`.\n\nThe function returns `True` if the key-value pair does not exist in the JSON dictionary, and `False` otherwise.\n"}
{"task_id": "valid/31", "completion": "\n    table = []\n    for i in range(0, len(buttons), num_columns):\n        row = buttons[i:i+num_columns]\n        table.append(row)\n    return table\nbuttons = ['button1', 'button2', 'button3', 'button4', 'button5', 'button6', 'button7', 'button8', 'button9', 'button10']\nnum_columns = 3\ntable = _make_button_table(buttons, num_columns)"}
{"task_id": "valid/32", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(alphabet) - 1):\n        if alphabet[i] not in s or alphabet[i+1] not in s:\n            return False\n        if s.index(alphabet[i]) > s.index(alphabet[i+1]):\n            return False\n    return True\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "valid/34", "completion": "\n    import re\n    return sum(int(num) for num in re.findall(r'\\d+', ts))\n\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n"}
{"task_id": "valid/36", "completion": "\n    # Check if the array is empty\n    if not arr:\n        return \"Array is empty\"\n\n    # Check if all elements in the array are numerical\n    if not all(isinstance(x, (int, float)) for x in arr):\n        return \"Array contains non-numerical values\"\n\n    # Compute the sum of all elements in the array\n    total = sum(arr)\n\n    return total\n"}
{"task_id": "valid/37", "completion": "\n    neighborhoods = []\n    for neighborhood in json_data:\n        neighborhoods.append(neighborhood[\"name\"])\n    neighborhoods.sort()\n    return neighborhoods\n\n"}
{"task_id": "valid/38", "completion": "\n    # Sort the array\n    arr.sort()\n\n    # Initialize result\n    res = float('inf')\n\n    # Initialize left and right\n    l = 0\n    r = n - 1\n\n    # While there are elements between l and r\n    while l < r:\n        # Calculate current sum\n        current_sum = arr[l] + arr[r]\n\n        # Update result if current sum is smaller than result\n        res = min(res, abs(current_sum))\n\n        # If current sum is 0, return 0\n        if current_sum == 0:\n            return 0\n\n        # If current sum is negative, increment l\n        if current_sum < 0:\n            l += 1\n\n        # If current sum is positive, decrement r\n        else:\n            r -= 1\n\n    # Return result\n    return res\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for char in p:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "valid/40", "completion": "\n    results = {}\n    total_votes = 0\n\n    for vote in votes:\n        candidate_name, number_of_votes = vote\n        total_votes += number_of_votes\n        if candidate_name in results:\n            results[candidate_name] += number_of_votes\n        else:\n            results[candidate_name] = number_of_votes\n\n    for candidate_name, number_of_votes in results.items():\n        percentage = (number_of_votes / total_votes) * 100\n        print(f\"{candidate_name}: {number_of_votes} votes ({percentage:.2f}%)\")\n\n    return results\n\n\nvotes = [(\"John\", 500), (\"Jane\", 300), (\"John\", 200)]\ncalculate_election_results(votes)\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        # Try to parse the date string using the dd-mm-yyyy format\n        date = datetime.strptime(date_string, \"%d-%m-%Y\")\n    except ValueError:\n        try:\n            # Try to parse the date string using the dd-mmm-yyyy format\n            date = datetime.strptime(date_string, \"%d-%b-%Y\")\n        except ValueError:\n            # If both formats fail, raise an error\n            raise ValueError(\"Invalid date format. Please use dd-mm-yyyy or dd-mmm-yyyy.\")\n\n    # Check if the date is valid\n    if date.year < 1900 or date.year > datetime.now().year:\n        raise ValueError(\"Invalid year. Please enter a year between 1900 and the current year.\")\n\n    # Check if the date is valid\n    if date.month < 1 or date.month > 12:\n        raise ValueError(\"Invalid month. Please enter a month between 1 and 12.\")\n\n    # Check if the date is valid\n    if date.day < 1 or date.day > 31:\n        raise ValueError(\"Invalid day. Please enter a day between 1 and 31.\")\n\n    # Check if the date is valid\n    if date.day > 28 and date.month == 2 and not (date.year % 4 == 0 and (date.year % 100 != 0 or date.year % 400 == 0)):\n        raise ValueError(\"Invalid date. February does not have more than 28 days.\")\n\n    # Check if the date is valid\n    if date.day > 30 and (date.month == 4 or date.month == 6 or date.month == 9 or date.month == 11):\n        raise ValueError(\"Invalid date. April, June, September, and November do not have more than 30 days.\")\n\n    # Return the date in the standardized format\n    return date.strftime(\"%B %d, %Y\")\n\n"}
{"task_id": "valid/42", "completion": "\n    allowed_extensions = allowed_type\n    old_extension = oldname.split('.')[-1]\n    new_extension = newname.split('.')[-1]\n    if new_extension in allowed_extensions:\n        return True\n    else:\n        return False"}
{"task_id": "valid/43", "completion": "\n    result = []\n    for item in lst:\n        if isinstance(item, tuple):\n            result.append(remove_uneven(item))\n        elif isinstance(item, int) or isinstance(item, float):\n            if item % 2 == 0:\n                result.append(item)\n        elif isinstance(item, str):\n            if item.isdigit() and int(item) % 2 == 0:\n                result.append(item)\n    return tuple(result)\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n\n"}
{"task_id": "valid/45", "completion": "\n    count = 0\n    for char in string:\n        if char == specific_character:\n            count += 1\n    return count\n"}
{"task_id": "valid/46", "completion": "\n    # histogram_data = histogram_data + accs\n    # return histogram_data\n    histogram_data[generation] = accs\n    return histogram_data\n"}
{"task_id": "valid/47", "completion": "\n    pattern = r'^[a-zA-Z0-9]{5}$'\n    return bool(re.match(pattern, string))\n\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        try:\n            language, version = classifier.split(\" :: \")[1:]\n            unique_languages.add(language)\n        except (IndexError, ValueError):\n            continue\n    return len(unique_languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    # Create an empty dictionary to store the count of each number\n    count_dict = {}\n\n    # Iterate through each element in the array\n    for row in arr:\n        for num in row:\n            # If the number is already in the dictionary, increment its count\n            if num in count_dict:\n                count_dict[num] += 1\n            # If the number is not in the dictionary, add it with a count of 1\n            else:\n                count_dict[num] = 1\n\n    # Create an empty list to store the count instances of each number\n    count_list = []\n\n    # Iterate through the dictionary and append the count instances of each number to the list\n    for num, count in count_dict.items():\n        count_list.append(count)\n\n    # Return the list of count instances\n    return count_list\n"}
{"task_id": "valid/50", "completion": "\n    # Define the url patterns and their corresponding view functions\n    url_patterns = [\n        (r'^videos/$', 'video_list'),\n        (r'^videos/(?P<video_id>\\d+)/$', 'video_detail'),\n    ]\n\n    # Iterate over the url patterns and match the given url to the corresponding view function\n    for pattern, view in url_patterns:\n        match = re.match(pattern, url)\n        if match:\n            return view\n\n    # If no matching url pattern is found, return None\n    return None\n\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n"}
{"task_id": "valid/52", "completion": "\n    string = \"Hello\"\n    sentence = \" World!\"\n    return string + sentence\n\n"}
{"task_id": "valid/53", "completion": "\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings.add(s[i:j])\n    return substrings\n"}
{"task_id": "valid/54", "completion": "\n    price_sum = 0\n    for d in list_of_dicts:\n        for key in d.keys():\n            if key.startswith(\"price\"):\n                price_sum += d[key]\n    return price_sum\n"}
{"task_id": "valid/55", "completion": "\n    intersection = []\n    for i in list1:\n        if i in list2:\n            intersection.append(i)\n            list2.remove(i)\n    return intersection\n"}
{"task_id": "valid/56", "completion": "\n    def decorator(func):\n        func.route = request_method\n        return func\n    return decorator\n"}
{"task_id": "valid/57", "completion": "\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers\")\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Both a and b must be positive integers\")\n    if b == 0:\n        return a\n    else:\n        return gcd_recursive(b, a % b)\n"}
{"task_id": "valid/58", "completion": "\n    categorized_files = {\n        'global': [],\n        'environment': [],\n        'service': [],\n        'application': []\n    }\n\n    for file_path in file_paths:\n        # Extract the directory path and file name\n        directory, file_name = os.path.split(file_path)\n\n        # Determine the category based on the directory path\n        if 'global' in directory:\n            categorized_files['global'].append(file_name)\n        elif 'environment' in directory:\n            categorized_files['environment'].append(file_name)\n        elif 'service' in directory:\n            categorized_files['service'].append(file_name)\n        elif 'application' in directory:\n            categorized_files['application'].append(file_name)\n\n    return categorized_files\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n\n"}
{"task_id": "valid/61", "completion": "\n    # calculate the difference between the two timestamps\n    timeDifference = timeEnd - timeStart\n\n    # return the time difference\n    return timeDifference\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return -1\n\n    mid = (start + end) // 2\n\n    if array[mid] == target:\n        return mid\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    colors = ['white', 'red', 'green', 'blue']\n    index = colors.index(color)\n    return colors[(index + 1) % len(colors)]\n\n"}
{"task_id": "valid/64", "completion": "\n    for i in range(len(list)):\n        list[i] += 1\n    return list\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end + 1):\n        if not is_perfect_square(i):\n            return False\n    return True\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        for char in word:\n            if char.isalpha() and char.lower() == target.lower():\n                return char\n    return None\n"}
{"task_id": "valid/67", "completion": "\n    return sentence.split()\n\n"}
{"task_id": "valid/68", "completion": "\n    print(\"the keys in the given dictionary are:\")\n    for key in dict:\n        print(key)\n"}
{"task_id": "valid/69", "completion": "\n    name = \"John\"\n    age = 30\n    phrase = \" is a great person.\"\n    return f\"{name}{phrase}\"\n\n"}
{"task_id": "valid/70", "completion": "\n    result = []\n    for string in strings:\n        if re.match(\"^[a-zA-Z0-9 ]*$\", string):\n            result.append(string.capitalize())\n    return result\n\n"}
{"task_id": "valid/71", "completion": "\n    for i in range(len(string)):\n        if string[i] == char:\n            return i\n    return -1\n"}
{"task_id": "valid/72", "completion": "\n    bold_tags = []\n    start_tag = '<b>'\n    end_tag = '</b>'\n    start_index = 0\n    while True:\n        start_index = html_code.find(start_tag, start_index)\n        if start_index == -1:\n            break\n        end_index = html_code.find(end_tag, start_index)\n        if end_index == -1:\n            break\n        bold_tags.append(html_code[start_index:end_index + len(end_tag)])\n        start_index = end_index + len(end_tag)\n    return bold_tags"}
{"task_id": "valid/73", "completion": "\n    # Define the items and their prices\n    items = {\n        \"Coke\": 1.00,\n        \"Pepsi\": 1.50,\n        \"Sprite\": 1.25,\n        \"Water\": 0.75\n    }\n    \n    # Check if the item exists and if the user has inserted enough money\n    if item not in items:\n        return \"Item not found\"\n    elif money_inserted < items[item]:\n        return \"Insufficient funds\"\n    \n    # Calculate the change to return to the user\n    change = money_inserted - items[item]\n    \n    # Update the stock of the item purchased\n    items[item] -= 1\n    \n    return f\"Here is your {item}. Your change is ${change:.2f}\"\n"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    unique_list = list(set(merged_list))\n    return unique_list\n"}
{"task_id": "valid/75", "completion": "\n    count = 0\n    for element in list:\n        if element == target:\n            count += 1\n    return count\n"}
{"task_id": "valid/76", "completion": "\n    return base64.b64encode(string.encode('utf-8')).decode('utf-8')\n\n"}
{"task_id": "valid/77", "completion": "\n    return [i for i, x in enumerate(vector) if x != 0]\n"}
{"task_id": "valid/78", "completion": "\n    # Assign a value to a variable\n    my_variable = 10\n\n    # Validate the value\n    if my_variable == 10:\n        print(\"The value is valid.\")\n    else:\n        print(\"The value is not valid.\")\n"}
{"task_id": "valid/79", "completion": "\n    # Convert the word to a list of characters\n    char_list = list(word)\n    # Shuffle the list of characters\n    random.shuffle(char_list)\n    # Join the list of characters back into a string\n    return ''.join(char_list)\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, str):\n        return \"String\"\n    elif isinstance(element, int):\n        return \"Integer\"\n    elif isinstance(element, float):\n        return \"Float\"\n    elif isinstance(element, bool):\n        return \"Boolean\"\n    elif isinstance(element, list):\n        return \"List\"\n    elif isinstance(element, dict):\n        return \"Dictionary\"\n    elif isinstance(element, tuple):\n        return \"Tuple\"\n    elif isinstance(element, set):\n        return \"Set\"\n    elif isinstance(element, frozenset):\n        return \"Frozenset\"\n    elif isinstance(element, type(None)):\n        return \"None\"\n    else:\n        return \"Other\"\n"}
{"task_id": "valid/81", "completion": "\n    if len(arr) < 2:\n        return arr\n\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] == arr[i + 1]:\n            arr.pop(i)\n        else:\n            i += 1\n\n    return arr\n\n"}
{"task_id": "valid/82", "completion": "\n    # Tokenize text\n    tokens = re.findall(r'\\b\\w+\\b', text)\n    return tokens\n\n"}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    if not divisible_numbers:\n        print(\"No numbers divisible by both 3 and 7 found.\")\n        return\n    average = sum(divisible_numbers) / len(divisible_numbers)\n    print(f\"Average: {average}\")\n    print(f\"Maximum: {max(divisible_numbers)}\")\n    print(f\"Minimum: {min(divisible_numbers)}\")\n    print(\"Occurrences:\")\n    occurrences = {}\n    for num in divisible_numbers:\n        if num in occurrences:\n            occurrences[num] += 1\n        else:\n            occurrences[num] = 1\n    for num, count in occurrences.items():\n        print(f\"{num}: {count}\")\nnumbers = [21, 42, 63, 84, 105, 126, 147, 168, 189, 210]\nfind_divisible_numbers(numbers)\n"}
{"task_id": "valid/84", "completion": "\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Create a dictionary to store word frequencies\n    word_freq = {}\n\n    # Count the frequency of each word\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n\n    # Find the word with the highest frequency\n    highest_freq = 0\n    highest_freq_word = \"\"\n    for word, freq in word_freq.items():\n        if freq > highest_freq:\n            highest_freq = freq\n            highest_freq_word = word\n\n    return highest_freq_word\n\n"}
{"task_id": "valid/85", "completion": "\n    euler = 2\n    for i in range(1, decimal_places + 1):\n        euler += 1 / math.factorial(i)\n    return round(euler, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    total = 0\n    for num in numbers:\n        total += num\n    average = total / len(numbers)\n    return average, total\n\nnumbers = [1, 2, 3, 4, 5]\naverage, total = getAverageAndSum(numbers)"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series is empty\")\n    if not all(isinstance(x, (int, float)) for x in time_series):\n        raise ValueError(\"Time series contains non-numerical values\")\n    return min(time_series), max(time_series)\n"}
{"task_id": "valid/88", "completion": "\n    relatedArticles = {}\n    for entry in encyclopedia:\n        relatedArticles[entry] = len(encyclopedia[entry])\n    return relatedArticles\n"}
{"task_id": "valid/89", "completion": "\n    max_value = max(lst)\n    max_index = lst.index(max_value)\n    return max_index\n"}
{"task_id": "valid/90", "completion": "\n    return len(set(list1) & set(list2)) > 0"}
{"task_id": "valid/91", "completion": "\n    root = Element('data')\n    for key, value in dictionary.items():\n        child = Element(key)\n        child.text = str(value)\n        root.append(child)\n    return tostring(root, encoding='utf8').decode('utf8')\n\n"}
{"task_id": "valid/92", "completion": "\n    if not matrix or not matrix[0]:\n        return False\n\n    m, n = len(matrix), len(matrix[0])\n    left, right = 0, m * n - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        mid_value = matrix[mid // n][mid % n]\n\n        if mid_value == target:\n            return True\n        elif mid_value < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in lst:\n        if i & 1:  # Check if the number is odd using bitwise AND operation\n            sum_odd += i\n            count_odd += 1\n    if count_odd == 0:\n        return 0  # Return 0 if there are no odd numbers in the list\n    average_odd = sum_odd / count_odd\n    return average_odd\n"}
{"task_id": "valid/94", "completion": "\n    if n > len(lst) or n < 1:\n        return None\n    lst.sort(reverse=True)\n    return lst[n-1]\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "valid/96", "completion": "\n    return set_a ^ set_b\n"}
{"task_id": "valid/97", "completion": "\n\n    **Features:**\n    - Play music from YouTube, Spotify, SoundCloud, and more.\n    - Manage personal playlists and server settings.\n    - Categorize commands and provide help information for each command.\n    - Provide information about the bot's features and web app.\n\n    **Web App:**\n    - Manage personal playlists and server settings.\n    - View and manage server settings.\n    - View and manage personal playlists.\n\n    **Commands:**\n    - `{mapping['play']}`: Play music from YouTube, Spotify, SoundCloud, and more.\n    - `{mapping['pause']}`: Pause the currently playing music.\n    - `{mapping['resume']}`: Resume the currently paused music.\n    - `{mapping['stop']}`: Stop the currently playing music.\n    - `{mapping['skip']}`: Skip the currently playing music.\n    - `{mapping['queue']}`: View the current music queue.\n    - `{mapping['shuffle']}`: Shuffle the current music queue.\n    - `{mapping['repeat']}`: Repeat the current music queue.\n    - `{mapping['volume']}`: Set the volume of the music player.\n    - `{mapping['now_playing']}`: View the currently playing music.\n    - `{mapping['help']}`: View help information for each command.\n    - `{mapping['settings']}`: View and manage server settings.\n    - `{mapping['playlist']}`: View and manage personal playlists.\n\n    **Help Information:**\n    - `{mapping['help']}`: View help information for each command.\n    - `{mapping['help']}`: View help information for each command.\n    - `{mapping['help']}`: View help information for each command.\n    - `{mapping['help']}`: View help information for each command.\n    - `{mapping['help']}`: View help information for each command.\n    - `{mapping['help']}`: View help information for each command.\n    - `{mapping['help']}`: View help information for each command.\n    - `{mapping['help']}`: View help information for each command.\n    - `{mapping['help']}`: View help information for each command.\n    - `{mapping['help']}`: View help information for each command.\n    - `{mapping['help']}`: View help information for each command.\n    - `{mapping['help']}`: View help information for each command.\n    - `{mapping['help']}`: View help"}
{"task_id": "valid/98", "completion": "\n    if n < 0:\n        return dec_to_ternary(-n)\n    if n == 0:\n        return '0'\n    ternary = ''\n    while n > 0:\n        ternary = str(n % 3) + ternary\n        n = n // 3\n    return ternary\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(os.path.splitext(file_name)[1][1:] for file_name in file_names)\n"}
{"task_id": "valid/100", "completion": "\n    if age < 0:\n        return \"Invalid age\"\n    elif age < 13:\n        return \"Child\"\n    elif age < 20:\n        return \"Teenager\"\n    elif age < 40:\n        return \"Young Adult\"\n    elif age < 65:\n        return \"Adult\"\n    else:\n        return \"Senior\"\n"}
{"task_id": "valid/101", "completion": "\n    if numerical_grade >= 90:\n        letter_grade = \"A\"\n        gpa = 4.0\n    elif numerical_grade >= 80:\n        letter_grade = \"B\"\n        gpa = 3.0\n    elif numerical_grade >= 70:\n        letter_grade = \"C\"\n        gpa = 2.0\n    elif numerical_grade >= 60:\n        letter_grade = \"D\"\n        gpa = 1.0\n    else:\n        letter_grade = \"F\"\n        gpa = 0.0\n    return letter_grade, gpa\n"}
{"task_id": "valid/102", "completion": "\n    # Define the function\n    def total_price(listing):\n        # Initialize the total price\n        total = 0\n        # Loop through the listing\n        for item in listing:\n            # Add the price of the item to the total\n            total += item['price']\n        # Return the total price\n        return total\n\n    # Return the function\n    return total_price\n\n"}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    result = {}\n    for palindrome in palindrome_tuples:\n        count = sum(1 for char in palindrome if char in vowels)\n        result[palindrome] = count\n    return result\n"}
{"task_id": "valid/104", "completion": "\n    # Check if the string is empty\n    if not s:\n        return \"Empty string\"\n\n    # Check if the string contains only one character\n    if len(s) == 1:\n        return s.upper()\n\n    # Check if the string contains only one word\n    if \" \" not in s:\n        return s[::-1]\n\n    # Check if the string contains only one word and one number\n    if s.count(\" \") == 1 and s.count(\"0\") == 1:\n        return s.replace(\"0\", \"o\")\n\n    # Check if the string contains only one word and one number\n    if s.count(\" \") == 1 and s.count(\"1\") == 1:\n        return s.replace(\"1\", \"i\")\n\n    # Check if the string contains only one word and one number\n    if s.count(\" \") == 1 and s.count(\"2\") == 1:\n        return s.replace(\"2\", \"z\")\n\n    # Check if the string contains only one word and one number\n    if s.count(\" \") == 1 and s.count(\"3\") == 1:\n        return s.replace(\"3\", \"e\")\n\n    # Check if the string contains only one word and one number\n    if s.count(\" \") == 1 and s.count(\"4\") == 1:\n        return s.replace(\"4\", \"a\")\n\n    # Check if the string contains only one word and one number\n    if s.count(\" \") == 1 and s.count(\"5\") == 1:\n        return s.replace(\"5\", \"s\")\n\n    # Check if the string contains only one word and one number\n    if s.count(\" \") == 1 and s.count(\"6\") == 1:\n        return s.replace(\"6\", \"b\")\n\n    # Check if the string contains only one word and one number\n    if s.count(\" \") == 1 and s.count(\"7\") == 1:\n        return s.replace(\"7\", \"t\")\n\n    # Check if the string contains only one word and one number\n    if s.count(\" \") == 1 and s.count(\"8\") == 1:\n        return s.replace(\"8\", \"f\")\n\n    # Check if the string contains only one word and one number\n    if s.count(\" \") == 1 and s.count(\"9\") == 1:\n        return s.replace(\"9\", \"g\")\n\n    # Check if the string contains only one word and one"}
{"task_id": "valid/105", "completion": "\n    # Create a set to store the numbers we've seen so far\n    seen = set()\n\n    # Iterate through the array\n    for num in arr:\n        # Check if the negative of the current number is in the set\n        if -num in seen:\n            # If it is, we've found a pair that sums to 0\n            return True\n        # Add the current number to the set\n        seen.add(num)\n\n    # If we've gone through the entire array without finding a pair that sums to 0, return False\n    return False\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n    for dependency in dependencies:\n        package_name, version_number = dependency\n        version_date = version_number.split('_')[-1]\n        if package_name not in latest_versions or version_date > latest_versions[package_name]:\n            latest_versions[package_name] = version_date\n    return latest_versions\n"}
{"task_id": "valid/107", "completion": "\n    categorized_causes = {}\n    for cause in causes:\n        action, result = cause.split(' ')\n        if action not in categorized_causes:\n            categorized_causes[action] = []\n        categorized_causes[action].append(result)\n    return categorized_causes\n"}
{"task_id": "valid/108", "completion": "\n    code_name = name.replace(\" \", \"-\").lower()\n    return code_name\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(char) > 127 for char in text)\n"}
{"task_id": "valid/110", "completion": "\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    no_punct = \"\"\n    for char in string:\n        if char not in punctuations:\n            no_punct = no_punct + char\n    return no_punct\n"}
{"task_id": "valid/111", "completion": "\n    try:\n        return [num ** exp for num in num_list]\n    except TypeError:\n        print(\"Error: List and exponent values must be numbers.\")\n        return None\n"}
{"task_id": "valid/112", "completion": "\n    min_values = []\n    for row in grid:\n        min_values.append(min(row))\n    print(min_values)\n    return min_values\n"}
{"task_id": "valid/113", "completion": "\n    if n < 0:\n        print(\"Please enter a positive integer.\")\n        return\n    elif n == 0:\n        return\n    else:\n        print(\"Thank you\")\n        print_thank_you(n-2, current_num+2)\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == element:\n            count += 1\n        else:\n            break\n    return count\n"}
{"task_id": "valid/115", "completion": "\n    return len(set(str(num))) == 1\n\n"}
{"task_id": "valid/116", "completion": "\n    vowels = \"aeiouAEIOU\"\n    if len(s) == 0:\n        return s\n    else:\n        if s[0] in vowels:\n            return remove_vowels_recursive(s[1:])\n        else:\n            return s[0] + remove_vowels_recursive(s[1:])\n"}
{"task_id": "valid/117", "completion": "\n    help_message = \"Usage: python app.py [options]\\n\\nOptions:\\n\"\n    for option, description in options:\n        help_message += f\"  -{option}, --{option}\\n    {description}\\n\"\n    return help_message\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]"}
{"task_id": "valid/119", "completion": "\n    return np.sum(Val == 1)\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in s:\n        if char.lower() not in vowels:\n            return False\n    return True\n"}
{"task_id": "valid/122", "completion": "\n    count = 0\n    start = 0\n    while True:\n        start = sequence.find(subsequence, start)\n        if start == -1: \n            break\n        count += 1\n        start += 1\n    return count\n\nsequence_of_characters = \"please find the number of occurrences of this string\"\nspecific_subsequence = \"string\""}
{"task_id": "valid/123", "completion": "\n    if t == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    if h < 0:\n        h = -h\n        t = -t\n    if t < 0:\n        t = -t\n    if h < t:\n        return 0\n    if h == t:\n        return 1\n    if t == 1:\n        return h\n    if t == 2:\n        return h // 2\n    if t == 4:\n        return h // 4\n    if t == 8:\n        return h // 8\n    if t == 16:\n        return h // 16\n    if t == 32:\n        return h // 32\n    if t == 64:\n        return h // 64\n    if t == 128:\n        return h // 128\n    if t == 256:\n        return h // 256\n    if t == 512:\n        return h // 512\n    if t == 1024:\n        return h // 1024\n    if t == 2048:\n        return h // 2048\n    if t == 4096:\n        return h // 4096\n    if t == 8192:\n        return h // 8192\n    if t == 16384:\n        return h // 16384\n    if t == 32768:\n        return h // 32768\n    if t == 65536:\n        return h // 65536\n    if t == 131072:\n        return h // 131072\n    if t == 262144:\n        return h // 262144\n    if t == 524288:\n        return h // 524288\n    if t == 1048576:\n        return h // 1048576\n    if t == 2097152:\n        return h // 2097152\n    if t == 4194304:\n        return h // 4194304\n    if t == 8388608:\n        return h // 8388608\n    if t == 16777216:\n        return h // 16777216\n    if t == 33554432:\n        return h // 33554432\n    if t == "}
{"task_id": "valid/124", "completion": "\n"}
{"task_id": "valid/125", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    count = 0\n    for char in string:\n        if char in consonants:\n            count += 1\n    return count"}
{"task_id": "valid/126", "completion": "\n    # Calculate the number of electrons based on energy values\n    num_electrons = 0\n    for energy in grid_energies:\n        num_electrons += ados[energy]\n\n    # Adjust the number of electrons based on doping levels\n    num_electrons += dope * dos_grid_size\n\n    return num_electrons\n\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    return arr\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for i in range(min(3, len(lst))):\n        if lst[i] not in unique_elements:\n            unique_elements.append(lst[i])\n    return unique_elements\n"}
{"task_id": "valid/132", "completion": "\n    # Sort the fruit list in lexicographical order\n    sorted_fruit_list = sorted(fruit_list)\n\n    # Join the sorted list into a single string with each fruit name separated by a comma and a space\n    result = ', '.join(sorted_fruit_list)\n\n    return result\n"}
{"task_id": "valid/133", "completion": "\n    sublists = []\n    for i in range(len(lst) + 1):\n        for j in range(i + 1):\n            sublists.append(lst[j:i])\n    return sublists\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d+\\.\\d+'\n    return bool(re.search(pattern, string))\n\n"}
{"task_id": "valid/135", "completion": "\n\nfrom django.db import migrations, models\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = set(list1) & set(list2)\n    return sum(common_elements)\n"}
{"task_id": "valid/137", "completion": "\n    forecast_period = math.ceil(len(df) * 0.01)\n    return forecast_period\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n"}
{"task_id": "valid/139", "completion": "\n    start_index = (page_number - 1) * items_per_page\n    end_index = start_index + items_per_page\n    return items[start_index:end_index]\n\n"}
{"task_id": "valid/140", "completion": "\n    n = list(map(int, n_str))\n    carry = 0\n    result = []\n    for i in range(len(n) - 1, -1, -1):\n        temp = n[i] * 2 + carry\n        result.append(temp % 10)\n        carry = temp // 10\n    if carry > 0:\n        result.append(carry)\n    return ''.join(map(str, result[::-1]))\n\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        \"home\": (0.0, 0.0, 0.0),\n        \"pick\": (0.0, 0.0, 0.0),\n        \"place\": (0.0, 0.0, 0.0),\n    }\n\n    return presets.get(preset_name, (0.0, 0.0, 0.0))\n\nThe function `get_preset_coordinates` is designed to retrieve the coordinates for a given preset name from a dictionary called `presets`. The dictionary `presets` contains preset positions for a robotic arm, where the keys are the names of the presets and the values are tuples of three floating-point numbers representing the x, y, and z coordinates of the robotic arm.\n\nThe function takes one argument, `preset_name`, which is a string representing the name of the preset for which the coordinates are to be retrieved. It then uses the `get` method of the dictionary to retrieve the coordinates for the given preset name. If the preset name is not found in the dictionary, the function returns a tuple of three zeros `(0.0, 0.0, 0.0)`.\n\nHere is an example of how you can use this function:\n\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = [x for x in list1 if x in list2]\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product\n"}
{"task_id": "valid/143", "completion": "\n    if allow_multiple_answer:\n        print(\"Multiple answers are allowed.\")\n    else:\n        print(\"Only one answer is allowed.\")\n    if zoom_level == \"high\":\n        print(\"Zoom level is high.\")\n    elif zoom_level == \"medium\":\n        print(\"Zoom level is medium.\")\n    elif zoom_level == \"low\":\n        print(\"Zoom level is low.\")\n    else:\n        print(\"Invalid zoom level.\")\n    return\n\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = 'aeiouAEIOU'\n    sentence = sentence.replace(' ', '')\n    sentence = ''.join([char for char in sentence if char not in vowels])\n    return sentence\n"}
{"task_id": "valid/146", "completion": "\n    merged = {}\n    for key in a.keys():\n        if key.isalpha():\n            merged[key] = a[key]\n    for key in b.keys():\n        if key.isalpha():\n            merged[key] = b[key]\n    for key in merged.keys():\n        if isinstance(merged[key], dict):\n            merged[key] = merge_objects(merged[key], b[key])\n    return dict(sorted(merged.items()))\n\n\na = {'a': 1, 'b': 2, 'nested': {'x': 5, 'y': 6}}\nb = {'c': 3, 'd': 4, 'nested': {'y': 7, 'z': 8}}"}
{"task_id": "valid/147", "completion": "\n    try:\n        max_value = max(d.values())\n        return max_value\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None\n"}
{"task_id": "valid/148", "completion": "\n    return sum(dict[key]) / len(dict[key])\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == \"\":\n        return None\n    else:\n        return string.replace('e', '*')\n"}
{"task_id": "valid/150", "completion": "\n    smallest = heapq.nsmallest(n, lst)\n    return smallest\n\n"}
{"task_id": "valid/151", "completion": "\n    return x[0] ** 2 + x[1] ** 2 == x[2] ** 2\n\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n\n"}
