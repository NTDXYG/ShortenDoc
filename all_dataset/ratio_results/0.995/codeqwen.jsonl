{"task_id": "valid/0", "completion": "\n    # Define categories\n    categories = ['Sports', 'Politics', 'Technology', 'Entertainment', 'Health']\n    \n    # Define rules for each category\n    rules = {\n        'Sports': ['football', 'basketball', 'cricket', 'tennis', 'soccer'],\n        'Politics': ['election', 'president', 'parliament', 'government', 'democracy'],\n        'Technology': ['computer', 'mobile', 'internet', 'software', 'hardware'],\n        'Entertainment': ['movie', 'music', 'tv', 'game', 'comedy'],\n        'Health': ['disease', 'medicine', 'vaccine', 'hospital', 'pharmacy']\n    }\n    \n    # Classify text\n    for category, keywords in rules.items():\n        for keyword in keywords:\n            if keyword in text.lower():\n                return category\n    \n    # If no category is matched, return 'Other'\n    return 'Other'\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n"}
{"task_id": "valid/3", "completion": "\n    instruments.sort(reverse=True)\n    return instruments\n\ninstruments = [\"Violin\", \"Guitar\", \"Piano\", \"Flute\", \"Drums\"]"}
{"task_id": "valid/4", "completion": "\n    try:\n        return json.loads(json_string)\n    except ValueError:\n        raise ValueError(\"Invalid JSON string\")\n\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n    if n % 5 == 0:\n        digits_sum = sum(int(digit) for digit in str(n))\n        return digits_sum % 3 == 0\n    return False\n"}
{"task_id": "valid/6", "completion": "\n    if n == 1:\n        return 0\n    elif base == 1:\n        return None\n    else:\n        log_val = 1\n        while log_val < n:\n            log_val *= base\n        if log_val == n:\n            return log_val\n        else:\n            return None\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        json_obj = json.loads(json_str)\n        pprint.pprint(json_obj)\n    except json.JSONDecodeError:\n        print(\"Invalid JSON string\")\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace(\"{{\" + key + \"}}\", value)\n    return template\n"}
{"task_id": "valid/10", "completion": "\n    # Create a set from the string to remove duplicate characters\n    unique_chars = set(string)\n    \n    # Compare the length of the set with the length of the string\n    # If they are equal, all characters are unique\n    return len(unique_chars) == len(string)\n"}
{"task_id": "valid/11", "completion": "\n    date = datetime.strptime(date_string, '%Y-%m-%d')\n    new_date = date + timedelta(days=days)\n    return new_date.strftime('%Y-%m-%d')\n\n"}
{"task_id": "valid/12", "completion": "\n    return ' '.join(text.split())\n"}
{"task_id": "valid/13", "completion": "\n    # Convert to lowercase\n    text = text.lower()\n\n    # Remove punctuation\n    text = text.translate(str.maketrans('', '', string.punctuation))\n\n    # Remove numbers\n    text = ''.join(e for e in text if not e.isdigit())\n\n    # Remove whitespace\n    text = text.strip()\n\n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    pattern = r'\\b' + re.escape(word1) + r'\\b|\\b' + re.escape(word2) + r'\\b'\n    return bool(re.search(pattern, text))\n\n"}
{"task_id": "valid/15", "completion": "\n    return [sum(layer) for layer in array]\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    lines = comment.split('\\n')\n    for line in lines:\n        if line.startswith('#'):\n            parts = line.split(':')\n            if len(parts) == 2:\n                key, value = parts[0].strip(), parts[1].strip()\n                if key in ['tabstop', 'expandtab', 'shiftwidth', 'softtabstop']:\n                    settings[key] = value\n    return settings\n"}
{"task_id": "valid/17", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)\n"}
{"task_id": "valid/19", "completion": "\n    # Reverse the elements of each list\n    list1 = list1[::-1]\n    list2 = list2[::-1]\n\n    # Combine the elements of the two lists\n    combined_list = list1 + list2\n\n    # Sort the combined list\n    combined_list.sort()\n\n    return combined_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n"}
{"task_id": "valid/21", "completion": "\n    return z * z\n"}
{"task_id": "valid/22", "completion": "\n    try:\n        return dictionary[\"name\"]\n    except KeyError:\n        return None\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {k: struct_to_dict(v) for k, v in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(item) for item in struct]\n    else:\n        return struct\n"}
{"task_id": "valid/24", "completion": "\n    num = int(num)\n    for i in range(num, num+2):\n        if str(i) == str(i)[::-1]:\n            return i\n    return None\n"}
{"task_id": "valid/25", "completion": "\n    return num ** 0.5\n"}
{"task_id": "valid/26", "completion": "\n    # Check if the matrix is square\n    is_square = len(matrix) == len(matrix[0])\n    \n    # Calculate the sum of the diagonal elements\n    diagonal_sum = sum(matrix[i][i] for i in range(len(matrix)))\n    \n    # Return the properties of the matrix\n    return len(matrix), len(matrix[0]), diagonal_sum, is_square\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c.lower() for c in s if c.isalpha())\n"}
{"task_id": "valid/29", "completion": "\n    min_element = lst[0]\n    for i in lst:\n        if i < min_element:\n            min_element = i\n    return min_element\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n    if key not in json_data or json_data[key] != value:\n        return True\n    return False\n\n"}
{"task_id": "valid/31", "completion": "\n    # Your implementation here\n    pass\n"}
{"task_id": "valid/32", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for i in range(len(alphabet) - 1):\n        if alphabet[i] not in s or alphabet[i + 1] not in s:\n            return False\n    return True\n"}
{"task_id": "valid/33", "completion": "\n    return a if a > b else b\n"}
{"task_id": "valid/34", "completion": "\n    numeric_substrings = [ts[i:j] for i in range(len(ts)) for j in range(i + 1, len(ts) + 1) if ts[i:j].isdigit()]\n    return sum(map(int, numeric_substrings))\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n"}
{"task_id": "valid/36", "completion": "\n    # Validate the array to ensure it only contains numerical values\n    for i in arr:\n        if not isinstance(i, (int, float)):\n            raise ValueError(\"Array contains non-numerical values\")\n    \n    # Compute the sum of all elements within the array\n    return sum(arr)\n"}
{"task_id": "valid/37", "completion": "\n    neighborhoods = json.loads(json_data)\n    neighborhood_names = [neighborhood[\"name\"] for neighborhood in neighborhoods]\n    neighborhood_names.sort()\n    return neighborhood_names\n\n"}
{"task_id": "valid/38", "completion": "\n    # Initialize result as maximum possible\n    min_sum = float('inf')\n    \n    # Sort the array\n    arr.sort()\n    \n    # Iterate through the array\n    for i in range(n - 1):\n        # Find the pair with minimum absolute sum\n        if abs(arr[i] + arr[i + 1]) < min_sum:\n            min_sum = abs(arr[i] + arr[i + 1])\n            \n    return min_sum\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for char in p:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/40", "completion": "\n    # Check if the total number of votes is at least 100\n    if sum(votes) < 100:\n        return \"Error: Total number of votes must be at least 100\"\n\n    # Create a dictionary to store the vote counts for each candidate\n    vote_counts = {}\n\n    # Iterate through the list of votes\n    for vote in votes:\n        # Check if the candidate name is a string consisting of uppercase letters with a maximum length of 10 characters\n        if not isinstance(vote[0], str) or not vote[0].isupper() or len(vote[0]) > 10:\n            return \"Error: Candidate name must be a string consisting of uppercase letters with a maximum length of 10 characters\"\n\n        # Check if the number of votes is a positive integer not exceeding 1000\n        if not isinstance(vote[1], int) or vote[1] < 1 or vote[1] > 1000:\n            return \"Error: Number of votes must be a positive integer not exceeding 1000\"\n\n        # Add the vote count to the dictionary\n        if vote[0] in vote_counts:\n            vote_counts[vote[0]] += vote[1]\n        else:\n            vote_counts[vote[0]] = vote[1]\n\n    # Calculate the percentage of votes each candidate received\n    total_votes = sum(vote_counts.values())\n    percentage_votes = {candidate: (vote_count / total_votes) * 100 for candidate, vote_count in vote_counts.items()}\n\n    # Return the results\n    return vote_counts, percentage_votes\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        # Try to parse the date string\n        date_obj = datetime.strptime(date_string, \"%d-%m-%Y\")\n    except ValueError:\n        try:\n            # Try to parse the date string with written months\n            date_obj = datetime.strptime(date_string, \"%d-%b-%Y\")\n        except ValueError:\n            # If parsing fails, raise an error\n            raise ValueError(\"Invalid date format. Please use dd-mm-yyyy or dd-mmm-yyyy.\")\n\n    # Format the date object to the desired output\n    formatted_date = date_obj.strftime(\"%B %d, %Y\")\n\n    return formatted_date\n\n"}
{"task_id": "valid/42", "completion": "\n    allowed_extensions = {\n        'text': ['txt', 'doc', 'docx'],\n        'image': ['jpg', 'jpeg', 'png', 'gif'],\n        'video': ['mp4', 'avi', 'mkv', 'mov']\n    }\n    \n    if allowed_type not in allowed_extensions:\n        return False\n    \n    _, ext = os.path.splitext(newname)\n    ext = ext[1:]  # remove the dot\n    \n    if ext not in allowed_extensions[allowed_type]:\n        return False\n    \n    return True\n"}
{"task_id": "valid/43", "completion": "\n    result = []\n    for i in lst:\n        if isinstance(i, tuple):\n            result.append(remove_uneven(i))\n        elif isinstance(i, int) or isinstance(i, float):\n            if i % 2 == 0:\n                result.append(i)\n        elif isinstance(i, str):\n            if i.isdigit() and int(i) % 2 == 0:\n                result.append(i)\n    return tuple(result)\n"}
{"task_id": "valid/44", "completion": "\n    minutes = hours * 60\n    return minutes\n\nhours = 2\nminutes = hours_to_minutes(hours)"}
{"task_id": "valid/45", "completion": "\n    return string.count(specific_character)\n"}
{"task_id": "valid/46", "completion": "\n    # histogram_data.add_scalar('Accuracy', accs, generation)\n    return histogram_data\n"}
{"task_id": "valid/47", "completion": "\n    return bool(re.match(r'^[a-zA-Z0-9]{5}$', string))\n\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        parts = classifier.split(\" :: \")\n        if len(parts) == 3 and parts[0] == \"Programming Language\":\n            unique_languages.add(parts[1])\n    return len(unique_languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    # Create an empty dictionary to store the count of each number\n    count_dict = {}\n\n    # Iterate over each sub-array in the input array\n    for sub_arr in arr:\n        # Iterate over each number in the sub-array\n        for num in sub_arr:\n            # If the number is already in the dictionary, increment its count\n            if num in count_dict:\n                count_dict[num] += 1\n            # Otherwise, add the number to the dictionary with a count of 1\n            else:\n                count_dict[num] = 1\n\n    # Convert the dictionary to a list of tuples and return it\n    return list(count_dict.items())\n"}
{"task_id": "valid/50", "completion": "\n\n    Your task is to write a function that takes a url as input and returns the corresponding view function name based on the url pattern. If the url does not match any of the patterns, the function should return \"Not Found\".\n    \"\"\"\n    for pattern in urlpatterns:\n        if re.match(pattern.pattern, url):\n            return pattern.callback.__name__\n    return \"Not Found\"\n\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n"}
{"task_id": "valid/52", "completion": "\n    string = \"Hello\"\n    sentence = \"World\"\n    concatenated_string = string + \" \" + sentence + \"!\"\n    return concatenated_string\n"}
{"task_id": "valid/53", "completion": "\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.add(s[i:j])\n    return substrings\n"}
{"task_id": "valid/54", "completion": "\n    total_price = 0\n    for dict_item in list_of_dicts:\n        for key in dict_item:\n            if key.startswith(\"price_\"):\n                total_price += dict_item[key]\n    return total_price\n"}
{"task_id": "valid/55", "completion": "\n    intersection = [value for value in list1 if value in list2]\n    for value in intersection:\n        list2.remove(value)\n    return intersection\n"}
{"task_id": "valid/56", "completion": "\n    if request_method == 'GET':\n        return api_advisor_view\n    elif request_method == 'POST':\n        return api_advisor_view_post\n    else:\n        return None\n"}
{"task_id": "valid/57", "completion": "\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both numbers must be integers.\")\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Both numbers must be positive.\")\n    if b == 0:\n        return a\n    else:\n        return gcd_recursive(b, a % b)\n"}
{"task_id": "valid/58", "completion": "\n    categorized_files = {\n        'system': [],\n        'network': [],\n        'database': [],\n        'application': [],\n        'other': []\n    }\n    \n    for file_path in file_paths:\n        if 'system' in file_path:\n            categorized_files['system'].append(file_path)\n        elif 'network' in file_path:\n            categorized_files['network'].append(file_path)\n        elif 'database' in file_path:\n            categorized_files['database'].append(file_path)\n        elif 'application' in file_path:\n            categorized_files['application'].append(file_path)\n        else:\n            categorized_files['other'].append(file_path)\n    \n    return categorized_files\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n"}
{"task_id": "valid/61", "completion": "\n    # Your implementation here\n    pass\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return -1\n\n    mid = (start + end) // 2\n\n    if array[mid] == target:\n        return mid\n    elif array[mid] < target:\n        return binary_search_recursive(array, target, mid + 1, end)\n    else:\n        return binary_search_recursive(array, target, start, mid - 1)\n"}
{"task_id": "valid/63", "completion": "\n    if color == \"white\":\n        return \"red\"\n    elif color == \"red\":\n        return \"green\"\n    elif color == \"green\":\n        return \"blue\"\n    elif color == \"blue\":\n        return \"white\"\n    else:\n        return \"Invalid color\"\n"}
{"task_id": "valid/64", "completion": "\n    # Create a new list with incremented values\n    new_list = [i + 1 for i in list]\n    return new_list\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end + 1):\n        if i**0.5 == int(i**0.5):\n            return True\n    return False\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        if target in word:\n            return True\n    return False\n"}
{"task_id": "valid/67", "completion": "\n    words = sentence.split()\n    return words\n"}
{"task_id": "valid/68", "completion": "\n    print(\"the keys in the given dictionary are: \")\n    for key in dict.keys():\n        print(key)\n"}
{"task_id": "valid/69", "completion": "\n    string = \"Hello\"\n    phrase = \"world!\"\n    concatenated_string = f\"{string} {phrase}\"\n    return concatenated_string\n"}
{"task_id": "valid/70", "completion": "\n    result = []\n    for string in strings:\n        if re.match(\"^[a-zA-Z0-9 ]+$\", string):\n            result.append(string.capitalize())\n    return result\n\n"}
{"task_id": "valid/71", "completion": "\n    return string.index(char)\n"}
{"task_id": "valid/72", "completion": "\n    bold_text = []\n    i = 0\n    while i < len(html_code):\n        if html_code[i:i+4] == '<b>':\n            start = i\n            i += 4\n            while i < len(html_code) and html_code[i:i+5] != '</b>':\n                i += 1\n            if i < len(html_code):\n                bold_text.append(html_code[start+4:i])\n                i += 5\n        else:\n            i += 1\n    return bold_text\n"}
{"task_id": "valid/73", "completion": "\n    # define the items and their prices\n    items = {\n        \"coke\": 1.50,\n        \"chips\": 1.00,\n        \"candy\": 0.75\n    }\n    \n    # check if the item is in the vending machine\n    if item not in items:\n        return \"Item not available\"\n    \n    # check if the user has inserted enough money\n    if money_inserted < items[item]:\n        return \"Insufficient funds\"\n    \n    # calculate the change to return\n    change = money_inserted - items[item]\n    \n    # update the stock of the item purchased\n    # for simplicity, we'll just print a message indicating the purchase\n    print(f\"Purchased {item} for ${items[item]}. Change returned: ${change}\")\n    \n    return \"Purchase successful\"\n"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    unique_list = list(set(merged_list))\n    return unique_list\n"}
{"task_id": "valid/75", "completion": "\n    count = 0\n    for i in list:\n        if i == target:\n            count += 1\n    return count\n"}
{"task_id": "valid/76", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n"}
{"task_id": "valid/77", "completion": "\n    return [i for i, x in enumerate(vector) if x != 0]\n"}
{"task_id": "valid/78", "completion": "\n    # Assign a value to a variable\n    my_var = 10\n\n    # Validate the variable\n    if isinstance(my_var, int):\n        print(\"The variable is an integer.\")\n    else:\n        print(\"The variable is not an integer.\")\n\n    # Return the variable\n    return my_var\n"}
{"task_id": "valid/79", "completion": "\n    letters = list(word)\n    random.shuffle(letters)\n    return ''.join(letters)\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"integer\"\n    elif isinstance(element, float):\n        return \"float\"\n    elif isinstance(element, str):\n        return \"string\"\n    elif isinstance(element, list):\n        return \"list\"\n    elif isinstance(element, dict):\n        return \"dictionary\"\n    else:\n        return \"unknown\"\n"}
{"task_id": "valid/81", "completion": "\n    merged_arr = []\n    for i in range(len(arr)):\n        if i == 0 or arr[i] != arr[i-1]:\n            merged_arr.append(arr[i])\n    return merged_arr\n"}
{"task_id": "valid/82", "completion": "\n    tokenizer = re.compile(r'\\b\\w+\\b')\n    return tokenizer.findall(text)\n\n"}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    if not divisible_numbers:\n        return \"No numbers divisible by both 3 and 7 found.\"\n    \n    average = sum(divisible_numbers) / len(divisible_numbers)\n    max_value = max(divisible_numbers)\n    min_value = min(divisible_numbers)\n    \n    unique_numbers = set(divisible_numbers)\n    number_counts = {num: divisible_numbers.count(num) for num in unique_numbers}\n    \n    return {\n        \"average\": average,\n        \"max_value\": max_value,\n        \"min_value\": min_value,\n        \"number_counts\": number_counts\n    }\n"}
{"task_id": "valid/84", "completion": "\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    max_frequency = max(frequency.values())\n    for word, freq in frequency.items():\n        if freq == max_frequency:\n            return word\n"}
{"task_id": "valid/85", "completion": "\n    euler = 0\n    for i in range(decimal_places):\n        euler += 1 / math.factorial(i)\n    return round(euler, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    if len(numbers) == 0:\n        return 0, 0\n    else:\n        return sum(numbers) / len(numbers), sum(numbers)\n"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"The time series is empty.\")\n    \n    min_value = max_value = time_series[0]\n    \n    for value in time_series:\n        if not isinstance(value, (int, float)):\n            raise ValueError(\"The time series contains non-numerical values.\")\n        \n        if value < min_value:\n            min_value = value\n        elif value > max_value:\n            max_value = value\n    \n    return (min_value, max_value)\n"}
{"task_id": "valid/88", "completion": "\n    encyclopedia = {\n        \"Python\": [\"Java\", \"C++\", \"JavaScript\"],\n        \"Java\": [\"Python\", \"C#\", \"Ruby\"],\n        \"C++\": [\"Python\", \"Java\", \"C#\"],\n        \"JavaScript\": [\"Python\", \"Java\", \"Ruby\"],\n        \"C#\": [\"Java\", \"C++\", \"Ruby\"],\n        \"Ruby\": [\"Java\", \"C#\", \"Python\"]\n    }\n    related_articles_count = {}\n    for entry in encyclopedia:\n        related_articles_count[entry] = len(encyclopedia[entry])\n    return related_articles_count\n"}
{"task_id": "valid/89", "completion": "\n    max_index = 0\n    for i in range(1, len(lst)):\n        if lst[i] > lst[max_index]:\n            max_index = i\n    return max_index\n"}
{"task_id": "valid/90", "completion": "\n    return bool(set(list1) & set(list2))\n"}
{"task_id": "valid/91", "completion": "\n    root = Element('data')\n    for key, value in dictionary.items():\n        child = Element(key)\n        child.text = str(value)\n        root.append(child)\n    return tostring(root, encoding='unicode')\n\n"}
{"task_id": "valid/92", "completion": "\n    if not matrix or not matrix[0]:\n        return False\n    \n    rows, cols = len(matrix), len(matrix[0])\n    row, col = 0, cols - 1\n    \n    while row < rows and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    \n    return False\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 != 0:\n            sum_odd += lst[i]\n            count_odd += 1\n    if count_odd == 0:\n        return 0\n    else:\n        return sum_odd / count_odd\n"}
{"task_id": "valid/94", "completion": "\n    if n > len(lst) or n < 1:\n        return None\n    lst.sort(reverse=True)\n    return lst[n-1]\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "valid/96", "completion": "\n    exclusive_elements = set_a.symmetric_difference(set_b)\n    return exclusive_elements\n"}
{"task_id": "valid/97", "completion": "\n    # Your implementation here\n    pass\n"}
{"task_id": "valid/98", "completion": "\n    if n == 0:\n        return \"0\"\n    ternary = \"\"\n    while n != 0:\n        ternary = str(n % 3) + ternary\n        n = n // 3\n    return ternary\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(file_name.split('.')[-1] for file_name in file_names)\n"}
{"task_id": "valid/100", "completion": "\n    if age < 0:\n        return \"Invalid age\"\n    elif age <= 12:\n        return \"Child\"\n    elif age <= 19:\n        return \"Teenager\"\n    elif age <= 59:\n        return \"Adult\"\n    else:\n        return \"Senior\"\n"}
{"task_id": "valid/101", "completion": "\n    # Define the grade scale\n    grade_scale = {\n        \"A+\": (4.0, 4.0),\n        \"A\": (4.0, 3.7),\n        \"A-\": (3.7, 3.3),\n        \"B+\": (3.3, 3.0),\n        \"B\": (3.0, 2.7),\n        \"B-\": (2.7, 2.3),\n        \"C+\": (2.3, 2.0),\n        \"C\": (2.0, 1.7),\n        \"C-\": (1.7, 1.3),\n        \"D+\": (1.3, 1.0),\n        \"D\": (1.0, 0.7),\n        \"D-\": (0.7, 0.0),\n        \"E\": (0.0, 0.0),\n    }\n\n    # Determine the letter grade and GPA\n    for letter_grade, (lower_bound, upper_bound) in grade_scale.items():\n        if lower_bound <= numerical_grade < upper_bound:\n            return letter_grade, (numerical_grade - lower_bound) / (upper_bound - lower_bound)\n\n    # If the numerical grade does not match any of the defined grade scale, return \"Invalid grade\"\n    return \"Invalid grade\", None\n"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item['price'] * item['quantity']\n    return total\n"}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    vowel_count_dict = {}\n\n    for palindrome in palindrome_tuples:\n        vowel_count = sum(1 for char in palindrome if char in vowels)\n        vowel_count_dict[palindrome] = vowel_count\n\n    return vowel_count_dict\n"}
{"task_id": "valid/104", "completion": "\n    # split the string into a list of words\n    words = s.split()\n    \n    # reverse the order of the words\n    words = words[::-1]\n    \n    # join the words back into a string with a space separator\n    s = ' '.join(words)\n    \n    return s\n"}
{"task_id": "valid/105", "completion": "\n    # Create a set to store the elements of the array\n    num_set = set()\n\n    # Iterate over the array\n    for num in arr:\n        # Check if the negation of the current number exists in the set\n        if -num in num_set:\n            # If it does, return True\n            return True\n        # Add the current number to the set\n        num_set.add(num)\n\n    # If no pair of numbers sums to 0, return False\n    return False\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n    for package, version in dependencies:\n        if package not in latest_versions or version > latest_versions[package]:\n            latest_versions[package] = version\n    return latest_versions\n"}
{"task_id": "valid/107", "completion": "\n    categorized_causes = {}\n    for cause in causes:\n        action, result = cause.split()\n        if action not in categorized_causes:\n            categorized_causes[action] = []\n        categorized_causes[action].append(result)\n    return categorized_causes\n"}
{"task_id": "valid/108", "completion": "\n    return name.replace(\" \", \"-\").lower()\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(c) > 127 for c in text)\n"}
{"task_id": "valid/110", "completion": "\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    no_punct = \"\"\n    for char in string:\n        if char not in punctuations:\n            no_punct = no_punct + char\n    return no_punct\n"}
{"task_id": "valid/111", "completion": "\n    result = []\n    for num in num_list:\n        result.append(num ** exp)\n    return result\n"}
{"task_id": "valid/112", "completion": "\n    min_values = []\n    for row in grid:\n        min_values.append(min(row))\n    for i, value in enumerate(min_values):\n        print(f\"Minimum value in row {i+1}: {value}\")\n"}
{"task_id": "valid/113", "completion": "\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    if current_num == n:\n        return\n    if current_num % 2 == 0:\n        print(f\"Thank you for being even number {current_num}!\")\n    print_thank_you(n, current_num + 1)\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == element:\n            count += 1\n        else:\n            count = 0\n    return count\n"}
{"task_id": "valid/115", "completion": "\n    digit = num % base\n    while num:\n        if num % base != digit:\n            return False\n        num //= base\n    return True\n\n"}
{"task_id": "valid/116", "completion": "\n    vowels = \"aeiouAEIOU\"\n    if len(s) == 0:\n        return s\n    elif s[0] in vowels:\n        return remove_vowels_recursive(s[1:])\n    else:\n        return s[0] + remove_vowels_recursive(s[1:])\n"}
{"task_id": "valid/117", "completion": "\n    help_message = \"Usage: app_name [options]\\n\\nOptions:\\n\"\n    for option, description in options:\n        help_message += f\"  {option:<15}{description}\\n\"\n    return help_message\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n"}
{"task_id": "valid/119", "completion": "\n    count = 0\n    for i in range(len(Val)):\n        if Val[i] == 1:\n            count += 1\n    return count\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset\n"}
{"task_id": "valid/121", "completion": "\n    vowels = \"aeiou\"\n    for char in s:\n        if char not in vowels:\n            return False\n    return True\n"}
{"task_id": "valid/122", "completion": "\n    count = 0\n    subseq_len = len(subsequence)\n    for i in range(len(sequence) - subseq_len + 1):\n        if sequence[i:i+subseq_len] == subsequence:\n            count += 1\n    return count\n"}
{"task_id": "valid/123", "completion": "\n    if t == 0:\n        raise ValueError(\"Divisor cannot be zero\")\n    if h == 0:\n        return 0\n    if h < 0 and t < 0:\n        return dividir(-h, -t)\n    if h < 0:\n        return -dividir(-h, t)\n    if t < 0:\n        return -dividir(h, -t)\n    if h < t:\n        return 0\n    return 1 + dividir(h - t, t)\n"}
{"task_id": "valid/124", "completion": "\n    return sum(x for x in input_list if x % 2 != 0)\n"}
{"task_id": "valid/125", "completion": "\n    vowels = \"aeiouAEIOU\"\n    consonants = 0\n    for char in string:\n        if char.isalpha() and char not in vowels:\n            consonants += 1\n    return consonants\n"}
{"task_id": "valid/126", "completion": "\n    # Calculate the number of electrons based on energy values\n    electron_count = 0\n    for energy, ado in zip(grid_energies, ados):\n        if energy < 0:\n            electron_count += ado\n\n    # Adjust the number of electrons based on doping levels\n    if dope > 0:\n        electron_count += dope\n    elif dope < 0:\n        electron_count -= abs(dope)\n\n    # Calculate the density of states\n    dos = [ado / dos_grid_size for ado in ados]\n\n    return electron_count, dos\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    for i in range(len(arr) // 2):\n        arr[i], arr[-i - 1] = arr[-i - 1], arr[i]\n    return arr\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for element in lst:\n        if element not in unique_elements:\n            unique_elements.append(element)\n            if len(unique_elements) == 3:\n                break\n    return unique_elements\n"}
{"task_id": "valid/132", "completion": "\n    fruit_list.sort()\n    return ', '.join(fruit_list)\n"}
{"task_id": "valid/133", "completion": "\n    sublists = []\n    for i in range(len(lst) + 1):\n        for j in range(i + 1, len(lst) + 1):\n            sublists.append(lst[i:j])\n    return sublists\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d+\\.\\d+'\n    return bool(re.search(pattern, string))\n\n"}
{"task_id": "valid/135", "completion": "\n    from django.db import migrations, models\n\n    class Migration(migrations.Migration):\n\n        dependencies = [\n            ('history', '0001_initial'),\n        ]\n\n        operations = [\n            migrations.AlterField(\n                model_name=model_name,\n                name=field_name,\n                field=models.CharField(max_length=100),\n            ),\n        ]\n\n    return Migration\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = set(list1).intersection(set(list2))\n    return sum(common_elements)\n"}
{"task_id": "valid/137", "completion": "\n    forecast_period = math.ceil(len(df) * 0.01)\n    return forecast_period\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n"}
{"task_id": "valid/139", "completion": "\n    start_index = (page_number - 1) * items_per_page\n    end_index = start_index + items_per_page\n    return items[start_index:end_index]\n\n"}
{"task_id": "valid/140", "completion": "\n    carry = 0\n    result = []\n    for digit in reversed(n_str):\n        doubled_digit = int(digit) * 2 + carry\n        carry = doubled_digit // 10\n        result.append(str(doubled_digit % 10))\n    if carry:\n        result.append(str(carry))\n    return ''.join(reversed(result))\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        \"home\": (0.0, 0.0, 0.0),\n        \"pick\": (0.1, 0.0, 0.1),\n        \"place\": (-0.1, 0.0, 0.1)\n    }\n    return presets.get(preset_name, (0.0, 0.0, 0.0))\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = set(list1) & set(list2)\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product\n"}
{"task_id": "valid/143", "completion": "\n\n        if the user is allowed to select multiple answers, the quiz system should allow them to do so.\n        \"\"\"\n    else:\n        \"\"\"\n        if the user is not allowed to select multiple answers, the quiz system should prevent them from doing so.\n        \"\"\"\n    if zoom_level == 1:\n        \"\"\"\n        if the zoom level is 1, the quiz system should display the questions in a linear order.\n        \"\"\"\n    elif zoom_level == 2:\n        \"\"\"\n        if the zoom level is 2, the quiz system should display the questions in a hierarchical order.\n        \"\"\"\n    else:\n        \"\"\"\n        if the zoom level is neither 1 nor 2, the quiz system should display the questions in a random order.\n        \"\"\"\n    \"\"\"\n    the code snippet provided is a part of a larger program that manages the behavior of the quiz system based on the user's configurations. the program uses conditional statements to determine whether the user is allowed to select multiple answers and the zoom level of the quiz. based on these configurations, the program determines the behavior of the quiz system and displays the questions accordingly.\n    \"\"\"\n    pass\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in sentence if char not in vowels])\n"}
{"task_id": "valid/146", "completion": "\n    # your code here\n    pass\n"}
{"task_id": "valid/147", "completion": "\n    max_value = float('-inf')\n    for key, value in d.items():\n        if isinstance(value, dict):\n            max_value = max(max_value, find_max_in_dict(value))\n        else:\n            try:\n                max_value = max(max_value, value)\n            except TypeError:\n                print(f\"Skipping non-numeric value: {value}\")\n    return max_value\n"}
{"task_id": "valid/148", "completion": "\n    return sum(dict[key]) / len(dict[key])\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == \"\":\n        return None\n    else:\n        return string.replace('e', '*')\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n\n"}
{"task_id": "valid/151", "completion": "\n    return x % 4 == 0\n\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n\n"}
