{"task_id":"EvoEval\/0","prompt":"from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in given list numbers two adjacent numbers closer to than\n   given threshold.\n   >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n   False\n   >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n   True\n   >>> has_close_elements([], 0.3)\n   False\n    \"\"\"\n","raw":"Check if in given list of numbers, are any two adjacent numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    >>> has_close_elements([], 0.3)\n    False","reduced":"Check if in given list numbers two adjacent numbers closer to than\n   given threshold.\n   >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n   False\n   >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n   True\n   >>> has_close_elements([], 0.3)\n   False"}
{"task_id":"EvoEval\/1","prompt":"from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Input to this function is a string containing multiple groups of nested parentheses. goal is to\n   separate those group into separate strings return list.\n   Separate groups are balanced (each open brace is properly closed) not nested within each other\n   Ignore spaces in input string.\n   Return list in ascending alphabetical order\n   >>> separate_paren_groups('( ) (( )) (( )( ))')\n   ['(()())', '(())', '()']\n    \"\"\"\n","raw":"Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string. \n    Return the list in ascending alphabetical order \n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['(()())', '(())', '()']","reduced":"Input to this function is a string containing multiple groups of nested parentheses. goal is to\n   separate those group into separate strings return list.\n   Separate groups are balanced (each open brace is properly closed) not nested within each other\n   Ignore spaces in input string.\n   Return list in ascending alphabetical order\n   >>> separate_paren_groups('( ) (( )) (( )( ))')\n   ['(()())', '(())', '()']"}
{"task_id":"EvoEval\/2","prompt":"def truncate_number(number: float) -> float:\n    \"\"\"\n    Given positive floating point number can be decomposed into\n   and integer part (largest integer smaller than given number) and decimals\n   (leftover part always smaller than 1).\n   Return integer and decimal part of number.\n   >>> truncate_number(3.5)\n   (3, 0.5)\n    \"\"\"\n","raw":"Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the integer and decimal part of the number.\n    >>> truncate_number(3.5)\n    (3, 0.5)","reduced":"Given positive floating point number can be decomposed into\n   and integer part (largest integer smaller than given number) and decimals\n   (leftover part always smaller than 1).\n   Return integer and decimal part of number.\n   >>> truncate_number(3.5)\n   (3, 0.5)"}
{"task_id":"EvoEval\/3","prompt":"from typing import List\n\n\ndef below_one(operations: List[int]) -> bool:\n    \"\"\"\n    You're given a list of deposit and withdrawal operations on bank account starts with\n   one balance. Your task is to detect if point balance of account falls below one,\n   at point function should return True. Otherwise it should return False.\n   >>> below_one([1, 2, 3])\n   False\n   >>> below_one([1, 2, -4, 5])\n   True\n    \"\"\"\n","raw":"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    one balance. Your task is to detect if at any point the balance of account falls below one, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_one([1, 2, 3])\n    False\n    >>> below_one([1, 2, -4, 5])\n    True","reduced":"You're given a list of deposit and withdrawal operations on bank account starts with\n   one balance. Your task is to detect if point balance of account falls below one,\n   at point function should return True. Otherwise it should return False.\n   >>> below_one([1, 2, 3])\n   False\n   >>> below_one([1, 2, -4, 5])\n   True"}
{"task_id":"EvoEval\/4","prompt":"from typing import List\n\n\ndef median_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For given list of input numbers, calculate Median Absolute Deviation\n   around median dataset.\n   Median Absolute Deviation is median absolute difference between each\n   element and centerpoint (median in this case):\n   MAD = median| x - x_median |\n   >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n   1.0\n    \"\"\"\n","raw":"For a given list of input numbers, calculate Median Absolute Deviation\n    around the median of this dataset.\n    Median Absolute Deviation is the median absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0","reduced":"For given list of input numbers, calculate Median Absolute Deviation\n   around median dataset.\n   Median Absolute Deviation is median absolute difference between each\n   element and centerpoint (median in this case):\n   MAD = median| x - x_median |\n   >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n   1.0"}
{"task_id":"EvoEval\/5","prompt":"from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\n    Insert number 'delimeter' between two consecutive elements of input list `numbers' add 'delimeter' at end of list\n   >>> intersperse([], 4)\n   [4]\n   >>> intersperse([1, 2, 3], 4)\n   [1, 4, 2, 4, 3, 4]\n    \"\"\"\n","raw":"Insert a number 'delimeter' between every two consecutive elements of input list `numbers' and add 'delimeter' at the end of the list\n    >>> intersperse([], 4)\n    [4]\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3, 4]","reduced":"Insert number 'delimeter' between two consecutive elements of input list `numbers' add 'delimeter' at end of list\n   >>> intersperse([], 4)\n   [4]\n   >>> intersperse([1, 2, 3], 4)\n   [1, 4, 2, 4, 3, 4]"}
{"task_id":"EvoEval\/6","prompt":"from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to function is string represented multiple groups for nested parentheses separated by spaces.\n   For each group output deepest level of nesting of parentheses. return list in descending order.\n   E.g. (()()) has maximum two levels of nesting while ((())) has three.\n   >>> parse_nested_parens('(()()) ((())) () ((())()())')\n   [3, 3, 2, 1]\n    \"\"\"\n","raw":"Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses. Additionally, return the list in descending order.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [3, 3, 2, 1]","reduced":"Input to function is string represented multiple groups for nested parentheses separated by spaces.\n   For each group output deepest level of nesting of parentheses. return list in descending order.\n   E.g. (()()) has maximum two levels of nesting while ((())) has three.\n   >>> parse_nested_parens('(()()) ((())) () ((())()())')\n   [3, 3, 2, 1]"}
{"task_id":"EvoEval\/7","prompt":"from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter input list of strings for ones not contain given substring\n   >>> filter_by_substring([], 'a')\n   []\n   >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n   ['cde']\n    \"\"\"\n","raw":"Filter an input list of strings only for ones that do not contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['cde']","reduced":"Filter input list of strings for ones not contain given substring\n   >>> filter_by_substring([], 'a')\n   []\n   >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n   ['cde']"}
{"task_id":"EvoEval\/8","prompt":"from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For given list of integers, return a tuple consisting of a sum and product of all the non-negative integers in list.\n   Empty sum should equal to 0 and empty product equal to 1.\n   >>> sum_product([])\n   (0, 1)\n   >>> sum_product([1, 2, 3, 4])\n   (10, 24)\n    \"\"\"\n","raw":"For a given list of integers, return a tuple consisting of a sum and a product of all the non-negative integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)","reduced":"For given list of integers, return a tuple consisting of a sum and product of all the non-negative integers in list.\n   Empty sum should equal to 0 and empty product equal to 1.\n   >>> sum_product([])\n   (0, 1)\n   >>> sum_product([1, 2, 3, 4])\n   (10, 24)"}
{"task_id":"EvoEval\/9","prompt":"from typing import List, Tuple\n\n\ndef rolling_min(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From given list of integers generate list rolling minimum element found until given moment\n   in sequence.\n   >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n   [1, 1, 1, 1, 1, 1, 1]\n    \"\"\"\n","raw":"From a given list of integers, generate a list of rolling minimum element found until given moment\n    in the sequence.\n    >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n    [1, 1, 1, 1, 1, 1, 1]","reduced":"From given list of integers generate list rolling minimum element found until given moment\n   in sequence.\n   >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n   [1, 1, 1, 1, 1, 1, 1]"}
{"task_id":"EvoEval\/10","prompt":"def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"\n    Find shortest palindrome that ends with supplied string.\n   Algorithm idea is simple:\n   - Find longest prefix of supplied string that is a palindrome.\n   - Append to the start of string reverse of a string suffix comes after palindromic prefix.\n   >>> make_palindrome('')\n   ''\n   >>> make_palindrome('cat')\n   'tacat'\n   >>> make_palindrome('cata')\n   'atacata'\n    \"\"\"\n","raw":"Find the shortest palindrome that ends with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest prefix of supplied string that is a palindrome.\n    - Append to the start of the string reverse of a string suffix that comes after the palindromic prefix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'tacat'\n    >>> make_palindrome('cata')\n    'atacata'","reduced":"Find shortest palindrome that ends with supplied string.\n   Algorithm idea is simple:\n   - Find longest prefix of supplied string that is a palindrome.\n   - Append to the start of string reverse of a string suffix comes after palindromic prefix.\n   >>> make_palindrome('')\n   ''\n   >>> make_palindrome('cat')\n   'tacat'\n   >>> make_palindrome('cata')\n   'atacata'"}
{"task_id":"EvoEval\/11","prompt":"from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Input two strings a and b consisting only of 1s and 0s.\n   Perform binary XOR on these inputs return result as string but reversed.\n   >>> string_xor('010', '110')\n   '001'\n    \"\"\"\n","raw":"Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string but reversed.\n    >>> string_xor('010', '110')\n    '001'","reduced":"Input two strings a and b consisting only of 1s and 0s.\n   Perform binary XOR on these inputs return result as string but reversed.\n   >>> string_xor('010', '110')\n   '001'"}
{"task_id":"EvoEval\/12","prompt":"from typing import List, Optional\n\n\ndef shortest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of list of strings, return shortest one. Return first one in case of multiple\n   strings of same length. Return None in case input list empty.\n   >>> shortest([])\n   >>> shortest(['a', 'b', 'c'])\n   'a'\n   >>> shortest(['a', 'bb', 'ccc'])\n   'a'\n    \"\"\"\n","raw":"Out of list of strings, return the shortest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> shortest([])\n\n    >>> shortest(['a', 'b', 'c'])\n    'a'\n    >>> shortest(['a', 'bb', 'ccc'])\n    'a'","reduced":"Out of list of strings, return shortest one. Return first one in case of multiple\n   strings of same length. Return None in case input list empty.\n   >>> shortest([])\n   >>> shortest(['a', 'b', 'c'])\n   'a'\n   >>> shortest(['a', 'bb', 'ccc'])\n   'a'"}
{"task_id":"EvoEval\/13","prompt":"def least_common_multiple(a: int, b: int) -> int:\n    \"\"\"\n    Return least common multiple two integers a and b\n   >>> least_common_multiple(3, 5)\n   15\n   >>> least_common_multiple(25, 15)\n   75\n    \"\"\"\n","raw":"Return the least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75","reduced":"Return least common multiple two integers a and b\n   >>> least_common_multiple(3, 5)\n   15\n   >>> least_common_multiple(25, 15)\n   75"}
{"task_id":"EvoEval\/14","prompt":"from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    Return list all prefixes from longest to shortest input string\n   >>> all_prefixes('abc')\n   ['abc', 'ab', 'a']\n    \"\"\"\n","raw":"Return list of all prefixes from longest to shortest of the input string\n    >>> all_prefixes('abc')\n    ['abc', 'ab', 'a']","reduced":"Return list all prefixes from longest to shortest input string\n   >>> all_prefixes('abc')\n   ['abc', 'ab', 'a']"}
{"task_id":"EvoEval\/15","prompt":"def string_sequence(n: int) -> str:\n    \"\"\"\n    Return string containing space-delimited numbers starting 1 upto n inclusive.\n   >>> string_sequence(1)\n   '1'\n   >>> string_sequence(5)\n   '1 2 3 4 5'\n    \"\"\"\n","raw":"Return a string containing space-delimited numbers starting from 1 upto n inclusive.\n    >>> string_sequence(1)\n    '1'\n    >>> string_sequence(5)\n    '1 2 3 4 5'","reduced":"Return string containing space-delimited numbers starting 1 upto n inclusive.\n   >>> string_sequence(1)\n   '1'\n   >>> string_sequence(5)\n   '1 2 3 4 5'"}
{"task_id":"EvoEval\/16","prompt":"def count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, find out many distinct characters (case-sensitive) consist of.\n   >>> count_distinct_characters('xyzXYZ')\n   6\n   >>> count_distinct_characters('Jerry')\n   4\n    \"\"\"\n","raw":"Given a string, find out how many distinct characters (case-sensitive) does it consist of.\n    >>> count_distinct_characters('xyzXYZ')\n    6\n    >>> count_distinct_characters('Jerry')\n    4","reduced":"Given a string, find out many distinct characters (case-sensitive) consist of.\n   >>> count_distinct_characters('xyzXYZ')\n   6\n   >>> count_distinct_characters('Jerry')\n   4"}
{"task_id":"EvoEval\/17","prompt":"from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Input to function is a string representing musical notes in special ASCII format.\n   task is to parse string return list of unique integers corresponding to how many beats does each\n   note last. Return list in descending order.\n   Here is legend:\n   'o' - whole note, lasts four beats\n   'o|' - half note, lasts two beats\n   '.|' - quater note, lasts one beat\n   >>> parse_music('o o| .| o| o| .|.|.| .| o o')\n   [4, 2, 1]\n    \"\"\"\n","raw":"Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return a list of unique integers corresponding to how many beats does each\n    note last. Return the list in descending order.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1]","reduced":"Input to function is a string representing musical notes in special ASCII format.\n   task is to parse string return list of unique integers corresponding to how many beats does each\n   note last. Return list in descending order.\n   Here is legend:\n   'o' - whole note, lasts four beats\n   'o|' - half note, lasts two beats\n   '.|' - quater note, lasts one beat\n   >>> parse_music('o o| .| o| o| .|.|.| .| o o')\n   [4, 2, 1]"}
{"task_id":"EvoEval\/18","prompt":"def how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    Find how many times given substring found in the original string. Do not count overlapping cases.\n   >>> how_many_times('', 'a')\n   0\n   >>> how_many_times('aaa', 'a')\n   3\n   >>> how_many_times('aaaa', 'aa')\n   2\n    \"\"\"\n","raw":"Find how many times a given substring can be found in the original string. Do not count overlapping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    2","reduced":"Find how many times given substring found in the original string. Do not count overlapping cases.\n   >>> how_many_times('', 'a')\n   0\n   >>> how_many_times('aaa', 'a')\n   3\n   >>> how_many_times('aaaa', 'aa')\n   2"}
{"task_id":"EvoEval\/19","prompt":"from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Input space-delimited string of numerals from 'zero' to 'nine'\n   Valid choices are 'zero', 'one' 'two' 'three' 'four' 'five' 'six' 'seven' 'eight' 'nine'.\n   Return string with numbers sorted from largest to smallest\n   >>> sort_numbers('three one five')\n   'five three one'\n    \"\"\"\n","raw":"Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from largest to smallest\n    >>> sort_numbers('three one five')\n    'five three one'","reduced":"Input space-delimited string of numerals from 'zero' to 'nine'\n   Valid choices are 'zero', 'one' 'two' 'three' 'four' 'five' 'six' 'seven' 'eight' 'nine'.\n   Return string with numbers sorted from largest to smallest\n   >>> sort_numbers('three one five')\n   'five three one'"}
{"task_id":"EvoEval\/20","prompt":"from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    supplied list of numbers (of length least two) select return two adjacent numbers closest to each\n   other return in reverse order (larger number, smaller number).\n   >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n   (2.0, 1.0)\n   >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 4.5])\n   (5.0, 4.5)\n    \"\"\"\n","raw":"From a supplied list of numbers (of length at least two) select and return two adjacent numbers that are the closest to each\n    other and return them in reverse order (larger number, smaller number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 1.0)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 4.5])\n    (5.0, 4.5)","reduced":"supplied list of numbers (of length least two) select return two adjacent numbers closest to each\n   other return in reverse order (larger number, smaller number).\n   >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n   (2.0, 1.0)\n   >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 4.5])\n   (5.0, 4.5)"}
{"task_id":"EvoEval\/21","prompt":"from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply linear transform to list,\n   such smallest number will become 0 and largest become 1. Return list in descending order.\n   >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n   [1.0, 0.75, 0.5, 0.25, 0.0]\n    \"\"\"\n","raw":"Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1. Return the list in descending order.\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [1.0, 0.75, 0.5, 0.25, 0.0]","reduced":"Given list of numbers (of at least two elements), apply linear transform to list,\n   such smallest number will become 0 and largest become 1. Return list in descending order.\n   >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n   [1.0, 0.75, 0.5, 0.25, 0.0]"}
{"task_id":"EvoEval\/22","prompt":"from typing import List, Any\n\n\ndef filter_even_integers(values: List[Any]) -> List[int]:\n    \"\"\"\n    Filter given list python values even integers\n   >>> filter_even_integers(['a', 3.14, 5, 6])\n   [6]\n   >>> filter_even_integers([1, 2, 3, 'abc', {}, []])\n   [2]\n    \"\"\"\n","raw":"Filter given list of any python values only for even integers\n    >>> filter_even_integers(['a', 3.14, 5, 6])\n    [6]\n    >>> filter_even_integers([1, 2, 3, 'abc', {}, []])\n    [2]","reduced":"Filter given list python values even integers\n   >>> filter_even_integers(['a', 3.14, 5, 6])\n   [6]\n   >>> filter_even_integers([1, 2, 3, 'abc', {}, []])\n   [2]"}
{"task_id":"EvoEval\/23","prompt":"def strlen(string: str) -> int:\n    \"\"\"\n    Return length given string plus 1\n   >>> strlen('')\n   1\n   >>> strlen('abc')\n   4\n    \"\"\"\n","raw":"Return length of given string plus 1\n    >>> strlen('')\n    1\n    >>> strlen('abc')\n    4","reduced":"Return length given string plus 1\n   >>> strlen('')\n   1\n   >>> strlen('abc')\n   4"}
{"task_id":"EvoEval\/24","prompt":"def smallest_divisor(n: int) -> int:\n    \"\"\"\n    For given number n, find smallest number divides n evenly, larger than 1\n   >>> smallest_divisor(15)\n   3\n    \"\"\"\n","raw":"For a given number n, find the smallest number that divides n evenly, larger than 1\n    >>> smallest_divisor(15)\n    3","reduced":"For given number n, find smallest number divides n evenly, larger than 1\n   >>> smallest_divisor(15)\n   3"}
{"task_id":"EvoEval\/25","prompt":"from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"\n    Return list of prime factors of given integer order from largest to smallest.\n   Each of factors should listed number of times corresponding to how many times it appeares in factorization.\n   Input number should equal to product of all factors\n   >>> factorize(8)\n   [2, 2, 2]\n   >>> factorize(25)\n   [5, 5]\n   >>> factorize(70)\n   [7, 5, 2]\n    \"\"\"\n","raw":"Return list of prime factors of given integer in the order from largest to smallest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [7, 5, 2]","reduced":"Return list of prime factors of given integer order from largest to smallest.\n   Each of factors should listed number of times corresponding to how many times it appeares in factorization.\n   Input number should equal to product of all factors\n   >>> factorize(8)\n   [2, 2, 2]\n   >>> factorize(25)\n   [5, 5]\n   >>> factorize(70)\n   [7, 5, 2]"}
{"task_id":"EvoEval\/26","prompt":"from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From list of integers, remove all elements occur more than once.\n   Return list in the reverse order of input.\n   >>> remove_duplicates([1, 2, 3, 2, 4])\n   [4, 3, 1]\n    \"\"\"\n","raw":"From a list of integers, remove all elements that occur more than once.\n    Return the list in the reverse order of the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [4, 3, 1]","reduced":"From list of integers, remove all elements occur more than once.\n   Return list in the reverse order of input.\n   >>> remove_duplicates([1, 2, 3, 2, 4])\n   [4, 3, 1]"}
{"task_id":"EvoEval\/27","prompt":"def flip_case(string: str, exclusive_case: str = 'lower') -> str:\n    \"\"\"\n    For given string, flip lowercase characters to uppercase and uppercase to lowercase, unless in exclusive_case can be either 'lower' or 'upper'\n   If exclusive_case is 'lower', lowercase letters remain as they are.\n   If exclusive_case is 'upper', uppercase letters remain as are.\n   >>> flip_case('Hello', 'lower')\n   'hello'\n    \"\"\"\n","raw":"For a given string, flip lowercase characters to uppercase and uppercase to lowercase, unless they are in exclusive_case which can be either 'lower' or 'upper'.\n    If exclusive_case is 'lower', lowercase letters will remain as they are.\n    If exclusive_case is 'upper', uppercase letters will remain as they are.\n    >>> flip_case('Hello', 'lower')\n    'hello'","reduced":"For given string, flip lowercase characters to uppercase and uppercase to lowercase, unless in exclusive_case can be either 'lower' or 'upper'\n   If exclusive_case is 'lower', lowercase letters remain as they are.\n   If exclusive_case is 'upper', uppercase letters remain as are.\n   >>> flip_case('Hello', 'lower')\n   'hello'"}
{"task_id":"EvoEval\/28","prompt":"from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"\n    Concatenate list of strings into single string separated by comma.\n   >>> concatenate([])\n   ''\n   >>> concatenate(['a', 'b', 'c'])\n   'a,b,c'\n    \"\"\"\n","raw":"Concatenate list of strings into a single string, separated by a comma.\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'a,b,c'","reduced":"Concatenate list of strings into single string separated by comma.\n   >>> concatenate([])\n   ''\n   >>> concatenate(['a', 'b', 'c'])\n   'a,b,c'"}
{"task_id":"EvoEval\/29","prompt":"from typing import List\n\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\"\n    Filter input list of strings for ones end with given suffix\n   >>> filter_by_suffix([], 'a')\n   []\n   >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n   ['abc']\n    \"\"\"\n","raw":"Filter an input list of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([], 'a')\n    []\n    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n    ['abc']","reduced":"Filter input list of strings for ones end with given suffix\n   >>> filter_by_suffix([], 'a')\n   []\n   >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n   ['abc']"}
{"task_id":"EvoEval\/30","prompt":"def get_positive(l: list):\n    \"\"\"\n    Return positive numbers list ascending order.\n   >>> get_positive([-1, 2, -4, 5, 6])\n   [2, 5, 6]\n   >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,])\n   [1, 2, 3, 3, 5, 9, 123]\n    \"\"\"\n","raw":"Return only positive numbers in the list in ascending order.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [1, 2, 3, 3, 5, 9, 123]","reduced":"Return positive numbers list ascending order.\n   >>> get_positive([-1, 2, -4, 5, 6])\n   [2, 5, 6]\n   >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,])\n   [1, 2, 3, 3, 5, 9, 123]"}
{"task_id":"EvoEval\/31","prompt":"def is_prime(n):\n    \"\"\"\n    Return true if given number is prime, and false otherwise. If number is less than 2, return 'Invalid Input'.\n   >>> is_prime(6)\n   False\n   >>> is_prime(101)\n   True\n   >>> is_prime(11)\n   True\n   >>> is_prime(13441)\n   True\n   >>> is_prime(61)\n   True\n   >>> is_prime(4)\n   False\n   >>> is_prime(1)\n   'Invalid Input'\n    \"\"\"\n","raw":"Return true if a given number is prime, and false otherwise. If the number is less than 2, return 'Invalid Input'.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    'Invalid Input'","reduced":"Return true if given number is prime, and false otherwise. If number is less than 2, return 'Invalid Input'.\n   >>> is_prime(6)\n   False\n   >>> is_prime(101)\n   True\n   >>> is_prime(11)\n   True\n   >>> is_prime(13441)\n   True\n   >>> is_prime(61)\n   True\n   >>> is_prime(4)\n   False\n   >>> is_prime(1)\n   'Invalid Input'"}
{"task_id":"EvoEval\/32","prompt":"import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of polynomial xs[0] + xs[1] * x^1 + xs[2] * x^3 + ... xs[n] * x^(2*n-1)\n   find_zero find x such poly(x) = 0.\n   find_zero returns only zero point, even if many.\n   find_zero only takes list xs least two coefficients\n   largest non zero coefficient guarantees\n   solution.\n   >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n   -0.5\n   >>> round(find_zero([-2, -3, 1]), 2) # (x + 1) (x + 1) (x - 2) = -2 - 3x + x^3\n   -1.0\n    \"\"\"\n","raw":"xs are coefficients of a polynomial xs[0] + xs[1] * x^1 + xs[2] * x^3 + .... xs[n] * x^(2*n-1)\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having at least two coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-2, -3, 1]), 2) # (x + 1) (x + 1) (x - 2) = -2 - 3x + x^3\n    -1.0","reduced":"xs are coefficients of polynomial xs[0] + xs[1] * x^1 + xs[2] * x^3 + ... xs[n] * x^(2*n-1)\n   find_zero find x such poly(x) = 0.\n   find_zero returns only zero point, even if many.\n   find_zero only takes list xs least two coefficients\n   largest non zero coefficient guarantees\n   solution.\n   >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n   -0.5\n   >>> round(find_zero([-2, -3, 1]), 2) # (x + 1) (x + 1) (x - 2) = -2 - 3x + x^3\n   -1.0"}
{"task_id":"EvoEval\/33","prompt":"def sort_third(l: list):\n    \"\"\"\n    function takes a list l returns list l' such that\n   l' is identical to l in the indicies not divisible by three, while its values at indicies divisible by three are equal\n   to values of corresponding indicies of l, but sorted in descending order.\n   >>> sort_third([1, 2, 3])\n   [1, 2, 3]\n   >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n   [5, 6, 3, 4, 8, 9, 2]\n    \"\"\"\n","raw":"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted in descending order.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [5, 6, 3, 4, 8, 9, 2]","reduced":"function takes a list l returns list l' such that\n   l' is identical to l in the indicies not divisible by three, while its values at indicies divisible by three are equal\n   to values of corresponding indicies of l, but sorted in descending order.\n   >>> sort_third([1, 2, 3])\n   [1, 2, 3]\n   >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n   [5, 6, 3, 4, 8, 9, 2]"}
{"task_id":"EvoEval\/34","prompt":"def unique(l: list):\n    \"\"\"\n    Return sorted unique elements list descending order\n   unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n   [123, 9, 5, 3, 2, 0]\n    \"\"\"\n","raw":"Return sorted unique elements in a list in descending order\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [123, 9, 5, 3, 2, 0]","reduced":"Return sorted unique elements list descending order\n   unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n   [123, 9, 5, 3, 2, 0]"}
{"task_id":"EvoEval\/35","prompt":"def min_element(l: list):\n    \"\"\"\n    Return minimum element list.\n   >>> min_element([1, 2, 3])\n   1\n   >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,])\n   -10\n    \"\"\"\n","raw":"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10","reduced":"Return minimum element list.\n   >>> min_element([1, 2, 3])\n   1\n   >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,])\n   -10"}
{"task_id":"EvoEval\/36","prompt":"def fizz_buzz(n: int):\n    \"\"\"\n    Return number of times digit 8 appears in integers less than n are divisible by 11 or 13.\n   >>> fizz_buzz(50)\n   0\n   >>> fizz_buzz(78)\n   0\n   >>> fizz_buzz(79)\n   1\n    \"\"\"\n","raw":"Return the number of times the digit 8 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    0\n    >>> fizz_buzz(79)\n    1","reduced":"Return number of times digit 8 appears in integers less than n are divisible by 11 or 13.\n   >>> fizz_buzz(50)\n   0\n   >>> fizz_buzz(78)\n   0\n   >>> fizz_buzz(79)\n   1"}
{"task_id":"EvoEval\/37","prompt":"def sort_even(l: list):\n    \"\"\"\n    function takes list l returns list l' such that\n   l' is identical to l in the odd indicies, its values at even indicies are equal\n   to values of even indicies of l, but sorted in descending order.\n   >>> sort_even([1, 2, 3])\n   [1, 2, 3]\n   >>> sort_even([5, 6, 3, 4])\n   [5, 6, 3, 4]\n    \"\"\"\n","raw":"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted in descending order.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [5, 6, 3, 4]","reduced":"function takes list l returns list l' such that\n   l' is identical to l in the odd indicies, its values at even indicies are equal\n   to values of even indicies of l, but sorted in descending order.\n   >>> sort_even([1, 2, 3])\n   [1, 2, 3]\n   >>> sort_even([5, 6, 3, 4])\n   [5, 6, 3, 4]"}
{"task_id":"EvoEval\/38","prompt":"def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of four characters.\n    \"\"\"\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) \/\/ n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[1:] + group[0]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes input string encoded encode_cyclic function. Returns decoded string.\n    \"\"\"\n","raw":"takes as input string encoded with encode_cyclic function. Returns decoded string.","reduced":"takes input string encoded encode_cyclic function. Returns decoded string."}
{"task_id":"EvoEval\/39","prompt":"def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number is a Fibonacci number and it's also prime. If number is even, return None.\n   >>> prime_fib(1)\n   None\n   >>> prime_fib(2)\n   3\n   >>> prime_fib(3)\n   5\n   >>> prime_fib(4)\n   13\n   >>> prime_fib(5)\n   89\n    \"\"\"\n","raw":"prime_fib returns n-th number that is a Fibonacci number and it's also prime. If the number is even, return None.\n    >>> prime_fib(1)\n    None\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89","reduced":"prime_fib returns n-th number is a Fibonacci number and it's also prime. If number is even, return None.\n   >>> prime_fib(1)\n   None\n   >>> prime_fib(2)\n   3\n   >>> prime_fib(3)\n   5\n   >>> prime_fib(4)\n   13\n   >>> prime_fib(5)\n   89"}
{"task_id":"EvoEval\/40","prompt":"def triples_sum_to_ten(l: list):\n    \"\"\"\n    triples_sum_to_ten takes list of integers as input.\n   it returns True if three distinct elements in the list\n   sum to ten, False otherwise.\n   >>> triples_sum_to_ten([1, 3, 5, 0])\n   False\n   >>> triples_sum_to_ten([1, 3, -2, 1])\n   False\n   >>> triples_sum_to_ten([1, 2, 3, 7])\n   True\n   >>> triples_sum_to_ten([2, 4, -5, 3, 9, 7])\n   False\n   >>> triples_sum_to_ten([1])\n   False\n    \"\"\"\n","raw":"triples_sum_to_ten takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to ten, and False otherwise.\n\n    >>> triples_sum_to_ten([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_ten([1, 3, -2, 1])\n    False\n    >>> triples_sum_to_ten([1, 2, 3, 7])\n    True\n    >>> triples_sum_to_ten([2, 4, -5, 3, 9, 7])\n    False\n    >>> triples_sum_to_ten([1])\n    False","reduced":"triples_sum_to_ten takes list of integers as input.\n   it returns True if three distinct elements in the list\n   sum to ten, False otherwise.\n   >>> triples_sum_to_ten([1, 3, 5, 0])\n   False\n   >>> triples_sum_to_ten([1, 3, -2, 1])\n   False\n   >>> triples_sum_to_ten([1, 2, 3, 7])\n   True\n   >>> triples_sum_to_ten([2, 4, -5, 3, 9, 7])\n   False\n   >>> triples_sum_to_ten([1])\n   False"}
{"task_id":"EvoEval\/41","prompt":"def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road's a perfectly straight infinitely long line.\n   n cars driving left to right;   simultaneously, a different set of 2*n cars\n   driving right to left.   two sets of cars start out far from\n   each other.   All cars move in the same speed.   Two cars said to collide\n   when a car moving left to right hits a car moving right to left.\n   However, cars are infinitely sturdy and strong; a result, they continue moving\n   in their trajectory as if they did not collide.\n   This function outputs the number of such collisions.\n    \"\"\"\n","raw":"Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of 2*n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.","reduced":"Imagine a road's a perfectly straight infinitely long line.\n   n cars driving left to right;   simultaneously, a different set of 2*n cars\n   driving right to left.   two sets of cars start out far from\n   each other.   All cars move in the same speed.   Two cars said to collide\n   when a car moving left to right hits a car moving right to left.\n   However, cars are infinitely sturdy and strong; a result, they continue moving\n   in their trajectory as if they did not collide.\n   This function outputs the number of such collisions."}
{"task_id":"EvoEval\/42","prompt":"def incr_list(l: list):\n    \"\"\"\n    Return list elements 2.\n   >>> incr_list([1, 2, 3])\n   [3, 4, 5]\n   incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n   [7, 5, 7, 4, 5, 5, 11, 2, 125]\n    \"\"\"\n","raw":"Return list with elements incremented by 2.\n    >>> incr_list([1, 2, 3])\n    [3, 4, 5]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [7, 5, 7, 4, 5, 5, 11, 2, 125]","reduced":"Return list elements 2.\n   >>> incr_list([1, 2, 3])\n   [3, 4, 5]\n   incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n   [7, 5, 7, 4, 5, 5, 11, 2, 125]"}
{"task_id":"EvoEval\/43","prompt":"def pairs_sum_to_one(l):\n    \"\"\"\n    pairs_sum_to_one takes list of integers as input.\n   returns True if two distinct elements in the list that\n   sum to one, False otherwise.\n   >>> pairs_sum_to_one([1, 3, 5, 0])\n   True\n   >>> pairs_sum_to_one([1, 3, -2, 1])\n   True\n   >>> pairs_sum_to_one([1, 2, 3, 7])\n   False\n   >>> pairs_sum_to_one([2, 4, -5, 3, 5, 7])\n   False\n   >>> pairs_sum_to_one([1])\n   False\n    \"\"\"\n","raw":"pairs_sum_to_one takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to one, and False otherwise.\n    >>> pairs_sum_to_one([1, 3, 5, 0])\n    True\n    >>> pairs_sum_to_one([1, 3, -2, 1])\n    True\n    >>> pairs_sum_to_one([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_one([2, 4, -5, 3, 5, 7])\n    False\n    >>> pairs_sum_to_one([1])\n    False","reduced":"pairs_sum_to_one takes list of integers as input.\n   returns True if two distinct elements in the list that\n   sum to one, False otherwise.\n   >>> pairs_sum_to_one([1, 3, 5, 0])\n   True\n   >>> pairs_sum_to_one([1, 3, -2, 1])\n   True\n   >>> pairs_sum_to_one([1, 2, 3, 7])\n   False\n   >>> pairs_sum_to_one([2, 4, -5, 3, 5, 7])\n   False\n   >>> pairs_sum_to_one([1])\n   False"}
{"task_id":"EvoEval\/44","prompt":"def change_base(x: int, base: int):\n    \"\"\"\n    Change numerical base of input number x to base.\n   return integer representation after conversion.\n   base numbers less than 10.\n   >>> change_base(8, 3)\n   22\n   >>> change_base(8, 2)\n   1000\n   >>> change_base(7, 2)\n   111\n    \"\"\"\n","raw":"Change numerical base of input number x to base.\n    return integer representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    22\n    >>> change_base(8, 2)\n    1000\n    >>> change_base(7, 2)\n    111","reduced":"Change numerical base of input number x to base.\n   return integer representation after conversion.\n   base numbers less than 10.\n   >>> change_base(8, 3)\n   22\n   >>> change_base(8, 2)\n   1000\n   >>> change_base(7, 2)\n   111"}
{"task_id":"EvoEval\/45","prompt":"def triangle_perimeter(a, b, c):\n    \"\"\"\n    Given length three sides return perimeter for triangle.\n   >>> triangle_perimeter(5, 3, 3)\n   11\n    \"\"\"\n","raw":"Given length of three sides return perimeter for a triangle.\n    >>> triangle_perimeter(5, 3, 3)\n    11","reduced":"Given length three sides return perimeter for triangle.\n   >>> triangle_perimeter(5, 3, 3)\n   11"}
{"task_id":"EvoEval\/46","prompt":"def fib4(n: int):\n    \"\"\"\n    Fib4 number sequence is similar to Fibbonacci sequnece defined as follows:\n   fib4(0) -> 0\n   fib4(1) -> 0\n   fib4(2) -> 2\n   fib4(3) -> 0\n   fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write function to efficiently compute n-th element of fib4 number sequence. Do not use recursion. Return string representation.\n   >>> fib4(5)\n   '4'\n   >>> fib4(6)\n   '8'\n   >>> fib4(7)\n   '14'\n    \"\"\"\n","raw":"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence. Do not use recursion. Return string representation.\n    >>> fib4(5)\n    '4'\n    >>> fib4(6)\n    '8'\n    >>> fib4(7)\n    '14'","reduced":"Fib4 number sequence is similar to Fibbonacci sequnece defined as follows:\n   fib4(0) -> 0\n   fib4(1) -> 0\n   fib4(2) -> 2\n   fib4(3) -> 0\n   fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write function to efficiently compute n-th element of fib4 number sequence. Do not use recursion. Return string representation.\n   >>> fib4(5)\n   '4'\n   >>> fib4(6)\n   '8'\n   >>> fib4(7)\n   '14'"}
{"task_id":"EvoEval\/47","prompt":"def median(l: list):\n    \"\"\"\n    Return median of elements in list l, if list empty, return 0 instead.\n   >>> median([3, 1, 2, 4, 5])\n   3\n   >>> median([-10, 4, 6, 1000, 10, 20])\n   15.0\n   >>> median([])\n   0\n    \"\"\"\n","raw":"Return median of elements in the list l, but if the list is empty, return 0 instead.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    >>> median([])\n    0","reduced":"Return median of elements in list l, if list empty, return 0 instead.\n   >>> median([3, 1, 2, 4, 5])\n   3\n   >>> median([-10, 4, 6, 1000, 10, 20])\n   15.0\n   >>> median([])\n   0"}
{"task_id":"EvoEval\/48","prompt":"def is_palindrome(text: str, case_sensitive: bool = True):\n    \"\"\"\n    Checks if given string is palindrome considering case sensitivity according to provided parameter\n   >>> is_palindrome('', True)\n   True\n   >>> is_palindrome('aba', True)\n   True\n   >>> is_palindrome('Aba', False)\n   True\n   >>> is_palindrome('aaaaa', True)\n   True\n   >>>_palindrome('zbcd', True)\n   False\n    \"\"\"\n","raw":"Checks if given string is a palindrome considering case sensitivity according to the provided parameter\n    >>> is_palindrome('', True)\n    True\n    >>> is_palindrome('aba', True)\n    True\n    >>> is_palindrome('Aba', False)\n    True\n    >>> is_palindrome('aaaaa', True)\n    True\n    >>> is_palindrome('zbcd', True)\n    False","reduced":"Checks if given string is palindrome considering case sensitivity according to provided parameter\n   >>> is_palindrome('', True)\n   True\n   >>> is_palindrome('aba', True)\n   True\n   >>> is_palindrome('Aba', False)\n   True\n   >>> is_palindrome('aaaaa', True)\n   True\n   >>>_palindrome('zbcd', True)\n   False"}
{"task_id":"EvoEval\/49","prompt":"def modp(n: int, p: int, q: int):\n    \"\"\"\n    Return 2^(n+q) modulo p aware numerics).\n   >>> modp(3, 5, 1)\n   1\n   >>> modp(1101, 101, 2)\n   8\n   >>> modp(0, 101, 1)\n   2\n   >>> modp(3, 11, 2)\n   10\n   >>> modp(100, 101, 1)\n   2\n    \"\"\"\n","raw":"Return 2^(n+q) modulo p (be aware of numerics).\n    >>> modp(3, 5, 1)\n    1\n    >>> modp(1101, 101, 2)\n    8\n    >>> modp(0, 101, 1)\n    2\n    >>> modp(3, 11, 2)\n    10\n    >>> modp(100, 101, 1)\n    2","reduced":"Return 2^(n+q) modulo p aware numerics).\n   >>> modp(3, 5, 1)\n   1\n   >>> modp(1101, 101, 2)\n   8\n   >>> modp(0, 101, 1)\n   2\n   >>> modp(3, 11, 2)\n   10\n   >>> modp(100, 101, 1)\n   2"}
{"task_id":"EvoEval\/50","prompt":"def encode_shift(s: str, shift: int = 5):\n    \"\"\"\n    returns encoded string by shifting every character by 'shift' in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str, shift: int = 5):\n    \"\"\"\n    takes input string encoded with encode_shift function. Returns decoded string reversing shift.\n    \"\"\"\n","raw":"takes as input string encoded with encode_shift function. Returns decoded string by reversing the shift.","reduced":"takes input string encoded with encode_shift function. Returns decoded string reversing shift."}
{"task_id":"EvoEval\/51","prompt":"def remove_consonants(text):\n    \"\"\"\n    remove_consonants is function takes string returns string without consonants.\n   >>> remove_consonants('')\n   ''\n   >>> remove_consonants(\"abcdef\\nghijklm\")\n   'ae\\ni'\n   >>> remove_consonants('abcdef')\n   'ae'\n   >>> remove_consonants('aaaaa')\n   'aaaaa'\n   >>> remove_consonants('aaBAA')\n   'aaAA'\n   >>> remove_consonants('zbcd')\n   ''\n    \"\"\"\n","raw":"remove_consonants is a function that takes string and returns string without consonants.\n    >>> remove_consonants('')\n    ''\n    >>> remove_consonants(\"abcdef\\nghijklm\")\n    'ae\\ni'\n    >>> remove_consonants('abcdef')\n    'ae'\n    >>> remove_consonants('aaaaa')\n    'aaaaa'\n    >>> remove_consonants('aaBAA')\n    'aaAA'\n    >>> remove_consonants('zbcd')\n    ''","reduced":"remove_consonants is function takes string returns string without consonants.\n   >>> remove_consonants('')\n   ''\n   >>> remove_consonants(\"abcdef\\nghijklm\")\n   'ae\\ni'\n   >>> remove_consonants('abcdef')\n   'ae'\n   >>> remove_consonants('aaaaa')\n   'aaaaa'\n   >>> remove_consonants('aaBAA')\n   'aaAA'\n   >>> remove_consonants('zbcd')\n   ''"}
{"task_id":"EvoEval\/52","prompt":"def below_threshold(l: list, t: int):\n    \"\"\"\n    Return True if numbers in list l below or equal to threshold t\n   >>> below_threshold([1, 2, 4, 10], 100)\n   True\n   >>> below_threshold([1, 20, 4, 10], 20)\n   True\n    \"\"\"\n","raw":"Return True if all numbers in the list l are below or equal to threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 20)\n    True","reduced":"Return True if numbers in list l below or equal to threshold t\n   >>> below_threshold([1, 2, 4, 10], 100)\n   True\n   >>> below_threshold([1, 20, 4, 10], 20)\n   True"}
{"task_id":"EvoEval\/53","prompt":"def add(x: int, y: int) -> int:\n    \"\"\"\n    Add two numbers x and y return result increased by 1\n   >>> add(2, 3)\n   6\n   >>> add(5, 7)\n   13\n    \"\"\"\n","raw":"Add two numbers x and y and return the result increased by 1\n    >>> add(2, 3)\n    6\n    >>> add(5, 7)\n    13","reduced":"Add two numbers x and y return result increased by 1\n   >>> add(2, 3)\n   6\n   >>> add(5, 7)\n   13"}
{"task_id":"EvoEval\/54","prompt":"def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have same characters same length\n   >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n   False\n   >>> same_chars('aaaaaaabcd', 'dddddddabc')\n   True\n   >>> same_chars('dddddddabc', 'abcd')\n   False\n   >>> same_chars('eabcd', 'ddabc')\n   False\n    \"\"\"\n","raw":"Check if two words have the same characters and the same length.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    False\n    >>> same_chars('aaaaaaabcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    False\n    >>> same_chars('eabcd', 'ddabc')\n    False","reduced":"Check if two words have same characters same length\n   >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n   False\n   >>> same_chars('aaaaaaabcd', 'dddddddabc')\n   True\n   >>> same_chars('dddddddabc', 'abcd')\n   False\n   >>> same_chars('eabcd', 'ddabc')\n   False"}
{"task_id":"EvoEval\/55","prompt":"def fib(n: int):\n    \"\"\"\n    Return (n+1)-th Fibonacci number.\n   >>> fib(10)\n   89\n   >>> fib(1)\n   1\n   >>> fib(8)\n   34\n    \"\"\"\n","raw":"Return (n+1)-th Fibonacci number.\n    >>> fib(10)\n    89\n    >>> fib(1)\n    1\n    >>> fib(8)\n    34","reduced":"Return (n+1)-th Fibonacci number.\n   >>> fib(10)\n   89\n   >>> fib(1)\n   1\n   >>> fib(8)\n   34"}
{"task_id":"EvoEval\/56","prompt":"def correct_bracketing(brackets: str):\n    \"\"\"\n    brackets is string of \"(\" and \")\".\n   return True if every opening bracket has corresponding closing bracket.\n   >>> correct_bracketing(\"(\")\n   False\n   >>> correct_bracketing(\"()\")\n   True\n   >>> correct_bracketing(\"(()())\")\n   True\n   >>> correct_bracketing(\")(()\")\n   False\n    \"\"\"\n","raw":"brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False","reduced":"brackets is string of \"(\" and \")\".\n   return True if every opening bracket has corresponding closing bracket.\n   >>> correct_bracketing(\"(\")\n   False\n   >>> correct_bracketing(\"()\")\n   True\n   >>> correct_bracketing(\"(()())\")\n   True\n   >>> correct_bracketing(\")(()\")\n   False"}
{"task_id":"EvoEval\/57","prompt":"def monotonic(l: list):\n    \"\"\"\n    Return True if list elements monotonically increasing or decreasing. If list empty return False.\n   >>> monotonic([1, 2, 4, 20])\n   True\n   >>> monotonic([1, 20, 4, 10])\n   False\n   >>> monotonic([4, 1, 0, -10])\n   True\n   >>> monotonic([])\n   False\n    \"\"\"\n","raw":"Return True if list elements are monotonically increasing or decreasing. If the list is empty, return False.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([])\n    False","reduced":"Return True if list elements monotonically increasing or decreasing. If list empty return False.\n   >>> monotonic([1, 2, 4, 20])\n   True\n   >>> monotonic([1, 20, 4, 10])\n   False\n   >>> monotonic([4, 1, 0, -10])\n   True\n   >>> monotonic([])\n   False"}
{"task_id":"EvoEval\/58","prompt":"def common(l1: list, l2: list):\n    \"\"\"\n    Return common elements two lists descending order.\n   >>> common([1, 4, 3, 34,, 2, 5] [5, 7, 1, 5, 9, 653, 121])\n   [653, 5, 1]\n   >>> common([5, 3, 2, 8], [3, 2])\n   [3, 2]\n    \"\"\"\n","raw":"Return sorted unique common elements for two lists in descending order.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [653, 5, 1]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [3, 2]","reduced":"Return common elements two lists descending order.\n   >>> common([1, 4, 3, 34,, 2, 5] [5, 7, 1, 5, 9, 653, 121])\n   [653, 5, 1]\n   >>> common([5, 3, 2, 8], [3, 2])\n   [3, 2]"}
{"task_id":"EvoEval\/59","prompt":"def smallest_prime_factor(n: int):\n    \"\"\"\n    Return smallest prime factor of n. Assume n > 1 is not a prime.\n   >>> smallest_prime_factor(13195)\n   5\n   >>> smallest_prime_factor(2048)\n   2\n    \"\"\"\n","raw":"Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    5\n    >>> smallest_prime_factor(2048)\n    2","reduced":"Return smallest prime factor of n. Assume n > 1 is not a prime.\n   >>> smallest_prime_factor(13195)\n   5\n   >>> smallest_prime_factor(2048)\n   2"}
{"task_id":"EvoEval\/60","prompt":"def sum_to_n(n: int, m: int = 1):\n    \"\"\"\n    sum_to_n is function sums numbers from m to n.\n   >>> sum_to_n(30, 10)\n   420\n   >>> sum_to_n(100, 50)\n   3825\n   >>> sum_to_n(5, 2)\n   14\n   >>> sum_to_n(10, 5)\n   45\n   >>> sum_to_n(1, 1)\n   1\n    \"\"\"\n","raw":"sum_to_n is a function that sums numbers from m to n.\n    >>> sum_to_n(30, 10)\n    420\n    >>> sum_to_n(100, 50)\n    3825\n    >>> sum_to_n(5, 2)\n    14\n    >>> sum_to_n(10, 5)\n    45\n    >>> sum_to_n(1, 1)\n    1","reduced":"sum_to_n is function sums numbers from m to n.\n   >>> sum_to_n(30, 10)\n   420\n   >>> sum_to_n(100, 50)\n   3825\n   >>> sum_to_n(5, 2)\n   14\n   >>> sum_to_n(10, 5)\n   45\n   >>> sum_to_n(1, 1)\n   1"}
{"task_id":"EvoEval\/61","prompt":"def correct_bracketing(brackets: str):\n    \"\"\"\n    brackets is string of \"[\" and \"]\".\n   return True if every opening bracket has corresponding closing bracket.\n   >>> correct_bracketing(\"[\")\n   False\n   >>> correct_bracketing(\"[]\")\n   True\n   >>> correct_bracketing(\"[[][]]\")\n   True\n   >>> correct_bracketing(\"][][\")\n   False\n    \"\"\"\n","raw":"brackets is a string of \"[\" and \"]\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"[\")\n    False\n    >>> correct_bracketing(\"[]\")\n    True\n    >>> correct_bracketing(\"[[][]]\")\n    True\n    >>> correct_bracketing(\"][][\")\n    False","reduced":"brackets is string of \"[\" and \"]\".\n   return True if every opening bracket has corresponding closing bracket.\n   >>> correct_bracketing(\"[\")\n   False\n   >>> correct_bracketing(\"[]\")\n   True\n   >>> correct_bracketing(\"[[][]]\")\n   True\n   >>> correct_bracketing(\"][][\")\n   False"}
{"task_id":"EvoEval\/62","prompt":"def derivative(xs: list):\n    \"\"\"\n    xs represent coefficients of polynomial.\n   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of polynomial same form, descending order of power of x.\n   >>> derivative([3, 1, 2, 4, 5])\n   [20, 12, 4, 1]\n   >>> derivative([1, 2, 3])\n   [6, 2]\n    \"\"\"\n","raw":"xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form, but in descending order of the power of x.\n    >>> derivative([3, 1, 2, 4, 5])\n    [20, 12, 4, 1]\n    >>> derivative([1, 2, 3])\n    [6, 2]","reduced":"xs represent coefficients of polynomial.\n   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of polynomial same form, descending order of power of x.\n   >>> derivative([3, 1, 2, 4, 5])\n   [20, 12, 4, 1]\n   >>> derivative([1, 2, 3])\n   [6, 2]"}
{"task_id":"EvoEval\/63","prompt":"def fibfib(n: int):\n    \"\"\"\n    FibFib number sequence is similar to Fibbonacci sequnece defined as follows:\n   fibfib(0) == 0\n   fibfib(1) == 0\n   fibfib(2) == 1\n   fibfib(n) == fibfib(n-3) + fibfib(n-2) - fibfib(n-1).\n   Please write a function to efficiently compute n-th element of the fibfib number sequence.\n   >>> fibfib(1)\n   0\n   >>> fibfib(5)\n   -2\n   >>> fibfib(8)\n   4\n    \"\"\"\n","raw":"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-3) + fibfib(n-2) - fibfib(n-1).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    -2\n    >>> fibfib(8)\n    4","reduced":"FibFib number sequence is similar to Fibbonacci sequnece defined as follows:\n   fibfib(0) == 0\n   fibfib(1) == 0\n   fibfib(2) == 1\n   fibfib(n) == fibfib(n-3) + fibfib(n-2) - fibfib(n-1).\n   Please write a function to efficiently compute n-th element of the fibfib number sequence.\n   >>> fibfib(1)\n   0\n   >>> fibfib(5)\n   -2\n   >>> fibfib(8)\n   4"}
{"task_id":"EvoEval\/64","prompt":"FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"\n    Write a function vowels_count takes a string representing\n   a word as input returns number of vowels in string.\n   Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n   vowel, but only when it at the end of given word.\n   Only count lowercase vowels.\n   Example:\n   >>> vowels_count(\"abcde\")\n   2\n   >>> vowels_count(\"YACED\")\n   0\n    \"\"\"\n","raw":"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n    Only count the lowercase vowels.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"YACED\")\n    0","reduced":"Write a function vowels_count takes a string representing\n   a word as input returns number of vowels in string.\n   Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n   vowel, but only when it at the end of given word.\n   Only count lowercase vowels.\n   Example:\n   >>> vowels_count(\"abcde\")\n   2\n   >>> vowels_count(\"YACED\")\n   0"}
{"task_id":"EvoEval\/65","prompt":"def circular_shift(x, shift):\n    \"\"\"\n    Circular shift digits of the integer x, shift digits left by shift\n   return result as a string.\n   If shift > number of digits, return digits reversed.\n   >>> circular_shift(21, 1)\n   \"12\"\n   >>> circular_shift(21, 2)\n   \"21\"\n    \"\"\"\n","raw":"Circular shift the digits of the integer x, shift the digits left by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(21, 1)\n    \"12\"\n    >>> circular_shift(21, 2)\n    \"21\"","reduced":"Circular shift digits of the integer x, shift digits left by shift\n   return result as a string.\n   If shift > number of digits, return digits reversed.\n   >>> circular_shift(21, 1)\n   \"12\"\n   >>> circular_shift(21, 2)\n   \"21\""}
{"task_id":"EvoEval\/66","prompt":"def digitSum(s):\n    \"\"\"\n    Task\n   Write a function that takes a string as input and returns the sum of the lower characters only'\n   ASCII codes.\n   Examples:\n   digitSum(\"\") => 0\n   digitSum(\"abAB\") => 195\n   digitSum(\"abcCd\") => 394\n   digitSum(\"helloE\") => 532\n   digitSum(\"woArBld\") => 652\n   digitSum(\"aAaaaXa\") => 485\n    \"\"\"\n","raw":"Task\n    Write a function that takes a string as input and returns the sum of the lower characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 195\n        digitSum(\"abcCd\") => 394\n        digitSum(\"helloE\") => 532\n        digitSum(\"woArBld\") => 652\n        digitSum(\"aAaaaXa\") => 485","reduced":"Task\n   Write a function that takes a string as input and returns the sum of the lower characters only'\n   ASCII codes.\n   Examples:\n   digitSum(\"\") => 0\n   digitSum(\"abAB\") => 195\n   digitSum(\"abcCd\") => 394\n   digitSum(\"helloE\") => 532\n   digitSum(\"woArBld\") => 652\n   digitSum(\"aAaaaXa\") => 485"}
{"task_id":"EvoEval\/67","prompt":"def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string represents number of apples and oranges\n   distributed in a basket of fruit this basket contains\n   apples, oranges, and mango fruits. Given string represents total number of\n   oranges and apples and integer represent total number of fruits\n   in basket minus one return number of mango fruits in basket.\n   for examble:\n   fruit_distribution(\"5 apples, 6 oranges\", 19) ->19 +1   - 5 - 6 = 9\n   fruit_distribution(\"0 apples, 1 oranges\",3) -> 3 + 1 - 0 - 1 = 3\n   fruit_distribution(\"2 apples, 3 oranges\", 100) -> 100 + 1- 2 - 3 = 96\n   fruit_distribution(\"100 apples, 1 oranges\",120) -> 120 + 1- 100 - 1 = 20\n    \"\"\"\n","raw":"In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket minus one return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples, 6 oranges\", 19) ->19 +1  - 5 - 6 = 9\n    fruit_distribution(\"0 apples, 1 oranges\",3) -> 3 + 1 - 0 - 1 = 3\n    fruit_distribution(\"2 apples, 3 oranges\", 100) -> 100 + 1- 2 - 3 = 96\n    fruit_distribution(\"100 apples, 1 oranges\",120) -> 120 + 1- 100 - 1 = 20","reduced":"In this task, you will be given a string represents number of apples and oranges\n   distributed in a basket of fruit this basket contains\n   apples, oranges, and mango fruits. Given string represents total number of\n   oranges and apples and integer represent total number of fruits\n   in basket minus one return number of mango fruits in basket.\n   for examble:\n   fruit_distribution(\"5 apples, 6 oranges\", 19) ->19 +1   - 5 - 6 = 9\n   fruit_distribution(\"0 apples, 1 oranges\",3) -> 3 + 1 - 0 - 1 = 3\n   fruit_distribution(\"2 apples, 3 oranges\", 100) -> 100 + 1- 2 - 3 = 96\n   fruit_distribution(\"100 apples, 1 oranges\",120) -> 120 + 1- 100 - 1 = 20"}
{"task_id":"EvoEval\/68","prompt":"def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n   your task is to pluck one of the nodes and return it.\n   The plucked node should be the node with the smallest odd value.\n   If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n   The plucked node should be returned in a list, [ its index, smalest_value ],\n   If there are no odd values or the given array is empty, return [].\n   Example 1:\n   Input: [4,3,5]\n   Output: [1, 3]\n   Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n   Example 2:\n   Input: [1,2,3]\n   Output: [0, 1]\n   Explanation: 1 has the smallest odd value, and 1 has the smallest index.\n   Example 3:\n   Input: []\n   Output: []\n  \n   Example 4:\n   Input: [5, 1, 3, 0, 4, 2]\n   Output: [1, 1]\n   Explanation: 1 is the smallest value, but   there are two ones,\n   so we will choose the first one, which has the smallest index.\n   Constraints:\n   * 1 <= nodes.length <= 10000\n   * 0 <= node.value\n    \"\"\"\n","raw":"\"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest odd value.\n    If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ its index, smalest_value ],\n    If there are no odd values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,3,5]\n        Output: [1, 3]\n        Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [0, 1]\n        Explanation: 1 has the smallest odd value, and 1 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 1, 3, 0, 4, 2]\n        Output: [1, 1]\n        Explanation: 1 is the smallest value, but  there are two ones,\n                     so we will choose the first one, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value","reduced":"\"Given an array representing a branch of a tree that has non-negative integer nodes\n   your task is to pluck one of the nodes and return it.\n   The plucked node should be the node with the smallest odd value.\n   If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n   The plucked node should be returned in a list, [ its index, smalest_value ],\n   If there are no odd values or the given array is empty, return [].\n   Example 1:\n   Input: [4,3,5]\n   Output: [1, 3]\n   Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n   Example 2:\n   Input: [1,2,3]\n   Output: [0, 1]\n   Explanation: 1 has the smallest odd value, and 1 has the smallest index.\n   Example 3:\n   Input: []\n   Output: []\n  \n   Example 4:\n   Input: [5, 1, 3, 0, 4, 2]\n   Output: [1, 1]\n   Explanation: 1 is the smallest value, but   there are two ones,\n   so we will choose the first one, which has the smallest index.\n   Constraints:\n   * 1 <= nodes.length <= 10000\n   * 0 <= node.value"}
{"task_id":"EvoEval\/69","prompt":"def search(lst):\n    \"\"\"\n    You given a non-empty list of positive integers. Return smallest integer greater than\n   zero, and has frequency greater than or equal to the value of integer itself.\n   The frequency of an integer is number of times it appears in the list.\n   If no such a value exist, return -1.\n   Examples:\n   search([4, 1, 2, 2, 3, 1]) == 1\n   search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 1\n   search([5, 5, 4, 4, 4]) == -1\n    \"\"\"\n","raw":"You are given a non-empty list of positive integers. Return the smallest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 1\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 1\n        search([5, 5, 4, 4, 4]) == -1","reduced":"You given a non-empty list of positive integers. Return smallest integer greater than\n   zero, and has frequency greater than or equal to the value of integer itself.\n   The frequency of an integer is number of times it appears in the list.\n   If no such a value exist, return -1.\n   Examples:\n   search([4, 1, 2, 2, 3, 1]) == 1\n   search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 1\n   search([5, 5, 4, 4, 4]) == -1"}
{"task_id":"EvoEval\/70","prompt":"def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers return list in strange order.\n   Strange sorting start with maximum value,\n   then minimum of remaining integers, then maximum so on.\n   Examples:\n   strange_sort_list([1, 2, 3, 4]) == [4, 1, 3, 2]\n   strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n   strange_sort_list([]) == []\n    \"\"\"\n","raw":"Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the maximum value,\n    then minimum of the remaining integers, then maximum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [4, 1, 3, 2]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []","reduced":"Given list of integers return list in strange order.\n   Strange sorting start with maximum value,\n   then minimum of remaining integers, then maximum so on.\n   Examples:\n   strange_sort_list([1, 2, 3, 4]) == [4, 1, 3, 2]\n   strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n   strange_sort_list([]) == []"}
{"task_id":"EvoEval\/71","prompt":"def triangle_area(a, b, c):\n    \"\"\"\n    Given the lengths of three sides of a triangle. Return area of\n   triangle rounded to 3 decimal points if three sides form a valid triangle.\n   Otherwise return -1\n   Three sides make valid triangle when sum of any two sides is greater\n   than third side.\n   Example:\n   triangle_area(3, 4, 5) == 6.000\n   triangle_area(1, 2, 10) == -1\n    \"\"\"\n","raw":"Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 3 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.000\n    triangle_area(1, 2, 10) == -1","reduced":"Given the lengths of three sides of a triangle. Return area of\n   triangle rounded to 3 decimal points if three sides form a valid triangle.\n   Otherwise return -1\n   Three sides make valid triangle when sum of any two sides is greater\n   than third side.\n   Example:\n   triangle_area(3, 4, 5) == 6.000\n   triangle_area(1, 2, 10) == -1"}
{"task_id":"EvoEval\/72","prompt":"def will_it_fly(q,w):\n    \"\"\"\n    Write function returns True if object q will fly, False otherwise.\n   object q will fly if it's balanced (it is a palindromic list), sum of its elements is even number and less than or equal maximum possible weight w.\n   Example:\n   will_it_fly([1, 2], 5) \u279e False\n   # 1+2 is less than the maximum possible weight, but it's unbalanced.\n   will_it_fly([3, 2, 3], 1) \u279e False\n   # it's balanced, but 3+2+3 is more than maximum possible weight.\n   will_it_fly([3, 2, 3], 9) \u279e True\n   # 3+2+3 is less than maximum possible weight, it's balanced.\n   will_it_fly([3], 5) \u279e False\n   # 3 is less than maximum possible weight, it's balanced, but sum 3 is odd.\n    \"\"\"\n","raw":"Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list), the sum of its elements is an even number and is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e False\n    # 3 is less than the maximum possible weight, and it's balanced, but the sum 3 is odd.","reduced":"Write function returns True if object q will fly, False otherwise.\n   object q will fly if it's balanced (it is a palindromic list), sum of its elements is even number and less than or equal maximum possible weight w.\n   Example:\n   will_it_fly([1, 2], 5) \u279e False\n   # 1+2 is less than the maximum possible weight, but it's unbalanced.\n   will_it_fly([3, 2, 3], 1) \u279e False\n   # it's balanced, but 3+2+3 is more than maximum possible weight.\n   will_it_fly([3, 2, 3], 9) \u279e True\n   # 3+2+3 is less than maximum possible weight, it's balanced.\n   will_it_fly([3], 5) \u279e False\n   # 3 is less than maximum possible weight, it's balanced, but sum 3 is odd."}
{"task_id":"EvoEval\/73","prompt":"def smallest_change(arr):\n    \"\"\"\n    Given array arr of integers, find minimum number of elements\n   need to be changed to make array palindromic. A palindromic array is array\n   read same backwards and forwards. In one change, can change one element to any other element.\n   For example:\n   smallest_change([1,2,3,5,4,7,9,6]) == 4\n   smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n   smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n","raw":"Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0","reduced":"Given array arr of integers, find minimum number of elements\n   need to be changed to make array palindromic. A palindromic array is array\n   read same backwards and forwards. In one change, can change one element to any other element.\n   For example:\n   smallest_change([1,2,3,5,4,7,9,6]) == 4\n   smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n   smallest_change([1, 2, 3, 2, 1]) == 0"}
{"task_id":"EvoEval\/74","prompt":"def total_match(lst1, lst2):\n    \"\"\"\n    Write function accepts two lists of strings returns list has\n   total number of chars in all strings list greater than other list.\n   if two lists same number of chars return second list.\n   Examples\n   total_match([], []) \u279e []\n   total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hi', 'admin']\n   total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ['hi', 'hi', 'admin', 'project']\n   total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hi', 'admin']\n   total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['1', '2', '3', '4', '5']\n    \"\"\"\n","raw":"Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list greater than the other list.\n\n    if the two lists have the same number of chars, return the second list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'hi', 'admin', 'project']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hi', 'admin']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['1', '2', '3', '4', '5']","reduced":"Write function accepts two lists of strings returns list has\n   total number of chars in all strings list greater than other list.\n   if two lists same number of chars return second list.\n   Examples\n   total_match([], []) \u279e []\n   total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hi', 'admin']\n   total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ['hi', 'hi', 'admin', 'project']\n   total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hi', 'admin']\n   total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['1', '2', '3', '4', '5']"}
{"task_id":"EvoEval\/75","prompt":"def is_multiply_prime(a):\n    \"\"\"\n    Write a function returns true if given number is multiplication of 4 prime numbers\n   and false otherwise.\n   Knowing (a) is less then 100.\n   Example:\n   is_multiply_prime(90) == True\n   90 = 2 * 3 * 3 * 5\n    \"\"\"\n","raw":"Write a function that returns true if the given number is the multiplication of 4 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(90) == True\n    90 = 2 * 3 * 3 * 5","reduced":"Write a function returns true if given number is multiplication of 4 prime numbers\n   and false otherwise.\n   Knowing (a) is less then 100.\n   Example:\n   is_multiply_prime(90) == True\n   90 = 2 * 3 * 3 * 5"}
{"task_id":"EvoEval\/76","prompt":"def is_simple_power(x, n):\n    \"\"\"\n    task is to write function returns true if number x is simple\n   power of n and false in other cases Additionally return smallest power makes x simple power of n.\n   x is simple power of n if n**int=x\n   For example:\n   is_simple_power(1, 4) => (true, 0)\n   is_simple_power(2, 2) => (true, 1)\n   is_simple_power(8, 2) => (true, 3)\n   is_simple_power(3, 2) => (false, None)\n   is_simple_power(3, 1) => (false, None)\n   is_simple_power(5, 3) => (false, None)\n    \"\"\"\n","raw":"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases. Additionally, return the smallest power that makes x a simple power of n.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => (true, 0)\n    is_simple_power(2, 2) => (true, 1)\n    is_simple_power(8, 2) => (true, 3)\n    is_simple_power(3, 2) => (false, None)\n    is_simple_power(3, 1) => (false, None)\n    is_simple_power(5, 3) => (false, None)","reduced":"task is to write function returns true if number x is simple\n   power of n and false in other cases Additionally return smallest power makes x simple power of n.\n   x is simple power of n if n**int=x\n   For example:\n   is_simple_power(1, 4) => (true, 0)\n   is_simple_power(2, 2) => (true, 1)\n   is_simple_power(8, 2) => (true, 3)\n   is_simple_power(3, 2) => (false, None)\n   is_simple_power(3, 1) => (false, None)\n   is_simple_power(5, 3) => (false, None)"}
{"task_id":"EvoEval\/77","prompt":"def iscube(a):\n    \"\"\"\n    Write a function takes integer a returns True\n   if this integer is a cube of some positive integer number.\n   Note: may assume input is always valid.\n   Examples:\n   iscube(1) ==> True\n   iscube(2) ==> False\n   iscube(-1) ==> False\n   iscube(64) ==> True\n   iscube(0) ==> True\n   iscube(180) ==> False\n    \"\"\"\n","raw":"Write a function that takes an integer a and returns True \n    if this integer is a cube of some positive integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> False\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False","reduced":"Write a function takes integer a returns True\n   if this integer is a cube of some positive integer number.\n   Note: may assume input is always valid.\n   Examples:\n   iscube(1) ==> True\n   iscube(2) ==> False\n   iscube(-1) ==> False\n   iscube(64) ==> True\n   iscube(0) ==> True\n   iscube(180) ==> False"}
{"task_id":"EvoEval\/78","prompt":"def hex_key(num):\n    \"\"\"\n    You tasked to write function that receives\n   hexadecimal number as string and counts number of hexadecimal\n   digits not primes (prime number, or a prime, is a natural number\n   greater than 1 not a product of two smaller natural numbers).\n   Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n   Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n   to determine a number of following digits: 0, 1, 4, 6, 8, 9,\n   A (=decimal 10), C (=decimal 12), E (=decimal 15).\n   Note: may assume input is always correct or empty string,\n   and symbols A,B,C,D,E,F are always uppercase.\n   Examples:\n   For num = \"AB\" output should be 1.\n   For num = \"1077E\" output should be 3.\n   For num = \"ABED1A33\" output should be 4.\n   For num = \"123456789ABCDEF0\" output should be 9.\n   For num = \"2020\" output should be 2.\n    \"\"\"\n","raw":"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are not primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 0, 1, 4, 6, 8, 9, \n    A (=decimal 10), C (=decimal 12), E (=decimal 15).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 3.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 9.\n    For num = \"2020\" the output should be 2.","reduced":"You tasked to write function that receives\n   hexadecimal number as string and counts number of hexadecimal\n   digits not primes (prime number, or a prime, is a natural number\n   greater than 1 not a product of two smaller natural numbers).\n   Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n   Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n   to determine a number of following digits: 0, 1, 4, 6, 8, 9,\n   A (=decimal 10), C (=decimal 12), E (=decimal 15).\n   Note: may assume input is always correct or empty string,\n   and symbols A,B,C,D,E,F are always uppercase.\n   Examples:\n   For num = \"AB\" output should be 1.\n   For num = \"1077E\" output should be 3.\n   For num = \"ABED1A33\" output should be 4.\n   For num = \"123456789ABCDEF0\" output should be 9.\n   For num = \"2020\" output should be 2."}
{"task_id":"EvoEval\/79","prompt":"def decimal_to_binary(decimal):\n    \"\"\"\n    You will be given a number in decimal form and your task is to convert it to\n   binary format. function should return a string, with each character representing a binary\n   number. Each character in the string will be '0' or '1'.\n   extra couple of characters 'db' at beginning and 'bd' at the end of string.\n   extra characters there to help with format.\n   Examples:\n   decimal_to_binary(15)   # returns \"db1111bd\"\n   decimal_to_binary(32)   # returns \"db100000bd\"\n    \"\"\"\n","raw":"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and 'bd' at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111bd\"\n    decimal_to_binary(32)   # returns \"db100000bd\"","reduced":"You will be given a number in decimal form and your task is to convert it to\n   binary format. function should return a string, with each character representing a binary\n   number. Each character in the string will be '0' or '1'.\n   extra couple of characters 'db' at beginning and 'bd' at the end of string.\n   extra characters there to help with format.\n   Examples:\n   decimal_to_binary(15)   # returns \"db1111bd\"\n   decimal_to_binary(32)   # returns \"db100000bd\""}
{"task_id":"EvoEval\/80","prompt":"def is_happy(s):\n    \"\"\"\n    You given string s.\n   Your task is to check if string is happy or not.\n   string is happy if its length is at least 4 and every 4 consecutive letters distinct\n   For example:\n   is_happy(a) => False\n   is_happy(aa) => False\n   is_happy(abcd) => True\n   is_happy(aabb) => False\n   is_happy(adbc) => True\n   is_happy(xyyx) => False\n    \"\"\"\n","raw":"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 4 and every 4 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adbc) => True\n    is_happy(xyyx) => False","reduced":"You given string s.\n   Your task is to check if string is happy or not.\n   string is happy if its length is at least 4 and every 4 consecutive letters distinct\n   For example:\n   is_happy(a) => False\n   is_happy(aa) => False\n   is_happy(abcd) => True\n   is_happy(aabb) => False\n   is_happy(adbc) => True\n   is_happy(xyyx) => False"}
{"task_id":"EvoEval\/81","prompt":"def numerical_letter_grade(grades):\n    \"\"\"\n    It is the last week of the semester and the teacher has to give the grades\n   to students. The teacher has been making her own algorithm for grading.\n   The only problem is, she has lost the code she used for grading.\n   She has given you a list of GPAs for some students and you have to write\n   a function that can output a list of letter grades in ascending order of GPA using the following table:\n   GPA   |   Letter grade\n   4.0   A+\n   > 3.7   A\n   > 3.3   A-\n   > 3.0   B+\n   > 2.7   B\n   > 2.3   B-\n   > 2.0   C+\n   > 1.7   C\n   > 1.3   C-\n   > 1.0   D+\n   > 0.7   D\n   > 0.0   D-\n   0.0   E\n  \n   Example:\n   grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['C-', 'C', 'B', 'A-', 'A+']\n    \"\"\"\n","raw":"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades in ascending order of GPA using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['C-', 'C', 'B', 'A-', 'A+']","reduced":"It is the last week of the semester and the teacher has to give the grades\n   to students. The teacher has been making her own algorithm for grading.\n   The only problem is, she has lost the code she used for grading.\n   She has given you a list of GPAs for some students and you have to write\n   a function that can output a list of letter grades in ascending order of GPA using the following table:\n   GPA   |   Letter grade\n   4.0   A+\n   > 3.7   A\n   > 3.3   A-\n   > 3.0   B+\n   > 2.7   B\n   > 2.3   B-\n   > 2.0   C+\n   > 1.7   C\n   > 1.3   C-\n   > 1.0   D+\n   > 0.7   D\n   > 0.0   D-\n   0.0   E\n  \n   Example:\n   grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['C-', 'C', 'B', 'A-', 'A+']"}
{"task_id":"EvoEval\/82","prompt":"def prime_length(string):\n    \"\"\"\n    Write function takes string returns True if string\n   length is a prime number or False otherwise. function should ignore white spaces in the string length calculation.\n   Examples\n   prime_length('Hello') == True\n   prime_length(' a b c d c b a ') == True\n   prime_length('kittens') == True\n   prime_length('orange') == False\n    \"\"\"\n","raw":"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise. The function should ignore white spaces in the string length calculation.\n    Examples\n    prime_length('Hello') == True\n    prime_length(' a b c d c b a ') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False","reduced":"Write function takes string returns True if string\n   length is a prime number or False otherwise. function should ignore white spaces in the string length calculation.\n   Examples\n   prime_length('Hello') == True\n   prime_length(' a b c d c b a ') == True\n   prime_length('kittens') == True\n   prime_length('orange') == False"}
{"task_id":"EvoEval\/83","prompt":"def starts_one_ends(n):\n    \"\"\"\n    Given positive integer n, return count of the numbers of n-digit\n   positive integers start with 1 or end with 2.\n    \"\"\"\n","raw":"Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start with 1 or end with 2.","reduced":"Given positive integer n, return count of the numbers of n-digit\n   positive integers start with 1 or end with 2."}
{"task_id":"EvoEval\/84","prompt":"def solve(N):\n    \"\"\"\n    Given a positive integer N, return the total sum of its digits represented as a hexadecimal number.\n  \n   Example\n   For N = 1000, the sum of digits will be 1 the output should be \"1\".\n   For N = 150, the sum of digits will be 6 the output should be \"6\".\n   For N = 147, the sum of digits will be 12 the output should be \"c\".\n  \n   Variables:\n   @N integer\n   Constraints: 0 \u2264 N \u2264 10000.\n   Output:\n   a string of hexadecimal number\n    \"\"\"\n","raw":"Given a positive integer N, return the total sum of its digits represented as a hexadecimal number.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"6\".\n        For N = 147, the sum of digits will be 12 the output should be \"c\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of hexadecimal number","reduced":"Given a positive integer N, return the total sum of its digits represented as a hexadecimal number.\n  \n   Example\n   For N = 1000, the sum of digits will be 1 the output should be \"1\".\n   For N = 150, the sum of digits will be 6 the output should be \"6\".\n   For N = 147, the sum of digits will be 12 the output should be \"c\".\n  \n   Variables:\n   @N integer\n   Constraints: 0 \u2264 N \u2264 10000.\n   Output:\n   a string of hexadecimal number"}
{"task_id":"EvoEval\/85","prompt":"def add(lst):\n    \"\"\"\n    Given a non-empty list of integers lst, add odd elements are at even indices.\n   Examples:\n   add([4, 2, 5, 7]) ==> 5\n    \"\"\"\n","raw":"Given a non-empty list of integers lst, add the odd elements that are at even indices.\n\n\n    Examples:\n        add([4, 2, 5, 7]) ==> 5","reduced":"Given a non-empty list of integers lst, add odd elements are at even indices.\n   Examples:\n   add([4, 2, 5, 7]) ==> 5"}
{"task_id":"EvoEval\/86","prompt":"def anti_shuffle(s):\n    \"\"\"\n    Write a function takes a string returns ordered version of it.\n   Ordered version of string, is string where all words (separated by space)\n   replaced by new word where all characters arranged in\n   descending order based on ascii value.\n   Note: should keep order of words and blank spaces in the sentence.\n   For example:\n   anti_shuffle('Hi') returns 'iH'\n   anti_shuffle('hello') returns 'ollhe'\n   anti_shuffle('Hello World!!!') returns 'olleH roldW!!!'\n    \"\"\"\n","raw":"Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    descending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'iH'\n    anti_shuffle('hello') returns 'ollhe'\n    anti_shuffle('Hello World!!!') returns 'olleH roldW!!!'","reduced":"Write a function takes a string returns ordered version of it.\n   Ordered version of string, is string where all words (separated by space)\n   replaced by new word where all characters arranged in\n   descending order based on ascii value.\n   Note: should keep order of words and blank spaces in the sentence.\n   For example:\n   anti_shuffle('Hi') returns 'iH'\n   anti_shuffle('hello') returns 'ollhe'\n   anti_shuffle('Hello World!!!') returns 'olleH roldW!!!'"}
{"task_id":"EvoEval\/87","prompt":"def get_row(lst, x):\n    \"\"\"\n    You given 2 dimensional data, as nested lists,\n   similar to matrix, unlike matrices,\n   each row may contain different number of columns.\n   Given lst, integer x, find integers x in the list,\n   return list of tuples, [(x1, y1), (x2, y2) ...] such\n   each tuple is a coordinate - (row, columns), starting with 0.\n   Sort coordinates initially by rows in descending order.\n   Also sort coordinates of row by columns in ascending order.\n  \n   Examples:\n   get_row([\n   [1,2,3,4,5,6],\n   [1,2,3,4,1,6],\n   [1,2,3,4,5,1]\n   ], 1) == [(2, 0), (2, 5), (1, 0), (1, 4), (0, 0)]\n   get_row([], 1) == []\n   get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n","raw":"You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in descending order.\n    Also, sort coordinates of the row by columns in ascending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(2, 0), (2, 5), (1, 0), (1, 4), (0, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]","reduced":"You given 2 dimensional data, as nested lists,\n   similar to matrix, unlike matrices,\n   each row may contain different number of columns.\n   Given lst, integer x, find integers x in the list,\n   return list of tuples, [(x1, y1), (x2, y2) ...] such\n   each tuple is a coordinate - (row, columns), starting with 0.\n   Sort coordinates initially by rows in descending order.\n   Also sort coordinates of row by columns in ascending order.\n  \n   Examples:\n   get_row([\n   [1,2,3,4,5,6],\n   [1,2,3,4,1,6],\n   [1,2,3,4,5,1]\n   ], 1) == [(2, 0), (2, 5), (1, 0), (1, 4), (0, 0)]\n   get_row([], 1) == []\n   get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]"}
{"task_id":"EvoEval\/88","prompt":"def sort_array(array):\n    \"\"\"\n    Given array of non-negative integers, return copy of given array after sorting,\n   sort given array in ascending order if sum( first index value, last index value) is odd,\n   or sort it in descending order if sum( first index, last index value) is even.\n  \n   remove duplicate values from array.\n   Note:\n   * don't change given array.\n   Examples:\n   * sort_array([]) => []\n   * sort_array([5]) => [5]\n   * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n   * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n   * sort_array([2, 2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n","raw":"Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n    \n    In addition, remove any duplicate values from the array.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    * sort_array([2, 2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]","reduced":"Given array of non-negative integers, return copy of given array after sorting,\n   sort given array in ascending order if sum( first index value, last index value) is odd,\n   or sort it in descending order if sum( first index, last index value) is even.\n  \n   remove duplicate values from array.\n   Note:\n   * don't change given array.\n   Examples:\n   * sort_array([]) => []\n   * sort_array([5]) => [5]\n   * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n   * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n   * sort_array([2, 2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]"}
{"task_id":"EvoEval\/89","prompt":"def encrypt(s):\n    \"\"\"\n    Create a function encrypt takes a string as an argument\n   returns string encrypted with the alphabet rotated.\n   The alphabet should be rotated in manner such letters\n   shift up by two multiplied to two places.\n   For example:\n   encrypt('lm') returns 'hi'\n   encrypt('ewhjklnop') returns 'asdfghjkl'\n   encrypt('kj') returns 'gf'\n   encrypt('ix') returns 'et'\n    \"\"\"\n","raw":"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    For example:\n    encrypt('lm') returns 'hi'\n    encrypt('ewhjklnop') returns 'asdfghjkl'\n    encrypt('kj') returns 'gf'\n    encrypt('ix') returns 'et'","reduced":"Create a function encrypt takes a string as an argument\n   returns string encrypted with the alphabet rotated.\n   The alphabet should be rotated in manner such letters\n   shift up by two multiplied to two places.\n   For example:\n   encrypt('lm') returns 'hi'\n   encrypt('ewhjklnop') returns 'asdfghjkl'\n   encrypt('kj') returns 'gf'\n   encrypt('ix') returns 'et'"}
{"task_id":"EvoEval\/90","prompt":"def next_largest(lst):\n    \"\"\"\n    You given a list of integers.\n   Write function next_largest() returns 2nd largest element of the list.\n   Return None if no such element.\n  \n   next_largest([1, 2, 3, 4, 5]) == 4\n   next_largest([5, 1, 4, 3, 2]) == 4\n   next_largest([]) == None\n   next_largest([1, 1]) == None\n    \"\"\"\n","raw":"You are given a list of integers.\n    Write a function next_largest() that returns the 2nd largest element of the list.\n    Return None if there is no such element.\n    \n    next_largest([1, 2, 3, 4, 5]) == 4\n    next_largest([5, 1, 4, 3, 2]) == 4\n    next_largest([]) == None\n    next_largest([1, 1]) == None","reduced":"You given a list of integers.\n   Write function next_largest() returns 2nd largest element of the list.\n   Return None if no such element.\n  \n   next_largest([1, 2, 3, 4, 5]) == 4\n   next_largest([5, 1, 4, 3, 2]) == 4\n   next_largest([]) == None\n   next_largest([1, 1]) == None"}
{"task_id":"EvoEval\/91","prompt":"def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, your task is to count number\n   of boredoms A boredom is sentence starts with the word \"I\" and ends with word \"boredom\".\n   Sentences delimited by '.', '?' or '!'.\n  \n   For example:\n   >>> is_bored(\"Hello world\")\n   0\n   >>> is_bored(\"The sky is blue. sun is shining. I am experiencing boredom\")\n   1\n    \"\"\"\n","raw":"You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\" and ends with the word \"boredom\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I am experiencing boredom\")\n    1","reduced":"You'll be given a string of words, your task is to count number\n   of boredoms A boredom is sentence starts with the word \"I\" and ends with word \"boredom\".\n   Sentences delimited by '.', '?' or '!'.\n  \n   For example:\n   >>> is_bored(\"Hello world\")\n   0\n   >>> is_bored(\"The sky is blue. sun is shining. I am experiencing boredom\")\n   1"}
{"task_id":"EvoEval\/92","prompt":"def any_int(x, y, z):\n    \"\"\"\n    Create function takes 3 numbers.\n   Returns true if one of numbers equal to the sum of absolute values of other two, and all numbers are integers.\n   Returns false in any other cases.\n  \n   Examples\n   any_int(5, 2, 7) \u279e True\n  \n   any_int(3, 2, 2) \u279e False\n   any_int(3, -2, 1) \u279e True\n  \n   any_int(3.6, -2.2, 2) \u279e False\n    \"\"\"\n","raw":"Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the absolute values of other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False","reduced":"Create function takes 3 numbers.\n   Returns true if one of numbers equal to the sum of absolute values of other two, and all numbers are integers.\n   Returns false in any other cases.\n  \n   Examples\n   any_int(5, 2, 7) \u279e True\n  \n   any_int(3, 2, 2) \u279e False\n   any_int(3, -2, 1) \u279e True\n  \n   any_int(3.6, -2.2, 2) \u279e False"}
{"task_id":"EvoEval\/93","prompt":"def encode(message):\n    \"\"\"\n    Write a function takes a message, encodes in such a\n   way it swaps case of all letters, replaces all vowels in\n   the message with letter appears 3 places ahead of that\n   vowel in the english alphabet.\n   Assume only letters.\n  \n   Examples:\n   >>> encode('test')\n   'THST'\n   >>> encode('This is a message')\n   'tHLS LS D MHSSDGH'\n    \"\"\"\n","raw":"Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 3 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'THST'\n    >>> encode('This is a message')\n    'tHLS LS D MHSSDGH'","reduced":"Write a function takes a message, encodes in such a\n   way it swaps case of all letters, replaces all vowels in\n   the message with letter appears 3 places ahead of that\n   vowel in the english alphabet.\n   Assume only letters.\n  \n   Examples:\n   >>> encode('test')\n   'THST'\n   >>> encode('This is a message')\n   'tHLS LS D MHSSDGH'"}
{"task_id":"EvoEval\/94","prompt":"def skjkasdkd(lst):\n    \"\"\"\n    given list of integers.\n   need to find smallest prime value return sum of digits.\n   Examples:\n   For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] output should be 2\n   For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] output should be 2\n   For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] output should be 3\n   For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] output should be 5\n   For lst = [0,81,12,3,1,21] output should be 3\n   For lst = [0,8,1,2,1,7] output should be 2\n    \"\"\"\n","raw":"You are given a list of integers.\n    You need to find the smallest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 2\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 2\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 3\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 5\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 2","reduced":"given list of integers.\n   need to find smallest prime value return sum of digits.\n   Examples:\n   For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] output should be 2\n   For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] output should be 2\n   For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] output should be 3\n   For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] output should be 5\n   For lst = [0,81,12,3,1,21] output should be 3\n   For lst = [0,8,1,2,1,7] output should be 2"}
{"task_id":"EvoEval\/95","prompt":"def check_dict_case(dict):\n    \"\"\"\n    Given dictionary return True if all keys strings in lower\n   case or keys strings in upper case else return False.\n   function should return False is given dictionary empty or number of keys less than 3.\n   Examples:\n   check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return False because less than 3 keys.\n   check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) return False.\n   check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n   check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) return False.\n   check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\", \"CITY\": \"New York\" }) should return True\n    \"\"\"\n","raw":"Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty or the number of keys is less than 3.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return False because it has less than 3 keys.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\", \"CITY\": \"New York\" }) should return True.","reduced":"Given dictionary return True if all keys strings in lower\n   case or keys strings in upper case else return False.\n   function should return False is given dictionary empty or number of keys less than 3.\n   Examples:\n   check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return False because less than 3 keys.\n   check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) return False.\n   check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n   check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) return False.\n   check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\", \"CITY\": \"New York\" }) should return True"}
{"task_id":"EvoEval\/96","prompt":"def count_up_to(n):\n    \"\"\"\n    Implement function takes non-negative integer returns array of the first n\n   integers are prime numbers less than or equal to n. Return list in descending order.\n   for example:\n   count_up_to(5) => [5,3,2]\n   count_up_to(11) => [11,7,5,3,2]\n   count_up_to(0) => []\n   count_up_to(20) => [19,17,13,11,7,5,3,2]\n   count_up_to(1) => []\n   count_up_to(18) => [17,13,11,7,5,3,2]\n    \"\"\"\n","raw":"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than or equal to n. Return the list in descending order.\n    for example:\n    count_up_to(5) => [5,3,2]\n    count_up_to(11) => [11,7,5,3,2]\n    count_up_to(0) => []\n    count_up_to(20) => [19,17,13,11,7,5,3,2]\n    count_up_to(1) => []\n    count_up_to(18) => [17,13,11,7,5,3,2]","reduced":"Implement function takes non-negative integer returns array of the first n\n   integers are prime numbers less than or equal to n. Return list in descending order.\n   for example:\n   count_up_to(5) => [5,3,2]\n   count_up_to(11) => [11,7,5,3,2]\n   count_up_to(0) => []\n   count_up_to(20) => [19,17,13,11,7,5,3,2]\n   count_up_to(1) => []\n   count_up_to(18) => [17,13,11,7,5,3,2]"}
{"task_id":"EvoEval\/97","prompt":"def multiply(a, b):\n    \"\"\"\n    Complete function that takes two integers returns\n   sum of their unit digits.\n   Assume input is always valid.\n   Examples:\n   multiply(148, 412) should return 10.\n   multiply(19, 28) should return 17.\n   multiply(2020, 1851) should return 1.\n   multiply(14,-15) should return 9.\n    \"\"\"\n","raw":"Complete the function that takes two integers and returns \n    the sum of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 10.\n    multiply(19, 28) should return 17.\n    multiply(2020, 1851) should return 1.\n    multiply(14,-15) should return 9.","reduced":"Complete function that takes two integers returns\n   sum of their unit digits.\n   Assume input is always valid.\n   Examples:\n   multiply(148, 412) should return 10.\n   multiply(19, 28) should return 17.\n   multiply(2020, 1851) should return 1.\n   multiply(14,-15) should return 9."}
{"task_id":"EvoEval\/98","prompt":"def count_upper(s):\n    \"\"\"\n    Given string s, count number of uppercase vowels in odd indices.\n  \n   example:\n   count_upper('aBCdEf') returns 0\n   count_upper('abcdefg') returns 0\n   count_upper('dBBE') returns 1\n    \"\"\"\n","raw":"Given a string s, count the number of uppercase vowels in odd indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 0\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 1","reduced":"Given string s, count number of uppercase vowels in odd indices.\n  \n   example:\n   count_upper('aBCdEf') returns 0\n   count_upper('abcdefg') returns 0\n   count_upper('dBBE') returns 1"}
{"task_id":"EvoEval\/99","prompt":"def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n   returns closest integer to it. If the number is equidistant\n   from two integers, round it towards zero.\n   Examples\n   >>> closest_integer(\"10\")\n   10\n   >>> closest_integer(\"15.3\")\n   15\n   Note:\n   Rounding towards zero means if given number is equidistant\n   from two integers, the one you should return is one is\n   closest to zero. For example closest_integer(\"14.5\") should\n   return 14 and closest_integer(\"-14.5\") should return -14.\n    \"\"\"\n","raw":"Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it towards zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding towards zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    closest to zero. For example closest_integer(\"14.5\") should\n    return 14 and closest_integer(\"-14.5\") should return -14.","reduced":"Create a function that takes a value (string) representing a number\n   returns closest integer to it. If the number is equidistant\n   from two integers, round it towards zero.\n   Examples\n   >>> closest_integer(\"10\")\n   10\n   >>> closest_integer(\"15.3\")\n   15\n   Note:\n   Rounding towards zero means if given number is equidistant\n   from two integers, the one you should return is one is\n   closest to zero. For example closest_integer(\"14.5\") should\n   return 14 and closest_integer(\"-14.5\") should return -14."}
